
stm32-speech-recognition-and-traduction.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019d70  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00049168  08019f00  08019f00  00029f00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08063068  08063068  000810b4  2**0
                  CONTENTS
  4 .ARM          00000008  08063068  08063068  00073068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08063070  08063070  000810b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08063070  08063070  00073070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08063074  08063074  00073074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000010b4  20000000  08063078  00080000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012cfc  200010b4  0806412c  000810b4  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20013db0  0806412c  00083db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000810b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002302a  00000000  00000000  000810e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dca  00000000  00000000  000a410e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a20  00000000  00000000  000a8ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017b0  00000000  00000000  000aa8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029912  00000000  00000000  000ac0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002918a  00000000  00000000  000d59ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6374  00000000  00000000  000feb44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000014a  00000000  00000000  001e4eb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008858  00000000  00000000  001e5004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  001ed85c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  001ed928  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200010b4 	.word	0x200010b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019ee8 	.word	0x08019ee8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200010b8 	.word	0x200010b8
 80001cc:	08019ee8 	.word	0x08019ee8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <audio_record>:
 *
 * @param  None
 *
 * @retval None
 */
void audio_record(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	dma_transfer_state = OFFSET_NONE;
 800101c:	4b3f      	ldr	r3, [pc, #252]	; (800111c <audio_record+0x104>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]

	/* Initialize audio peripheral */
	if (BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ,
 8001022:	2201      	movs	r2, #1
 8001024:	2110      	movs	r1, #16
 8001026:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 800102a:	f001 ff77 	bl	8002f1c <BSP_AUDIO_IN_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <audio_record+0x20>
	DEFAULT_AUDIO_IN_BIT_RESOLUTION,
	DEFAULT_AUDIO_IN_CHANNEL_NBR) != AUDIO_OK) {
		Error_Handler();
 8001034:	f001 f9a0 	bl	8002378 <Error_Handler>
	}

	/* Start the audio input record */
	if (BSP_AUDIO_IN_Record((uint16_t*) &pdm_buffer[0],
 8001038:	2180      	movs	r1, #128	; 0x80
 800103a:	4839      	ldr	r0, [pc, #228]	; (8001120 <audio_record+0x108>)
 800103c:	f001 ff98 	bl	8002f70 <BSP_AUDIO_IN_Record>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <audio_record+0x32>
	PDM_BUFFER_SIZE) != AUDIO_OK) {
		Error_Handler();
 8001046:	f001 f997 	bl	8002378 <Error_Handler>
	}

	data_ready = 0;
 800104a:	4b36      	ldr	r3, [pc, #216]	; (8001124 <audio_record+0x10c>)
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]

	/* Wait for the data to be ready in the PCM form */
	while (data_ready != 1) {
 8001050:	e056      	b.n	8001100 <audio_record+0xe8>
		if (dma_transfer_state == OFFSET_HALF) {
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <audio_record+0x104>)
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d12a      	bne.n	80010b0 <audio_record+0x98>
			/* PDM to PCM data conversion */
			BSP_AUDIO_IN_PDMToPCM((uint16_t*) &pdm_buffer[0],
 800105a:	4933      	ldr	r1, [pc, #204]	; (8001128 <audio_record+0x110>)
 800105c:	4830      	ldr	r0, [pc, #192]	; (8001120 <audio_record+0x108>)
 800105e:	f001 ffb1 	bl	8002fc4 <BSP_AUDIO_IN_PDMToPCM>

			/* Copy of PCM data into the final buffer. It copies PCM_OUT_SIZE * 2
			 * because they are uint16_t, which are 2 bytes long and memcpy
			 * expects a size in bytes.
			 */
			memcpy((uint16_t*) &pcm_buffer[pcm_offset * PCM_OUT_SIZE],
 8001062:	4b32      	ldr	r3, [pc, #200]	; (800112c <audio_record+0x114>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800106a:	fb02 f303 	mul.w	r3, r2, r3
 800106e:	4a30      	ldr	r2, [pc, #192]	; (8001130 <audio_record+0x118>)
 8001070:	fba2 2303 	umull	r2, r3, r2, r3
 8001074:	099b      	lsrs	r3, r3, #6
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	4a2e      	ldr	r2, [pc, #184]	; (8001134 <audio_record+0x11c>)
 800107a:	4413      	add	r3, r2
 800107c:	2220      	movs	r2, #32
 800107e:	492a      	ldr	r1, [pc, #168]	; (8001128 <audio_record+0x110>)
 8001080:	4618      	mov	r0, r3
 8001082:	f011 f8c1 	bl	8012208 <memcpy>
					pdmtopcm_buffer,
					PCM_OUT_SIZE * 2);

			dma_transfer_state = OFFSET_NONE;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <audio_record+0x104>)
 8001088:	2200      	movs	r2, #0
 800108a:	701a      	strb	r2, [r3, #0]

			/* if the buffer is full, audio acquisition is done */
			if (pcm_offset == (PCM_BUFFER_SIZE / (PCM_OUT_SIZE)) - 1) {
 800108c:	4b27      	ldr	r3, [pc, #156]	; (800112c <audio_record+0x114>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8001094:	4293      	cmp	r3, r2
 8001096:	d106      	bne.n	80010a6 <audio_record+0x8e>
				data_ready = 1;
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <audio_record+0x10c>)
 800109a:	2201      	movs	r2, #1
 800109c:	601a      	str	r2, [r3, #0]
				pcm_offset = 0;
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <audio_record+0x114>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	e004      	b.n	80010b0 <audio_record+0x98>
			} else {
				pcm_offset++;
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <audio_record+0x114>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	4a1f      	ldr	r2, [pc, #124]	; (800112c <audio_record+0x114>)
 80010ae:	6013      	str	r3, [r2, #0]
			}

		}

		if (dma_transfer_state == OFFSET_FULL) {
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <audio_record+0x104>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d123      	bne.n	8001100 <audio_record+0xe8>
			/* PDM to PCM data convert */
			BSP_AUDIO_IN_PDMToPCM((uint16_t*) &pdm_buffer[PDM_BUFFER_SIZE / 2],
 80010b8:	491b      	ldr	r1, [pc, #108]	; (8001128 <audio_record+0x110>)
 80010ba:	481f      	ldr	r0, [pc, #124]	; (8001138 <audio_record+0x120>)
 80010bc:	f001 ff82 	bl	8002fc4 <BSP_AUDIO_IN_PDMToPCM>

			/* Copy of PCM data into the final buffer. It copies PCM_OUT_SIZE * 2
			 * because they are uint16_t, which are 2 bytes long and memcpy
			 * expects a size in bytes.
			 */
			memcpy((uint16_t*) &pcm_buffer[pcm_offset * (PCM_OUT_SIZE)],
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <audio_record+0x114>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4a1a      	ldr	r2, [pc, #104]	; (8001134 <audio_record+0x11c>)
 80010ca:	4413      	add	r3, r2
 80010cc:	2220      	movs	r2, #32
 80010ce:	4916      	ldr	r1, [pc, #88]	; (8001128 <audio_record+0x110>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f011 f899 	bl	8012208 <memcpy>
					pdmtopcm_buffer,
					PCM_OUT_SIZE * 2);

			dma_transfer_state = OFFSET_NONE;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <audio_record+0x104>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]

			/* if the buffer is full, audio acquisition is done */
			if (pcm_offset == (PCM_BUFFER_SIZE / (PCM_OUT_SIZE)) - 1) {
 80010dc:	4b13      	ldr	r3, [pc, #76]	; (800112c <audio_record+0x114>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d106      	bne.n	80010f6 <audio_record+0xde>
				data_ready = 1;
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <audio_record+0x10c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
				pcm_offset = 0;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <audio_record+0x114>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e004      	b.n	8001100 <audio_record+0xe8>
			} else {
				pcm_offset++;
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <audio_record+0x114>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4a0b      	ldr	r2, [pc, #44]	; (800112c <audio_record+0x114>)
 80010fe:	6013      	str	r3, [r2, #0]
	while (data_ready != 1) {
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <audio_record+0x10c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d1a4      	bne.n	8001052 <audio_record+0x3a>
			}
		}
	}

	/* Stop audio record */
	if (BSP_AUDIO_IN_Stop() != AUDIO_OK) {
 8001108:	f001 ff4a 	bl	8002fa0 <BSP_AUDIO_IN_Stop>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <audio_record+0xfe>
		Error_Handler();
 8001112:	f001 f931 	bl	8002378 <Error_Handler>
	}
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200091d8 	.word	0x200091d8
 8001120:	200090d4 	.word	0x200090d4
 8001124:	200091dc 	.word	0x200091dc
 8001128:	200090b4 	.word	0x200090b4
 800112c:	200091d4 	.word	0x200091d4
 8001130:	10624dd3 	.word	0x10624dd3
 8001134:	200010d4 	.word	0x200010d4
 8001138:	20009154 	.word	0x20009154

0800113c <BSP_AUDIO_IN_TransferComplete_CallBack>:
/**
 * @brief Manages the DMA Transfer complete interrupt
 * @param  None
 * @retval None
 */
void BSP_AUDIO_IN_TransferComplete_CallBack(void) {
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
	dma_transfer_state = OFFSET_FULL;
 8001140:	4b03      	ldr	r3, [pc, #12]	; (8001150 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8001142:	2202      	movs	r2, #2
 8001144:	701a      	strb	r2, [r3, #0]
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	200091d8 	.word	0x200091d8

08001154 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
/**
 * @brief  Manages the DMA Half Transfer complete interrupt
 * @param  None
 * @retval None
 */
void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
	dma_transfer_state = OFFSET_HALF;
 8001158:	4b03      	ldr	r3, [pc, #12]	; (8001168 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	200091d8 	.word	0x200091d8

0800116c <BSP_AUDIO_IN_Error_Callback>:
/**
 * @brief  Audio IN Error callback function
 * @param  pData
 * @retval None
 */
void BSP_AUDIO_IN_Error_Callback(void) {
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	Error_Handler();
 8001170:	f001 f902 	bl	8002378 <Error_Handler>
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <argmax>:
 * @param  arr   output array of neural network predictions
 * @param  size  arr size. It must be positive and less than `DICTIONARY_SIZE`
 *
 * @retval idx:  arr maximum value index
 */
uint8_t argmax(const ai_float arr[], uint8_t size) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	70fb      	strb	r3, [r7, #3]
	assert(size > 0 && size <= DICTIONARY_SIZE);
 8001184:	78fb      	ldrb	r3, [r7, #3]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <argmax+0x18>
 800118a:	78fb      	ldrb	r3, [r7, #3]
 800118c:	2b26      	cmp	r3, #38	; 0x26
 800118e:	d905      	bls.n	800119c <argmax+0x24>
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <argmax+0x74>)
 8001192:	4a17      	ldr	r2, [pc, #92]	; (80011f0 <argmax+0x78>)
 8001194:	2154      	movs	r1, #84	; 0x54
 8001196:	4817      	ldr	r0, [pc, #92]	; (80011f4 <argmax+0x7c>)
 8001198:	f010 ffd4 	bl	8012144 <__assert_func>
	uint8_t idx = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	75fb      	strb	r3, [r7, #23]
	ai_float max = arr[0];
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	613b      	str	r3, [r7, #16]
	ai_float tmp;

	for (uint8_t i = 1; i < size; i++) {
 80011a6:	2301      	movs	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
 80011aa:	e015      	b.n	80011d8 <argmax+0x60>
		tmp = arr[i];
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	60bb      	str	r3, [r7, #8]
		if (tmp > max) {
 80011b8:	ed97 7a02 	vldr	s14, [r7, #8]
 80011bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80011c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c8:	dd03      	ble.n	80011d2 <argmax+0x5a>
			max = tmp;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	613b      	str	r3, [r7, #16]
			idx = i;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 1; i < size; i++) {
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	3301      	adds	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	78fb      	ldrb	r3, [r7, #3]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d3e5      	bcc.n	80011ac <argmax+0x34>
		}
	}

	return idx;
 80011e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	08019f00 	.word	0x08019f00
 80011f0:	0801a15c 	.word	0x0801a15c
 80011f4:	08019f24 	.word	0x08019f24

080011f8 <get_word>:
 *
 * @param  idx   word index. It must be less than `DICTIONARY_SIZE`
 *
 * @retval       the dictionary word corresponding to the input index
 */
char* get_word(uint8_t idx) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
	assert(idx < DICTIONARY_SIZE);
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	2b25      	cmp	r3, #37	; 0x25
 8001206:	d905      	bls.n	8001214 <get_word+0x1c>
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <get_word+0x2c>)
 800120a:	4a07      	ldr	r2, [pc, #28]	; (8001228 <get_word+0x30>)
 800120c:	216d      	movs	r1, #109	; 0x6d
 800120e:	4807      	ldr	r0, [pc, #28]	; (800122c <get_word+0x34>)
 8001210:	f010 ff98 	bl	8012144 <__assert_func>
	return dictionary[idx];
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	4a06      	ldr	r2, [pc, #24]	; (8001230 <get_word+0x38>)
 8001218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	08019f3c 	.word	0x08019f3c
 8001228:	0801a164 	.word	0x0801a164
 800122c:	08019f24 	.word	0x08019f24
 8001230:	20000400 	.word	0x20000400

08001234 <SysInit>:
float x_distance;
int smoothdelay, servostep;
char control;
LEG_t legFL,legFR,legBL,legBR;

void SysInit(){
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0

	//Peripheral Initialization
	LegInit(&legFL, 0);
 8001238:	2100      	movs	r1, #0
 800123a:	480b      	ldr	r0, [pc, #44]	; (8001268 <SysInit+0x34>)
 800123c:	f000 f9a2 	bl	8001584 <LegInit>
	height = 0.18;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <SysInit+0x38>)
 8001242:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <SysInit+0x3c>)
 8001244:	601a      	str	r2, [r3, #0]
	x_distance = 0.05;
 8001246:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <SysInit+0x40>)
 8001248:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <SysInit+0x44>)
 800124a:	601a      	str	r2, [r3, #0]
//	legFL.hip_angle = 60.0;
//	legFL.knee_angle = 71.0;

	ServoDriverInit(&servodriver, &hi2c3, 0x40);
 800124c:	2240      	movs	r2, #64	; 0x40
 800124e:	490b      	ldr	r1, [pc, #44]	; (800127c <SysInit+0x48>)
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <SysInit+0x4c>)
 8001252:	f001 f897 	bl	8002384 <ServoDriverInit>
//	ServoDriverSetPWM(&servodriver, FLKnee,  MAP_Angle2Pulse(knee_joint,20.0,90.0,FLKneemin,FLKneemax),0);
//	ServoDriverSetPWM(&servodriver, FLHip, MAP_Angle2Pulse(hip_joint,0.0,180.0,FLHipmin,FLHipmax),0);

//	xTaskResumeAll();

	SetSmoothSpeed(15.0);
 8001256:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 800125a:	f000 f9b3 	bl	80015c4 <SetSmoothSpeed>
	HAL_TIM_Base_Start_IT(&htim6);
 800125e:	4809      	ldr	r0, [pc, #36]	; (8001284 <SysInit+0x50>)
 8001260:	f008 fe68 	bl	8009f34 <HAL_TIM_Base_Start_IT>
//	HAL_UART_Receive_IT(&huart3, &control, 1);

}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200091f8 	.word	0x200091f8
 800126c:	200091e8 	.word	0x200091e8
 8001270:	3e3851ec 	.word	0x3e3851ec
 8001274:	200091ec 	.word	0x200091ec
 8001278:	3d4ccccd 	.word	0x3d4ccccd
 800127c:	200092b0 	.word	0x200092b0
 8001280:	200091e0 	.word	0x200091e0
 8001284:	20009448 	.word	0x20009448

08001288 <MAP_Angle2Pulse>:

uint16_t MAP_Angle2Pulse(float input, float AngleMin, float AngleMax, int PulseMin, int PulseMax)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	ed87 0a05 	vstr	s0, [r7, #20]
 8001292:	edc7 0a04 	vstr	s1, [r7, #16]
 8001296:	ed87 1a03 	vstr	s2, [r7, #12]
 800129a:	60b8      	str	r0, [r7, #8]
 800129c:	6079      	str	r1, [r7, #4]
	uint16_t result = ((((input - AngleMin)*(float)(PulseMax - PulseMin))/(AngleMax - AngleMin)) + PulseMin);
 800129e:	ed97 7a05 	vldr	s14, [r7, #20]
 80012a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80012a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	68bb      	ldr	r3, [r7, #8]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	ee07 3a90 	vmov	s15, r3
 80012b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012b8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012bc:	ed97 7a03 	vldr	s14, [r7, #12]
 80012c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	ee07 3a90 	vmov	s15, r3
 80012d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012de:	ee17 3a90 	vmov	r3, s15
 80012e2:	83fb      	strh	r3, [r7, #30]

	if(result > PulseMax)
 80012e4:	8bfb      	ldrh	r3, [r7, #30]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	da02      	bge.n	80012f2 <MAP_Angle2Pulse+0x6a>
		result = PulseMax;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	83fb      	strh	r3, [r7, #30]
 80012f0:	e005      	b.n	80012fe <MAP_Angle2Pulse+0x76>
	else if(result < PulseMin)
 80012f2:	8bfb      	ldrh	r3, [r7, #30]
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	dd01      	ble.n	80012fe <MAP_Angle2Pulse+0x76>
		result = PulseMin;
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	83fb      	strh	r3, [r7, #30]

	return result;
 80012fe:	8bfb      	ldrh	r3, [r7, #30]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3724      	adds	r7, #36	; 0x24
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <ControlLoop>:

void ControlLoop(){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	LegUpdate(&legFL,x_distance, 0.0, height, 0.0, 0.0, 0.0);
 8001310:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <ControlLoop+0x34>)
 8001312:	edd3 7a00 	vldr	s15, [r3]
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <ControlLoop+0x38>)
 8001318:	ed93 7a00 	vldr	s14, [r3]
 800131c:	eddf 2a0a 	vldr	s5, [pc, #40]	; 8001348 <ControlLoop+0x3c>
 8001320:	ed9f 2a09 	vldr	s4, [pc, #36]	; 8001348 <ControlLoop+0x3c>
 8001324:	eddf 1a08 	vldr	s3, [pc, #32]	; 8001348 <ControlLoop+0x3c>
 8001328:	eeb0 1a47 	vmov.f32	s2, s14
 800132c:	eddf 0a06 	vldr	s1, [pc, #24]	; 8001348 <ControlLoop+0x3c>
 8001330:	eeb0 0a67 	vmov.f32	s0, s15
 8001334:	4805      	ldr	r0, [pc, #20]	; (800134c <ControlLoop+0x40>)
 8001336:	f000 f80b 	bl	8001350 <LegUpdate>
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200091ec 	.word	0x200091ec
 8001344:	200091e8 	.word	0x200091e8
 8001348:	00000000 	.word	0x00000000
 800134c:	200091f8 	.word	0x200091f8

08001350 <LegUpdate>:

void LegUpdate(LEG_t *leg,float x_dist, float y_dist, float height, float roll, float pitch, float yaw){
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af00      	add	r7, sp, #0
 8001356:	61f8      	str	r0, [r7, #28]
 8001358:	ed87 0a06 	vstr	s0, [r7, #24]
 800135c:	edc7 0a05 	vstr	s1, [r7, #20]
 8001360:	ed87 1a04 	vstr	s2, [r7, #16]
 8001364:	edc7 1a03 	vstr	s3, [r7, #12]
 8001368:	ed87 2a02 	vstr	s4, [r7, #8]
 800136c:	edc7 2a01 	vstr	s5, [r7, #4]
	leg->x_angle = atan(x_dist/height);
 8001370:	ed97 7a06 	vldr	s14, [r7, #24]
 8001374:	edd7 7a04 	vldr	s15, [r7, #16]
 8001378:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800137c:	ee16 0a90 	vmov	r0, s13
 8001380:	f7ff f8f2 	bl	8000568 <__aeabi_f2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	ec43 2b10 	vmov	d0, r2, r3
 800138c:	f015 fb78 	bl	8016a80 <atan>
 8001390:	ec53 2b10 	vmov	r2, r3, d0
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fc36 	bl	8000c08 <__aeabi_d2f>
 800139c:	4602      	mov	r2, r0
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	619a      	str	r2, [r3, #24]
	leg->x_height = sqrt(pow(x_dist,2) + pow(height,2));
 80013a2:	69b8      	ldr	r0, [r7, #24]
 80013a4:	f7ff f8e0 	bl	8000568 <__aeabi_f2d>
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	ed9f 1b66 	vldr	d1, [pc, #408]	; 8001548 <LegUpdate+0x1f8>
 80013b0:	ec43 2b10 	vmov	d0, r2, r3
 80013b4:	f015 fdc0 	bl	8016f38 <pow>
 80013b8:	ec55 4b10 	vmov	r4, r5, d0
 80013bc:	6938      	ldr	r0, [r7, #16]
 80013be:	f7ff f8d3 	bl	8000568 <__aeabi_f2d>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8001548 <LegUpdate+0x1f8>
 80013ca:	ec43 2b10 	vmov	d0, r2, r3
 80013ce:	f015 fdb3 	bl	8016f38 <pow>
 80013d2:	ec53 2b10 	vmov	r2, r3, d0
 80013d6:	4620      	mov	r0, r4
 80013d8:	4629      	mov	r1, r5
 80013da:	f7fe ff67 	bl	80002ac <__adddf3>
 80013de:	4602      	mov	r2, r0
 80013e0:	460b      	mov	r3, r1
 80013e2:	ec43 2b17 	vmov	d7, r2, r3
 80013e6:	eeb0 0a47 	vmov.f32	s0, s14
 80013ea:	eef0 0a67 	vmov.f32	s1, s15
 80013ee:	f015 fe13 	bl	8017018 <sqrt>
 80013f2:	ec53 2b10 	vmov	r2, r3, d0
 80013f6:	4610      	mov	r0, r2
 80013f8:	4619      	mov	r1, r3
 80013fa:	f7ff fc05 	bl	8000c08 <__aeabi_d2f>
 80013fe:	4602      	mov	r2, r0
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	61da      	str	r2, [r3, #28]

	leg->des_knee_angle =  RADTODEG(acos((pow(LowerLeg,2)+pow(UpperLeg,2)-pow(leg->x_height,2))/(2.0*UpperLeg*LowerLeg))) ;
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f8ad 	bl	8000568 <__aeabi_f2d>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8001548 <LegUpdate+0x1f8>
 8001416:	ec43 2b10 	vmov	d0, r2, r3
 800141a:	f015 fd8d 	bl	8016f38 <pow>
 800141e:	ec53 2b10 	vmov	r2, r3, d0
 8001422:	a14e      	add	r1, pc, #312	; (adr r1, 800155c <LegUpdate+0x20c>)
 8001424:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001428:	f7fe ff3e 	bl	80002a8 <__aeabi_dsub>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4610      	mov	r0, r2
 8001432:	4619      	mov	r1, r3
 8001434:	a34b      	add	r3, pc, #300	; (adr r3, 8001564 <LegUpdate+0x214>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	f7ff fa17 	bl	800086c <__aeabi_ddiv>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	ec43 2b17 	vmov	d7, r2, r3
 8001446:	eeb0 0a47 	vmov.f32	s0, s14
 800144a:	eef0 0a67 	vmov.f32	s1, s15
 800144e:	f015 fd3f 	bl	8016ed0 <acos>
 8001452:	ec51 0b10 	vmov	r0, r1, d0
 8001456:	a33e      	add	r3, pc, #248	; (adr r3, 8001550 <LegUpdate+0x200>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f8dc 	bl	8000618 <__aeabi_dmul>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fbce 	bl	8000c08 <__aeabi_d2f>
 800146c:	4602      	mov	r2, r0
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	605a      	str	r2, [r3, #4]
	leg->des_hip_angle = 90.0 - RADTODEG(acos((pow(leg->x_height,2)+pow(UpperLeg,2)-pow(LowerLeg,2))/(2.0*UpperLeg*leg->x_height))) + RADTODEG(leg->x_angle);
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f876 	bl	8000568 <__aeabi_f2d>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	ed9f 1b31 	vldr	d1, [pc, #196]	; 8001548 <LegUpdate+0x1f8>
 8001484:	ec43 2b10 	vmov	d0, r2, r3
 8001488:	f015 fd56 	bl	8016f38 <pow>
 800148c:	ec51 0b10 	vmov	r0, r1, d0
 8001490:	a336      	add	r3, pc, #216	; (adr r3, 800156c <LegUpdate+0x21c>)
 8001492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001496:	f7fe ff09 	bl	80002ac <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	a334      	add	r3, pc, #208	; (adr r3, 8001574 <LegUpdate+0x224>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7fe fefe 	bl	80002a8 <__aeabi_dsub>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4614      	mov	r4, r2
 80014b2:	461d      	mov	r5, r3
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f855 	bl	8000568 <__aeabi_f2d>
 80014be:	a32f      	add	r3, pc, #188	; (adr r3, 800157c <LegUpdate+0x22c>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8a8 	bl	8000618 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4620      	mov	r0, r4
 80014ce:	4629      	mov	r1, r5
 80014d0:	f7ff f9cc 	bl	800086c <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	ec43 2b17 	vmov	d7, r2, r3
 80014dc:	eeb0 0a47 	vmov.f32	s0, s14
 80014e0:	eef0 0a67 	vmov.f32	s1, s15
 80014e4:	f015 fcf4 	bl	8016ed0 <acos>
 80014e8:	ec51 0b10 	vmov	r0, r1, d0
 80014ec:	a318      	add	r3, pc, #96	; (adr r3, 8001550 <LegUpdate+0x200>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f891 	bl	8000618 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	f04f 0000 	mov.w	r0, #0
 80014fe:	4916      	ldr	r1, [pc, #88]	; (8001558 <LegUpdate+0x208>)
 8001500:	f7fe fed2 	bl	80002a8 <__aeabi_dsub>
 8001504:	4602      	mov	r2, r0
 8001506:	460b      	mov	r3, r1
 8001508:	4614      	mov	r4, r2
 800150a:	461d      	mov	r5, r3
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff f829 	bl	8000568 <__aeabi_f2d>
 8001516:	a30e      	add	r3, pc, #56	; (adr r3, 8001550 <LegUpdate+0x200>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f87c 	bl	8000618 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4620      	mov	r0, r4
 8001526:	4629      	mov	r1, r5
 8001528:	f7fe fec0 	bl	80002ac <__adddf3>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4610      	mov	r0, r2
 8001532:	4619      	mov	r1, r3
 8001534:	f7ff fb68 	bl	8000c08 <__aeabi_d2f>
 8001538:	4602      	mov	r2, r0
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	601a      	str	r2, [r3, #0]
}
 800153e:	bf00      	nop
 8001540:	3720      	adds	r7, #32
 8001542:	46bd      	mov	sp, r7
 8001544:	bdb0      	pop	{r4, r5, r7, pc}
 8001546:	bf00      	nop
 8001548:	00000000 	.word	0x00000000
 800154c:	40000000 	.word	0x40000000
 8001550:	a3d70a3d 	.word	0xa3d70a3d
 8001554:	404ca570 	.word	0x404ca570
 8001558:	40568000 	.word	0x40568000
 800155c:	19439de4 	.word	0x19439de4
 8001560:	3fa262aa 	.word	0x3fa262aa
 8001564:	cddd6e04 	.word	0xcddd6e04
 8001568:	3fa21d53 	.word	0x3fa21d53
 800156c:	a9de8b3b 	.word	0xa9de8b3b
 8001570:	3f8e7b80 	.word	0x3f8e7b80
 8001574:	dd97f62b 	.word	0xdd97f62b
 8001578:	3f958793 	.word	0x3f958793
 800157c:	5a1cac08 	.word	0x5a1cac08
 8001580:	3fcf3b64 	.word	0x3fcf3b64

08001584 <LegInit>:

void LegInit(LEG_t *leg, uint8_t dir){
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	460b      	mov	r3, r1
 800158e:	70fb      	strb	r3, [r7, #3]
	leg->des_hip_angle  =  60.0;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <LegInit+0x38>)
 8001594:	601a      	str	r2, [r3, #0]
	leg->des_knee_angle  =  73.1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <LegInit+0x3c>)
 800159a:	605a      	str	r2, [r3, #4]
	leg->hip_angle = 60.0;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a07      	ldr	r2, [pc, #28]	; (80015bc <LegInit+0x38>)
 80015a0:	60da      	str	r2, [r3, #12]
	leg->knee_angle = 73.1;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a06      	ldr	r2, [pc, #24]	; (80015c0 <LegInit+0x3c>)
 80015a6:	611a      	str	r2, [r3, #16]
	leg->dir = dir;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	78fa      	ldrb	r2, [r7, #3]
 80015ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	42700000 	.word	0x42700000
 80015c0:	42923333 	.word	0x42923333

080015c4 <SetSmoothSpeed>:
	StepLoop(leg->des_hip_angle, &(leg->hip_angle));
	StepLoop(leg->des_knee_angle, &(leg->knee_angle));
	StepLoop(leg->des_shoulder_angle, &(leg->shoulder_angle));
}

void SetSmoothSpeed(float SmoothSpeed){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	ed87 0a01 	vstr	s0, [r7, #4]


	smoothdelay = (int) SmoothSpeed;
 80015ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015d6:	ee17 2a90 	vmov	r2, s15
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <SetSmoothSpeed+0x64>)
 80015dc:	601a      	str	r2, [r3, #0]

	if(smoothdelay <= 0){
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <SetSmoothSpeed+0x64>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	dc02      	bgt.n	80015ec <SetSmoothSpeed+0x28>
		smoothdelay = 1;
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <SetSmoothSpeed+0x64>)
 80015e8:	2201      	movs	r2, #1
 80015ea:	601a      	str	r2, [r3, #0]
	}

	servostep = (int)(1.0/SmoothSpeed);
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7fe ffbb 	bl	8000568 <__aeabi_f2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	f04f 0000 	mov.w	r0, #0
 80015fa:	490c      	ldr	r1, [pc, #48]	; (800162c <SetSmoothSpeed+0x68>)
 80015fc:	f7ff f936 	bl	800086c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4610      	mov	r0, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f7ff fab6 	bl	8000b78 <__aeabi_d2iz>
 800160c:	4603      	mov	r3, r0
 800160e:	4a08      	ldr	r2, [pc, #32]	; (8001630 <SetSmoothSpeed+0x6c>)
 8001610:	6013      	str	r3, [r2, #0]

	if(servostep <= 0){
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <SetSmoothSpeed+0x6c>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	dc02      	bgt.n	8001620 <SetSmoothSpeed+0x5c>
		servostep = 1;
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SetSmoothSpeed+0x6c>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]
	}

}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	200091f0 	.word	0x200091f0
 800162c:	3ff00000 	.word	0x3ff00000
 8001630:	200091f4 	.word	0x200091f4

08001634 <execution_time_init>:
 *
 * @param  None
 *
 * @retval None
 */
void execution_time_init(void) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
	uint32_t i;

	if (ARM_CM_DWT_CTRL != 0) {
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <execution_time_init+0x50>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00e      	beq.n	8001660 <execution_time_init+0x2c>
		ARM_CM_DEMCR |= 1 << 24; /* enable DWT and set bit 24 */
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <execution_time_init+0x54>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4a10      	ldr	r2, [pc, #64]	; (8001688 <execution_time_init+0x54>)
 8001648:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800164c:	6013      	str	r3, [r2, #0]
		ARM_CM_DWT_CYCCNT = 0; /* clear DWT cycle counter   */
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <execution_time_init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
		ARM_CM_DWT_CTRL |= 1; /* enable DWT cycle counter  */
 8001654:	4b0b      	ldr	r3, [pc, #44]	; (8001684 <execution_time_init+0x50>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0a      	ldr	r2, [pc, #40]	; (8001684 <execution_time_init+0x50>)
 800165a:	f043 0301 	orr.w	r3, r3, #1
 800165e:	6013      	str	r3, [r2, #0]
	}

	for (i = 0; i < EXECUTION_TIME_MAX_SECTIONS; i++) {
 8001660:	2300      	movs	r3, #0
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	e005      	b.n	8001672 <execution_time_init+0x3e>
		execution_time_clear(i);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f812 	bl	8001690 <execution_time_clear>
	for (i = 0; i < EXECUTION_TIME_MAX_SECTIONS; i++) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3301      	adds	r3, #1
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b02      	cmp	r3, #2
 8001676:	d9f6      	bls.n	8001666 <execution_time_init+0x32>
	}
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	e0001000 	.word	0xe0001000
 8001688:	e000edfc 	.word	0xe000edfc
 800168c:	e0001004 	.word	0xe0001004

08001690 <execution_time_clear>:
 * @param  i   number of the code block to measure. It must be less than
 * 			   `EXECUTION_TIME_MAX_SECTIONS`.
 *
 * @retval None
 */
void execution_time_clear(uint32_t i) {
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	if (i < EXECUTION_TIME_MAX_SECTIONS) {
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d811      	bhi.n	80016c2 <execution_time_clear+0x32>
		Time_Statistics *p_tbl;

		p_tbl = &time_statistics_blocks[i];
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <execution_time_clear+0x40>)
 80016a4:	4413      	add	r3, r2
 80016a6:	60fb      	str	r3, [r7, #12]
		p_tbl->start = 0;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
		p_tbl->elapsed = 0;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	605a      	str	r2, [r3, #4]
		p_tbl->min = 0xFFFFFFFF;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f04f 32ff 	mov.w	r2, #4294967295
 80016ba:	60da      	str	r2, [r3, #12]
		p_tbl->max = 0;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
	}
}
 80016c2:	bf00      	nop
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20009224 	.word	0x20009224

080016d4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80016d4:	b5b0      	push	{r4, r5, r7, lr}
 80016d6:	f5ad 4da7 	sub.w	sp, sp, #21376	; 0x5380
 80016da:	b09e      	sub	sp, #120	; 0x78
 80016dc:	af00      	add	r7, sp, #0
	/* Buffers used to store input and output tensors */
	AI_ALIGNED(4) ai_float in_data[AI_SPEECH_COMMANDS_MODEL_IN_1_SIZE_BYTES];
	AI_ALIGNED(4) ai_float out_data[AI_SPEECH_COMMANDS_MODEL_OUT_1_SIZE_BYTES];

	/* Pointer to the neural network model */
	ai_handle speech_commands_model = AI_HANDLE_NULL;
 80016de:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80016e2:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]

	/* Initialize wrapper structs that hold info about the data (tensor height, width, channels) */
	ai_buffer ai_input[AI_SPEECH_COMMANDS_MODEL_IN_NUM] =
 80016ea:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80016ee:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80016f2:	4ac2      	ldr	r2, [pc, #776]	; (80019fc <main+0x328>)
 80016f4:	461c      	mov	r4, r3
 80016f6:	4615      	mov	r5, r2
 80016f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016fc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001700:	e884 0003 	stmia.w	r4, {r0, r1}
			AI_SPEECH_COMMANDS_MODEL_IN;
	ai_buffer ai_output[AI_SPEECH_COMMANDS_MODEL_OUT_NUM] =
 8001704:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001708:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 800170c:	4abc      	ldr	r2, [pc, #752]	; (8001a00 <main+0x32c>)
 800170e:	461c      	mov	r4, r3
 8001710:	4615      	mov	r5, r2
 8001712:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001714:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001716:	e895 0003 	ldmia.w	r5, {r0, r1}
 800171a:	e884 0003 	stmia.w	r4, {r0, r1}
			AI_SPEECH_COMMANDS_MODEL_OUT;

	/* Allocate memory and get weights from the neural network model */
	ai_network_params ai_params =
 800171e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001722:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8001726:	4ab7      	ldr	r2, [pc, #732]	; (8001a04 <main+0x330>)
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800172e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8001732:	2201      	movs	r2, #1
 8001734:	809a      	strh	r2, [r3, #4]
 8001736:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800173a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800173e:	2201      	movs	r2, #1
 8001740:	80da      	strh	r2, [r3, #6]
 8001742:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001746:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800174a:	2201      	movs	r2, #1
 800174c:	811a      	strh	r2, [r3, #8]
 800174e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001752:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8001756:	4aac      	ldr	r2, [pc, #688]	; (8001a08 <main+0x334>)
 8001758:	60da      	str	r2, [r3, #12]
			AI_NETWORK_PARAMS_INIT(
 800175a:	f00a fecb 	bl	800c4f4 <ai_speech_commands_model_data_weights_get>
 800175e:	4602      	mov	r2, r0
	ai_network_params ai_params =
 8001760:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001764:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8001768:	611a      	str	r2, [r3, #16]
 800176a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800176e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8001772:	2200      	movs	r2, #0
 8001774:	615a      	str	r2, [r3, #20]
 8001776:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800177a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800177e:	4aa3      	ldr	r2, [pc, #652]	; (8001a0c <main+0x338>)
 8001780:	619a      	str	r2, [r3, #24]
 8001782:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001786:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800178a:	2201      	movs	r2, #1
 800178c:	839a      	strh	r2, [r3, #28]
 800178e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001792:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 8001796:	2201      	movs	r2, #1
 8001798:	83da      	strh	r2, [r3, #30]
 800179a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800179e:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80017a2:	2201      	movs	r2, #1
 80017a4:	841a      	strh	r2, [r3, #32]
 80017a6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80017aa:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80017ae:	f243 5220 	movw	r2, #13600	; 0x3520
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
 80017b4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80017b8:	f5a3 727d 	sub.w	r2, r3, #1012	; 0x3f4
 80017bc:	f507 53f7 	add.w	r3, r7, #7904	; 0x1ee0
 80017c0:	f103 0318 	add.w	r3, r3, #24
 80017c4:	3b30      	subs	r3, #48	; 0x30
 80017c6:	6293      	str	r3, [r2, #40]	; 0x28
 80017c8:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80017cc:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 80017d0:	2200      	movs	r2, #0
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c
					AI_SPEECH_COMMANDS_MODEL_DATA_WEIGHTS(ai_speech_commands_model_data_weights_get()),
					AI_SPEECH_COMMANDS_MODEL_DATA_ACTIVATIONS(activations)
			);

	/* Set wrapper structs pointers to the data buffers */
	ai_input[0].n_batches = 1;
 80017d4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80017d8:	f5a3 736b 	sub.w	r3, r3, #940	; 0x3ac
 80017dc:	2201      	movs	r2, #1
 80017de:	809a      	strh	r2, [r3, #4]
	ai_input[0].data = AI_HANDLE_PTR(in_data);
 80017e0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80017e4:	f5a3 726b 	sub.w	r2, r3, #940	; 0x3ac
 80017e8:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 80017ec:	3b30      	subs	r3, #48	; 0x30
 80017ee:	6113      	str	r3, [r2, #16]
	ai_output[0].n_batches = 1;
 80017f0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80017f4:	f5a3 7371 	sub.w	r3, r3, #964	; 0x3c4
 80017f8:	2201      	movs	r2, #1
 80017fa:	809a      	strh	r2, [r3, #4]
	ai_output[0].data = AI_HANDLE_PTR(out_data);
 80017fc:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8001800:	f5a3 7271 	sub.w	r2, r3, #964	; 0x3c4
 8001804:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001808:	3b10      	subs	r3, #16
 800180a:	6113      	str	r3, [r2, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800180c:	f004 fbea 	bl	8005fe4 <HAL_Init>

	/* USER CODE BEGIN Init */

	/* Initialize LEDs */
	BSP_LED_Init(LED3);
 8001810:	2001      	movs	r0, #1
 8001812:	f001 fa93 	bl	8002d3c <BSP_LED_Init>
	BSP_LED_Init(LED4);
 8001816:	2000      	movs	r0, #0
 8001818:	f001 fa90 	bl	8002d3c <BSP_LED_Init>
	BSP_LED_Init(LED5);
 800181c:	2002      	movs	r0, #2
 800181e:	f001 fa8d 	bl	8002d3c <BSP_LED_Init>
	BSP_LED_Init(LED6);
 8001822:	2003      	movs	r0, #3
 8001824:	f001 fa8a 	bl	8002d3c <BSP_LED_Init>

	preprocessing_init();
 8001828:	f000 fce8 	bl	80021fc <preprocessing_init>

	execution_time_init();
 800182c:	f7ff ff02 	bl	8001634 <execution_time_init>

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001830:	f000 fb06 	bl	8001e40 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */

	/* Initialize button */
	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8001834:	2101      	movs	r1, #1
 8001836:	2000      	movs	r0, #0
 8001838:	f001 faf8 	bl	8002e2c <BSP_PB_Init>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800183c:	f000 fc66 	bl	800210c <MX_GPIO_Init>
	MX_DMA_Init();
 8001840:	f000 fc44 	bl	80020cc <MX_DMA_Init>
	MX_I2S2_Init();
 8001844:	f000 fbb4 	bl	8001fb0 <MX_I2S2_Init>
	MX_CRC_Init();
 8001848:	f000 fb68 	bl	8001f1c <MX_CRC_Init>
	MX_PDM2PCM_Init();
 800184c:	f00a fc6c 	bl	800c128 <MX_PDM2PCM_Init>
	MX_USART2_UART_Init();
 8001850:	f000 fc12 	bl	8002078 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001854:	f000 fb7e 	bl	8001f54 <MX_I2C1_Init>
	MX_SPI1_Init();
 8001858:	f000 fbd8 	bl	800200c <MX_SPI1_Init>
	MX_I2C3_Init();
 800185c:	f000 fa08 	bl	8001c70 <MX_I2C3_Init>
	MX_TIM6_Init();
 8001860:	f000 fa72 	bl	8001d48 <MX_TIM6_Init>

	SysInit();
 8001864:	f7ff fce6 	bl	8001234 <SysInit>

	/* USER CODE BEGIN 2 */

	/* Create an instance of the neural network */
	ai_err = ai_speech_commands_model_create(&speech_commands_model,
 8001868:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800186c:	3b14      	subs	r3, #20
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f00a fddd 	bl	800c430 <ai_speech_commands_model_create>
 8001876:	4603      	mov	r3, r0
 8001878:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 800187c:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8001880:	6013      	str	r3, [r2, #0]
			AI_SPEECH_COMMANDS_MODEL_DATA_CONFIG);
	if (ai_err.type != AI_ERROR_NONE) {
 8001882:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8001886:	f103 0368 	add.w	r3, r3, #104	; 0x68
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00f      	beq.n	80018b0 <main+0x1dc>
		usart_buffer_length = sprintf(usart_buffer,
 8001890:	495f      	ldr	r1, [pc, #380]	; (8001a10 <main+0x33c>)
 8001892:	4860      	ldr	r0, [pc, #384]	; (8001a14 <main+0x340>)
 8001894:	f011 fd98 	bl	80133c8 <siprintf>
 8001898:	4603      	mov	r3, r0
 800189a:	4a5f      	ldr	r2, [pc, #380]	; (8001a18 <main+0x344>)
 800189c:	6013      	str	r3, [r2, #0]
				"Error: could not create NN instance\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer, usart_buffer_length,
 800189e:	4b5e      	ldr	r3, [pc, #376]	; (8001a18 <main+0x344>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	2364      	movs	r3, #100	; 0x64
 80018a6:	495b      	ldr	r1, [pc, #364]	; (8001a14 <main+0x340>)
 80018a8:	485c      	ldr	r0, [pc, #368]	; (8001a1c <main+0x348>)
 80018aa:	f008 fe60 	bl	800a56e <HAL_UART_Transmit>
				100);
		while (1)
 80018ae:	e7fe      	b.n	80018ae <main+0x1da>
			;
	}

	/* Initialize the neural network */
	if (!ai_speech_commands_model_init(speech_commands_model, &ai_params)) {
 80018b0:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80018b4:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80018be:	3b74      	subs	r3, #116	; 0x74
 80018c0:	4619      	mov	r1, r3
 80018c2:	4610      	mov	r0, r2
 80018c4:	f00a fdca 	bl	800c45c <ai_speech_commands_model_init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	f083 0301 	eor.w	r3, r3, #1
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d00f      	beq.n	80018f4 <main+0x220>
		usart_buffer_length = sprintf(usart_buffer,
 80018d4:	4952      	ldr	r1, [pc, #328]	; (8001a20 <main+0x34c>)
 80018d6:	484f      	ldr	r0, [pc, #316]	; (8001a14 <main+0x340>)
 80018d8:	f011 fd76 	bl	80133c8 <siprintf>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <main+0x344>)
 80018e0:	6013      	str	r3, [r2, #0]
				"Error: could not initialize NN\r\n");
		HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer, usart_buffer_length,
 80018e2:	4b4d      	ldr	r3, [pc, #308]	; (8001a18 <main+0x344>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	2364      	movs	r3, #100	; 0x64
 80018ea:	494a      	ldr	r1, [pc, #296]	; (8001a14 <main+0x340>)
 80018ec:	484b      	ldr	r0, [pc, #300]	; (8001a1c <main+0x348>)
 80018ee:	f008 fe3e 	bl	800a56e <HAL_UART_Transmit>
				100);
		while (1)
 80018f2:	e7fe      	b.n	80018f2 <main+0x21e>
			;
	}

	unsigned char rx_buff = 'a';
 80018f4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80018f8:	f2a3 33f5 	subw	r3, r3, #1013	; 0x3f5
 80018fc:	2261      	movs	r2, #97	; 0x61
 80018fe:	701a      	strb	r2, [r3, #0]
	start = HAL_GetTick();
 8001900:	f004 fbd6 	bl	80060b0 <HAL_GetTick>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	4b46      	ldr	r3, [pc, #280]	; (8001a24 <main+0x350>)
 800190a:	601a      	str	r2, [r3, #0]


	while (1) {

		switch (robotState) {
 800190c:	4b46      	ldr	r3, [pc, #280]	; (8001a28 <main+0x354>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	2b03      	cmp	r3, #3
 8001912:	d817      	bhi.n	8001944 <main+0x270>
 8001914:	a201      	add	r2, pc, #4	; (adr r2, 800191c <main+0x248>)
 8001916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	08001933 	.word	0x08001933
 8001920:	0800192d 	.word	0x0800192d
 8001924:	08001939 	.word	0x08001939
 8001928:	0800193f 	.word	0x0800193f
		case ROBOT_WALK:
			robot_walk();
 800192c:	f000 f8a6 	bl	8001a7c <robot_walk>
			break;
 8001930:	e00a      	b.n	8001948 <main+0x274>
		case ROBOT_STOP:
			robot_stop();
 8001932:	f000 f90b 	bl	8001b4c <robot_stop>
			break;
 8001936:	e007      	b.n	8001948 <main+0x274>
		case ROBOT_UP:
			robot_up();
 8001938:	f000 f91c 	bl	8001b74 <robot_up>
			break;
 800193c:	e004      	b.n	8001948 <main+0x274>
		case ROBOT_DOWN:
			robot_sit();
 800193e:	f000 f92d 	bl	8001b9c <robot_sit>
			break;
 8001942:	e001      	b.n	8001948 <main+0x274>
		default: robot_stop();
 8001944:	f000 f902 	bl	8001b4c <robot_stop>
		}


		HAL_UART_Receive(&huart2, &rx_buff, 1, 1);
 8001948:	f107 0178 	add.w	r1, r7, #120	; 0x78
 800194c:	3975      	subs	r1, #117	; 0x75
 800194e:	2301      	movs	r3, #1
 8001950:	2201      	movs	r2, #1
 8001952:	4832      	ldr	r0, [pc, #200]	; (8001a1c <main+0x348>)
 8001954:	f008 fe9d 	bl	800a692 <HAL_UART_Receive>

		if (rx_buff != 'a') {
 8001958:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800195c:	f2a3 33f5 	subw	r3, r3, #1013	; 0x3f5
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b61      	cmp	r3, #97	; 0x61
 8001964:	d0d2      	beq.n	800190c <main+0x238>
			rx_buff = 'a';
 8001966:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800196a:	f2a3 33f5 	subw	r3, r3, #1013	; 0x3f5
 800196e:	2261      	movs	r2, #97	; 0x61
 8001970:	701a      	strb	r2, [r3, #0]
			usart_buffer_length = sprintf(usart_buffer,
 8001972:	492e      	ldr	r1, [pc, #184]	; (8001a2c <main+0x358>)
 8001974:	4827      	ldr	r0, [pc, #156]	; (8001a14 <main+0x340>)
 8001976:	f011 fd27 	bl	80133c8 <siprintf>
 800197a:	4603      	mov	r3, r0
 800197c:	4a26      	ldr	r2, [pc, #152]	; (8001a18 <main+0x344>)
 800197e:	6013      	str	r3, [r2, #0]
					"we're in!!\r\n");
			HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001980:	4b25      	ldr	r3, [pc, #148]	; (8001a18 <main+0x344>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	b29a      	uxth	r2, r3
 8001986:	2364      	movs	r3, #100	; 0x64
 8001988:	4922      	ldr	r1, [pc, #136]	; (8001a14 <main+0x340>)
 800198a:	4824      	ldr	r0, [pc, #144]	; (8001a1c <main+0x348>)
 800198c:	f008 fdef 	bl	800a56e <HAL_UART_Transmit>
					usart_buffer_length, 100);
			/* Acquire audio signal and transform it to PCM data */
			audio_record();
 8001990:	f7ff fb42 	bl	8001018 <audio_record>

			/* Preprocess audio signal to get the MFCCs */
			preprocess_audio((int16_t*) &pcm_buffer[0], (ai_float*) &in_data[0],
 8001994:	f507 733e 	add.w	r3, r7, #760	; 0x2f8
 8001998:	3b30      	subs	r3, #48	; 0x30
 800199a:	f643 72f0 	movw	r2, #16368	; 0x3ff0
 800199e:	4619      	mov	r1, r3
 80019a0:	4823      	ldr	r0, [pc, #140]	; (8001a30 <main+0x35c>)
 80019a2:	f000 fa07 	bl	8001db4 <preprocess_audio>
					PCM_BUFFER_SIZE);

			/* Perform inference */
			nbatch = ai_speech_commands_model_run(speech_commands_model,
 80019a6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80019aa:	f5a3 7365 	sub.w	r3, r3, #916	; 0x394
 80019ae:	6818      	ldr	r0, [r3, #0]
 80019b0:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80019b4:	3a44      	subs	r2, #68	; 0x44
 80019b6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019ba:	3b2c      	subs	r3, #44	; 0x2c
 80019bc:	4619      	mov	r1, r3
 80019be:	f00a fd89 	bl	800c4d4 <ai_speech_commands_model_run>
 80019c2:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80019c6:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80019ca:	6018      	str	r0, [r3, #0]
					&ai_input[0], &ai_output[0]);

			if (nbatch != 1) {
 80019cc:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 80019d0:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d02e      	beq.n	8001a38 <main+0x364>
				usart_buffer_length = sprintf(usart_buffer,
 80019da:	4916      	ldr	r1, [pc, #88]	; (8001a34 <main+0x360>)
 80019dc:	480d      	ldr	r0, [pc, #52]	; (8001a14 <main+0x340>)
 80019de:	f011 fcf3 	bl	80133c8 <siprintf>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <main+0x344>)
 80019e6:	6013      	str	r3, [r2, #0]
						"Error: could not run inference\r\n");
				HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <main+0x344>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	2364      	movs	r3, #100	; 0x64
 80019f0:	4908      	ldr	r1, [pc, #32]	; (8001a14 <main+0x340>)
 80019f2:	480a      	ldr	r0, [pc, #40]	; (8001a1c <main+0x348>)
 80019f4:	f008 fdbb 	bl	800a56e <HAL_UART_Transmit>
 80019f8:	e788      	b.n	800190c <main+0x238>
 80019fa:	bf00      	nop
 80019fc:	08019fd4 	.word	0x08019fd4
 8001a00:	08019fec 	.word	0x08019fec
 8001a04:	40040440 	.word	0x40040440
 8001a08:	0002b2f8 	.word	0x0002b2f8
 8001a0c:	00040440 	.word	0x00040440
 8001a10:	08019f54 	.word	0x08019f54
 8001a14:	20013b00 	.word	0x20013b00
 8001a18:	20013b34 	.word	0x20013b34
 8001a1c:	20009404 	.word	0x20009404
 8001a20:	08019f7c 	.word	0x08019f7c
 8001a24:	20013b38 	.word	0x20013b38
 8001a28:	2000049c 	.word	0x2000049c
 8001a2c:	08019fa0 	.word	0x08019fa0
 8001a30:	200010d4 	.word	0x200010d4
 8001a34:	08019fb0 	.word	0x08019fb0
						usart_buffer_length, 100);
			} else {
				/* Get the predicted word */
				uint8_t idx = argmax(out_data, AI_SPEECH_COMMANDS_MODEL_OUT_1_SIZE);
 8001a38:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001a3c:	3b10      	subs	r3, #16
 8001a3e:	2126      	movs	r1, #38	; 0x26
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fb99 	bl	8001178 <argmax>
 8001a46:	4603      	mov	r3, r0
 8001a48:	f507 42a7 	add.w	r2, r7, #21376	; 0x5380
 8001a4c:	f102 0273 	add.w	r2, r2, #115	; 0x73
 8001a50:	7013      	strb	r3, [r2, #0]
				char *word = get_word(idx);
 8001a52:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8001a56:	f103 0373 	add.w	r3, r3, #115	; 0x73
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fbcb 	bl	80011f8 <get_word>
 8001a62:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8001a66:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001a6a:	6018      	str	r0, [r3, #0]
				recognize_commands(word);
 8001a6c:	f507 43a7 	add.w	r3, r7, #21376	; 0x5380
 8001a70:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8001a74:	6818      	ldr	r0, [r3, #0]
 8001a76:	f000 f8a5 	bl	8001bc4 <recognize_commands>
		switch (robotState) {
 8001a7a:	e747      	b.n	800190c <main+0x238>

08001a7c <robot_walk>:

	/* USER CODE BEGIN 3 */
	/* USER CODE END 3 */
}

void robot_walk(void) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	if (HAL_GetTick() - start >= 200) {
 8001a80:	f004 fb16 	bl	80060b0 <HAL_GetTick>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <robot_walk+0xb0>)
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	1a9b      	subs	r3, r3, r2
 8001a8c:	2bc7      	cmp	r3, #199	; 0xc7
 8001a8e:	d94a      	bls.n	8001b26 <robot_walk+0xaa>
		start = HAL_GetTick();
 8001a90:	f004 fb0e 	bl	80060b0 <HAL_GetTick>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461a      	mov	r2, r3
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <robot_walk+0xb0>)
 8001a9a:	601a      	str	r2, [r3, #0]
		switch(stage){
 8001a9c:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <robot_walk+0xb4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d841      	bhi.n	8001b28 <robot_walk+0xac>
 8001aa4:	a201      	add	r2, pc, #4	; (adr r2, 8001aac <robot_walk+0x30>)
 8001aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aaa:	bf00      	nop
 8001aac:	08001ac1 	.word	0x08001ac1
 8001ab0:	08001ad7 	.word	0x08001ad7
 8001ab4:	08001aeb 	.word	0x08001aeb
 8001ab8:	08001aff 	.word	0x08001aff
 8001abc:	08001b13 	.word	0x08001b13
		case 0:
			height = 0.14;
 8001ac0:	4b1c      	ldr	r3, [pc, #112]	; (8001b34 <robot_walk+0xb8>)
 8001ac2:	4a1d      	ldr	r2, [pc, #116]	; (8001b38 <robot_walk+0xbc>)
 8001ac4:	601a      	str	r2, [r3, #0]
			x_distance = 0.0;
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <robot_walk+0xc0>)
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
			stage = 1;
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <robot_walk+0xb4>)
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	601a      	str	r2, [r3, #0]
			break;
 8001ad4:	e028      	b.n	8001b28 <robot_walk+0xac>
		case 1:
			height = 0.14;
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <robot_walk+0xb8>)
 8001ad8:	4a17      	ldr	r2, [pc, #92]	; (8001b38 <robot_walk+0xbc>)
 8001ada:	601a      	str	r2, [r3, #0]
			x_distance = 0.02;
 8001adc:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <robot_walk+0xc0>)
 8001ade:	4a18      	ldr	r2, [pc, #96]	; (8001b40 <robot_walk+0xc4>)
 8001ae0:	601a      	str	r2, [r3, #0]
			stage = 2;
 8001ae2:	4b13      	ldr	r3, [pc, #76]	; (8001b30 <robot_walk+0xb4>)
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	601a      	str	r2, [r3, #0]
			break;
 8001ae8:	e01e      	b.n	8001b28 <robot_walk+0xac>
		case 2:
			height = 0.16;
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <robot_walk+0xb8>)
 8001aec:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <robot_walk+0xc8>)
 8001aee:	601a      	str	r2, [r3, #0]
			x_distance = 0.02;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <robot_walk+0xc0>)
 8001af2:	4a13      	ldr	r2, [pc, #76]	; (8001b40 <robot_walk+0xc4>)
 8001af4:	601a      	str	r2, [r3, #0]
			stage = 3;
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <robot_walk+0xb4>)
 8001af8:	2203      	movs	r2, #3
 8001afa:	601a      	str	r2, [r3, #0]
			break;
 8001afc:	e014      	b.n	8001b28 <robot_walk+0xac>
		case 3:
			height = 0.16;
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <robot_walk+0xb8>)
 8001b00:	4a10      	ldr	r2, [pc, #64]	; (8001b44 <robot_walk+0xc8>)
 8001b02:	601a      	str	r2, [r3, #0]
			x_distance = -0.02;
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <robot_walk+0xc0>)
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <robot_walk+0xcc>)
 8001b08:	601a      	str	r2, [r3, #0]
			stage = 4;
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <robot_walk+0xb4>)
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	601a      	str	r2, [r3, #0]
			break;
 8001b10:	e00a      	b.n	8001b28 <robot_walk+0xac>
		case 4:
			height = 0.14;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <robot_walk+0xb8>)
 8001b14:	4a08      	ldr	r2, [pc, #32]	; (8001b38 <robot_walk+0xbc>)
 8001b16:	601a      	str	r2, [r3, #0]
			x_distance = -0.02;
 8001b18:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <robot_walk+0xc0>)
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	; (8001b48 <robot_walk+0xcc>)
 8001b1c:	601a      	str	r2, [r3, #0]
			stage = 0;
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <robot_walk+0xb4>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
			break;
 8001b24:	e000      	b.n	8001b28 <robot_walk+0xac>
		}
		//		ServoDriverSetPWM(&servodriver, FLHip, MAP_Angle2Pulse(legFL.des_hip_angle,144.0,0.0,FLHipmin,FLHipmax),0);
		//		ServoDriverSetPWM(&servodriver, FLKnee, MAP_Angle2Pulse(legFL.des_knee_angle,23.0,97.0,FLKneemin,FLKneemax),0);
	}
 8001b26:	bf00      	nop
}
 8001b28:	bf00      	nop
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20013b38 	.word	0x20013b38
 8001b30:	20013b3c 	.word	0x20013b3c
 8001b34:	200091e8 	.word	0x200091e8
 8001b38:	3e0f5c29 	.word	0x3e0f5c29
 8001b3c:	200091ec 	.word	0x200091ec
 8001b40:	3ca3d70a 	.word	0x3ca3d70a
 8001b44:	3e23d70a 	.word	0x3e23d70a
 8001b48:	bca3d70a 	.word	0xbca3d70a

08001b4c <robot_stop>:

void robot_stop(void) {
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
	height = 0.14;
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <robot_stop+0x1c>)
 8001b52:	4a06      	ldr	r2, [pc, #24]	; (8001b6c <robot_stop+0x20>)
 8001b54:	601a      	str	r2, [r3, #0]
	x_distance = 0;
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <robot_stop+0x24>)
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	200091e8 	.word	0x200091e8
 8001b6c:	3e0f5c29 	.word	0x3e0f5c29
 8001b70:	200091ec 	.word	0x200091ec

08001b74 <robot_up>:

void robot_up(void) {
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
	height = 0.19;
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <robot_up+0x1c>)
 8001b7a:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <robot_up+0x20>)
 8001b7c:	601a      	str	r2, [r3, #0]
	x_distance = 0;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <robot_up+0x24>)
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	200091e8 	.word	0x200091e8
 8001b94:	3e428f5c 	.word	0x3e428f5c
 8001b98:	200091ec 	.word	0x200091ec

08001b9c <robot_sit>:

void robot_sit(void) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
	height = 0.10;
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <robot_sit+0x1c>)
 8001ba2:	4a06      	ldr	r2, [pc, #24]	; (8001bbc <robot_sit+0x20>)
 8001ba4:	601a      	str	r2, [r3, #0]
	x_distance = 0;
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <robot_sit+0x24>)
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	200091e8 	.word	0x200091e8
 8001bbc:	3dcccccd 	.word	0x3dcccccd
 8001bc0:	200091ec 	.word	0x200091ec

08001bc4 <recognize_commands>:
 *
 * @param  word*   a constant string to be recognized
 *
 * @retval None
 */
void recognize_commands(const char *word) {
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
	/* Turn on green led and turn off the others */
	if (strcmp(word, GO) == 0) {
 8001bcc:	491f      	ldr	r1, [pc, #124]	; (8001c4c <recognize_commands+0x88>)
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fafe 	bl	80001d0 <strcmp>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d103      	bne.n	8001be2 <recognize_commands+0x1e>
		robotState = ROBOT_WALK;
 8001bda:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <recognize_commands+0x8c>)
 8001bdc:	2201      	movs	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
 8001be0:	e01f      	b.n	8001c22 <recognize_commands+0x5e>
		/* Turn on blue led and turn off the others */
	} else if (strcmp(word, UP) == 0) {
 8001be2:	491c      	ldr	r1, [pc, #112]	; (8001c54 <recognize_commands+0x90>)
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7fe faf3 	bl	80001d0 <strcmp>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d103      	bne.n	8001bf8 <recognize_commands+0x34>
		robotState = ROBOT_UP;
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <recognize_commands+0x8c>)
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	701a      	strb	r2, [r3, #0]
 8001bf6:	e014      	b.n	8001c22 <recognize_commands+0x5e>
		/* Turn on red led and turn off the others */
	} else if (strcmp(word, DOWN) == 0) {
 8001bf8:	4917      	ldr	r1, [pc, #92]	; (8001c58 <recognize_commands+0x94>)
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe fae8 	bl	80001d0 <strcmp>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d103      	bne.n	8001c0e <recognize_commands+0x4a>
		robotState = ROBOT_DOWN;
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <recognize_commands+0x8c>)
 8001c08:	2203      	movs	r2, #3
 8001c0a:	701a      	strb	r2, [r3, #0]
 8001c0c:	e009      	b.n	8001c22 <recognize_commands+0x5e>
		/* Turn on orange led and turn off the others */
	} else if (strcmp(word, STOP) == 0) {
 8001c0e:	4913      	ldr	r1, [pc, #76]	; (8001c5c <recognize_commands+0x98>)
 8001c10:	6878      	ldr	r0, [r7, #4]
 8001c12:	f7fe fadd 	bl	80001d0 <strcmp>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d102      	bne.n	8001c22 <recognize_commands+0x5e>
		robotState = ROBOT_STOP;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <recognize_commands+0x8c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
	}

	usart_buffer_length = sprintf(usart_buffer,
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	490e      	ldr	r1, [pc, #56]	; (8001c60 <recognize_commands+0x9c>)
 8001c26:	480f      	ldr	r0, [pc, #60]	; (8001c64 <recognize_commands+0xa0>)
 8001c28:	f011 fbce 	bl	80133c8 <siprintf>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4a0e      	ldr	r2, [pc, #56]	; (8001c68 <recognize_commands+0xa4>)
 8001c30:	6013      	str	r3, [r2, #0]
			"%s\r\n", word);
	HAL_UART_Transmit(&huart2, (uint8_t*) usart_buffer,
 8001c32:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <recognize_commands+0xa4>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	2364      	movs	r3, #100	; 0x64
 8001c3a:	490a      	ldr	r1, [pc, #40]	; (8001c64 <recognize_commands+0xa0>)
 8001c3c:	480b      	ldr	r0, [pc, #44]	; (8001c6c <recognize_commands+0xa8>)
 8001c3e:	f008 fc96 	bl	800a56e <HAL_UART_Transmit>
	//			/* Reset execution time statistics */
	//		} else if (strcmp(word, STOP) == 0) {
	//
	//		}
	//	}
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	0801a0c4 	.word	0x0801a0c4
 8001c50:	2000049c 	.word	0x2000049c
 8001c54:	0801a140 	.word	0x0801a140
 8001c58:	0801a094 	.word	0x0801a094
 8001c5c:	0801a124 	.word	0x0801a124
 8001c60:	0801a004 	.word	0x0801a004
 8001c64:	20013b00 	.word	0x20013b00
 8001c68:	20013b34 	.word	0x20013b34
 8001c6c:	20009404 	.word	0x20009404

08001c70 <MX_I2C3_Init>:

static void MX_I2C3_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <MX_I2C3_Init+0x50>)
 8001c76:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <MX_I2C3_Init+0x54>)
 8001c78:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8001c7a:	4b11      	ldr	r3, [pc, #68]	; (8001cc0 <MX_I2C3_Init+0x50>)
 8001c7c:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <MX_I2C3_Init+0x58>)
 8001c7e:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <MX_I2C3_Init+0x50>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <MX_I2C3_Init+0x50>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <MX_I2C3_Init+0x50>)
 8001c8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c92:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c94:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <MX_I2C3_Init+0x50>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <MX_I2C3_Init+0x50>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <MX_I2C3_Init+0x50>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <MX_I2C3_Init+0x50>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001cac:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <MX_I2C3_Init+0x50>)
 8001cae:	f005 f975 	bl	8006f9c <HAL_I2C_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 8001cb8:	f000 fb5e 	bl	8002378 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200092b0 	.word	0x200092b0
 8001cc4:	40005c00 	.word	0x40005c00
 8001cc8:	000186a0 	.word	0x000186a0

08001ccc <HAL_TIM_PeriodElapsedCallback>:

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
	ControlLoop();
 8001cd4:	f7ff fb1a 	bl	800130c <ControlLoop>
	ServoDriverSetPWM(&servodriver, FLHip, MAP_Angle2Pulse(legFL.des_hip_angle,144.0,0.0,FLHipmin,FLHipmax),0);
 8001cd8:	4b16      	ldr	r3, [pc, #88]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ce2:	206e      	movs	r0, #110	; 0x6e
 8001ce4:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8001d38 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001ce8:	eddf 0a14 	vldr	s1, [pc, #80]	; 8001d3c <HAL_TIM_PeriodElapsedCallback+0x70>
 8001cec:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf0:	f7ff faca 	bl	8001288 <MAP_Angle2Pulse>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4810      	ldr	r0, [pc, #64]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001cfe:	f000 fc68 	bl	80025d2 <ServoDriverSetPWM>
	ServoDriverSetPWM(&servodriver, FLKnee, MAP_Angle2Pulse(legFL.des_knee_angle,23.0,97.0,FLKneemin,FLKneemax),0);
 8001d02:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001d04:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d08:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8001d0c:	2082      	movs	r0, #130	; 0x82
 8001d0e:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001d44 <HAL_TIM_PeriodElapsedCallback+0x78>
 8001d12:	eef3 0a07 	vmov.f32	s1, #55	; 0x41b80000  23.0
 8001d16:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1a:	f7ff fab5 	bl	8001288 <MAP_Angle2Pulse>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	461a      	mov	r2, r3
 8001d22:	2300      	movs	r3, #0
 8001d24:	2102      	movs	r1, #2
 8001d26:	4806      	ldr	r0, [pc, #24]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001d28:	f000 fc53 	bl	80025d2 <ServoDriverSetPWM>
}
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	200091f8 	.word	0x200091f8
 8001d38:	00000000 	.word	0x00000000
 8001d3c:	43100000 	.word	0x43100000
 8001d40:	200091e0 	.word	0x200091e0
 8001d44:	42c20000 	.word	0x42c20000

08001d48 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4e:	463b      	mov	r3, r7
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001d56:	4b15      	ldr	r3, [pc, #84]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d58:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <MX_TIM6_Init+0x68>)
 8001d5a:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 84;
 8001d5c:	4b13      	ldr	r3, [pc, #76]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d5e:	2254      	movs	r2, #84	; 0x54
 8001d60:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 4999;
 8001d68:	4b10      	ldr	r3, [pc, #64]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d6a:	f241 3287 	movw	r2, #4999	; 0x1387
 8001d6e:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d76:	480d      	ldr	r0, [pc, #52]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d78:	f008 f88d 	bl	8009e96 <HAL_TIM_Base_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 8001d82:	f000 faf9 	bl	8002378 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4619      	mov	r1, r3
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <MX_TIM6_Init+0x64>)
 8001d94:	f008 fb0e 	bl	800a3b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 8001d9e:	f000 faeb 	bl	8002378 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */
}
 8001da2:	bf00      	nop
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20009448 	.word	0x20009448
 8001db0:	40001000 	.word	0x40001000

08001db4 <preprocess_audio>:
 * @param  signal_len      length of the input signal
 *
 * @retval None
 */
void preprocess_audio(int16_t *input_signal, float32_t *out_mfcc,
		uint32_t signal_len) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]

	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++) {
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]
 8001dc4:	e02a      	b.n	8001e1c <preprocess_audio+0x68>

		/* Convert 16-bit PCM into normalized floating point values */
		buf_to_float_normed(&input_signal[HOP_LEN * frame_index], frame_buffer,
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	029b      	lsls	r3, r3, #10
 8001dca:	68fa      	ldr	r2, [r7, #12]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001dd2:	4917      	ldr	r1, [pc, #92]	; (8001e30 <preprocess_audio+0x7c>)
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f009 fc4d 	bl	800b674 <buf_to_float_normed>
				FRAME_LEN);

		MfccColumn(&mfcc, frame_buffer, mfcc_col_buffer);
 8001dda:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <preprocess_audio+0x80>)
 8001ddc:	4914      	ldr	r1, [pc, #80]	; (8001e30 <preprocess_audio+0x7c>)
 8001dde:	4816      	ldr	r0, [pc, #88]	; (8001e38 <preprocess_audio+0x84>)
 8001de0:	f009 fdc9 	bl	800b976 <MfccColumn>

		/* Reshape column into `out_mfcc` */
		for (uint32_t i = 0; i < NUM_MFCC; i++) {
 8001de4:	2300      	movs	r3, #0
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e012      	b.n	8001e10 <preprocess_audio+0x5c>
			out_mfcc[i * num_frames + frame_index] = mfcc_col_buffer[i];
 8001dea:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <preprocess_audio+0x88>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	693a      	ldr	r2, [r7, #16]
 8001df0:	fb03 f202 	mul.w	r2, r3, r2
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	4413      	add	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	490d      	ldr	r1, [pc, #52]	; (8001e34 <preprocess_audio+0x80>)
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	440a      	add	r2, r1
 8001e06:	6812      	ldr	r2, [r2, #0]
 8001e08:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < NUM_MFCC; i++) {
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b0f      	cmp	r3, #15
 8001e14:	d9e9      	bls.n	8001dea <preprocess_audio+0x36>
	for (uint32_t frame_index = 0; frame_index < num_frames; frame_index++) {
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	4b07      	ldr	r3, [pc, #28]	; (8001e3c <preprocess_audio+0x88>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	697a      	ldr	r2, [r7, #20]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d3cf      	bcc.n	8001dc6 <preprocess_audio+0x12>
		}
	}
}
 8001e26:	bf00      	nop
 8001e28:	bf00      	nop
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20009530 	.word	0x20009530
 8001e34:	2000b530 	.word	0x2000b530
 8001e38:	20009520 	.word	0x20009520
 8001e3c:	20000498 	.word	0x20000498

08001e40 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b094      	sub	sp, #80	; 0x50
 8001e44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e46:	f107 0320 	add.w	r3, r7, #32
 8001e4a:	2230      	movs	r2, #48	; 0x30
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f010 f9e8 	bl	8012224 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e54:	f107 030c 	add.w	r3, r7, #12
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	605a      	str	r2, [r3, #4]
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	611a      	str	r2, [r3, #16]

	/** Macro to configure the PLL multiplication factor
	 */
	__HAL_RCC_PLL_PLLM_CONFIG(10);
 8001e64:	4b2b      	ldr	r3, [pc, #172]	; (8001f14 <SystemClock_Config+0xd4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e6c:	4a29      	ldr	r2, [pc, #164]	; (8001f14 <SystemClock_Config+0xd4>)
 8001e6e:	f043 030a 	orr.w	r3, r3, #10
 8001e72:	6053      	str	r3, [r2, #4]
	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8001e74:	4b27      	ldr	r3, [pc, #156]	; (8001f14 <SystemClock_Config+0xd4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4a26      	ldr	r2, [pc, #152]	; (8001f14 <SystemClock_Config+0xd4>)
 8001e7a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e7e:	6053      	str	r3, [r2, #4]
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <SystemClock_Config+0xd4>)
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	4a22      	ldr	r2, [pc, #136]	; (8001f14 <SystemClock_Config+0xd4>)
 8001e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8001e90:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <SystemClock_Config+0xd4>)
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <SystemClock_Config+0xd8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1c      	ldr	r2, [pc, #112]	; (8001f18 <SystemClock_Config+0xd8>)
 8001ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <SystemClock_Config+0xd8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ec0:	2310      	movs	r3, #16
 8001ec2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001ecc:	f107 0320 	add.w	r3, r7, #32
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f007 f957 	bl	8009184 <HAL_RCC_OscConfig>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <SystemClock_Config+0xa0>
		Error_Handler();
 8001edc:	f000 fa4c 	bl	8002378 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ee0:	230f      	movs	r3, #15
 8001ee2:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	2100      	movs	r1, #0
 8001efa:	4618      	mov	r0, r3
 8001efc:	f007 fbba 	bl	8009674 <HAL_RCC_ClockConfig>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <SystemClock_Config+0xca>
		Error_Handler();
 8001f06:	f000 fa37 	bl	8002378 <Error_Handler>
	}
}
 8001f0a:	bf00      	nop
 8001f0c:	3750      	adds	r7, #80	; 0x50
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40007000 	.word	0x40007000

08001f1c <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	; (8001f4c <MX_CRC_Init+0x30>)
 8001f22:	4a0b      	ldr	r2, [pc, #44]	; (8001f50 <MX_CRC_Init+0x34>)
 8001f24:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8001f26:	4809      	ldr	r0, [pc, #36]	; (8001f4c <MX_CRC_Init+0x30>)
 8001f28:	f004 fa03 	bl	8006332 <HAL_CRC_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_CRC_Init+0x1a>
		Error_Handler();
 8001f32:	f000 fa21 	bl	8002378 <Error_Handler>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 8001f36:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <MX_CRC_Init+0x30>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	4b03      	ldr	r3, [pc, #12]	; (8001f4c <MX_CRC_Init+0x30>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f042 0201 	orr.w	r2, r2, #1
 8001f44:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8001f46:	bf00      	nop
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	20009254 	.word	0x20009254
 8001f50:	40023000 	.word	0x40023000

08001f54 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001f58:	4b12      	ldr	r3, [pc, #72]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f5a:	4a13      	ldr	r2, [pc, #76]	; (8001fa8 <MX_I2C1_Init+0x54>)
 8001f5c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001f5e:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f60:	4a12      	ldr	r2, [pc, #72]	; (8001fac <MX_I2C1_Init+0x58>)
 8001f62:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f76:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f78:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001f7e:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f84:	4b07      	ldr	r3, [pc, #28]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001f90:	4804      	ldr	r0, [pc, #16]	; (8001fa4 <MX_I2C1_Init+0x50>)
 8001f92:	f005 f803 	bl	8006f9c <HAL_I2C_Init>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001f9c:	f000 f9ec 	bl	8002378 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001fa0:	bf00      	nop
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000925c 	.word	0x2000925c
 8001fa8:	40005400 	.word	0x40005400
 8001fac:	000186a0 	.word	0x000186a0

08001fb0 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <MX_I2S2_Init+0x54>)
 8001fb6:	4a14      	ldr	r2, [pc, #80]	; (8002008 <MX_I2S2_Init+0x58>)
 8001fb8:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <MX_I2S2_Init+0x54>)
 8001fbc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001fc0:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <MX_I2S2_Init+0x54>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8001fc8:	4b0e      	ldr	r3, [pc, #56]	; (8002004 <MX_I2S2_Init+0x54>)
 8001fca:	2203      	movs	r2, #3
 8001fcc:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001fce:	4b0d      	ldr	r3, [pc, #52]	; (8002004 <MX_I2S2_Init+0x54>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	; (8002004 <MX_I2S2_Init+0x54>)
 8001fd6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001fda:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <MX_I2S2_Init+0x54>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001fe2:	4b08      	ldr	r3, [pc, #32]	; (8002004 <MX_I2S2_Init+0x54>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <MX_I2S2_Init+0x54>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <MX_I2S2_Init+0x54>)
 8001ff0:	f006 f914 	bl	800821c <HAL_I2S_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_I2S2_Init+0x4e>
		Error_Handler();
 8001ffa:	f000 f9bd 	bl	8002378 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20009304 	.word	0x20009304
 8002008:	40003800 	.word	0x40003800

0800200c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <MX_SPI1_Init+0x64>)
 8002012:	4a18      	ldr	r2, [pc, #96]	; (8002074 <MX_SPI1_Init+0x68>)
 8002014:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002016:	4b16      	ldr	r3, [pc, #88]	; (8002070 <MX_SPI1_Init+0x64>)
 8002018:	f44f 7282 	mov.w	r2, #260	; 0x104
 800201c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <MX_SPI1_Init+0x64>)
 8002020:	2200      	movs	r2, #0
 8002022:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <MX_SPI1_Init+0x64>)
 8002026:	2200      	movs	r2, #0
 8002028:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <MX_SPI1_Init+0x64>)
 800202c:	2200      	movs	r2, #0
 800202e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <MX_SPI1_Init+0x64>)
 8002032:	2200      	movs	r2, #0
 8002034:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002036:	4b0e      	ldr	r3, [pc, #56]	; (8002070 <MX_SPI1_Init+0x64>)
 8002038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800203c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <MX_SPI1_Init+0x64>)
 8002040:	2200      	movs	r2, #0
 8002042:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002044:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <MX_SPI1_Init+0x64>)
 8002046:	2200      	movs	r2, #0
 8002048:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <MX_SPI1_Init+0x64>)
 800204c:	2200      	movs	r2, #0
 800204e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <MX_SPI1_Init+0x64>)
 8002052:	2200      	movs	r2, #0
 8002054:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002056:	4b06      	ldr	r3, [pc, #24]	; (8002070 <MX_SPI1_Init+0x64>)
 8002058:	220a      	movs	r2, #10
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800205c:	4804      	ldr	r0, [pc, #16]	; (8002070 <MX_SPI1_Init+0x64>)
 800205e:	f007 fe91 	bl	8009d84 <HAL_SPI_Init>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_SPI1_Init+0x60>
		Error_Handler();
 8002068:	f000 f986 	bl	8002378 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}
 8002070:	200093ac 	.word	0x200093ac
 8002074:	40013000 	.word	0x40013000

08002078 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <MX_USART2_UART_Init+0x50>)
 8002080:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002082:	4b10      	ldr	r3, [pc, #64]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002096:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b09      	ldr	r3, [pc, #36]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b08      	ldr	r3, [pc, #32]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80020ae:	4805      	ldr	r0, [pc, #20]	; (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020b0:	f008 fa10 	bl	800a4d4 <HAL_UART_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80020ba:	f000 f95d 	bl	8002378 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20009404 	.word	0x20009404
 80020c8:	40004400 	.word	0x40004400

080020cc <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	607b      	str	r3, [r7, #4]
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <MX_DMA_Init+0x3c>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a0b      	ldr	r2, [pc, #44]	; (8002108 <MX_DMA_Init+0x3c>)
 80020dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <MX_DMA_Init+0x3c>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80020ee:	2200      	movs	r2, #0
 80020f0:	2100      	movs	r1, #0
 80020f2:	200e      	movs	r0, #14
 80020f4:	f004 f8e7 	bl	80062c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80020f8:	200e      	movs	r0, #14
 80020fa:	f004 f900 	bl	80062fe <HAL_NVIC_EnableIRQ>

}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800

0800210c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002112:	f107 0314 	add.w	r3, r7, #20
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
 800211a:	605a      	str	r2, [r3, #4]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	60da      	str	r2, [r3, #12]
 8002120:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	4b32      	ldr	r3, [pc, #200]	; (80021f0 <MX_GPIO_Init+0xe4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a31      	ldr	r2, [pc, #196]	; (80021f0 <MX_GPIO_Init+0xe4>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <MX_GPIO_Init+0xe4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	4b2b      	ldr	r3, [pc, #172]	; (80021f0 <MX_GPIO_Init+0xe4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a2a      	ldr	r2, [pc, #168]	; (80021f0 <MX_GPIO_Init+0xe4>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <MX_GPIO_Init+0xe4>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <MX_GPIO_Init+0xe4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <MX_GPIO_Init+0xe4>)
 8002164:	f043 0302 	orr.w	r3, r3, #2
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <MX_GPIO_Init+0xe4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <MX_GPIO_Init+0xe4>)
 800217c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217e:	4a1c      	ldr	r2, [pc, #112]	; (80021f0 <MX_GPIO_Init+0xe4>)
 8002180:	f043 0308 	orr.w	r3, r3, #8
 8002184:	6313      	str	r3, [r2, #48]	; 0x30
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <MX_GPIO_Init+0xe4>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	607b      	str	r3, [r7, #4]
 8002190:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin,
 8002192:	2200      	movs	r2, #0
 8002194:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8002198:	4816      	ldr	r0, [pc, #88]	; (80021f4 <MX_GPIO_Init+0xe8>)
 800219a:	f004 fec1 	bl	8006f20 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 800219e:	2301      	movs	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	4619      	mov	r1, r3
 80021b2:	4811      	ldr	r0, [pc, #68]	; (80021f8 <MX_GPIO_Init+0xec>)
 80021b4:	f004 fd18 	bl	8006be8 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 80021b8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80021bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021be:	2301      	movs	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ca:	f107 0314 	add.w	r3, r7, #20
 80021ce:	4619      	mov	r1, r3
 80021d0:	4808      	ldr	r0, [pc, #32]	; (80021f4 <MX_GPIO_Init+0xe8>)
 80021d2:	f004 fd09 	bl	8006be8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80021d6:	2200      	movs	r2, #0
 80021d8:	2100      	movs	r1, #0
 80021da:	2006      	movs	r0, #6
 80021dc:	f004 f873 	bl	80062c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021e0:	2006      	movs	r0, #6
 80021e2:	f004 f88c 	bl	80062fe <HAL_NVIC_EnableIRQ>

}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023800 	.word	0x40023800
 80021f4:	40020c00 	.word	0x40020c00
 80021f8:	40020000 	.word	0x40020000

080021fc <preprocessing_init>:
 *
 * @param  None
 *
 * @retval None
 */
void preprocessing_init(void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
	/* Init window function */
	if (Window_Init(window_func_buffer, FRAME_LEN, WINDOW_HANN) != 0) {
 8002200:	2200      	movs	r2, #0
 8002202:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002206:	484e      	ldr	r0, [pc, #312]	; (8002340 <preprocessing_init+0x144>)
 8002208:	f009 feaa 	bl	800bf60 <Window_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d000      	beq.n	8002214 <preprocessing_init+0x18>
		while (1)
 8002212:	e7fe      	b.n	8002212 <preprocessing_init+0x16>
			;
	}

	/* Init RFFT */
	arm_rfft_fast_init_f32(&rfft, FFT_LEN);
 8002214:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002218:	484a      	ldr	r0, [pc, #296]	; (8002344 <preprocessing_init+0x148>)
 800221a:	f003 fe79 	bl	8005f10 <arm_rfft_fast_init_f32>

	/* Init mel filterbank */
	mel_filter.pStartIndices = mel_filter_start_indices;
 800221e:	4b4a      	ldr	r3, [pc, #296]	; (8002348 <preprocessing_init+0x14c>)
 8002220:	4a4a      	ldr	r2, [pc, #296]	; (800234c <preprocessing_init+0x150>)
 8002222:	601a      	str	r2, [r3, #0]
	mel_filter.pStopIndices = mel_filter_stop_indices;
 8002224:	4b48      	ldr	r3, [pc, #288]	; (8002348 <preprocessing_init+0x14c>)
 8002226:	4a4a      	ldr	r2, [pc, #296]	; (8002350 <preprocessing_init+0x154>)
 8002228:	605a      	str	r2, [r3, #4]
	mel_filter.pCoefficients = mel_filter_coefs;
 800222a:	4b47      	ldr	r3, [pc, #284]	; (8002348 <preprocessing_init+0x14c>)
 800222c:	4a49      	ldr	r2, [pc, #292]	; (8002354 <preprocessing_init+0x158>)
 800222e:	609a      	str	r2, [r3, #8]
	mel_filter.NumMels = NUM_MELS;
 8002230:	4b45      	ldr	r3, [pc, #276]	; (8002348 <preprocessing_init+0x14c>)
 8002232:	2280      	movs	r2, #128	; 0x80
 8002234:	611a      	str	r2, [r3, #16]
	mel_filter.FFTLen = FFT_LEN;
 8002236:	4b44      	ldr	r3, [pc, #272]	; (8002348 <preprocessing_init+0x14c>)
 8002238:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800223c:	615a      	str	r2, [r3, #20]
	mel_filter.SampRate = SAMPLE_RATE;
 800223e:	4b42      	ldr	r3, [pc, #264]	; (8002348 <preprocessing_init+0x14c>)
 8002240:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8002244:	619a      	str	r2, [r3, #24]
	mel_filter.FMin = 0.0;
 8002246:	4b40      	ldr	r3, [pc, #256]	; (8002348 <preprocessing_init+0x14c>)
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
	mel_filter.FMax = mel_filter.SampRate / 2.0;
 800224e:	4b3e      	ldr	r3, [pc, #248]	; (8002348 <preprocessing_init+0x14c>)
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	4618      	mov	r0, r3
 8002254:	f7fe f966 	bl	8000524 <__aeabi_ui2d>
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002260:	f7fe fb04 	bl	800086c <__aeabi_ddiv>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fccc 	bl	8000c08 <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
 8002272:	4a35      	ldr	r2, [pc, #212]	; (8002348 <preprocessing_init+0x14c>)
 8002274:	6213      	str	r3, [r2, #32]
	mel_filter.Formula = MEL_SLANEY;
 8002276:	4b34      	ldr	r3, [pc, #208]	; (8002348 <preprocessing_init+0x14c>)
 8002278:	2201      	movs	r2, #1
 800227a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mel_filter.Normalize = 1;
 800227e:	4b32      	ldr	r3, [pc, #200]	; (8002348 <preprocessing_init+0x14c>)
 8002280:	2201      	movs	r2, #1
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
	mel_filter.Mel2F = 1;
 8002284:	4b30      	ldr	r3, [pc, #192]	; (8002348 <preprocessing_init+0x14c>)
 8002286:	2201      	movs	r2, #1
 8002288:	62da      	str	r2, [r3, #44]	; 0x2c
	MelFilterbank_Init(&mel_filter);
 800228a:	482f      	ldr	r0, [pc, #188]	; (8002348 <preprocessing_init+0x14c>)
 800228c:	f009 fb8e 	bl	800b9ac <MelFilterbank_Init>
	if (mel_filter.CoefficientsLength != NUM_MEL_COEFS) {
 8002290:	4b2d      	ldr	r3, [pc, #180]	; (8002348 <preprocessing_init+0x14c>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	f240 72e4 	movw	r2, #2020	; 0x7e4
 8002298:	4293      	cmp	r3, r2
 800229a:	d000      	beq.n	800229e <preprocessing_init+0xa2>
		while (1)
 800229c:	e7fe      	b.n	800229c <preprocessing_init+0xa0>
			;
	}

	/* Init DCT operation */
	dct.NumFilters = NUM_MFCC;
 800229e:	4b2e      	ldr	r3, [pc, #184]	; (8002358 <preprocessing_init+0x15c>)
 80022a0:	2210      	movs	r2, #16
 80022a2:	601a      	str	r2, [r3, #0]
	dct.NumInputs = NUM_MELS;
 80022a4:	4b2c      	ldr	r3, [pc, #176]	; (8002358 <preprocessing_init+0x15c>)
 80022a6:	2280      	movs	r2, #128	; 0x80
 80022a8:	605a      	str	r2, [r3, #4]
	dct.Type = DCT_TYPE_II_ORTHO;
 80022aa:	4b2b      	ldr	r3, [pc, #172]	; (8002358 <preprocessing_init+0x15c>)
 80022ac:	2202      	movs	r2, #2
 80022ae:	721a      	strb	r2, [r3, #8]
	dct.RemoveDCTZero = 0;
 80022b0:	4b29      	ldr	r3, [pc, #164]	; (8002358 <preprocessing_init+0x15c>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	60da      	str	r2, [r3, #12]
	dct.pDCTCoefs = dct_coefs_buffer;
 80022b6:	4b28      	ldr	r3, [pc, #160]	; (8002358 <preprocessing_init+0x15c>)
 80022b8:	4a28      	ldr	r2, [pc, #160]	; (800235c <preprocessing_init+0x160>)
 80022ba:	611a      	str	r2, [r3, #16]
	if (DCT_Init(&dct) != 0) {
 80022bc:	4826      	ldr	r0, [pc, #152]	; (8002358 <preprocessing_init+0x15c>)
 80022be:	f008 fd6f 	bl	800ada0 <DCT_Init>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d000      	beq.n	80022ca <preprocessing_init+0xce>
		while (1)
 80022c8:	e7fe      	b.n	80022c8 <preprocessing_init+0xcc>
			;
	}

	/* Init Spectrogram */
	spectrogram.pRfft = &rfft;
 80022ca:	4b25      	ldr	r3, [pc, #148]	; (8002360 <preprocessing_init+0x164>)
 80022cc:	4a1d      	ldr	r2, [pc, #116]	; (8002344 <preprocessing_init+0x148>)
 80022ce:	601a      	str	r2, [r3, #0]
	spectrogram.Type = SPECTRUM_TYPE_POWER;
 80022d0:	4b23      	ldr	r3, [pc, #140]	; (8002360 <preprocessing_init+0x164>)
 80022d2:	2201      	movs	r2, #1
 80022d4:	711a      	strb	r2, [r3, #4]
	spectrogram.pWindow = window_func_buffer;
 80022d6:	4b22      	ldr	r3, [pc, #136]	; (8002360 <preprocessing_init+0x164>)
 80022d8:	4a19      	ldr	r2, [pc, #100]	; (8002340 <preprocessing_init+0x144>)
 80022da:	609a      	str	r2, [r3, #8]
	spectrogram.SampRate = SAMPLE_RATE;
 80022dc:	4b20      	ldr	r3, [pc, #128]	; (8002360 <preprocessing_init+0x164>)
 80022de:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80022e2:	60da      	str	r2, [r3, #12]
	spectrogram.FrameLen = FRAME_LEN;
 80022e4:	4b1e      	ldr	r3, [pc, #120]	; (8002360 <preprocessing_init+0x164>)
 80022e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022ea:	611a      	str	r2, [r3, #16]
	spectrogram.FFTLen = FFT_LEN;
 80022ec:	4b1c      	ldr	r3, [pc, #112]	; (8002360 <preprocessing_init+0x164>)
 80022ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022f2:	615a      	str	r2, [r3, #20]
	spectrogram.pScratch = spectrogram_scratch_buffer;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	; (8002360 <preprocessing_init+0x164>)
 80022f6:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <preprocessing_init+0x168>)
 80022f8:	619a      	str	r2, [r3, #24]

	/* Init MelSpectrogram */
	mel_spectrogram.SpectrogramConf = &spectrogram;
 80022fa:	4b1b      	ldr	r3, [pc, #108]	; (8002368 <preprocessing_init+0x16c>)
 80022fc:	4a18      	ldr	r2, [pc, #96]	; (8002360 <preprocessing_init+0x164>)
 80022fe:	601a      	str	r2, [r3, #0]
	mel_spectrogram.MelFilter = &mel_filter;
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <preprocessing_init+0x16c>)
 8002302:	4a11      	ldr	r2, [pc, #68]	; (8002348 <preprocessing_init+0x14c>)
 8002304:	605a      	str	r2, [r3, #4]

	/* Init LogMelSpectrogram */
	log_mel_spectrogram.MelSpectrogramConf = &mel_spectrogram;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <preprocessing_init+0x170>)
 8002308:	4a17      	ldr	r2, [pc, #92]	; (8002368 <preprocessing_init+0x16c>)
 800230a:	601a      	str	r2, [r3, #0]
	log_mel_spectrogram.LogFormula = LOGMELSPECTROGRAM_SCALE_DB;
 800230c:	4b17      	ldr	r3, [pc, #92]	; (800236c <preprocessing_init+0x170>)
 800230e:	2200      	movs	r2, #0
 8002310:	711a      	strb	r2, [r3, #4]
	log_mel_spectrogram.Ref = 1.0;
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <preprocessing_init+0x170>)
 8002314:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002318:	609a      	str	r2, [r3, #8]
	log_mel_spectrogram.TopdB = HUGE_VALF;
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <preprocessing_init+0x170>)
 800231c:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 8002320:	60da      	str	r2, [r3, #12]

	/* Init MFCC */
	mfcc.LogMelConf = &log_mel_spectrogram;
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <preprocessing_init+0x174>)
 8002324:	4a11      	ldr	r2, [pc, #68]	; (800236c <preprocessing_init+0x170>)
 8002326:	601a      	str	r2, [r3, #0]
	mfcc.pDCT = &dct;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <preprocessing_init+0x174>)
 800232a:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <preprocessing_init+0x15c>)
 800232c:	605a      	str	r2, [r3, #4]
	mfcc.NumMfccCoefs = NUM_MFCC;
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <preprocessing_init+0x174>)
 8002330:	2210      	movs	r2, #16
 8002332:	609a      	str	r2, [r3, #8]
	mfcc.pScratch = mfcc_scratch_buffer;
 8002334:	4b0e      	ldr	r3, [pc, #56]	; (8002370 <preprocessing_init+0x174>)
 8002336:	4a0f      	ldr	r2, [pc, #60]	; (8002374 <preprocessing_init+0x178>)
 8002338:	60da      	str	r2, [r3, #12]
}
 800233a:	bf00      	nop
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	2000b570 	.word	0x2000b570
 8002344:	20009490 	.word	0x20009490
 8002348:	200094a8 	.word	0x200094a8
 800234c:	20013700 	.word	0x20013700
 8002350:	20013900 	.word	0x20013900
 8002354:	20011770 	.word	0x20011770
 8002358:	200094d8 	.word	0x200094d8
 800235c:	2000f570 	.word	0x2000f570
 8002360:	200094ec 	.word	0x200094ec
 8002364:	2000d570 	.word	0x2000d570
 8002368:	20009508 	.word	0x20009508
 800236c:	20009510 	.word	0x20009510
 8002370:	20009520 	.word	0x20009520
 8002374:	20011570 	.word	0x20011570

08002378 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002380:	e7fe      	b.n	8002380 <Error_Handler+0x8>
	...

08002384 <ServoDriverInit>:
 * 						  hi2cx        				      Pointer to I2C handle
 * 						  _i2caddr				          Address of the Servo Driver
 * Function Return		: NONE
 * Function Example		:   ServoDriverInit(&srv_drv,&hi2c2,0x40);
 */
void ServoDriverInit(Srv_Drv_t *srv_drvx,I2C_HandleTypeDef *hi2cx,uint16_t _i2caddr){
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	80fb      	strh	r3, [r7, #6]

	srv_drvx->_i2caddr = _i2caddr;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	88fa      	ldrh	r2, [r7, #6]
 8002396:	801a      	strh	r2, [r3, #0]
	srv_drvx->hi2cx = hi2cx;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	605a      	str	r2, [r3, #4]

	ServoDriverReset(srv_drvx);
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 f8d2 	bl	8002548 <ServoDriverReset>

	ServoDriverSetPWMFreq(srv_drvx,50);
 80023a4:	ed9f 0a04 	vldr	s0, [pc, #16]	; 80023b8 <ServoDriverInit+0x34>
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f000 f809 	bl	80023c0 <ServoDriverSetPWMFreq>
}
 80023ae:	bf00      	nop
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	42480000 	.word	0x42480000
 80023bc:	00000000 	.word	0x00000000

080023c0 <ServoDriverSetPWMFreq>:
 *						  srv_drvx                         Pointer to Servo Driver struct
 * 						  freq        				      Frequency between 1 and 3500
 * Function Return		: NONE
 * Function Example		:  ServoDriverSetPWMFreq(&srv_drv,1000);
 */
void ServoDriverSetPWMFreq(Srv_Drv_t *srv_drvx,float freq){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	ed87 0a02 	vstr	s0, [r7, #8]

	if(freq<1)
 80023cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80023d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023dc:	d503      	bpl.n	80023e6 <ServoDriverSetPWMFreq+0x26>
		freq=1;
 80023de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	e00a      	b.n	80023fc <ServoDriverSetPWMFreq+0x3c>
	else if(freq>3500)   // Datasheet limit is 3052=50MHz/(4*4096)
 80023e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80023ea:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002528 <ServoDriverSetPWMFreq+0x168>
 80023ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f6:	dd01      	ble.n	80023fc <ServoDriverSetPWMFreq+0x3c>
		freq=3500;
 80023f8:	4b4c      	ldr	r3, [pc, #304]	; (800252c <ServoDriverSetPWMFreq+0x16c>)
 80023fa:	60bb      	str	r3, [r7, #8]

	float prescaleval = ((26000000 / (freq * 4096.0)) + 0.5) - 1;
 80023fc:	68b8      	ldr	r0, [r7, #8]
 80023fe:	f7fe f8b3 	bl	8000568 <__aeabi_f2d>
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	4b4a      	ldr	r3, [pc, #296]	; (8002530 <ServoDriverSetPWMFreq+0x170>)
 8002408:	f7fe f906 	bl	8000618 <__aeabi_dmul>
 800240c:	4602      	mov	r2, r0
 800240e:	460b      	mov	r3, r1
 8002410:	a143      	add	r1, pc, #268	; (adr r1, 8002520 <ServoDriverSetPWMFreq+0x160>)
 8002412:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002416:	f7fe fa29 	bl	800086c <__aeabi_ddiv>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	4b43      	ldr	r3, [pc, #268]	; (8002534 <ServoDriverSetPWMFreq+0x174>)
 8002428:	f7fd ff40 	bl	80002ac <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	4b3f      	ldr	r3, [pc, #252]	; (8002538 <ServoDriverSetPWMFreq+0x178>)
 800243a:	f7fd ff35 	bl	80002a8 <__aeabi_dsub>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4610      	mov	r0, r2
 8002444:	4619      	mov	r1, r3
 8002446:	f7fe fbdf 	bl	8000c08 <__aeabi_d2f>
 800244a:	4603      	mov	r3, r0
 800244c:	617b      	str	r3, [r7, #20]
	  if (prescaleval < PCA9685_PRESCALE_MIN)
 800244e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002452:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002456:	eef4 7ac7 	vcmpe.f32	s15, s14
 800245a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800245e:	d501      	bpl.n	8002464 <ServoDriverSetPWMFreq+0xa4>
	    prescaleval = PCA9685_PRESCALE_MIN;
 8002460:	4b36      	ldr	r3, [pc, #216]	; (800253c <ServoDriverSetPWMFreq+0x17c>)
 8002462:	617b      	str	r3, [r7, #20]
	  if (prescaleval > PCA9685_PRESCALE_MAX)
 8002464:	edd7 7a05 	vldr	s15, [r7, #20]
 8002468:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002540 <ServoDriverSetPWMFreq+0x180>
 800246c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002474:	dd01      	ble.n	800247a <ServoDriverSetPWMFreq+0xba>
	    prescaleval = PCA9685_PRESCALE_MAX;
 8002476:	4b33      	ldr	r3, [pc, #204]	; (8002544 <ServoDriverSetPWMFreq+0x184>)
 8002478:	617b      	str	r3, [r7, #20]
	  uint8_t prescale = (uint8_t)prescaleval;
 800247a:	edd7 7a05 	vldr	s15, [r7, #20]
 800247e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002482:	edc7 7a01 	vstr	s15, [r7, #4]
 8002486:	793b      	ldrb	r3, [r7, #4]
 8002488:	74fb      	strb	r3, [r7, #19]

	  uint8_t oldmode = I2CReadReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6858      	ldr	r0, [r3, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2200      	movs	r2, #0
 8002496:	4619      	mov	r1, r3
 8002498:	f000 f918 	bl	80026cc <I2CReadReg8>
 800249c:	4603      	mov	r3, r0
 800249e:	74bb      	strb	r3, [r7, #18]

	  uint8_t newmode = (oldmode & ~MODE1_RESTART) | MODE1_SLEEP;
 80024a0:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80024a4:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 80024a8:	b25b      	sxtb	r3, r3
 80024aa:	f043 0310 	orr.w	r3, r3, #16
 80024ae:	b25b      	sxtb	r3, r3
 80024b0:	747b      	strb	r3, [r7, #17]


	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,newmode);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6858      	ldr	r0, [r3, #4]
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	b2d9      	uxtb	r1, r3
 80024bc:	7c7b      	ldrb	r3, [r7, #17]
 80024be:	2200      	movs	r2, #0
 80024c0:	f000 f8e0 	bl	8002684 <I2CWriteReg8>

	  HAL_Delay(5);
 80024c4:	2005      	movs	r0, #5
 80024c6:	f003 fdff 	bl	80060c8 <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_PRESCALE,prescale);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6858      	ldr	r0, [r3, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	b2d9      	uxtb	r1, r3
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	22fe      	movs	r2, #254	; 0xfe
 80024d8:	f000 f8d4 	bl	8002684 <I2CWriteReg8>

	  HAL_Delay(5);
 80024dc:	2005      	movs	r0, #5
 80024de:	f003 fdf3 	bl	80060c8 <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,oldmode);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6858      	ldr	r0, [r3, #4]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b2d9      	uxtb	r1, r3
 80024ec:	7cbb      	ldrb	r3, [r7, #18]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f000 f8c8 	bl	8002684 <I2CWriteReg8>

	  HAL_Delay(5);
 80024f4:	2005      	movs	r0, #5
 80024f6:	f003 fde7 	bl	80060c8 <HAL_Delay>

	  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,(oldmode | MODE1_RESTART | MODE1_AI));
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6858      	ldr	r0, [r3, #4]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b2d9      	uxtb	r1, r3
 8002504:	7cbb      	ldrb	r3, [r7, #18]
 8002506:	f063 035f 	orn	r3, r3, #95	; 0x5f
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2200      	movs	r2, #0
 800250e:	f000 f8b9 	bl	8002684 <I2CWriteReg8>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	f3af 8000 	nop.w
 8002520:	00000000 	.word	0x00000000
 8002524:	4178cba8 	.word	0x4178cba8
 8002528:	455ac000 	.word	0x455ac000
 800252c:	455ac000 	.word	0x455ac000
 8002530:	40b00000 	.word	0x40b00000
 8002534:	3fe00000 	.word	0x3fe00000
 8002538:	3ff00000 	.word	0x3ff00000
 800253c:	40400000 	.word	0x40400000
 8002540:	437f0000 	.word	0x437f0000
 8002544:	437f0000 	.word	0x437f0000

08002548 <ServoDriverReset>:
 *
 *						  srv_drvx                         Pointer to Servo Driver struct
 * Function Return		: NONE
 * Function Example		:  ServoDriverReset(&srv_drv);
 */
void ServoDriverReset(Srv_Drv_t *srv_drvx){
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE1,MODE1_RESTART);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6858      	ldr	r0, [r3, #4]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	b2d9      	uxtb	r1, r3
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	2200      	movs	r2, #0
 800255e:	f000 f891 	bl	8002684 <I2CWriteReg8>
//	I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE2,MODE2_OUTDRV);
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <ServoDriverSetOnOff>:
 *						  on 							  Time to set the wave to high from (0 to 4095)
 *						  off                             Time to set the wave to low (0 to 4095)
 * Function Return		: NONE
 * Function Example		:  ServoDriverSetOnOff(&srv_drv,0,0,1024);  // 25% duty cycle
 */
void ServoDriverSetOnOff(Srv_Drv_t *srv_drvx,uint8_t num, uint16_t on, uint16_t off){
 800256a:	b580      	push	{r7, lr}
 800256c:	b088      	sub	sp, #32
 800256e:	af02      	add	r7, sp, #8
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	4608      	mov	r0, r1
 8002574:	4611      	mov	r1, r2
 8002576:	461a      	mov	r2, r3
 8002578:	4603      	mov	r3, r0
 800257a:	72fb      	strb	r3, [r7, #11]
 800257c:	460b      	mov	r3, r1
 800257e:	813b      	strh	r3, [r7, #8]
 8002580:	4613      	mov	r3, r2
 8002582:	80fb      	strh	r3, [r7, #6]

	uint8_t data[5];

	data[0] = 	PCA9685_LED0_ON_L + 4 * num;
 8002584:	7afb      	ldrb	r3, [r7, #11]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	b2db      	uxtb	r3, r3
 800258a:	3306      	adds	r3, #6
 800258c:	b2db      	uxtb	r3, r3
 800258e:	743b      	strb	r3, [r7, #16]
	data[1] = on;
 8002590:	893b      	ldrh	r3, [r7, #8]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	747b      	strb	r3, [r7, #17]
	data[2] = on >> 8;
 8002596:	893b      	ldrh	r3, [r7, #8]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	b29b      	uxth	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	74bb      	strb	r3, [r7, #18]
	data[3] = off;
 80025a0:	88fb      	ldrh	r3, [r7, #6]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	74fb      	strb	r3, [r7, #19]
	data[4] = off >> 8;
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	753b      	strb	r3, [r7, #20]

	HAL_I2C_Master_Transmit(srv_drvx->hi2cx,srv_drvx->_i2caddr<<1,data,5,100);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6858      	ldr	r0, [r3, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	b299      	uxth	r1, r3
 80025bc:	f107 0210 	add.w	r2, r7, #16
 80025c0:	2364      	movs	r3, #100	; 0x64
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2305      	movs	r3, #5
 80025c6:	f004 fe2d 	bl	8007224 <HAL_I2C_Master_Transmit>
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <ServoDriverSetPWM>:
 *						  val 							  Time to set active from (0 to 4095)
 *						  invert                          0 or 1 inverts the duty cycle
 * Function Return		: NONE
 * Function Example		: ServoDriverSetPWM(&srv_drv,0,1024,0);  // 25% duty cycle
 */
void ServoDriverSetPWM(Srv_Drv_t *srv_drvx,uint8_t num, uint16_t val, int invert) {
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b084      	sub	sp, #16
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	72fb      	strb	r3, [r7, #11]
 80025e0:	4613      	mov	r3, r2
 80025e2:	813b      	strh	r3, [r7, #8]

  // Clamp value between 0 and 4095 inclusive.
  if(val>4095)
 80025e4:	893b      	ldrh	r3, [r7, #8]
 80025e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ea:	d302      	bcc.n	80025f2 <ServoDriverSetPWM+0x20>
	  val=4095;
 80025ec:	f640 73ff 	movw	r3, #4095	; 0xfff
 80025f0:	813b      	strh	r3, [r7, #8]
  else if(val<0)
	  val=0;

  if (invert) {
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d022      	beq.n	800263e <ServoDriverSetPWM+0x6c>
    if (val == 0) {
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d107      	bne.n	800260e <ServoDriverSetPWM+0x3c>
      // Special value for signal fully on.
    	ServoDriverSetOnOff(srv_drvx,num, 4096, 0);
 80025fe:	7af9      	ldrb	r1, [r7, #11]
 8002600:	2300      	movs	r3, #0
 8002602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f7ff ffaf 	bl	800256a <ServoDriverSetOnOff>
    	ServoDriverSetOnOff(srv_drvx,num, 0, 4096);
    } else {
    	ServoDriverSetOnOff(srv_drvx,num, 0, val);
    }
  }
}
 800260c:	e035      	b.n	800267a <ServoDriverSetPWM+0xa8>
    } else if (val == 4095) {
 800260e:	893b      	ldrh	r3, [r7, #8]
 8002610:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002614:	4293      	cmp	r3, r2
 8002616:	d107      	bne.n	8002628 <ServoDriverSetPWM+0x56>
    	ServoDriverSetOnOff(srv_drvx,num, 0, 4096);
 8002618:	7af9      	ldrb	r1, [r7, #11]
 800261a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800261e:	2200      	movs	r2, #0
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7ff ffa2 	bl	800256a <ServoDriverSetOnOff>
}
 8002626:	e028      	b.n	800267a <ServoDriverSetPWM+0xa8>
    	ServoDriverSetOnOff(srv_drvx,num, 0, 4095 - val);
 8002628:	893b      	ldrh	r3, [r7, #8]
 800262a:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 800262e:	330f      	adds	r3, #15
 8002630:	b29b      	uxth	r3, r3
 8002632:	7af9      	ldrb	r1, [r7, #11]
 8002634:	2200      	movs	r2, #0
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff ff97 	bl	800256a <ServoDriverSetOnOff>
}
 800263c:	e01d      	b.n	800267a <ServoDriverSetPWM+0xa8>
    if (val == 4095) {
 800263e:	893b      	ldrh	r3, [r7, #8]
 8002640:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002644:	4293      	cmp	r3, r2
 8002646:	d107      	bne.n	8002658 <ServoDriverSetPWM+0x86>
    	ServoDriverSetOnOff(srv_drvx,num, 4096, 0);
 8002648:	7af9      	ldrb	r1, [r7, #11]
 800264a:	2300      	movs	r3, #0
 800264c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002650:	68f8      	ldr	r0, [r7, #12]
 8002652:	f7ff ff8a 	bl	800256a <ServoDriverSetOnOff>
}
 8002656:	e010      	b.n	800267a <ServoDriverSetPWM+0xa8>
    } else if (val == 0) {
 8002658:	893b      	ldrh	r3, [r7, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d107      	bne.n	800266e <ServoDriverSetPWM+0x9c>
    	ServoDriverSetOnOff(srv_drvx,num, 0, 4096);
 800265e:	7af9      	ldrb	r1, [r7, #11]
 8002660:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002664:	2200      	movs	r2, #0
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f7ff ff7f 	bl	800256a <ServoDriverSetOnOff>
}
 800266c:	e005      	b.n	800267a <ServoDriverSetPWM+0xa8>
    	ServoDriverSetOnOff(srv_drvx,num, 0, val);
 800266e:	893b      	ldrh	r3, [r7, #8]
 8002670:	7af9      	ldrb	r1, [r7, #11]
 8002672:	2200      	movs	r2, #0
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f7ff ff78 	bl	800256a <ServoDriverSetOnOff>
}
 800267a:	bf00      	nop
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <I2CWriteReg8>:
  I2CWriteReg8(srv_drvx->hi2cx,srv_drvx->_i2caddr,PCA9685_MODE2,newmode);

}

void I2CWriteReg8(I2C_HandleTypeDef *hi2cx, uint8_t slave_addr,uint8_t register_pointer, uint8_t register_value)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af04      	add	r7, sp, #16
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	461a      	mov	r2, r3
 8002692:	4603      	mov	r3, r0
 8002694:	70fb      	strb	r3, [r7, #3]
 8002696:	460b      	mov	r3, r1
 8002698:	70bb      	strb	r3, [r7, #2]
 800269a:	4613      	mov	r3, r2
 800269c:	707b      	strb	r3, [r7, #1]

    if(HAL_I2C_Mem_Write(hi2cx,slave_addr<<1,(uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, (uint8_t*)(&register_value), 1, I2C_LONG_TIMEOUT) != HAL_OK)
 800269e:	78fb      	ldrb	r3, [r7, #3]
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	b299      	uxth	r1, r3
 80026a6:	78bb      	ldrb	r3, [r7, #2]
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <I2CWriteReg8+0x44>)
 80026ac:	9302      	str	r3, [sp, #8]
 80026ae:	2301      	movs	r3, #1
 80026b0:	9301      	str	r3, [sp, #4]
 80026b2:	1c7b      	adds	r3, r7, #1
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2301      	movs	r3, #1
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f004 feb1 	bl	8007420 <HAL_I2C_Mem_Write>
    {
        // Error handling, for example re-initialization of the I2C peripheral
    }
}
 80026be:	bf00      	nop
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	57300000 	.word	0x57300000

080026cc <I2CReadReg8>:

uint8_t I2CReadReg8(I2C_HandleTypeDef *hi2cx, uint8_t slave_addr,uint8_t register_pointer)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b088      	sub	sp, #32
 80026d0:	af04      	add	r7, sp, #16
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	70fb      	strb	r3, [r7, #3]
 80026d8:	4613      	mov	r3, r2
 80026da:	70bb      	strb	r3, [r7, #2]
	    uint8_t return_value;

	    /* Check the communication status */
	    if(HAL_I2C_Mem_Read(hi2cx,slave_addr<<1, (uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, I2C_LONG_TIMEOUT) != HAL_OK)
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	b299      	uxth	r1, r3
 80026e4:	78bb      	ldrb	r3, [r7, #2]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <I2CReadReg8+0x3c>)
 80026ea:	9302      	str	r3, [sp, #8]
 80026ec:	2301      	movs	r3, #1
 80026ee:	9301      	str	r3, [sp, #4]
 80026f0:	f107 030f 	add.w	r3, r7, #15
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2301      	movs	r3, #1
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f004 ff8b 	bl	8007614 <HAL_I2C_Mem_Read>
	    {
	    	//Error handling, for example re-initialization of the I2C peripheral
	    }

	    return return_value;
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3710      	adds	r7, #16
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	57300000 	.word	0x57300000

0800270c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	4b10      	ldr	r3, [pc, #64]	; (8002758 <HAL_MspInit+0x4c>)
 8002718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271a:	4a0f      	ldr	r2, [pc, #60]	; (8002758 <HAL_MspInit+0x4c>)
 800271c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002720:	6453      	str	r3, [r2, #68]	; 0x44
 8002722:	4b0d      	ldr	r3, [pc, #52]	; (8002758 <HAL_MspInit+0x4c>)
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	603b      	str	r3, [r7, #0]
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_MspInit+0x4c>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_MspInit+0x4c>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_MspInit+0x4c>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800

0800275c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a0b      	ldr	r2, [pc, #44]	; (8002798 <HAL_CRC_MspInit+0x3c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10d      	bne.n	800278a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
 8002772:	4b0a      	ldr	r3, [pc, #40]	; (800279c <HAL_CRC_MspInit+0x40>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a09      	ldr	r2, [pc, #36]	; (800279c <HAL_CRC_MspInit+0x40>)
 8002778:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_CRC_MspInit+0x40>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40023000 	.word	0x40023000
 800279c:	40023800 	.word	0x40023800

080027a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b08c      	sub	sp, #48	; 0x30
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a8:	f107 031c 	add.w	r3, r7, #28
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	605a      	str	r2, [r3, #4]
 80027b2:	609a      	str	r2, [r3, #8]
 80027b4:	60da      	str	r2, [r3, #12]
 80027b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a42      	ldr	r2, [pc, #264]	; (80028c8 <HAL_I2C_MspInit+0x128>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d12c      	bne.n	800281c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	4a40      	ldr	r2, [pc, #256]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 80027cc:	f043 0302 	orr.w	r3, r3, #2
 80027d0:	6313      	str	r3, [r2, #48]	; 0x30
 80027d2:	4b3e      	ldr	r3, [pc, #248]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	61bb      	str	r3, [r7, #24]
 80027dc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027de:	23c0      	movs	r3, #192	; 0xc0
 80027e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e2:	2312      	movs	r3, #18
 80027e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e6:	2300      	movs	r3, #0
 80027e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ea:	2303      	movs	r3, #3
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ee:	2304      	movs	r3, #4
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f2:	f107 031c 	add.w	r3, r7, #28
 80027f6:	4619      	mov	r1, r3
 80027f8:	4835      	ldr	r0, [pc, #212]	; (80028d0 <HAL_I2C_MspInit+0x130>)
 80027fa:	f004 f9f5 	bl	8006be8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	4b32      	ldr	r3, [pc, #200]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	4a31      	ldr	r2, [pc, #196]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 8002808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800280c:	6413      	str	r3, [r2, #64]	; 0x40
 800280e:	4b2f      	ldr	r3, [pc, #188]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002816:	617b      	str	r3, [r7, #20]
 8002818:	697b      	ldr	r3, [r7, #20]
      /* USER CODE BEGIN I2C3_MspInit 1 */

      /* USER CODE END I2C3_MspInit 1 */
  }

}
 800281a:	e050      	b.n	80028be <HAL_I2C_MspInit+0x11e>
  else if (hi2c->Instance == I2C3)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2c      	ldr	r2, [pc, #176]	; (80028d4 <HAL_I2C_MspInit+0x134>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d14b      	bne.n	80028be <HAL_I2C_MspInit+0x11e>
      __HAL_RCC_GPIOC_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	4b28      	ldr	r3, [pc, #160]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282e:	4a27      	ldr	r2, [pc, #156]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 8002830:	f043 0304 	orr.w	r3, r3, #4
 8002834:	6313      	str	r3, [r2, #48]	; 0x30
 8002836:	4b25      	ldr	r3, [pc, #148]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	f003 0304 	and.w	r3, r3, #4
 800283e:	613b      	str	r3, [r7, #16]
 8002840:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_GPIOA_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	4b21      	ldr	r3, [pc, #132]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a20      	ldr	r2, [pc, #128]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 800284c:	f043 0301 	orr.w	r3, r3, #1
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b1e      	ldr	r3, [pc, #120]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
      GPIO_InitStruct.Pin = GPIO_PIN_9;
 800285e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002862:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002864:	2312      	movs	r3, #18
 8002866:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002870:	2304      	movs	r3, #4
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
      HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	4619      	mov	r1, r3
 800287a:	4817      	ldr	r0, [pc, #92]	; (80028d8 <HAL_I2C_MspInit+0x138>)
 800287c:	f004 f9b4 	bl	8006be8 <HAL_GPIO_Init>
      GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002880:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002884:	61fb      	str	r3, [r7, #28]
      GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002886:	2312      	movs	r3, #18
 8002888:	623b      	str	r3, [r7, #32]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
      GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002892:	2304      	movs	r3, #4
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
      HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	480f      	ldr	r0, [pc, #60]	; (80028dc <HAL_I2C_MspInit+0x13c>)
 800289e:	f004 f9a3 	bl	8006be8 <HAL_GPIO_Init>
      __HAL_RCC_I2C3_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	4a08      	ldr	r2, [pc, #32]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 80028ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028b0:	6413      	str	r3, [r2, #64]	; 0x40
 80028b2:	4b06      	ldr	r3, [pc, #24]	; (80028cc <HAL_I2C_MspInit+0x12c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ba:	60bb      	str	r3, [r7, #8]
 80028bc:	68bb      	ldr	r3, [r7, #8]
}
 80028be:	bf00      	nop
 80028c0:	3730      	adds	r7, #48	; 0x30
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40005400 	.word	0x40005400
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020400 	.word	0x40020400
 80028d4:	40005c00 	.word	0x40005c00
 80028d8:	40020800 	.word	0x40020800
 80028dc:	40020000 	.word	0x40020000

080028e0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08e      	sub	sp, #56	; 0x38
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	605a      	str	r2, [r3, #4]
 80028f2:	609a      	str	r2, [r3, #8]
 80028f4:	60da      	str	r2, [r3, #12]
 80028f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a4a      	ldr	r2, [pc, #296]	; (8002a34 <HAL_I2S_MspInit+0x154>)
 800290c:	4293      	cmp	r3, r2
 800290e:	f040 808c 	bne.w	8002a2a <HAL_I2S_MspInit+0x14a>
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002912:	2301      	movs	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002916:	23c0      	movs	r3, #192	; 0xc0
 8002918:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 800291a:	2305      	movs	r3, #5
 800291c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800291e:	f107 0314 	add.w	r3, r7, #20
 8002922:	4618      	mov	r0, r3
 8002924:	f007 f8c4 	bl	8009ab0 <HAL_RCCEx_PeriphCLKConfig>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800292e:	f7ff fd23 	bl	8002378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	4b40      	ldr	r3, [pc, #256]	; (8002a38 <HAL_I2S_MspInit+0x158>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a3f      	ldr	r2, [pc, #252]	; (8002a38 <HAL_I2S_MspInit+0x158>)
 800293c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b3d      	ldr	r3, [pc, #244]	; (8002a38 <HAL_I2S_MspInit+0x158>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800294a:	613b      	str	r3, [r7, #16]
 800294c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_I2S_MspInit+0x158>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	4a38      	ldr	r2, [pc, #224]	; (8002a38 <HAL_I2S_MspInit+0x158>)
 8002958:	f043 0304 	orr.w	r3, r3, #4
 800295c:	6313      	str	r3, [r2, #48]	; 0x30
 800295e:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <HAL_I2S_MspInit+0x158>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <HAL_I2S_MspInit+0x158>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	4a31      	ldr	r2, [pc, #196]	; (8002a38 <HAL_I2S_MspInit+0x158>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6313      	str	r3, [r2, #48]	; 0x30
 800297a:	4b2f      	ldr	r3, [pc, #188]	; (8002a38 <HAL_I2S_MspInit+0x158>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002986:	2308      	movs	r3, #8
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002996:	2305      	movs	r3, #5
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800299a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299e:	4619      	mov	r1, r3
 80029a0:	4826      	ldr	r0, [pc, #152]	; (8002a3c <HAL_I2S_MspInit+0x15c>)
 80029a2:	f004 f921 	bl	8006be8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80029a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029b8:	2305      	movs	r3, #5
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c0:	4619      	mov	r1, r3
 80029c2:	481f      	ldr	r0, [pc, #124]	; (8002a40 <HAL_I2S_MspInit+0x160>)
 80029c4:	f004 f910 	bl	8006be8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80029c8:	4b1e      	ldr	r3, [pc, #120]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 80029ca:	4a1f      	ldr	r2, [pc, #124]	; (8002a48 <HAL_I2S_MspInit+0x168>)
 80029cc:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80029ce:	4b1d      	ldr	r3, [pc, #116]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029da:	4b1a      	ldr	r3, [pc, #104]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 80029dc:	2200      	movs	r2, #0
 80029de:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e0:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 80029e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029e6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029e8:	4b16      	ldr	r3, [pc, #88]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 80029ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ee:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 80029f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029f6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80029f8:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 80029fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029fe:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 8002a02:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a06:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002a0e:	480d      	ldr	r0, [pc, #52]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 8002a10:	f003 fcac 	bl	800636c <HAL_DMA_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8002a1a:	f7ff fcad 	bl	8002378 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a08      	ldr	r2, [pc, #32]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 8002a22:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a24:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <HAL_I2S_MspInit+0x164>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002a2a:	bf00      	nop
 8002a2c:	3738      	adds	r7, #56	; 0x38
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40003800 	.word	0x40003800
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40020800 	.word	0x40020800
 8002a40:	40020400 	.word	0x40020400
 8002a44:	2000934c 	.word	0x2000934c
 8002a48:	40026058 	.word	0x40026058

08002a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b08a      	sub	sp, #40	; 0x28
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a54:	f107 0314 	add.w	r3, r7, #20
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	605a      	str	r2, [r3, #4]
 8002a5e:	609a      	str	r2, [r3, #8]
 8002a60:	60da      	str	r2, [r3, #12]
 8002a62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_SPI_MspInit+0x84>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d12b      	bne.n	8002ac6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_SPI_MspInit+0x88>)
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4a17      	ldr	r2, [pc, #92]	; (8002ad4 <HAL_SPI_MspInit+0x88>)
 8002a78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a7e:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_SPI_MspInit+0x88>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <HAL_SPI_MspInit+0x88>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a92:	4a10      	ldr	r2, [pc, #64]	; (8002ad4 <HAL_SPI_MspInit+0x88>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	6313      	str	r3, [r2, #48]	; 0x30
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <HAL_SPI_MspInit+0x88>)
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002aa6:	23e0      	movs	r3, #224	; 0xe0
 8002aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aaa:	2302      	movs	r3, #2
 8002aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ab6:	2305      	movs	r3, #5
 8002ab8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aba:	f107 0314 	add.w	r3, r7, #20
 8002abe:	4619      	mov	r1, r3
 8002ac0:	4805      	ldr	r0, [pc, #20]	; (8002ad8 <HAL_SPI_MspInit+0x8c>)
 8002ac2:	f004 f891 	bl	8006be8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ac6:	bf00      	nop
 8002ac8:	3728      	adds	r7, #40	; 0x28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40013000 	.word	0x40013000
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40020000 	.word	0x40020000

08002adc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <HAL_UART_MspInit+0x94>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d133      	bne.n	8002b66 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <HAL_UART_MspInit+0x98>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	4a1b      	ldr	r2, [pc, #108]	; (8002b74 <HAL_UART_MspInit+0x98>)
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b0e:	4b19      	ldr	r3, [pc, #100]	; (8002b74 <HAL_UART_MspInit+0x98>)
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b15      	ldr	r3, [pc, #84]	; (8002b74 <HAL_UART_MspInit+0x98>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <HAL_UART_MspInit+0x98>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <HAL_UART_MspInit+0x98>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b36:	230c      	movs	r3, #12
 8002b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b42:	2303      	movs	r3, #3
 8002b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b46:	2307      	movs	r3, #7
 8002b48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b4a:	f107 0314 	add.w	r3, r7, #20
 8002b4e:	4619      	mov	r1, r3
 8002b50:	4809      	ldr	r0, [pc, #36]	; (8002b78 <HAL_UART_MspInit+0x9c>)
 8002b52:	f004 f849 	bl	8006be8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2100      	movs	r1, #0
 8002b5a:	2026      	movs	r0, #38	; 0x26
 8002b5c:	f003 fbb3 	bl	80062c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b60:	2026      	movs	r0, #38	; 0x26
 8002b62:	f003 fbcc 	bl	80062fe <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b66:	bf00      	nop
 8002b68:	3728      	adds	r7, #40	; 0x28
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40004400 	.word	0x40004400
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40020000 	.word	0x40020000

08002b7c <HAL_TIM_Base_MspInit>:

}

/* USER CODE BEGIN 1 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
    if (htim_base->Instance == TIM6)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <HAL_TIM_Base_MspInit+0x48>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d115      	bne.n	8002bba <HAL_TIM_Base_MspInit+0x3e>
    {
        /* USER CODE BEGIN TIM6_MspInit 0 */

        /* USER CODE END TIM6_MspInit 0 */
        /* Peripheral clock enable */
        __HAL_RCC_TIM6_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
 8002b92:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <HAL_TIM_Base_MspInit+0x4c>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a0c      	ldr	r2, [pc, #48]	; (8002bc8 <HAL_TIM_Base_MspInit+0x4c>)
 8002b98:	f043 0310 	orr.w	r3, r3, #16
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b0a      	ldr	r3, [pc, #40]	; (8002bc8 <HAL_TIM_Base_MspInit+0x4c>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
        /* TIM6 interrupt Init */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002baa:	2200      	movs	r2, #0
 8002bac:	2100      	movs	r1, #0
 8002bae:	2036      	movs	r0, #54	; 0x36
 8002bb0:	f003 fb89 	bl	80062c6 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002bb4:	2036      	movs	r0, #54	; 0x36
 8002bb6:	f003 fba2 	bl	80062fe <HAL_NVIC_EnableIRQ>
        /* USER CODE BEGIN TIM6_MspInit 1 */

        /* USER CODE END TIM6_MspInit 1 */
    }
}
 8002bba:	bf00      	nop
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40001000 	.word	0x40001000
 8002bc8:	40023800 	.word	0x40023800

08002bcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd0:	e7fe      	b.n	8002bd0 <NMI_Handler+0x4>

08002bd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bd6:	e7fe      	b.n	8002bd6 <HardFault_Handler+0x4>

08002bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bdc:	e7fe      	b.n	8002bdc <MemManage_Handler+0x4>

08002bde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bde:	b480      	push	{r7}
 8002be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002be2:	e7fe      	b.n	8002be2 <BusFault_Handler+0x4>

08002be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be8:	e7fe      	b.n	8002be8 <UsageFault_Handler+0x4>

08002bea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bea:	b480      	push	{r7}
 8002bec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c06:	b480      	push	{r7}
 8002c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c0a:	bf00      	nop
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c18:	f003 fa36 	bl	8006088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1c:	bf00      	nop
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002c24:	2001      	movs	r0, #1
 8002c26:	f004 f995 	bl	8006f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002c34:	4802      	ldr	r0, [pc, #8]	; (8002c40 <DMA1_Stream3_IRQHandler+0x10>)
 8002c36:	f003 fd6d 	bl	8006714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	2000934c 	.word	0x2000934c

08002c44 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <TIM6_DAC_IRQHandler+0x10>)
 8002c4a:	f007 f9e3 	bl	800a014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20009448 	.word	0x20009448

08002c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c60:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <_sbrk+0x5c>)
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <_sbrk+0x60>)
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <_sbrk+0x64>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <_sbrk+0x64>)
 8002c76:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <_sbrk+0x68>)
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <_sbrk+0x64>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d207      	bcs.n	8002c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c88:	f00f fa7a 	bl	8012180 <__errno>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	220c      	movs	r2, #12
 8002c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	e009      	b.n	8002cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4a05      	ldr	r2, [pc, #20]	; (8002cbc <_sbrk+0x64>)
 8002ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20020000 	.word	0x20020000
 8002cb8:	00000800 	.word	0x00000800
 8002cbc:	20013b40 	.word	0x20013b40
 8002cc0:	20013db0 	.word	0x20013db0

08002cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <SystemInit+0x20>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	4a05      	ldr	r2, [pc, #20]	; (8002ce4 <SystemInit+0x20>)
 8002cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cec:	480d      	ldr	r0, [pc, #52]	; (8002d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cee:	490e      	ldr	r1, [pc, #56]	; (8002d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cf0:	4a0e      	ldr	r2, [pc, #56]	; (8002d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cf4:	e002      	b.n	8002cfc <LoopCopyDataInit>

08002cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cfa:	3304      	adds	r3, #4

08002cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d00:	d3f9      	bcc.n	8002cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d02:	4a0b      	ldr	r2, [pc, #44]	; (8002d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d04:	4c0b      	ldr	r4, [pc, #44]	; (8002d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d08:	e001      	b.n	8002d0e <LoopFillZerobss>

08002d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d0c:	3204      	adds	r2, #4

08002d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d10:	d3fb      	bcc.n	8002d0a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d12:	f7ff ffd7 	bl	8002cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d16:	f00f fa4b 	bl	80121b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d1a:	f7fe fcdb 	bl	80016d4 <main>
  bx  lr    
 8002d1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d28:	200010b4 	.word	0x200010b4
  ldr r2, =_sidata
 8002d2c:	08063078 	.word	0x08063078
  ldr r2, =_sbss
 8002d30:	200010b4 	.word	0x200010b4
  ldr r4, =_ebss
 8002d34:	20013db0 	.word	0x20013db0

08002d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d38:	e7fe      	b.n	8002d38 <ADC_IRQHandler>
	...

08002d3c <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	; 0x30
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002d46:	79fb      	ldrb	r3, [r7, #7]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10e      	bne.n	8002d6a <BSP_LED_Init+0x2e>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	61bb      	str	r3, [r7, #24]
 8002d50:	4b33      	ldr	r3, [pc, #204]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d54:	4a32      	ldr	r2, [pc, #200]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002d56:	f043 0308 	orr.w	r3, r3, #8
 8002d5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5c:	4b30      	ldr	r3, [pc, #192]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	f003 0308 	and.w	r3, r3, #8
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	e034      	b.n	8002dd4 <BSP_LED_Init+0x98>
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d10e      	bne.n	8002d8e <BSP_LED_Init+0x52>
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	4a29      	ldr	r2, [pc, #164]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002d7a:	f043 0308 	orr.w	r3, r3, #8
 8002d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	e022      	b.n	8002dd4 <BSP_LED_Init+0x98>
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d10e      	bne.n	8002db2 <BSP_LED_Init+0x76>
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002d9e:	f043 0308 	orr.w	r3, r3, #8
 8002da2:	6313      	str	r3, [r2, #48]	; 0x30
 8002da4:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	f003 0308 	and.w	r3, r3, #8
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	e010      	b.n	8002dd4 <BSP_LED_Init+0x98>
 8002db2:	79fb      	ldrb	r3, [r7, #7]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d10d      	bne.n	8002dd4 <BSP_LED_Init+0x98>
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	4a17      	ldr	r2, [pc, #92]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002dc2:	f043 0308 	orr.w	r3, r3, #8
 8002dc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc8:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <BSP_LED_Init+0xe4>)
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	f003 0308 	and.w	r3, r3, #8
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	4a13      	ldr	r2, [pc, #76]	; (8002e24 <BSP_LED_Init+0xe8>)
 8002dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ddc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002dde:	2301      	movs	r3, #1
 8002de0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002de2:	2301      	movs	r3, #1
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002de6:	2302      	movs	r3, #2
 8002de8:	62bb      	str	r3, [r7, #40]	; 0x28
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002dea:	79fb      	ldrb	r3, [r7, #7]
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <BSP_LED_Init+0xec>)
 8002dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df2:	f107 021c 	add.w	r2, r7, #28
 8002df6:	4611      	mov	r1, r2
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f003 fef5 	bl	8006be8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002dfe:	79fb      	ldrb	r3, [r7, #7]
 8002e00:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <BSP_LED_Init+0xec>)
 8002e02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002e06:	79fb      	ldrb	r3, [r7, #7]
 8002e08:	4a06      	ldr	r2, [pc, #24]	; (8002e24 <BSP_LED_Init+0xe8>)
 8002e0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	4619      	mov	r1, r3
 8002e12:	f004 f885 	bl	8006f20 <HAL_GPIO_WritePin>
}
 8002e16:	bf00      	nop
 8002e18:	3730      	adds	r7, #48	; 0x30
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	0801a188 	.word	0x0801a188
 8002e28:	200004a4 	.word	0x200004a4

08002e2c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef Mode)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b088      	sub	sp, #32
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	460a      	mov	r2, r1
 8002e36:	71fb      	strb	r3, [r7, #7]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8002e3c:	79fb      	ldrb	r3, [r7, #7]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10d      	bne.n	8002e5e <BSP_PB_Init+0x32>
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <BSP_PB_Init+0xa8>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4a:	4a22      	ldr	r2, [pc, #136]	; (8002ed4 <BSP_PB_Init+0xa8>)
 8002e4c:	f043 0301 	orr.w	r3, r3, #1
 8002e50:	6313      	str	r3, [r2, #48]	; 0x30
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <BSP_PB_Init+0xa8>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	60bb      	str	r3, [r7, #8]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
  
  if (Mode == BUTTON_MODE_GPIO)
 8002e5e:	79bb      	ldrb	r3, [r7, #6]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d111      	bne.n	8002e88 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002e64:	2301      	movs	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002e70:	2302      	movs	r3, #2
 8002e72:	61bb      	str	r3, [r7, #24]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <BSP_PB_Init+0xac>)
 8002e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e7c:	f107 020c 	add.w	r2, r7, #12
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f003 feb0 	bl	8006be8 <HAL_GPIO_Init>
  }
  
  if (Mode == BUTTON_MODE_EXTI)
 8002e88:	79bb      	ldrb	r3, [r7, #6]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d11e      	bne.n	8002ecc <BSP_PB_Init+0xa0>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8002e8e:	2301      	movs	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002e96:	2302      	movs	r3, #2
 8002e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8002e9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002e9e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	4a0d      	ldr	r2, [pc, #52]	; (8002ed8 <BSP_PB_Init+0xac>)
 8002ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea8:	f107 020c 	add.w	r2, r7, #12
 8002eac:	4611      	mov	r1, r2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f003 fe9a 	bl	8006be8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0);
 8002eb4:	2306      	movs	r3, #6
 8002eb6:	b25b      	sxtb	r3, r3
 8002eb8:	2200      	movs	r2, #0
 8002eba:	210f      	movs	r1, #15
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f003 fa02 	bl	80062c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8002ec2:	2306      	movs	r3, #6
 8002ec4:	b25b      	sxtb	r3, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f003 fa19 	bl	80062fe <HAL_NVIC_EnableIRQ>
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3720      	adds	r7, #32
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	200004b4 	.word	0x200004b4

08002edc <HAL_I2S_TxCpltCallback>:

/**
 * @brief  Tx Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	if (hi2s->Instance == I2S3) {
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a04      	ldr	r2, [pc, #16]	; (8002efc <HAL_I2S_TxCpltCallback+0x20>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2S_TxCpltCallback+0x16>
		/* Call the user function which will manage directly transfer complete */
		BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002eee:	f000 f807 	bl	8002f00 <BSP_AUDIO_OUT_TransferComplete_CallBack>
	}
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40003c00 	.word	0x40003c00

08002f00 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
}

/**
 * @brief  Manages the DMA full Transfer complete event.
 */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void) {
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
}
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <BSP_AUDIO_OUT_Error_CallBack>:
}

/**
 * @brief  Manages the DMA FIFO error event.
 */
__weak void BSP_AUDIO_OUT_Error_CallBack(void) {
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0
}
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <BSP_AUDIO_IN_Init>:
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 * @param  BitRes: Audio frequency to be configured for the I2S peripheral.
 * @param  ChnlNbr: Audio frequency to be configured for the I2S peripheral.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Init(uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]

	/* Configure PLL clock */
	BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8002f28:	2200      	movs	r2, #0
 8002f2a:	68f9      	ldr	r1, [r7, #12]
 8002f2c:	480e      	ldr	r0, [pc, #56]	; (8002f68 <BSP_AUDIO_IN_Init+0x4c>)
 8002f2e:	f000 f8b7 	bl	80030a0 <BSP_AUDIO_IN_ClockConfig>

	/* Configure the PDM library */
	/* On STM32F4-Discovery a single microphone is mounted, samples are duplicated
	 to make stereo audio streams */
	PDMDecoder_Init(AudioFreq, ChnlNbr, 1);
 8002f32:	2201      	movs	r2, #1
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f98c 	bl	8003254 <PDMDecoder_Init>

	/* Configure the I2S peripheral */
	hAudioInI2s.Instance = I2S2;
 8002f3c:	4b0a      	ldr	r3, [pc, #40]	; (8002f68 <BSP_AUDIO_IN_Init+0x4c>)
 8002f3e:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <BSP_AUDIO_IN_Init+0x50>)
 8002f40:	601a      	str	r2, [r3, #0]
	if (HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET) {
 8002f42:	4809      	ldr	r0, [pc, #36]	; (8002f68 <BSP_AUDIO_IN_Init+0x4c>)
 8002f44:	f005 fd40 	bl	80089c8 <HAL_I2S_GetState>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d103      	bne.n	8002f56 <BSP_AUDIO_IN_Init+0x3a>
		/* Initialize the I2S Msp: this __weak function can be rewritten by the application */
		BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 8002f4e:	2100      	movs	r1, #0
 8002f50:	4805      	ldr	r0, [pc, #20]	; (8002f68 <BSP_AUDIO_IN_Init+0x4c>)
 8002f52:	f000 f8d1 	bl	80030f8 <BSP_AUDIO_IN_MspInit>
	}

	/* Configure the I2S2 */
	I2S2_Init(AudioFreq);
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fa18 	bl	800338c <I2S2_Init>

	/* Return AUDIO_OK when all operations are correctly done */
	return AUDIO_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20013b44 	.word	0x20013b44
 8002f6c:	40003800 	.word	0x40003800

08002f70 <BSP_AUDIO_IN_Record>:
 * @brief  Starts audio recording.
 * @param  pbuf: Main buffer pointer for the recorded data storing
 * @param  size: Current size of the recorded buffer
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Record(uint16_t *pbuf, uint32_t size) {
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
	uint32_t ret = AUDIO_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	60fb      	str	r3, [r7, #12]

	/* Start the process receive DMA */
	HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	461a      	mov	r2, r3
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4805      	ldr	r0, [pc, #20]	; (8002f9c <BSP_AUDIO_IN_Record+0x2c>)
 8002f88:	f005 fa88 	bl	800849c <HAL_I2S_Receive_DMA>

	/* Return AUDIO_OK when all operations are correctly done */
	ret = AUDIO_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]

	return ret;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	b2db      	uxtb	r3, r3
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	20013b44 	.word	0x20013b44

08002fa0 <BSP_AUDIO_IN_Stop>:

/**
 * @brief  Stops audio recording.
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_Stop(void) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
	uint32_t ret = AUDIO_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	607b      	str	r3, [r7, #4]

	/* Call the Media layer pause function */
	HAL_I2S_DMAStop(&hAudioInI2s);
 8002faa:	4805      	ldr	r0, [pc, #20]	; (8002fc0 <BSP_AUDIO_IN_Stop+0x20>)
 8002fac:	f005 fb32 	bl	8008614 <HAL_I2S_DMAStop>

	/* Return AUDIO_OK when all operations are correctly done */
	ret = AUDIO_OK;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	607b      	str	r3, [r7, #4]

	return ret;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	b2db      	uxtb	r3, r3
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3708      	adds	r7, #8
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20013b44 	.word	0x20013b44

08002fc4 <BSP_AUDIO_IN_PDMToPCM>:
 * @brief  Converts audio format from PDM to PCM.
 * @param  PDMBuf: Pointer to data PDM buffer
 * @param  PCMBuf: Pointer to data PCM buffer
 * @retval AUDIO_OK if correct communication, else wrong communication
 */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf) {
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b0a4      	sub	sp, #144	; 0x90
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
	// INTERNAL_BUFF_SIZE / 2 = 128 / 2 = 64
	uint16_t AppPDM[PDM_BUFFER_SIZE / 2];
	uint32_t index = 0;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	/* PDM Demux */
	for (index = 0; index < PDM_BUFFER_SIZE / 2; index++) {
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002fda:	e01f      	b.n	800301c <BSP_AUDIO_IN_PDMToPCM+0x58>
		AppPDM[index] = HTONS(PDMBuf[index]);
 8002fdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002fe0:	005b      	lsls	r3, r3, #1
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	881b      	ldrh	r3, [r3, #0]
 8002fe8:	0a1b      	lsrs	r3, r3, #8
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	b21a      	sxth	r2, r3
 8002fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	440b      	add	r3, r1
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	021b      	lsls	r3, r3, #8
 8002ffc:	b21b      	sxth	r3, r3
 8002ffe:	4313      	orrs	r3, r2
 8003000:	b21b      	sxth	r3, r3
 8003002:	b29a      	uxth	r2, r3
 8003004:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	3390      	adds	r3, #144	; 0x90
 800300c:	443b      	add	r3, r7
 800300e:	f823 2c84 	strh.w	r2, [r3, #-132]
	for (index = 0; index < PDM_BUFFER_SIZE / 2; index++) {
 8003012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003016:	3301      	adds	r3, #1
 8003018:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800301c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003020:	2b3f      	cmp	r3, #63	; 0x3f
 8003022:	d9db      	bls.n	8002fdc <BSP_AUDIO_IN_PDMToPCM+0x18>
	}

	for (index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++) {
 8003024:	2300      	movs	r3, #0
 8003026:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800302a:	e019      	b.n	8003060 <BSP_AUDIO_IN_PDMToPCM+0x9c>
		/* PDM to PCM filter */
		PDM_Filter((uint8_t*) &AppPDM[index], (uint16_t*) &(PCMBuf[index]),
 800302c:	f107 020c 	add.w	r2, r7, #12
 8003030:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	18d0      	adds	r0, r2, r3
 8003038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	18d1      	adds	r1, r2, r3
 8003042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003046:	224c      	movs	r2, #76	; 0x4c
 8003048:	fb02 f303 	mul.w	r3, r2, r3
 800304c:	4a09      	ldr	r2, [pc, #36]	; (8003074 <BSP_AUDIO_IN_PDMToPCM+0xb0>)
 800304e:	4413      	add	r3, r2
 8003050:	461a      	mov	r2, r3
 8003052:	f00b f925 	bl	800e2a0 <PDM_Filter>
	for (index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++) {
 8003056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800305a:	3301      	adds	r3, #1
 800305c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003064:	2b00      	cmp	r3, #0
 8003066:	d0e1      	beq.n	800302c <BSP_AUDIO_IN_PDMToPCM+0x68>
	/*for (index = 0; index < PCM_OUT_SIZE; index++) {
		PCMBuf[(index << 1) + 1] = PCMBuf[index << 1];
	}*/

	/* Return AUDIO_OK when all operations are correctly done */
	return AUDIO_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3790      	adds	r7, #144	; 0x90
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	20013b8c 	.word	0x20013b8c

08003078 <HAL_I2S_RxCpltCallback>:

/**
 * @brief  Rx Transfer completed callbacks
 * @param  hi2s: I2S handle
 */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
	/* Call the record update function to get the next buffer to fill and its size (size is ignored) */
	BSP_AUDIO_IN_TransferComplete_CallBack();
 8003080:	f7fe f85c 	bl	800113c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8003084:	bf00      	nop
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <HAL_I2S_RxHalfCpltCallback>:

/**
 * @brief  Rx Half Transfer completed callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
	/* Manage the remaining file size and new address offset: This function
	 should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
	BSP_AUDIO_IN_HalfTransfer_CallBack();
 8003094:	f7fe f85e 	bl	8001154 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <BSP_AUDIO_IN_ClockConfig>:
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 * @note   This API is called by BSP_AUDIO_IN_Init()
 *         Being __weak it can be overwritten by the application
 */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s,
		uint32_t AudioFreq, void *Params) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
	RCC_PeriphCLKInitTypeDef rccclkinit;

	/*Enable PLLI2S clock*/
	HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 80030ac:	f107 0310 	add.w	r3, r7, #16
 80030b0:	4618      	mov	r0, r3
 80030b2:	f006 fddf 	bl	8009c74 <HAL_RCCEx_GetPeriphCLKConfig>
	/* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	if ((AudioFreq & 0x7) == 0) {
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10b      	bne.n	80030d8 <BSP_AUDIO_IN_ClockConfig+0x38>
		/* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
		/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
		/* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80030c0:	2301      	movs	r3, #1
 80030c2:	613b      	str	r3, [r7, #16]
		rccclkinit.PLLI2S.PLLI2SN = 192;
 80030c4:	23c0      	movs	r3, #192	; 0xc0
 80030c6:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SR = 6;
 80030c8:	2306      	movs	r3, #6
 80030ca:	61bb      	str	r3, [r7, #24]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80030cc:	f107 0310 	add.w	r3, r7, #16
 80030d0:	4618      	mov	r0, r3
 80030d2:	f006 fced 	bl	8009ab0 <HAL_RCCEx_PeriphCLKConfig>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
		rccclkinit.PLLI2S.PLLI2SN = 290;
		rccclkinit.PLLI2S.PLLI2SR = 2;
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
	}
}
 80030d6:	e00b      	b.n	80030f0 <BSP_AUDIO_IN_ClockConfig+0x50>
		rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80030d8:	2301      	movs	r3, #1
 80030da:	613b      	str	r3, [r7, #16]
		rccclkinit.PLLI2S.PLLI2SN = 290;
 80030dc:	f44f 7391 	mov.w	r3, #290	; 0x122
 80030e0:	617b      	str	r3, [r7, #20]
		rccclkinit.PLLI2S.PLLI2SR = 2;
 80030e2:	2302      	movs	r3, #2
 80030e4:	61bb      	str	r3, [r7, #24]
		HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80030e6:	f107 0310 	add.w	r3, r7, #16
 80030ea:	4618      	mov	r0, r3
 80030ec:	f006 fce0 	bl	8009ab0 <HAL_RCCEx_PeriphCLKConfig>
}
 80030f0:	bf00      	nop
 80030f2:	3720      	adds	r7, #32
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <BSP_AUDIO_IN_MspInit>:
/**
 * @brief  BSP AUDIO IN MSP Init.
 * @param  hi2s: I2S handle
 * @param  Params : pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params) {
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b08c      	sub	sp, #48	; 0x30
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef hdma_i2sRx;
	GPIO_InitTypeDef GPIO_InitStruct;

	/* Enable the I2S2 peripheral clock */
	I2S2_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
 8003106:	4b4d      	ldr	r3, [pc, #308]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a4c      	ldr	r2, [pc, #304]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 800310c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
 8003112:	4b4a      	ldr	r3, [pc, #296]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311a:	61bb      	str	r3, [r7, #24]
 800311c:	69bb      	ldr	r3, [r7, #24]

	/* Enable I2S GPIO clocks */
	I2S2_SCK_GPIO_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	4b46      	ldr	r3, [pc, #280]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a45      	ldr	r2, [pc, #276]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b43      	ldr	r3, [pc, #268]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	697b      	ldr	r3, [r7, #20]
	I2S2_MOSI_GPIO_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	4b3f      	ldr	r3, [pc, #252]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	4a3e      	ldr	r2, [pc, #248]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 8003144:	f043 0304 	orr.w	r3, r3, #4
 8003148:	6313      	str	r3, [r2, #48]	; 0x30
 800314a:	4b3c      	ldr	r3, [pc, #240]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	f003 0304 	and.w	r3, r3, #4
 8003152:	613b      	str	r3, [r7, #16]
 8003154:	693b      	ldr	r3, [r7, #16]

	/* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003156:	2302      	movs	r3, #2
 8003158:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315a:	2300      	movs	r3, #0
 800315c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800315e:	2302      	movs	r3, #2
 8003160:	62bb      	str	r3, [r7, #40]	; 0x28

	GPIO_InitStruct.Pin = I2S2_SCK_PIN;
 8003162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003166:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8003168:	2305      	movs	r3, #5
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800316c:	f107 031c 	add.w	r3, r7, #28
 8003170:	4619      	mov	r1, r3
 8003172:	4833      	ldr	r0, [pc, #204]	; (8003240 <BSP_AUDIO_IN_MspInit+0x148>)
 8003174:	f003 fd38 	bl	8006be8 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = I2S2_MOSI_PIN;
 8003178:	2308      	movs	r3, #8
 800317a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 800317c:	2305      	movs	r3, #5
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003180:	f107 031c 	add.w	r3, r7, #28
 8003184:	4619      	mov	r1, r3
 8003186:	482f      	ldr	r0, [pc, #188]	; (8003244 <BSP_AUDIO_IN_MspInit+0x14c>)
 8003188:	f003 fd2e 	bl	8006be8 <HAL_GPIO_Init>

	/* Enable the DMA clock */
	I2S2_DMAx_CLK_ENABLE();
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	4b2a      	ldr	r3, [pc, #168]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	4a29      	ldr	r2, [pc, #164]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 8003196:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800319a:	6313      	str	r3, [r2, #48]	; 0x30
 800319c:	4b27      	ldr	r3, [pc, #156]	; (800323c <BSP_AUDIO_IN_MspInit+0x144>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	68fb      	ldr	r3, [r7, #12]

	if (hi2s->Instance == I2S2) {
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a26      	ldr	r2, [pc, #152]	; (8003248 <BSP_AUDIO_IN_MspInit+0x150>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d137      	bne.n	8003222 <BSP_AUDIO_IN_MspInit+0x12a>
		/* Configure the hdma_i2sRx handle parameters */
		hdma_i2sRx.Init.Channel = I2S2_DMAx_CHANNEL;
 80031b2:	4b26      	ldr	r3, [pc, #152]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	605a      	str	r2, [r3, #4]
		hdma_i2sRx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031b8:	4b24      	ldr	r3, [pc, #144]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
		hdma_i2sRx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031be:	4b23      	ldr	r3, [pc, #140]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	60da      	str	r2, [r3, #12]
		hdma_i2sRx.Init.MemInc = DMA_MINC_ENABLE;
 80031c4:	4b21      	ldr	r3, [pc, #132]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 80031c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ca:	611a      	str	r2, [r3, #16]
		hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 80031cc:	4b1f      	ldr	r3, [pc, #124]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 80031ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d2:	615a      	str	r2, [r3, #20]
		hdma_i2sRx.Init.MemDataAlignment = I2S2_DMAx_MEM_DATA_SIZE;
 80031d4:	4b1d      	ldr	r3, [pc, #116]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 80031d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031da:	619a      	str	r2, [r3, #24]
		hdma_i2sRx.Init.Mode = DMA_CIRCULAR;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 80031de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031e2:	61da      	str	r2, [r3, #28]
		hdma_i2sRx.Init.Priority = DMA_PRIORITY_HIGH;
 80031e4:	4b19      	ldr	r3, [pc, #100]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 80031e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031ea:	621a      	str	r2, [r3, #32]
		hdma_i2sRx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031ec:	4b17      	ldr	r3, [pc, #92]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24
		hdma_i2sRx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 80031f4:	2203      	movs	r2, #3
 80031f6:	629a      	str	r2, [r3, #40]	; 0x28
		hdma_i2sRx.Init.MemBurst = DMA_MBURST_SINGLE;
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	62da      	str	r2, [r3, #44]	; 0x2c
		hdma_i2sRx.Init.PeriphBurst = DMA_MBURST_SINGLE;
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 8003200:	2200      	movs	r2, #0
 8003202:	631a      	str	r2, [r3, #48]	; 0x30

		hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 8003206:	4a12      	ldr	r2, [pc, #72]	; (8003250 <BSP_AUDIO_IN_MspInit+0x158>)
 8003208:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a0f      	ldr	r2, [pc, #60]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 800320e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003210:	4a0e      	ldr	r2, [pc, #56]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the Stream for new transfer */
		HAL_DMA_DeInit(&hdma_i2sRx);
 8003216:	480d      	ldr	r0, [pc, #52]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 8003218:	f003 f956 	bl	80064c8 <HAL_DMA_DeInit>

		/* Configure the DMA Stream */
		HAL_DMA_Init(&hdma_i2sRx);
 800321c:	480b      	ldr	r0, [pc, #44]	; (800324c <BSP_AUDIO_IN_MspInit+0x154>)
 800321e:	f003 f8a5 	bl	800636c <HAL_DMA_Init>
	}

	/* I2S DMA IRQ Channel configuration */
	HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003222:	2200      	movs	r2, #0
 8003224:	210f      	movs	r1, #15
 8003226:	200e      	movs	r0, #14
 8003228:	f003 f84d 	bl	80062c6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ);
 800322c:	200e      	movs	r0, #14
 800322e:	f003 f866 	bl	80062fe <HAL_NVIC_EnableIRQ>
}
 8003232:	bf00      	nop
 8003234:	3730      	adds	r7, #48	; 0x30
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	40020400 	.word	0x40020400
 8003244:	40020800 	.word	0x40020800
 8003248:	40003800 	.word	0x40003800
 800324c:	20013c30 	.word	0x20013c30
 8003250:	40026058 	.word	0x40026058

08003254 <PDMDecoder_Init>:
 * @param  ChnlNbrIn: Number of input audio channels in the PDM buffer
 * @param  ChnlNbrOut: Number of desired output audio channels in the  resulting PCM buffer
 *         Number of audio channels (1: mono; 2: stereo)
 */
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn,
		uint32_t ChnlNbrOut) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
	uint32_t index = 0;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

	/* Enable CRC peripheral to unlock the PDM library */
	__HAL_RCC_CRC_CLK_ENABLE();
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	4b43      	ldr	r3, [pc, #268]	; (8003378 <PDMDecoder_Init+0x124>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326c:	4a42      	ldr	r2, [pc, #264]	; (8003378 <PDMDecoder_Init+0x124>)
 800326e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003272:	6313      	str	r3, [r2, #48]	; 0x30
 8003274:	4b40      	ldr	r3, [pc, #256]	; (8003378 <PDMDecoder_Init+0x124>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]

	for (index = 0; index < ChnlNbrIn; index++) {
 8003280:	2300      	movs	r3, #0
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	e06e      	b.n	8003364 <PDMDecoder_Init+0x110>
		/* Init PDM filters */
		PDM_FilterHandler[index].bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8003286:	4a3d      	ldr	r2, [pc, #244]	; (800337c <PDMDecoder_Init+0x128>)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	214c      	movs	r1, #76	; 0x4c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	2200      	movs	r2, #0
 8003294:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8003296:	4a39      	ldr	r2, [pc, #228]	; (800337c <PDMDecoder_Init+0x128>)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	214c      	movs	r1, #76	; 0x4c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	3302      	adds	r3, #2
 80032a4:	2200      	movs	r2, #0
 80032a6:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].high_pass_tap = 2122358088;
 80032a8:	4a34      	ldr	r2, [pc, #208]	; (800337c <PDMDecoder_Init+0x128>)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	214c      	movs	r1, #76	; 0x4c
 80032ae:	fb01 f303 	mul.w	r3, r1, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	3304      	adds	r3, #4
 80032b6:	4a32      	ldr	r2, [pc, #200]	; (8003380 <PDMDecoder_Init+0x12c>)
 80032b8:	601a      	str	r2, [r3, #0]
		PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	b298      	uxth	r0, r3
 80032be:	4a2f      	ldr	r2, [pc, #188]	; (800337c <PDMDecoder_Init+0x128>)
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	214c      	movs	r1, #76	; 0x4c
 80032c4:	fb01 f303 	mul.w	r3, r1, r3
 80032c8:	4413      	add	r3, r2
 80032ca:	330a      	adds	r3, #10
 80032cc:	4602      	mov	r2, r0
 80032ce:	801a      	strh	r2, [r3, #0]
		PDM_FilterHandler[index].in_ptr_channels = ChnlNbrIn;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	b298      	uxth	r0, r3
 80032d4:	4a29      	ldr	r2, [pc, #164]	; (800337c <PDMDecoder_Init+0x128>)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	214c      	movs	r1, #76	; 0x4c
 80032da:	fb01 f303 	mul.w	r3, r1, r3
 80032de:	4413      	add	r3, r2
 80032e0:	3308      	adds	r3, #8
 80032e2:	4602      	mov	r2, r0
 80032e4:	801a      	strh	r2, [r3, #0]
		PDM_Filter_Init((PDM_Filter_Handler_t*) (&PDM_FilterHandler[index]));
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	224c      	movs	r2, #76	; 0x4c
 80032ea:	fb02 f303 	mul.w	r3, r2, r3
 80032ee:	4a23      	ldr	r2, [pc, #140]	; (800337c <PDMDecoder_Init+0x128>)
 80032f0:	4413      	add	r3, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f00a fe58 	bl	800dfa8 <PDM_Filter_Init>

		/* PDM lib config phase */
		PDM_FilterConfig[index].output_samples_number = AudioFreq / 1000; //AudioFreq / 1000;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a22      	ldr	r2, [pc, #136]	; (8003384 <PDMDecoder_Init+0x130>)
 80032fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003300:	099b      	lsrs	r3, r3, #6
 8003302:	b298      	uxth	r0, r3
 8003304:	4920      	ldr	r1, [pc, #128]	; (8003388 <PDMDecoder_Init+0x134>)
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	440b      	add	r3, r1
 8003312:	3302      	adds	r3, #2
 8003314:	4602      	mov	r2, r0
 8003316:	801a      	strh	r2, [r3, #0]
		PDM_FilterConfig[index].mic_gain = 24;
 8003318:	491b      	ldr	r1, [pc, #108]	; (8003388 <PDMDecoder_Init+0x134>)
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	440b      	add	r3, r1
 8003326:	3304      	adds	r3, #4
 8003328:	2218      	movs	r2, #24
 800332a:	801a      	strh	r2, [r3, #0]
		PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800332c:	4916      	ldr	r1, [pc, #88]	; (8003388 <PDMDecoder_Init+0x134>)
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	440b      	add	r3, r1
 800333a:	2202      	movs	r2, #2
 800333c:	801a      	strh	r2, [r3, #0]
		PDM_Filter_setConfig((PDM_Filter_Handler_t*) &PDM_FilterHandler[index],
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	224c      	movs	r2, #76	; 0x4c
 8003342:	fb02 f303 	mul.w	r3, r2, r3
 8003346:	4a0d      	ldr	r2, [pc, #52]	; (800337c <PDMDecoder_Init+0x128>)
 8003348:	1898      	adds	r0, r3, r2
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4a0c      	ldr	r2, [pc, #48]	; (8003388 <PDMDecoder_Init+0x134>)
 8003356:	4413      	add	r3, r2
 8003358:	4619      	mov	r1, r3
 800335a:	f00a feaf 	bl	800e0bc <PDM_Filter_setConfig>
	for (index = 0; index < ChnlNbrIn; index++) {
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3301      	adds	r3, #1
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	697a      	ldr	r2, [r7, #20]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d38c      	bcc.n	8003286 <PDMDecoder_Init+0x32>
				&PDM_FilterConfig[index]);
	}
}
 800336c:	bf00      	nop
 800336e:	bf00      	nop
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	40023800 	.word	0x40023800
 800337c:	20013b8c 	.word	0x20013b8c
 8003380:	7e809d48 	.word	0x7e809d48
 8003384:	10624dd3 	.word	0x10624dd3
 8003388:	20013c24 	.word	0x20013c24

0800338c <I2S2_Init>:
 * @note   This function assumes that the I2S input clock (through PLL_R in
 *         Devices RevA/Z and through dedicated PLLI2S_R in Devices RevB/Y)
 *         is already configured and ready to be used.
 * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral.
 */
static uint8_t I2S2_Init(uint32_t AudioFreq) {
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	/* Initialize the hAudioInI2s Instance parameter */
	hAudioInI2s.Instance = I2S2;
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <I2S2_Init+0x68>)
 8003396:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <I2S2_Init+0x6c>)
 8003398:	601a      	str	r2, [r3, #0]

	/* Disable I2S block */
	__HAL_I2S_DISABLE(&hAudioInI2s);
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <I2S2_Init+0x68>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <I2S2_Init+0x68>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a8:	61da      	str	r2, [r3, #28]

	/* I2S2 peripheral configuration */
	hAudioInI2s.Init.AudioFreq = 2*AudioFreq;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	4a11      	ldr	r2, [pc, #68]	; (80033f4 <I2S2_Init+0x68>)
 80033b0:	6153      	str	r3, [r2, #20]
	hAudioInI2s.Init.ClockSource = I2S_CLOCK_PLL;
 80033b2:	4b10      	ldr	r3, [pc, #64]	; (80033f4 <I2S2_Init+0x68>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	61da      	str	r2, [r3, #28]
	hAudioInI2s.Init.CPOL = I2S_CPOL_HIGH;
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <I2S2_Init+0x68>)
 80033ba:	2208      	movs	r2, #8
 80033bc:	619a      	str	r2, [r3, #24]
	hAudioInI2s.Init.DataFormat = I2S_DATAFORMAT_16B;
 80033be:	4b0d      	ldr	r3, [pc, #52]	; (80033f4 <I2S2_Init+0x68>)
 80033c0:	2200      	movs	r2, #0
 80033c2:	60da      	str	r2, [r3, #12]
	hAudioInI2s.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <I2S2_Init+0x68>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
	hAudioInI2s.Init.Mode = I2S_MODE_MASTER_RX;
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <I2S2_Init+0x68>)
 80033cc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80033d0:	605a      	str	r2, [r3, #4]
	hAudioInI2s.Init.Standard = I2S_STANDARD_LSB;
 80033d2:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <I2S2_Init+0x68>)
 80033d4:	2220      	movs	r2, #32
 80033d6:	609a      	str	r2, [r3, #8]

	/* Initialize the I2S peripheral with the structure above */
	if (HAL_I2S_Init(&hAudioInI2s) != HAL_OK) {
 80033d8:	4806      	ldr	r0, [pc, #24]	; (80033f4 <I2S2_Init+0x68>)
 80033da:	f004 ff1f 	bl	800821c <HAL_I2S_Init>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <I2S2_Init+0x5c>
		return AUDIO_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <I2S2_Init+0x5e>
	} else {
		return AUDIO_OK;
 80033e8:	2300      	movs	r3, #0
	}
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20013b44 	.word	0x20013b44
 80033f8:	40003800 	.word	0x40003800

080033fc <HAL_I2S_ErrorCallback>:

/**
 * @brief  I2S error callbacks.
 * @param  hi2s: I2S handle
 */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s) {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	/* Manage the error generated on DMA FIFO: This function
	 should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */
	if (hi2s->Instance == I2S3) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a07      	ldr	r2, [pc, #28]	; (8003428 <HAL_I2S_ErrorCallback+0x2c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d101      	bne.n	8003412 <HAL_I2S_ErrorCallback+0x16>
		BSP_AUDIO_OUT_Error_CallBack();
 800340e:	f7ff fd7e 	bl	8002f0e <BSP_AUDIO_OUT_Error_CallBack>
	}
	if (hi2s->Instance == I2S2) {
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a05      	ldr	r2, [pc, #20]	; (800342c <HAL_I2S_ErrorCallback+0x30>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d101      	bne.n	8003420 <HAL_I2S_ErrorCallback+0x24>
		BSP_AUDIO_IN_Error_Callback();
 800341c:	f7fd fea6 	bl	800116c <BSP_AUDIO_IN_Error_Callback>
	}
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	40003c00 	.word	0x40003c00
 800342c:	40003800 	.word	0x40003800

08003430 <arm_mult_f32>:
void arm_mult_f32(
  const float32_t * pSrcA,
  const float32_t * pSrcB,
        float32_t * pDst,
        uint32_t blockSize)
{
 8003430:	b480      	push	{r7}
 8003432:	b087      	sub	sp, #28
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8003442:	e013      	b.n	800346c <arm_mult_f32+0x3c>
  {
    /* C = A * B */

    /* Multiply input and store result in destination buffer. */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1d1a      	adds	r2, r3, #4
 8003448:	60fa      	str	r2, [r7, #12]
 800344a:	ed93 7a00 	vldr	s14, [r3]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	1d1a      	adds	r2, r3, #4
 8003452:	60ba      	str	r2, [r7, #8]
 8003454:	edd3 7a00 	vldr	s15, [r3]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	1d1a      	adds	r2, r3, #4
 800345c:	607a      	str	r2, [r7, #4]
 800345e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003462:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	3b01      	subs	r3, #1
 800346a:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e8      	bne.n	8003444 <arm_mult_f32+0x14>
  }

}
 8003472:	bf00      	nop
 8003474:	bf00      	nop
 8003476:	371c      	adds	r7, #28
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <arm_cmplx_mag_squared_f32>:
#else
void arm_cmplx_mag_squared_f32(
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t numSamples)
{
 8003480:	b480      	push	{r7}
 8003482:	b089      	sub	sp, #36	; 0x24
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  blkCnt = numSamples % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = numSamples;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8003490:	e01b      	b.n	80034ca <arm_cmplx_mag_squared_f32+0x4a>
  {
    /* C[0] = (A[0] * A[0] + A[1] * A[1]) */

    real = *pSrc++;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1d1a      	adds	r2, r3, #4
 8003496:	60fa      	str	r2, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	61bb      	str	r3, [r7, #24]
    imag = *pSrc++;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1d1a      	adds	r2, r3, #4
 80034a0:	60fa      	str	r2, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	617b      	str	r3, [r7, #20]

    /* store result in destination buffer. */
    *pDst++ = (real * real) + (imag * imag);
 80034a6:	edd7 7a06 	vldr	s15, [r7, #24]
 80034aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80034ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80034b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	1d1a      	adds	r2, r3, #4
 80034ba:	60ba      	str	r2, [r7, #8]
 80034bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c0:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	61fb      	str	r3, [r7, #28]
  while (blkCnt > 0U)
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e0      	bne.n	8003492 <arm_cmplx_mag_squared_f32+0x12>
  }

}
 80034d0:	bf00      	nop
 80034d2:	bf00      	nop
 80034d4:	3724      	adds	r7, #36	; 0x24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 80034de:	b480      	push	{r7}
 80034e0:	b089      	sub	sp, #36	; 0x24
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	60f8      	str	r0, [r7, #12]
 80034e6:	460b      	mov	r3, r1
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
 80034f0:	e043      	b.n	800357a <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	089b      	lsrs	r3, r3, #2
 80034fe:	b29b      	uxth	r3, r3
 8003500:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3301      	adds	r3, #1
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4413      	add	r3, r2
 800350c:	881b      	ldrh	r3, [r3, #0]
 800350e:	089b      	lsrs	r3, r3, #2
 8003510:	b29b      	uxth	r3, r3
 8003512:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4413      	add	r3, r2
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	441a      	add	r2, r3
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	68f9      	ldr	r1, [r7, #12]
 800352e:	440b      	add	r3, r1
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	68fa      	ldr	r2, [r7, #12]
 800353a:	4413      	add	r3, r2
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	3301      	adds	r3, #1
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4413      	add	r3, r2
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	3301      	adds	r3, #1
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	441a      	add	r2, r3
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	3301      	adds	r3, #1
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	68f9      	ldr	r1, [r7, #12]
 8003560:	440b      	add	r3, r1
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	3301      	adds	r3, #1
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4413      	add	r3, r2
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	601a      	str	r2, [r3, #0]

    i += 2;
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	3302      	adds	r3, #2
 8003578:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 800357a:	897b      	ldrh	r3, [r7, #10]
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	429a      	cmp	r2, r3
 8003580:	d3b7      	bcc.n	80034f2 <arm_bitreversal_32+0x14>
  }
}
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	3724      	adds	r7, #36	; 0x24
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <arm_cfft_radix8by2_f32>:
  @endcode

 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b0a0      	sub	sp, #128	; 0x80
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	881b      	ldrh	r3, [r3, #0]
 800359e:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 80035a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	4413      	add	r3, r2
 80035a8:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 80035b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035b6:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 80035b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ba:	085b      	lsrs	r3, r3, #1
 80035bc:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 80035be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	4413      	add	r3, r2
 80035c6:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 80035c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035ce:	4413      	add	r3, r2
 80035d0:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 80035d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035d4:	089b      	lsrs	r3, r3, #2
 80035d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035d8:	e1b6      	b.n	8003948 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 80035f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 80035f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 80035fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 8003604:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800360a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 8003610:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 8003616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800361c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 8003622:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 8003628:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800362e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 8003634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800363a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800363e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	1d1a      	adds	r2, r3, #4
 8003646:	603a      	str	r2, [r7, #0]
 8003648:	ee77 7a27 	vadd.f32	s15, s14, s15
 800364c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8003650:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003654:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	603a      	str	r2, [r7, #0]
 800365e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003662:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8003666:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800366a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	1d1a      	adds	r2, r3, #4
 8003672:	603a      	str	r2, [r7, #0]
 8003674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003678:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800367c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003680:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	1d1a      	adds	r2, r3, #4
 8003688:	603a      	str	r2, [r7, #0]
 800368a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800368e:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8003692:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003696:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800369a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 80036a2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80036a6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80036aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 80036b2:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80036b6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80036ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036be:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 80036c2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80036c6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80036ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ce:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 80036d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80036d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80036da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036dc:	1d1a      	adds	r2, r3, #4
 80036de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e4:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80036e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80036f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	67fa      	str	r2, [r7, #124]	; 0x7c
 80036f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036fa:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 80036fe:	ed97 7a08 	vldr	s14, [r7, #32]
 8003702:	edd7 7a04 	vldr	s15, [r7, #16]
 8003706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003708:	1d1a      	adds	r2, r3, #4
 800370a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800370c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003710:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 8003714:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003718:	edd7 7a05 	vldr	s15, [r7, #20]
 800371c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800371e:	1d1a      	adds	r2, r3, #4
 8003720:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003726:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800372a:	ed97 7a02 	vldr	s14, [r7, #8]
 800372e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003736:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800373a:	ed97 7a03 	vldr	s14, [r7, #12]
 800373e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003742:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003746:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800374a:	ed97 7a04 	vldr	s14, [r7, #16]
 800374e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003752:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003756:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800375a:	ed97 7a05 	vldr	s14, [r7, #20]
 800375e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003762:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003766:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800376a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800376c:	1d1a      	adds	r2, r3, #4
 800376e:	673a      	str	r2, [r7, #112]	; 0x70
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8003774:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003776:	1d1a      	adds	r2, r3, #4
 8003778:	673a      	str	r2, [r7, #112]	; 0x70
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 800377e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003782:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003786:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 800378e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003792:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800379a:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800379e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80037a2:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80037a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037aa:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 80037ae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80037b2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80037b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 80037be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037c0:	1d1a      	adds	r2, r3, #4
 80037c2:	677a      	str	r2, [r7, #116]	; 0x74
 80037c4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80037c8:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80037cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d0:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 80037d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037d6:	1d1a      	adds	r2, r3, #4
 80037d8:	677a      	str	r2, [r7, #116]	; 0x74
 80037da:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80037de:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80037e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037e6:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80037ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ee:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 80037fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80037fe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003806:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800380a:	edd7 7a03 	vldr	s15, [r7, #12]
 800380e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003816:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800381a:	edd7 7a02 	vldr	s15, [r7, #8]
 800381e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003826:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800382a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800382c:	1d1a      	adds	r2, r3, #4
 800382e:	67ba      	str	r2, [r7, #120]	; 0x78
 8003830:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003834:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800383c:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8003840:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003842:	1d1a      	adds	r2, r3, #4
 8003844:	67ba      	str	r2, [r7, #120]	; 0x78
 8003846:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800384a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800384e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003852:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8003856:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003858:	1d1a      	adds	r2, r3, #4
 800385a:	673a      	str	r2, [r7, #112]	; 0x70
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 8003860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003862:	1d1a      	adds	r2, r3, #4
 8003864:	673a      	str	r2, [r7, #112]	; 0x70
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800386a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800386e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003876:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800387a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800387e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003886:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 800388a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800388e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003896:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 800389a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800389e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80038a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038a6:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 80038aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ac:	1d1a      	adds	r2, r3, #4
 80038ae:	677a      	str	r2, [r7, #116]	; 0x74
 80038b0:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80038b4:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80038b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038bc:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 80038c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038c2:	1d1a      	adds	r2, r3, #4
 80038c4:	677a      	str	r2, [r7, #116]	; 0x74
 80038c6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80038ca:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80038ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038d2:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 80038d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80038da:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80038de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 80038e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80038ea:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80038ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038f2:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 80038f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80038fa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80038fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003902:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 8003906:	edd7 7a04 	vldr	s15, [r7, #16]
 800390a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800390e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003912:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 8003916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003918:	1d1a      	adds	r2, r3, #4
 800391a:	67ba      	str	r2, [r7, #120]	; 0x78
 800391c:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003920:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8003924:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003928:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800392c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800392e:	1d1a      	adds	r2, r3, #4
 8003930:	67ba      	str	r2, [r7, #120]	; 0x78
 8003932:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003936:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800393a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393e:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8003942:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003944:	3b01      	subs	r3, #1
 8003946:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800394a:	2b00      	cmp	r3, #0
 800394c:	f47f ae45 	bne.w	80035da <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8003950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003952:	b299      	uxth	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	2302      	movs	r3, #2
 800395a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800395c:	f000 ffc4 	bl	80048e8 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8003960:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003962:	b299      	uxth	r1, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	2302      	movs	r3, #2
 800396a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800396c:	f000 ffbc 	bl	80048e8 <arm_radix8_butterfly_f32>
}
 8003970:	bf00      	nop
 8003972:	3780      	adds	r7, #128	; 0x80
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b0ac      	sub	sp, #176	; 0xb0
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	881b      	ldrh	r3, [r3, #0]
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	b29b      	uxth	r3, r3
 800398a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800398e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	4413      	add	r3, r2
 8003998:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800399c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80039a6:	4413      	add	r3, r2
 80039a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80039ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80039b6:	4413      	add	r3, r2
 80039b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80039c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039c4:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80039c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ca:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80039cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039d0:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 80039d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039d6:	3b04      	subs	r3, #4
 80039d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80039dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039e0:	3b04      	subs	r3, #4
 80039e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 80039e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039ea:	3b04      	subs	r3, #4
 80039ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 80039f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80039fa:	4413      	add	r3, r2
 80039fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a08:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003a0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8003a18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a1c:	085b      	lsrs	r3, r3, #1
 8003a1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 8003a22:	2302      	movs	r3, #2
 8003a24:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8003a26:	2304      	movs	r3, #4
 8003a28:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8003a2a:	2306      	movs	r3, #6
 8003a2c:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	ed93 7a00 	vldr	s14, [r3]
 8003a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a38:	edd3 7a00 	vldr	s15, [r3]
 8003a3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a40:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	ed93 7a00 	vldr	s14, [r3]
 8003a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a4e:	edd3 7a00 	vldr	s15, [r3]
 8003a52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a56:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	3304      	adds	r3, #4
 8003a5e:	ed93 7a00 	vldr	s14, [r3]
 8003a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a66:	3304      	adds	r3, #4
 8003a68:	edd3 7a00 	vldr	s15, [r3]
 8003a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a70:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	3304      	adds	r3, #4
 8003a78:	ed93 7a00 	vldr	s14, [r3]
 8003a7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003a80:	3304      	adds	r3, #4
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a8a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003a8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003a92:	3304      	adds	r3, #4
 8003a94:	ed93 7a00 	vldr	s14, [r3]
 8003a98:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003a9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003aa4:	3304      	adds	r3, #4
 8003aa6:	edd3 7a00 	vldr	s15, [r3]
 8003aaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aae:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ab6:	edd3 7a00 	vldr	s15, [r3]
 8003aba:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003abe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ac2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ac6:	edd3 7a00 	vldr	s15, [r3]
 8003aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ace:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8003ad2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ad6:	edd3 7a00 	vldr	s15, [r3]
 8003ada:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003ade:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ae2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ae6:	edd3 7a00 	vldr	s15, [r3]
 8003aea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aee:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8003af2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003af6:	3304      	adds	r3, #4
 8003af8:	edd3 7a00 	vldr	s15, [r3]
 8003afc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003b00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b08:	3304      	adds	r3, #4
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b12:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8003b16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	edd3 7a00 	vldr	s15, [r3]
 8003b20:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003b24:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	edd3 7a00 	vldr	s15, [r3]
 8003b32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b36:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8003b3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b3e:	ed93 7a00 	vldr	s14, [r3]
 8003b42:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003b46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b4e:	edd3 7a00 	vldr	s15, [r3]
 8003b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b56:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003b5a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b5e:	ed93 7a00 	vldr	s14, [r3]
 8003b62:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003b66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b6e:	edd3 7a00 	vldr	s15, [r3]
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	1d1a      	adds	r2, r3, #4
 8003b76:	603a      	str	r2, [r7, #0]
 8003b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b7c:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003b80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b84:	3304      	adds	r3, #4
 8003b86:	ed93 7a00 	vldr	s14, [r3]
 8003b8a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003b96:	3304      	adds	r3, #4
 8003b98:	edd3 7a00 	vldr	s15, [r3]
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	1d1a      	adds	r2, r3, #4
 8003ba0:	603a      	str	r2, [r7, #0]
 8003ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba6:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8003baa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bae:	1d1a      	adds	r2, r3, #4
 8003bb0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bb6:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8003bb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003bbc:	1d1a      	adds	r2, r3, #4
 8003bbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bc4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8003bc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bca:	1d1a      	adds	r2, r3, #4
 8003bcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8003bd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003bd8:	1d1a      	adds	r2, r3, #4
 8003bda:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bde:	6a3a      	ldr	r2, [r7, #32]
 8003be0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8003be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003be6:	1d1a      	adds	r2, r3, #4
 8003be8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8003bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003bf4:	1d1a      	adds	r2, r3, #4
 8003bf6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8003bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8003c06:	4413      	add	r3, r2
 8003c08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8003c0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003c14:	4413      	add	r3, r2
 8003c16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8003c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c22:	4413      	add	r3, r2
 8003c24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8003c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003c2c:	3b02      	subs	r3, #2
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c34:	e31a      	b.n	800426c <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	ed93 7a00 	vldr	s14, [r3]
 8003c3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c40:	edd3 7a00 	vldr	s15, [r3]
 8003c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c48:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	ed93 7a00 	vldr	s14, [r3]
 8003c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c56:	edd3 7a00 	vldr	s15, [r3]
 8003c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c5e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	3304      	adds	r3, #4
 8003c66:	ed93 7a00 	vldr	s14, [r3]
 8003c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c6e:	3304      	adds	r3, #4
 8003c70:	edd3 7a00 	vldr	s15, [r3]
 8003c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c78:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	3304      	adds	r3, #4
 8003c80:	ed93 7a00 	vldr	s14, [r3]
 8003c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003c88:	3304      	adds	r3, #4
 8003c8a:	edd3 7a00 	vldr	s15, [r3]
 8003c8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c92:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8003c96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	ed93 7a00 	vldr	s14, [r3]
 8003ca0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cac:	3304      	adds	r3, #4
 8003cae:	edd3 7a00 	vldr	s15, [r3]
 8003cb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cb6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8003cba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cbe:	edd3 7a00 	vldr	s15, [r3]
 8003cc2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003cc6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cce:	edd3 7a00 	vldr	s15, [r3]
 8003cd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8003cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cde:	edd3 7a00 	vldr	s15, [r3]
 8003ce2:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003ce6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cee:	edd3 7a00 	vldr	s15, [r3]
 8003cf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8003cfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003cfe:	3304      	adds	r3, #4
 8003d00:	edd3 7a00 	vldr	s15, [r3]
 8003d04:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003d08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d10:	3304      	adds	r3, #4
 8003d12:	edd3 7a00 	vldr	s15, [r3]
 8003d16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d1a:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8003d1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d22:	3304      	adds	r3, #4
 8003d24:	edd3 7a00 	vldr	s15, [r3]
 8003d28:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003d2c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d34:	3304      	adds	r3, #4
 8003d36:	edd3 7a00 	vldr	s15, [r3]
 8003d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d3e:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8003d42:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d46:	ed93 7a00 	vldr	s14, [r3]
 8003d4a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003d4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d56:	edd3 7a00 	vldr	s15, [r3]
 8003d5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d5e:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8003d62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d66:	ed93 7a00 	vldr	s14, [r3]
 8003d6a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d76:	edd3 7a00 	vldr	s15, [r3]
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	1d1a      	adds	r2, r3, #4
 8003d7e:	603a      	str	r2, [r7, #0]
 8003d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d84:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8003d88:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	ed93 7a00 	vldr	s14, [r3]
 8003d92:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003d96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003d9e:	3304      	adds	r3, #4
 8003da0:	edd3 7a00 	vldr	s15, [r3]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	1d1a      	adds	r2, r3, #4
 8003da8:	603a      	str	r2, [r7, #0]
 8003daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dae:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8003db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003db6:	3b04      	subs	r3, #4
 8003db8:	ed93 7a00 	vldr	s14, [r3]
 8003dbc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dc0:	3b04      	subs	r3, #4
 8003dc2:	edd3 7a00 	vldr	s15, [r3]
 8003dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dca:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8003dce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dd2:	3b04      	subs	r3, #4
 8003dd4:	ed93 7a00 	vldr	s14, [r3]
 8003dd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003ddc:	3b04      	subs	r3, #4
 8003dde:	edd3 7a00 	vldr	s15, [r3]
 8003de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8003dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dee:	ed93 7a00 	vldr	s14, [r3]
 8003df2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003df6:	edd3 7a00 	vldr	s15, [r3]
 8003dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dfe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8003e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e06:	ed93 7a00 	vldr	s14, [r3]
 8003e0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e0e:	edd3 7a00 	vldr	s15, [r3]
 8003e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e16:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8003e1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e1e:	ed93 7a00 	vldr	s14, [r3]
 8003e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e26:	edd3 7a00 	vldr	s15, [r3]
 8003e2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e2e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e36:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8003e3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e3e:	ed93 7a00 	vldr	s14, [r3]
 8003e42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003e46:	edd3 7a00 	vldr	s15, [r3]
 8003e4a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e52:	3b04      	subs	r3, #4
 8003e54:	edd3 7a00 	vldr	s15, [r3]
 8003e58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e60:	3b04      	subs	r3, #4
 8003e62:	edd3 7a00 	vldr	s15, [r3]
 8003e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e6a:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8003e6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e72:	3b04      	subs	r3, #4
 8003e74:	edd3 7a00 	vldr	s15, [r3]
 8003e78:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003e7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e80:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e84:	3b04      	subs	r3, #4
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e8e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8003e92:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003e96:	edd3 7a00 	vldr	s15, [r3]
 8003e9a:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003e9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ea6:	edd3 7a00 	vldr	s15, [r3]
 8003eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eae:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8003eb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003eb6:	ed93 7a00 	vldr	s14, [r3]
 8003eba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ebe:	edd3 7a00 	vldr	s15, [r3]
 8003ec2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ec6:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8003eca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ece:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8003ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003ed6:	3b04      	subs	r3, #4
 8003ed8:	ed93 7a00 	vldr	s14, [r3]
 8003edc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003ee0:	3b04      	subs	r3, #4
 8003ee2:	edd3 7a00 	vldr	s15, [r3]
 8003ee6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003eea:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8003eee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ef2:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8003ef6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003efa:	ed93 7a00 	vldr	s14, [r3]
 8003efe:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003f02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f0a:	edd3 7a00 	vldr	s15, [r3]
 8003f0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f12:	1f1a      	subs	r2, r3, #4
 8003f14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f1c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8003f20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f24:	3b04      	subs	r3, #4
 8003f26:	ed93 7a00 	vldr	s14, [r3]
 8003f2a:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8003f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f36:	3b04      	subs	r3, #4
 8003f38:	edd3 7a00 	vldr	s15, [r3]
 8003f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f40:	1f1a      	subs	r2, r3, #4
 8003f42:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f4a:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8003f4e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f52:	1d1a      	adds	r2, r3, #4
 8003f54:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 8003f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f60:	1d1a      	adds	r2, r3, #4
 8003f62:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8003f6a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003f6e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f76:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 8003f7a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003f7e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f86:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 8003f8a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003f8e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f96:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 8003f9a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003f9e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 8003faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fae:	1d1a      	adds	r2, r3, #4
 8003fb0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003fb4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003fb8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8003fbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fc0:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8003fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003fc8:	1d1a      	adds	r2, r3, #4
 8003fca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8003fce:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003fd2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8003fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fda:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8003fde:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8003fe2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fea:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 8003fee:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003ff2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ffa:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 8003ffe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8004002:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800400e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8004012:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800401e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004022:	1f1a      	subs	r2, r3, #4
 8004024:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004028:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800402c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004030:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004034:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8004038:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800403c:	1f1a      	subs	r2, r3, #4
 800403e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004042:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004046:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800404a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800404e:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8004052:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800405a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 8004062:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800406a:	4413      	add	r3, r2
 800406c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 8004070:	edd7 7a07 	vldr	s15, [r7, #28]
 8004074:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800407c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 8004080:	edd7 7a08 	vldr	s15, [r7, #32]
 8004084:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 8004090:	edd7 7a08 	vldr	s15, [r7, #32]
 8004094:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800409c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 80040a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80040a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80040a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ac:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 80040b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040ba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80040be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80040c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040c6:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 80040ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ce:	1d1a      	adds	r2, r3, #4
 80040d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80040d8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80040dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040e0:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 80040e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80040e8:	eef1 7a67 	vneg.f32	s15, s15
 80040ec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80040f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040f4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 80040f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80040fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004100:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004104:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 8004108:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800410c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004110:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004114:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 8004118:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800411c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004124:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 8004128:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800412c:	1f1a      	subs	r2, r3, #4
 800412e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004132:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004136:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800413a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800413e:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8004142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004146:	1f1a      	subs	r2, r3, #4
 8004148:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800414c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8004150:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8004154:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004158:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800415c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 8004164:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800416c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004174:	4413      	add	r3, r2
 8004176:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 800417a:	edd7 7a03 	vldr	s15, [r7, #12]
 800417e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 800418a:	edd7 7a04 	vldr	s15, [r7, #16]
 800418e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004196:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 800419a:	edd7 7a04 	vldr	s15, [r7, #16]
 800419e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80041a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 80041aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80041ae:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80041b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 80041ba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041be:	1d1a      	adds	r2, r3, #4
 80041c0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80041c4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80041c8:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80041cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041d0:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 80041d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041d8:	1d1a      	adds	r2, r3, #4
 80041da:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80041de:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80041e2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80041e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041ea:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 80041ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80041f2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80041f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 80041fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8004202:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004206:	ee67 7a27 	vmul.f32	s15, s14, s15
 800420a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 800420e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004212:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800421a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 800421e:	edd7 7a06 	vldr	s15, [r7, #24]
 8004222:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 800422e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004232:	1f1a      	subs	r2, r3, #4
 8004234:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004238:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800423c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004244:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 8004248:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800424c:	1f1a      	subs	r2, r3, #4
 800424e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8004252:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004256:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800425a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800425e:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8004262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004266:	3b01      	subs	r3, #1
 8004268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800426c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f ace0 	bne.w	8003c36 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	ed93 7a00 	vldr	s14, [r3]
 800427c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004280:	edd3 7a00 	vldr	s15, [r3]
 8004284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004288:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	ed93 7a00 	vldr	s14, [r3]
 8004292:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004296:	edd3 7a00 	vldr	s15, [r3]
 800429a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800429e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	3304      	adds	r3, #4
 80042a6:	ed93 7a00 	vldr	s14, [r3]
 80042aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042ae:	3304      	adds	r3, #4
 80042b0:	edd3 7a00 	vldr	s15, [r3]
 80042b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042b8:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	3304      	adds	r3, #4
 80042c0:	ed93 7a00 	vldr	s14, [r3]
 80042c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042c8:	3304      	adds	r3, #4
 80042ca:	edd3 7a00 	vldr	s15, [r3]
 80042ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042d2:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80042d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042da:	3304      	adds	r3, #4
 80042dc:	ed93 7a00 	vldr	s14, [r3]
 80042e0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80042e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042ec:	3304      	adds	r3, #4
 80042ee:	edd3 7a00 	vldr	s15, [r3]
 80042f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042f6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80042fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004306:	ee37 7a67 	vsub.f32	s14, s14, s15
 800430a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800430e:	edd3 7a00 	vldr	s15, [r3]
 8004312:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004316:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800431a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800431e:	edd3 7a00 	vldr	s15, [r3]
 8004322:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8004326:	ee37 7a67 	vsub.f32	s14, s14, s15
 800432a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800432e:	edd3 7a00 	vldr	s15, [r3]
 8004332:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004336:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800433a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800433e:	3304      	adds	r3, #4
 8004340:	edd3 7a00 	vldr	s15, [r3]
 8004344:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8004348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800434c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004350:	3304      	adds	r3, #4
 8004352:	edd3 7a00 	vldr	s15, [r3]
 8004356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800435a:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800435e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004362:	3304      	adds	r3, #4
 8004364:	edd3 7a00 	vldr	s15, [r3]
 8004368:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800436c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004370:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004374:	3304      	adds	r3, #4
 8004376:	edd3 7a00 	vldr	s15, [r3]
 800437a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800437e:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8004382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004386:	ed93 7a00 	vldr	s14, [r3]
 800438a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800438e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004392:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004396:	edd3 7a00 	vldr	s15, [r3]
 800439a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800439e:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80043a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043a6:	ed93 7a00 	vldr	s14, [r3]
 80043aa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80043ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043b6:	edd3 7a00 	vldr	s15, [r3]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	1d1a      	adds	r2, r3, #4
 80043be:	603a      	str	r2, [r7, #0]
 80043c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043c4:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80043c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80043cc:	3304      	adds	r3, #4
 80043ce:	ed93 7a00 	vldr	s14, [r3]
 80043d2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80043d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80043da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80043de:	3304      	adds	r3, #4
 80043e0:	edd3 7a00 	vldr	s15, [r3]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	1d1a      	adds	r2, r3, #4
 80043e8:	603a      	str	r2, [r7, #0]
 80043ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ee:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80043f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 80043fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8004402:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004406:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800440a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800440e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8004412:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004416:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800441a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800441e:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8004422:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8004426:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800442a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8004432:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004436:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800443a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800443e:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8004442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004446:	1d1a      	adds	r2, r3, #4
 8004448:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800444c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004450:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8004454:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004458:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800445c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004460:	1d1a      	adds	r2, r3, #4
 8004462:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8004466:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800446a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800446e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004472:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 8004476:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800447e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8004486:	edd7 7a07 	vldr	s15, [r7, #28]
 800448a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800448e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004492:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8004496:	edd7 7a08 	vldr	s15, [r7, #32]
 800449a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800449e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80044a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80044aa:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80044ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044b2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80044b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80044ba:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80044be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80044c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044d0:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80044d4:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80044d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044dc:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80044e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044e4:	1d1a      	adds	r2, r3, #4
 80044e6:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044ea:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80044ee:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80044f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044f6:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 80044fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8004502:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800450a:	edd7 7a03 	vldr	s15, [r7, #12]
 800450e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004516:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800451a:	edd7 7a04 	vldr	s15, [r7, #16]
 800451e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004526:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800452a:	edd7 7a04 	vldr	s15, [r7, #16]
 800452e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8004532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004536:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800453a:	edd7 7a03 	vldr	s15, [r7, #12]
 800453e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8004542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004546:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800454a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800454e:	1d1a      	adds	r2, r3, #4
 8004550:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8004554:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8004558:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800455c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004560:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8004564:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004568:	1d1a      	adds	r2, r3, #4
 800456a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800456e:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8004572:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8004576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800457a:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800457e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004582:	b299      	uxth	r1, r3
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	2304      	movs	r3, #4
 800458a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800458c:	f000 f9ac 	bl	80048e8 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 8004590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004594:	b299      	uxth	r1, r3
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	685a      	ldr	r2, [r3, #4]
 800459a:	2304      	movs	r3, #4
 800459c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800459e:	f000 f9a3 	bl	80048e8 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 80045a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045a6:	b299      	uxth	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	2304      	movs	r3, #4
 80045ae:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80045b0:	f000 f99a 	bl	80048e8 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 80045b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045b8:	b299      	uxth	r1, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	2304      	movs	r3, #4
 80045c0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80045c2:	f000 f991 	bl	80048e8 <arm_radix8_butterfly_f32>
}
 80045c6:	bf00      	nop
 80045c8:	37b0      	adds	r7, #176	; 0xb0
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b088      	sub	sp, #32
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	4611      	mov	r1, r2
 80045da:	461a      	mov	r2, r3
 80045dc:	460b      	mov	r3, r1
 80045de:	71fb      	strb	r3, [r7, #7]
 80045e0:	4613      	mov	r3, r2
 80045e2:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80045ea:	79fb      	ldrb	r3, [r7, #7]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d117      	bne.n	8004620 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	3304      	adds	r3, #4
 80045f4:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e00d      	b.n	8004618 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 80045fc:	69bb      	ldr	r3, [r7, #24]
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	eef1 7a67 	vneg.f32	s15, s15
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	3308      	adds	r3, #8
 8004610:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	3301      	adds	r3, #1
 8004616:	61fb      	str	r3, [r7, #28]
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	429a      	cmp	r2, r3
 800461e:	d3ed      	bcc.n	80045fc <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004626:	d040      	beq.n	80046aa <arm_cfft_f32+0xdc>
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462e:	d845      	bhi.n	80046bc <arm_cfft_f32+0xee>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004636:	d033      	beq.n	80046a0 <arm_cfft_f32+0xd2>
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800463e:	d83d      	bhi.n	80046bc <arm_cfft_f32+0xee>
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004646:	d026      	beq.n	8004696 <arm_cfft_f32+0xc8>
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464e:	d835      	bhi.n	80046bc <arm_cfft_f32+0xee>
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004656:	d028      	beq.n	80046aa <arm_cfft_f32+0xdc>
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800465e:	d82d      	bhi.n	80046bc <arm_cfft_f32+0xee>
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004666:	d01b      	beq.n	80046a0 <arm_cfft_f32+0xd2>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466e:	d825      	bhi.n	80046bc <arm_cfft_f32+0xee>
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2b80      	cmp	r3, #128	; 0x80
 8004674:	d00f      	beq.n	8004696 <arm_cfft_f32+0xc8>
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2b80      	cmp	r3, #128	; 0x80
 800467a:	d81f      	bhi.n	80046bc <arm_cfft_f32+0xee>
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d013      	beq.n	80046aa <arm_cfft_f32+0xdc>
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	2b40      	cmp	r3, #64	; 0x40
 8004686:	d819      	bhi.n	80046bc <arm_cfft_f32+0xee>
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	2b10      	cmp	r3, #16
 800468c:	d003      	beq.n	8004696 <arm_cfft_f32+0xc8>
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	2b20      	cmp	r3, #32
 8004692:	d005      	beq.n	80046a0 <arm_cfft_f32+0xd2>
 8004694:	e012      	b.n	80046bc <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8004696:	68b9      	ldr	r1, [r7, #8]
 8004698:	68f8      	ldr	r0, [r7, #12]
 800469a:	f7fe ff79 	bl	8003590 <arm_cfft_radix8by2_f32>
    break;
 800469e:	e00d      	b.n	80046bc <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 80046a0:	68b9      	ldr	r1, [r7, #8]
 80046a2:	68f8      	ldr	r0, [r7, #12]
 80046a4:	f7ff f968 	bl	8003978 <arm_cfft_radix8by4_f32>
    break;
 80046a8:	e008      	b.n	80046bc <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	b299      	uxth	r1, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	2301      	movs	r3, #1
 80046b4:	68b8      	ldr	r0, [r7, #8]
 80046b6:	f000 f917 	bl	80048e8 <arm_radix8_butterfly_f32>
    break;
 80046ba:	bf00      	nop
  }

  if ( bitReverseFlag )
 80046bc:	79bb      	ldrb	r3, [r7, #6]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8999      	ldrh	r1, [r3, #12]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	461a      	mov	r2, r3
 80046cc:	68b8      	ldr	r0, [r7, #8]
 80046ce:	f7fe ff06 	bl	80034de <arm_bitreversal_32>

  if (ifftFlag == 1U)
 80046d2:	79fb      	ldrb	r3, [r7, #7]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d130      	bne.n	800473a <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ea:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80046f2:	2300      	movs	r3, #0
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	e01c      	b.n	8004732 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	1d1a      	adds	r2, r3, #4
 80046fc:	61ba      	str	r2, [r7, #24]
 80046fe:	ed93 7a00 	vldr	s14, [r3]
 8004702:	edd7 7a04 	vldr	s15, [r7, #16]
 8004706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800470a:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	edd3 7a00 	vldr	s15, [r3]
 8004714:	eeb1 7a67 	vneg.f32	s14, s15
 8004718:	edd7 7a04 	vldr	s15, [r7, #16]
 800471c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	3304      	adds	r3, #4
 800472a:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	3301      	adds	r3, #1
 8004730:	61fb      	str	r3, [r7, #28]
 8004732:	69fa      	ldr	r2, [r7, #28]
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	429a      	cmp	r2, r3
 8004738:	d3de      	bcc.n	80046f8 <arm_cfft_f32+0x12a>
    }
  }
}
 800473a:	bf00      	nop
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	460b      	mov	r3, r1
 800474e:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 8004750:	2300      	movs	r3, #0
 8004752:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	887a      	ldrh	r2, [r7, #2]
 8004758:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	881b      	ldrh	r3, [r3, #0]
 8004764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004768:	d02c      	beq.n	80047c4 <arm_cfft_init_f32+0x80>
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476e:	f300 809e 	bgt.w	80048ae <arm_cfft_init_f32+0x16a>
 8004772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004776:	d032      	beq.n	80047de <arm_cfft_init_f32+0x9a>
 8004778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477c:	f300 8097 	bgt.w	80048ae <arm_cfft_init_f32+0x16a>
 8004780:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004784:	d038      	beq.n	80047f8 <arm_cfft_init_f32+0xb4>
 8004786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478a:	f300 8090 	bgt.w	80048ae <arm_cfft_init_f32+0x16a>
 800478e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004792:	d03e      	beq.n	8004812 <arm_cfft_init_f32+0xce>
 8004794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004798:	f300 8089 	bgt.w	80048ae <arm_cfft_init_f32+0x16a>
 800479c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a0:	d044      	beq.n	800482c <arm_cfft_init_f32+0xe8>
 80047a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047a6:	f300 8082 	bgt.w	80048ae <arm_cfft_init_f32+0x16a>
 80047aa:	2b80      	cmp	r3, #128	; 0x80
 80047ac:	d04b      	beq.n	8004846 <arm_cfft_init_f32+0x102>
 80047ae:	2b80      	cmp	r3, #128	; 0x80
 80047b0:	dc7d      	bgt.n	80048ae <arm_cfft_init_f32+0x16a>
 80047b2:	2b40      	cmp	r3, #64	; 0x40
 80047b4:	d054      	beq.n	8004860 <arm_cfft_init_f32+0x11c>
 80047b6:	2b40      	cmp	r3, #64	; 0x40
 80047b8:	dc79      	bgt.n	80048ae <arm_cfft_init_f32+0x16a>
 80047ba:	2b10      	cmp	r3, #16
 80047bc:	d06a      	beq.n	8004894 <arm_cfft_init_f32+0x150>
 80047be:	2b20      	cmp	r3, #32
 80047c0:	d05b      	beq.n	800487a <arm_cfft_init_f32+0x136>
 80047c2:	e074      	b.n	80048ae <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 80047c4:	4b3f      	ldr	r3, [pc, #252]	; (80048c4 <arm_cfft_init_f32+0x180>)
 80047c6:	899a      	ldrh	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	819a      	strh	r2, [r3, #12]
 80047cc:	4b3d      	ldr	r3, [pc, #244]	; (80048c4 <arm_cfft_init_f32+0x180>)
 80047ce:	689a      	ldr	r2, [r3, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	4b3b      	ldr	r3, [pc, #236]	; (80048c4 <arm_cfft_init_f32+0x180>)
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	605a      	str	r2, [r3, #4]
            break;
 80047dc:	e06a      	b.n	80048b4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 80047de:	4b3a      	ldr	r3, [pc, #232]	; (80048c8 <arm_cfft_init_f32+0x184>)
 80047e0:	899a      	ldrh	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	819a      	strh	r2, [r3, #12]
 80047e6:	4b38      	ldr	r3, [pc, #224]	; (80048c8 <arm_cfft_init_f32+0x184>)
 80047e8:	689a      	ldr	r2, [r3, #8]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	609a      	str	r2, [r3, #8]
 80047ee:	4b36      	ldr	r3, [pc, #216]	; (80048c8 <arm_cfft_init_f32+0x184>)
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	605a      	str	r2, [r3, #4]

            break;
 80047f6:	e05d      	b.n	80048b4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 80047f8:	4b34      	ldr	r3, [pc, #208]	; (80048cc <arm_cfft_init_f32+0x188>)
 80047fa:	899a      	ldrh	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	819a      	strh	r2, [r3, #12]
 8004800:	4b32      	ldr	r3, [pc, #200]	; (80048cc <arm_cfft_init_f32+0x188>)
 8004802:	689a      	ldr	r2, [r3, #8]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	4b30      	ldr	r3, [pc, #192]	; (80048cc <arm_cfft_init_f32+0x188>)
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	605a      	str	r2, [r3, #4]

            break;
 8004810:	e050      	b.n	80048b4 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 8004812:	4b2f      	ldr	r3, [pc, #188]	; (80048d0 <arm_cfft_init_f32+0x18c>)
 8004814:	899a      	ldrh	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	819a      	strh	r2, [r3, #12]
 800481a:	4b2d      	ldr	r3, [pc, #180]	; (80048d0 <arm_cfft_init_f32+0x18c>)
 800481c:	689a      	ldr	r2, [r3, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	609a      	str	r2, [r3, #8]
 8004822:	4b2b      	ldr	r3, [pc, #172]	; (80048d0 <arm_cfft_init_f32+0x18c>)
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	605a      	str	r2, [r3, #4]
            break;
 800482a:	e043      	b.n	80048b4 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 800482c:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <arm_cfft_init_f32+0x190>)
 800482e:	899a      	ldrh	r2, [r3, #12]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	819a      	strh	r2, [r3, #12]
 8004834:	4b27      	ldr	r3, [pc, #156]	; (80048d4 <arm_cfft_init_f32+0x190>)
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	4b25      	ldr	r3, [pc, #148]	; (80048d4 <arm_cfft_init_f32+0x190>)
 800483e:	685a      	ldr	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	605a      	str	r2, [r3, #4]
            break;
 8004844:	e036      	b.n	80048b4 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 8004846:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <arm_cfft_init_f32+0x194>)
 8004848:	899a      	ldrh	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	819a      	strh	r2, [r3, #12]
 800484e:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <arm_cfft_init_f32+0x194>)
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	609a      	str	r2, [r3, #8]
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <arm_cfft_init_f32+0x194>)
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	605a      	str	r2, [r3, #4]
            break;
 800485e:	e029      	b.n	80048b4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 8004860:	4b1e      	ldr	r3, [pc, #120]	; (80048dc <arm_cfft_init_f32+0x198>)
 8004862:	899a      	ldrh	r2, [r3, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	819a      	strh	r2, [r3, #12]
 8004868:	4b1c      	ldr	r3, [pc, #112]	; (80048dc <arm_cfft_init_f32+0x198>)
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	609a      	str	r2, [r3, #8]
 8004870:	4b1a      	ldr	r3, [pc, #104]	; (80048dc <arm_cfft_init_f32+0x198>)
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	605a      	str	r2, [r3, #4]
            break;
 8004878:	e01c      	b.n	80048b4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 800487a:	4b19      	ldr	r3, [pc, #100]	; (80048e0 <arm_cfft_init_f32+0x19c>)
 800487c:	899a      	ldrh	r2, [r3, #12]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	819a      	strh	r2, [r3, #12]
 8004882:	4b17      	ldr	r3, [pc, #92]	; (80048e0 <arm_cfft_init_f32+0x19c>)
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	609a      	str	r2, [r3, #8]
 800488a:	4b15      	ldr	r3, [pc, #84]	; (80048e0 <arm_cfft_init_f32+0x19c>)
 800488c:	685a      	ldr	r2, [r3, #4]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	605a      	str	r2, [r3, #4]
            break;
 8004892:	e00f      	b.n	80048b4 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 8004894:	4b13      	ldr	r3, [pc, #76]	; (80048e4 <arm_cfft_init_f32+0x1a0>)
 8004896:	899a      	ldrh	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	819a      	strh	r2, [r3, #12]
 800489c:	4b11      	ldr	r3, [pc, #68]	; (80048e4 <arm_cfft_init_f32+0x1a0>)
 800489e:	689a      	ldr	r2, [r3, #8]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	609a      	str	r2, [r3, #8]
 80048a4:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <arm_cfft_init_f32+0x1a0>)
 80048a6:	685a      	ldr	r2, [r3, #4]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	605a      	str	r2, [r3, #4]
            break;
 80048ac:	e002      	b.n	80048b4 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 80048ae:	23ff      	movs	r3, #255	; 0xff
 80048b0:	73fb      	strb	r3, [r7, #15]
            break;
 80048b2:	bf00      	nop
        }


        return (status);
 80048b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	080375e8 	.word	0x080375e8
 80048c8:	080375d8 	.word	0x080375d8
 80048cc:	080375c8 	.word	0x080375c8
 80048d0:	080375b8 	.word	0x080375b8
 80048d4:	080375a8 	.word	0x080375a8
 80048d8:	08037598 	.word	0x08037598
 80048dc:	08037588 	.word	0x08037588
 80048e0:	08037578 	.word	0x08037578
 80048e4:	08037568 	.word	0x08037568

080048e8 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b0bd      	sub	sp, #244	; 0xf4
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	607a      	str	r2, [r7, #4]
 80048f2:	461a      	mov	r2, r3
 80048f4:	460b      	mov	r3, r1
 80048f6:	817b      	strh	r3, [r7, #10]
 80048f8:	4613      	mov	r3, r2
 80048fa:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <arm_radix8_butterfly_f32+0x3c>)
 80048fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8004902:	897b      	ldrh	r3, [r7, #10]
 8004904:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 8004908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800490c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8004910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004914:	08db      	lsrs	r3, r3, #3
 8004916:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004920:	e002      	b.n	8004928 <arm_radix8_butterfly_f32+0x40>
 8004922:	bf00      	nop
 8004924:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8004928:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800492c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004930:	4413      	add	r3, r2
 8004932:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8004936:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800493a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800493e:	4413      	add	r3, r2
 8004940:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8004944:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494c:	4413      	add	r3, r2
 800494e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8004952:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8004956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800495a:	4413      	add	r3, r2
 800495c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8004960:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004968:	4413      	add	r3, r2
 800496a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800496e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004976:	4413      	add	r3, r2
 8004978:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800497c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004984:	4413      	add	r3, r2
 8004986:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800498a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4413      	add	r3, r2
 8004994:	ed93 7a00 	vldr	s14, [r3]
 8004998:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	68fa      	ldr	r2, [r7, #12]
 80049a0:	4413      	add	r3, r2
 80049a2:	edd3 7a00 	vldr	s15, [r3]
 80049a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049aa:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80049ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	ed93 7a00 	vldr	s14, [r3]
 80049bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049c0:	00db      	lsls	r3, r3, #3
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	4413      	add	r3, r2
 80049c6:	edd3 7a00 	vldr	s15, [r3]
 80049ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ce:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80049d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	ed93 7a00 	vldr	s14, [r3]
 80049e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	68fa      	ldr	r2, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	edd3 7a00 	vldr	s15, [r3]
 80049ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049f2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80049f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	ed93 7a00 	vldr	s14, [r3]
 8004a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	edd3 7a00 	vldr	s15, [r3]
 8004a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a16:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8004a1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	ed93 7a00 	vldr	s14, [r3]
 8004a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	edd3 7a00 	vldr	s15, [r3]
 8004a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a3a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8004a3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	ed93 7a00 	vldr	s14, [r3]
 8004a4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a50:	00db      	lsls	r3, r3, #3
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	4413      	add	r3, r2
 8004a56:	edd3 7a00 	vldr	s15, [r3]
 8004a5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a5e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8004a62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	ed93 7a00 	vldr	s14, [r3]
 8004a70:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	4413      	add	r3, r2
 8004a7a:	edd3 7a00 	vldr	s15, [r3]
 8004a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a82:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8004a86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	ed93 7a00 	vldr	s14, [r3]
 8004a94:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	edd3 7a00 	vldr	s15, [r3]
 8004aa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004aa6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 8004aaa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004aae:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004ab2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 8004aba:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004abe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ac6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 8004aca:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004ace:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ad6:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 8004ada:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004ade:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ae6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 8004aea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004af8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b00:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8004b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b08:	00db      	lsls	r3, r3, #3
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004b12:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004b16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b1a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8004b1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	3304      	adds	r3, #4
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	4413      	add	r3, r2
 8004b2a:	ed93 7a00 	vldr	s14, [r3]
 8004b2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b32:	00db      	lsls	r3, r3, #3
 8004b34:	3304      	adds	r3, #4
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	edd3 7a00 	vldr	s15, [r3]
 8004b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b42:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8004b46:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	ed93 7a00 	vldr	s14, [r3]
 8004b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	edd3 7a00 	vldr	s15, [r3]
 8004b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b6a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8004b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	3304      	adds	r3, #4
 8004b76:	68fa      	ldr	r2, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	ed93 7a00 	vldr	s14, [r3]
 8004b7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	3304      	adds	r3, #4
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	edd3 7a00 	vldr	s15, [r3]
 8004b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b92:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8004b96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	ed93 7a00 	vldr	s14, [r3]
 8004ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	3304      	adds	r3, #4
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	edd3 7a00 	vldr	s15, [r3]
 8004bb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bba:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8004bbe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bc2:	00db      	lsls	r3, r3, #3
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	68fa      	ldr	r2, [r7, #12]
 8004bc8:	4413      	add	r3, r2
 8004bca:	ed93 7a00 	vldr	s14, [r3]
 8004bce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	68fa      	ldr	r2, [r7, #12]
 8004bd8:	4413      	add	r3, r2
 8004bda:	edd3 7a00 	vldr	s15, [r3]
 8004bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004be2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8004be6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004bea:	00db      	lsls	r3, r3, #3
 8004bec:	3304      	adds	r3, #4
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	ed93 7a00 	vldr	s14, [r3]
 8004bf6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004bfa:	00db      	lsls	r3, r3, #3
 8004bfc:	3304      	adds	r3, #4
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4413      	add	r3, r2
 8004c02:	edd3 7a00 	vldr	s15, [r3]
 8004c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c0a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8004c0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c12:	00db      	lsls	r3, r3, #3
 8004c14:	3304      	adds	r3, #4
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	4413      	add	r3, r2
 8004c1a:	ed93 7a00 	vldr	s14, [r3]
 8004c1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	3304      	adds	r3, #4
 8004c26:	68fa      	ldr	r2, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	edd3 7a00 	vldr	s15, [r3]
 8004c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c32:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8004c36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c3a:	00db      	lsls	r3, r3, #3
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4413      	add	r3, r2
 8004c42:	ed93 7a00 	vldr	s14, [r3]
 8004c46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c4a:	00db      	lsls	r3, r3, #3
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	edd3 7a00 	vldr	s15, [r3]
 8004c56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c5a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8004c5e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004c62:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c6a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8004c6e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004c72:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c7a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8004c7e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004c82:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c8a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8004c8e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8004c92:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c9a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8004c9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4413      	add	r3, r2
 8004caa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004cae:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cb6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8004cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	3304      	adds	r3, #4
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8004cca:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004cce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cd2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8004cd6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4413      	add	r3, r2
 8004ce0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004ce4:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004cec:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8004cf0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cf4:	00db      	lsls	r3, r3, #3
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4413      	add	r3, r2
 8004cfa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004cfe:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8004d02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d06:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8004d0a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004d0e:	00db      	lsls	r3, r3, #3
 8004d10:	3304      	adds	r3, #4
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004d1a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d22:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8004d26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4413      	add	r3, r2
 8004d32:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004d36:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8004d3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d3e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8004d42:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004d46:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004d4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d4e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d56:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8004d5a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8004d5e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d66:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d6e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8004d72:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004d76:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d7e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004d82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d86:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8004d8a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8004d8e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004d96:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8004d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d9e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8004da2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004da6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dae:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8004db2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004db6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8004dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dbe:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8004dc2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8004dc6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dce:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8004dd2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8004dd6:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8004dda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dde:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8004de2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004de6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004dee:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8004df2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004df6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8004dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004dfe:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8004e02:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004e06:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e0e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8004e12:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8004e16:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8004e1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e1e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8004e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e26:	00db      	lsls	r3, r3, #3
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004e30:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e38:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8004e3c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004e40:	00db      	lsls	r3, r3, #3
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	4413      	add	r3, r2
 8004e46:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8004e4a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8004e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e52:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8004e56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004e64:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004e6c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8004e70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004e74:	00db      	lsls	r3, r3, #3
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4413      	add	r3, r2
 8004e7a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004e7e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8004e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e86:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8004e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e8e:	00db      	lsls	r3, r3, #3
 8004e90:	3304      	adds	r3, #4
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4413      	add	r3, r2
 8004e96:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004e9a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004e9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ea2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8004ea6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	3304      	adds	r3, #4
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8004eb6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8004eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ebe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8004ec2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	3304      	adds	r3, #4
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004ed2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eda:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8004ede:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8004eee:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004ef2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004ef6:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8004efa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f02:	4413      	add	r3, r2
 8004f04:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 8004f08:	897b      	ldrh	r3, [r7, #10]
 8004f0a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8004f0e:	429a      	cmp	r2, r3
 8004f10:	f4ff ad0a 	bcc.w	8004928 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8004f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f18:	2b07      	cmp	r3, #7
 8004f1a:	f240 84e3 	bls.w	80058e4 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8004f2a:	893b      	ldrh	r3, [r7, #8]
 8004f2c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004f30:	4413      	add	r3, r2
 8004f32:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8004f34:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8004f3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8004f3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f40:	4413      	add	r3, r2
 8004f42:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8004f44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f48:	4413      	add	r3, r2
 8004f4a:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8004f4c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f50:	4413      	add	r3, r2
 8004f52:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8004f54:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004f56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f58:	4413      	add	r3, r2
 8004f5a:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8004f5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f60:	4413      	add	r3, r2
 8004f62:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8004f64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004f68:	4413      	add	r3, r2
 8004f6a:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 8004f6c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	4413      	add	r3, r2
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8004f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	4413      	add	r3, r2
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8004f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f88:	00db      	lsls	r3, r3, #3
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8004f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	4413      	add	r3, r2
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8004f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8004faa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8004fb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8004fc2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	3304      	adds	r3, #4
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	4413      	add	r3, r2
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8004fd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fd4:	00db      	lsls	r3, r3, #3
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4413      	add	r3, r2
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8004fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	4413      	add	r3, r2
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8004fee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8004ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	3304      	adds	r3, #4
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	4413      	add	r3, r2
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800500a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	3304      	adds	r3, #4
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 8005018:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	3304      	adds	r3, #4
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	4413      	add	r3, r2
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 8005026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800502a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800502e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005036:	4413      	add	r3, r2
 8005038:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800503c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8005040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005044:	4413      	add	r3, r2
 8005046:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800504a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800504e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005052:	4413      	add	r3, r2
 8005054:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8005058:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005060:	4413      	add	r3, r2
 8005062:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8005066:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800506a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800506e:	4413      	add	r3, r2
 8005070:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8005074:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800507c:	4413      	add	r3, r2
 800507e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8005082:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800508a:	4413      	add	r3, r2
 800508c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8005090:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4413      	add	r3, r2
 800509a:	ed93 7a00 	vldr	s14, [r3]
 800509e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	edd3 7a00 	vldr	s15, [r3]
 80050ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050b0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80050b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	ed93 7a00 	vldr	s14, [r3]
 80050c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	68fa      	ldr	r2, [r7, #12]
 80050ca:	4413      	add	r3, r2
 80050cc:	edd3 7a00 	vldr	s15, [r3]
 80050d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050d4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80050d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050dc:	00db      	lsls	r3, r3, #3
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4413      	add	r3, r2
 80050e2:	ed93 7a00 	vldr	s14, [r3]
 80050e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	edd3 7a00 	vldr	s15, [r3]
 80050f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80050f8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80050fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	ed93 7a00 	vldr	s14, [r3]
 800510a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	edd3 7a00 	vldr	s15, [r3]
 8005118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800511c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8005120:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	4413      	add	r3, r2
 800512a:	ed93 7a00 	vldr	s14, [r3]
 800512e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	edd3 7a00 	vldr	s15, [r3]
 800513c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005140:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8005144:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	68fa      	ldr	r2, [r7, #12]
 800514c:	4413      	add	r3, r2
 800514e:	ed93 7a00 	vldr	s14, [r3]
 8005152:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005156:	00db      	lsls	r3, r3, #3
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	edd3 7a00 	vldr	s15, [r3]
 8005160:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005164:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8005168:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	ed93 7a00 	vldr	s14, [r3]
 8005176:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	edd3 7a00 	vldr	s15, [r3]
 8005184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005188:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800518c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005190:	00db      	lsls	r3, r3, #3
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4413      	add	r3, r2
 8005196:	ed93 7a00 	vldr	s14, [r3]
 800519a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800519e:	00db      	lsls	r3, r3, #3
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	4413      	add	r3, r2
 80051a4:	edd3 7a00 	vldr	s15, [r3]
 80051a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051ac:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 80051b0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80051b4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80051b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051bc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 80051c0:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80051c4:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80051c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051cc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 80051d0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80051d4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80051d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80051dc:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 80051e0:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 80051e4:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80051e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80051ec:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80051f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4413      	add	r3, r2
 80051fa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80051fe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005202:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005206:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800520a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800520e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8005212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005216:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800521a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800521e:	00db      	lsls	r3, r3, #3
 8005220:	3304      	adds	r3, #4
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	4413      	add	r3, r2
 8005226:	ed93 7a00 	vldr	s14, [r3]
 800522a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	3304      	adds	r3, #4
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	4413      	add	r3, r2
 8005236:	edd3 7a00 	vldr	s15, [r3]
 800523a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800523e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8005242:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	3304      	adds	r3, #4
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	4413      	add	r3, r2
 800524e:	ed93 7a00 	vldr	s14, [r3]
 8005252:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	3304      	adds	r3, #4
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	edd3 7a00 	vldr	s15, [r3]
 8005262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005266:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800526a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	3304      	adds	r3, #4
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4413      	add	r3, r2
 8005276:	ed93 7a00 	vldr	s14, [r3]
 800527a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	3304      	adds	r3, #4
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	4413      	add	r3, r2
 8005286:	edd3 7a00 	vldr	s15, [r3]
 800528a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800528e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8005292:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	3304      	adds	r3, #4
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	ed93 7a00 	vldr	s14, [r3]
 80052a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80052a6:	00db      	lsls	r3, r3, #3
 80052a8:	3304      	adds	r3, #4
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4413      	add	r3, r2
 80052ae:	edd3 7a00 	vldr	s15, [r3]
 80052b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052b6:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80052ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	3304      	adds	r3, #4
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	ed93 7a00 	vldr	s14, [r3]
 80052ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	3304      	adds	r3, #4
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	4413      	add	r3, r2
 80052d6:	edd3 7a00 	vldr	s15, [r3]
 80052da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80052de:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 80052e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	3304      	adds	r3, #4
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	ed93 7a00 	vldr	s14, [r3]
 80052f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052f6:	00db      	lsls	r3, r3, #3
 80052f8:	3304      	adds	r3, #4
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	4413      	add	r3, r2
 80052fe:	edd3 7a00 	vldr	s15, [r3]
 8005302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005306:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800530a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	3304      	adds	r3, #4
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4413      	add	r3, r2
 8005316:	ed93 7a00 	vldr	s14, [r3]
 800531a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800531e:	00db      	lsls	r3, r3, #3
 8005320:	3304      	adds	r3, #4
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	edd3 7a00 	vldr	s15, [r3]
 800532a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800532e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8005332:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	3304      	adds	r3, #4
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	ed93 7a00 	vldr	s14, [r3]
 8005342:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	3304      	adds	r3, #4
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4413      	add	r3, r2
 800534e:	edd3 7a00 	vldr	s15, [r3]
 8005352:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005356:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800535a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800535e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005362:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005366:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800536a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800536e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8005372:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005376:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800537a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800537e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005386:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800538a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800538e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005392:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005396:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800539a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800539e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80053a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053a6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 80053aa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80053ae:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80053b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053b6:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80053ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80053be:	00db      	lsls	r3, r3, #3
 80053c0:	3304      	adds	r3, #4
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4413      	add	r3, r2
 80053c6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80053ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80053ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053d2:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 80053d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80053da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80053de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053e2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 80053e6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80053ea:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80053ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053f2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 80053f6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80053fa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80053fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005402:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8005406:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800540a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800540e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005412:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8005416:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800541a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8005426:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800542a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800542e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005432:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8005436:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800543a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800543e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005442:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8005446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	ed97 7a07 	vldr	s14, [r7, #28]
 8005454:	edd7 7a06 	vldr	s15, [r7, #24]
 8005458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800545c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8005460:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	3304      	adds	r3, #4
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4413      	add	r3, r2
 800546c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005470:	edd7 7a04 	vldr	s15, [r7, #16]
 8005474:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005478:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800547c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8005480:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005484:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005488:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800548c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8005490:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005494:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005498:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800549c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80054a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80054a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054a8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80054ac:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80054b0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80054b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054b8:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80054bc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4413      	add	r3, r2
 80054c6:	ed97 7a07 	vldr	s14, [r7, #28]
 80054ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80054ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054d2:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80054d6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80054da:	00db      	lsls	r3, r3, #3
 80054dc:	3304      	adds	r3, #4
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	4413      	add	r3, r2
 80054e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80054e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80054ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054ee:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 80054f2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80054f6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80054fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054fe:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8005502:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005506:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800550a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8005512:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8005516:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800551a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8005522:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005526:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800552a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800552e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8005532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005536:	00db      	lsls	r3, r3, #3
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4413      	add	r3, r2
 800553c:	ed97 7a07 	vldr	s14, [r7, #28]
 8005540:	edd7 7a06 	vldr	s15, [r7, #24]
 8005544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005548:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800554c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	3304      	adds	r3, #4
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4413      	add	r3, r2
 8005558:	ed97 7a05 	vldr	s14, [r7, #20]
 800555c:	edd7 7a04 	vldr	s15, [r7, #16]
 8005560:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005564:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8005568:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800556c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005570:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005574:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8005580:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8005584:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005588:	ee77 7a27 	vadd.f32	s15, s14, s15
 800558c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8005590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005594:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8005598:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800559c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055a4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80055a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055ac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 80055b0:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80055b4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80055b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055bc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80055c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 80055c8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80055cc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80055d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055d4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 80055d8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80055dc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80055e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055e4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 80055e8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80055ec:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80055f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 80055f8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80055fc:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8005600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005604:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8005608:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800560c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005610:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005614:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8005618:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800561c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8005620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005624:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8005628:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800562c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005630:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005634:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8005638:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800563c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8005640:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005644:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8005648:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800564c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005654:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8005658:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800565c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8005660:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005664:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8005668:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800566c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005670:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005674:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8005678:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800567c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8005680:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005684:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8005688:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800568c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005694:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8005698:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800569c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80056a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056a4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80056a8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80056ac:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80056b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056b4:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 80056b8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80056bc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80056c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056c4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 80056c8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80056cc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80056d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 80056d8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80056dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80056e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 80056e8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80056ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80056f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 80056f8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80056fc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8005700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005704:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8005708:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	4413      	add	r3, r2
 8005712:	ed97 7a07 	vldr	s14, [r7, #28]
 8005716:	edd7 7a06 	vldr	s15, [r7, #24]
 800571a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800571e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8005722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	3304      	adds	r3, #4
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	ed97 7a05 	vldr	s14, [r7, #20]
 8005732:	edd7 7a04 	vldr	s15, [r7, #16]
 8005736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800573a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800573e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005742:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800574e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005752:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800575e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005762:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800576e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005772:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8005776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800577e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4413      	add	r3, r2
 8005788:	ed97 7a07 	vldr	s14, [r7, #28]
 800578c:	edd7 7a06 	vldr	s15, [r7, #24]
 8005790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005794:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8005798:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800579c:	00db      	lsls	r3, r3, #3
 800579e:	3304      	adds	r3, #4
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4413      	add	r3, r2
 80057a4:	ed97 7a05 	vldr	s14, [r7, #20]
 80057a8:	edd7 7a04 	vldr	s15, [r7, #16]
 80057ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057b0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80057b4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80057b8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80057bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80057c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80057c8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80057cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80057d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80057d8:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80057dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 80057e4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80057e8:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 80057ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 80057f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80057f8:	00db      	lsls	r3, r3, #3
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8005802:	edd7 7a06 	vldr	s15, [r7, #24]
 8005806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800580a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800580e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	3304      	adds	r3, #4
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4413      	add	r3, r2
 800581a:	ed97 7a05 	vldr	s14, [r7, #20]
 800581e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005826:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800582a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800582e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005836:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800583a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800583e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005846:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800584a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800584e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005856:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800585a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800585e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005866:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800586a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4413      	add	r3, r2
 8005874:	ed97 7a07 	vldr	s14, [r7, #28]
 8005878:	edd7 7a06 	vldr	s15, [r7, #24]
 800587c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005880:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8005884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	3304      	adds	r3, #4
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4413      	add	r3, r2
 8005890:	ed97 7a05 	vldr	s14, [r7, #20]
 8005894:	edd7 7a04 	vldr	s15, [r7, #16]
 8005898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800589c:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80058a0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80058a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058a8:	4413      	add	r3, r2
 80058aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 80058ae:	897b      	ldrh	r3, [r7, #10]
 80058b0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80058b4:	429a      	cmp	r2, r3
 80058b6:	f4ff abba 	bcc.w	800502e <arm_radix8_butterfly_f32+0x746>

         j++;
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058be:	3301      	adds	r3, #1
 80058c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 80058c4:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80058c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058cc:	429a      	cmp	r2, r3
 80058ce:	f4ff ab2c 	bcc.w	8004f2a <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80058d2:	893b      	ldrh	r3, [r7, #8]
 80058d4:	00db      	lsls	r3, r3, #3
 80058d6:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058dc:	2b07      	cmp	r3, #7
 80058de:	f63f a813 	bhi.w	8004908 <arm_radix8_butterfly_f32+0x20>
}
 80058e2:	e000      	b.n	80058e6 <arm_radix8_butterfly_f32+0xffe>
         break;
 80058e4:	bf00      	nop
}
 80058e6:	bf00      	nop
 80058e8:	37f4      	adds	r7, #244	; 0xf4
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop

080058f4 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b095      	sub	sp, #84	; 0x54
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	695b      	ldr	r3, [r3, #20]
 8005904:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	881b      	ldrh	r3, [r3, #0]
 8005912:	3b01      	subs	r3, #1
 8005914:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 8005916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800591c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 8005922:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 8005928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800592e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005930:	1d1a      	adds	r2, r3, #4
 8005932:	64ba      	str	r2, [r7, #72]	; 0x48
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 8005938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593a:	1d1a      	adds	r2, r3, #4
 800593c:	64ba      	str	r2, [r7, #72]	; 0x48
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 8005942:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005946:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800594a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800594e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 8005952:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005956:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800595a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800595e:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 8005962:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005966:	edd7 7a08 	vldr	s15, [r7, #32]
 800596a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	1d1a      	adds	r2, r3, #4
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800597c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 8005980:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005984:	edd7 7a08 	vldr	s15, [r7, #32]
 8005988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	1d1a      	adds	r2, r3, #4
 8005990:	607a      	str	r2, [r7, #4]
 8005992:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800599a:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800599e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	4413      	add	r3, r2
 80059a6:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 80059a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059aa:	3308      	adds	r3, #8
 80059ac:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80059ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 80059b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 80059ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 80059c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 80059c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059c8:	1d1a      	adds	r2, r3, #4
 80059ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 80059d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d2:	1d1a      	adds	r2, r3, #4
 80059d4:	64ba      	str	r2, [r7, #72]	; 0x48
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 80059da:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80059de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80059e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 80059ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80059ee:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80059f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059f6:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 80059fa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80059fe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a06:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8005a0a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005a0e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a16:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8005a1a:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005a1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a26:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8005a2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005a2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8005a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a36:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8005a3a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8005a3e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8005a42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a46:	edd7 7a07 	vldr	s15, [r7, #28]
 8005a4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	1d1a      	adds	r2, r3, #4
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a64:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8005a68:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8005a6c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005a70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a74:	edd7 7a06 	vldr	s15, [r7, #24]
 8005a78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a7c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	1d1a      	adds	r2, r3, #4
 8005a88:	607a      	str	r2, [r7, #4]
 8005a8a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005a8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005a92:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 8005a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a98:	3308      	adds	r3, #8
 8005a9a:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8005a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a9e:	3b08      	subs	r3, #8
 8005aa0:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8005aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0);
 8005aa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	f73f af7f 	bgt.w	80059ae <stage_rfft_f32+0xba>
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	3754      	adds	r7, #84	; 0x54
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b095      	sub	sp, #84	; 0x54
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
        int32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	881b      	ldrh	r3, [r3, #0]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 8005ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 8005ae6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 8005aec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005aee:	3308      	adds	r3, #8
 8005af0:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 8005af2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005af6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005afa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	1d1a      	adds	r2, r3, #4
 8005b02:	607a      	str	r2, [r7, #4]
 8005b04:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b0c:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8005b10:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005b14:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8005b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	1d1a      	adds	r2, r3, #4
 8005b20:	607a      	str	r2, [r7, #4]
 8005b22:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005b2a:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8005b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	4413      	add	r3, r2
 8005b36:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 8005b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b3a:	3308      	adds	r3, #8
 8005b3c:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0)
 8005b3e:	e07c      	b.n	8005c3a <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8005b40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 8005b46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 8005b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 8005b52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 8005b58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b5a:	1d1a      	adds	r2, r3, #4
 8005b5c:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 8005b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b64:	1d1a      	adds	r2, r3, #4
 8005b66:	64ba      	str	r2, [r7, #72]	; 0x48
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 8005b6c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005b70:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b78:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 8005b7c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005b80:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b88:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 8005b8c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005b90:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b98:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 8005b9c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005ba0:	edd7 7a08 	vldr	s15, [r7, #32]
 8005ba4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ba8:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 8005bac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8005bb0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bb8:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 8005bbc:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005bc0:	edd7 7a08 	vldr	s15, [r7, #32]
 8005bc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc8:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 8005bcc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8005bd0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005bd4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bd8:	edd7 7a07 	vldr	s15, [r7, #28]
 8005bdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005be0:	edd7 7a06 	vldr	s15, [r7, #24]
 8005be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	1d1a      	adds	r2, r3, #4
 8005bec:	607a      	str	r2, [r7, #4]
 8005bee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bf6:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8005bfa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8005bfe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8005c02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c06:	edd7 7a05 	vldr	s15, [r7, #20]
 8005c0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	1d1a      	adds	r2, r3, #4
 8005c1a:	607a      	str	r2, [r7, #4]
 8005c1c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c24:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8005c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c2a:	3308      	adds	r3, #8
 8005c2c:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 8005c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c30:	3b08      	subs	r3, #8
 8005c32:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 8005c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c36:	3b01      	subs	r3, #1
 8005c38:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0)
 8005c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f73f af7f 	bgt.w	8005b40 <merge_rfft_f32+0x82>
   }

}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	3754      	adds	r7, #84	; 0x54
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00b      	beq.n	8005c80 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7ff ff26 	bl	8005abe <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8005c72:	78fa      	ldrb	r2, [r7, #3]
 8005c74:	2301      	movs	r3, #1
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	6978      	ldr	r0, [r7, #20]
 8005c7a:	f7fe fca8 	bl	80045ce <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8005c7e:	e00a      	b.n	8005c96 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	2301      	movs	r3, #1
 8005c84:	68b9      	ldr	r1, [r7, #8]
 8005c86:	6978      	ldr	r0, [r7, #20]
 8005c88:	f7fe fca1 	bl	80045ce <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f7ff fe2f 	bl	80058f4 <stage_rfft_f32>
}
 8005c96:	bf00      	nop
 8005c98:	3718      	adds	r7, #24
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d102      	bne.n	8005cb4 <arm_rfft_32_fast_init_f32+0x14>
 8005cae:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb2:	e014      	b.n	8005cde <arm_rfft_32_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),16);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2110      	movs	r1, #16
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe fd43 	bl	8004744 <arm_cfft_init_f32>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d002      	beq.n	8005cd0 <arm_rfft_32_fast_init_f32+0x30>
  {
    return(status);
 8005cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cce:	e006      	b.n	8005cde <arm_rfft_32_fast_init_f32+0x3e>
  }

  S->fftLenRFFT = 32U;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a03      	ldr	r2, [pc, #12]	; (8005ce8 <arm_rfft_32_fast_init_f32+0x48>)
 8005cda:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3710      	adds	r7, #16
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	0802f5e8 	.word	0x0802f5e8

08005cec <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d102      	bne.n	8005d00 <arm_rfft_64_fast_init_f32+0x14>
 8005cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8005cfe:	e014      	b.n	8005d2a <arm_rfft_64_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),32);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2120      	movs	r1, #32
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7fe fd1d 	bl	8004744 <arm_cfft_init_f32>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <arm_rfft_64_fast_init_f32+0x30>
  {
    return(status);
 8005d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1a:	e006      	b.n	8005d2a <arm_rfft_64_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 64U;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2240      	movs	r2, #64	; 0x40
 8005d20:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a03      	ldr	r2, [pc, #12]	; (8005d34 <arm_rfft_64_fast_init_f32+0x48>)
 8005d26:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	0802f668 	.word	0x0802f668

08005d38 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d102      	bne.n	8005d4c <arm_rfft_128_fast_init_f32+0x14>
 8005d46:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4a:	e014      	b.n	8005d76 <arm_rfft_128_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),64);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2140      	movs	r1, #64	; 0x40
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fe fcf7 	bl	8004744 <arm_cfft_init_f32>
 8005d56:	4603      	mov	r3, r0
 8005d58:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <arm_rfft_128_fast_init_f32+0x30>
  {
    return(status);
 8005d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d66:	e006      	b.n	8005d76 <arm_rfft_128_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 128;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2280      	movs	r2, #128	; 0x80
 8005d6c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a03      	ldr	r2, [pc, #12]	; (8005d80 <arm_rfft_128_fast_init_f32+0x48>)
 8005d72:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	0802f768 	.word	0x0802f768

08005d84 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d102      	bne.n	8005d98 <arm_rfft_256_fast_init_f32+0x14>
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295
 8005d96:	e015      	b.n	8005dc4 <arm_rfft_256_fast_init_f32+0x40>

  status=arm_cfft_init_f32(&(S->Sint),128);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2180      	movs	r1, #128	; 0x80
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	f7fe fcd1 	bl	8004744 <arm_cfft_init_f32>
 8005da2:	4603      	mov	r3, r0
 8005da4:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <arm_rfft_256_fast_init_f32+0x30>
  {
    return(status);
 8005dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db2:	e007      	b.n	8005dc4 <arm_rfft_256_fast_init_f32+0x40>
  }
  S->fftLenRFFT = 256U;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dba:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a03      	ldr	r2, [pc, #12]	; (8005dcc <arm_rfft_256_fast_init_f32+0x48>)
 8005dc0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	0802f968 	.word	0x0802f968

08005dd0 <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b084      	sub	sp, #16
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d102      	bne.n	8005de4 <arm_rfft_512_fast_init_f32+0x14>
 8005dde:	f04f 33ff 	mov.w	r3, #4294967295
 8005de2:	e016      	b.n	8005e12 <arm_rfft_512_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),256);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fe fcaa 	bl	8004744 <arm_cfft_init_f32>
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005df4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <arm_rfft_512_fast_init_f32+0x32>
  {
    return(status);
 8005dfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e00:	e007      	b.n	8005e12 <arm_rfft_512_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 512U;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e08:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a03      	ldr	r2, [pc, #12]	; (8005e1c <arm_rfft_512_fast_init_f32+0x4c>)
 8005e0e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	0802fd68 	.word	0x0802fd68

08005e20 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d102      	bne.n	8005e34 <arm_rfft_1024_fast_init_f32+0x14>
 8005e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e32:	e016      	b.n	8005e62 <arm_rfft_1024_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),512);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe fc82 	bl	8004744 <arm_cfft_init_f32>
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <arm_rfft_1024_fast_init_f32+0x32>
  {
    return(status);
 8005e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e50:	e007      	b.n	8005e62 <arm_rfft_1024_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 1024U;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e58:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a03      	ldr	r2, [pc, #12]	; (8005e6c <arm_rfft_1024_fast_init_f32+0x4c>)
 8005e5e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	08030568 	.word	0x08030568

08005e70 <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d102      	bne.n	8005e84 <arm_rfft_2048_fast_init_f32+0x14>
 8005e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8005e82:	e016      	b.n	8005eb2 <arm_rfft_2048_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7fe fc5a 	bl	8004744 <arm_cfft_init_f32>
 8005e90:	4603      	mov	r3, r0
 8005e92:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d002      	beq.n	8005ea2 <arm_rfft_2048_fast_init_f32+0x32>
  {
    return(status);
 8005e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea0:	e007      	b.n	8005eb2 <arm_rfft_2048_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 2048U;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ea8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a03      	ldr	r2, [pc, #12]	; (8005ebc <arm_rfft_2048_fast_init_f32+0x4c>)
 8005eae:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	08031568 	.word	0x08031568

08005ec0 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b084      	sub	sp, #16
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <arm_rfft_4096_fast_init_f32+0x14>
 8005ece:	f04f 33ff 	mov.w	r3, #4294967295
 8005ed2:	e016      	b.n	8005f02 <arm_rfft_4096_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe fc32 	bl	8004744 <arm_cfft_init_f32>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 8005ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <arm_rfft_4096_fast_init_f32+0x32>
  {
    return(status);
 8005eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef0:	e007      	b.n	8005f02 <arm_rfft_4096_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 4096U;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005ef8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a03      	ldr	r2, [pc, #12]	; (8005f0c <arm_rfft_4096_fast_init_f32+0x4c>)
 8005efe:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	08033568 	.word	0x08033568

08005f10 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 8005f20:	887b      	ldrh	r3, [r7, #2]
 8005f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f26:	d023      	beq.n	8005f70 <arm_rfft_fast_init_f32+0x60>
 8005f28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f2c:	dc38      	bgt.n	8005fa0 <arm_rfft_fast_init_f32+0x90>
 8005f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f32:	d020      	beq.n	8005f76 <arm_rfft_fast_init_f32+0x66>
 8005f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f38:	dc32      	bgt.n	8005fa0 <arm_rfft_fast_init_f32+0x90>
 8005f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f3e:	d01d      	beq.n	8005f7c <arm_rfft_fast_init_f32+0x6c>
 8005f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f44:	dc2c      	bgt.n	8005fa0 <arm_rfft_fast_init_f32+0x90>
 8005f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4a:	d01a      	beq.n	8005f82 <arm_rfft_fast_init_f32+0x72>
 8005f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f50:	dc26      	bgt.n	8005fa0 <arm_rfft_fast_init_f32+0x90>
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f56:	d017      	beq.n	8005f88 <arm_rfft_fast_init_f32+0x78>
 8005f58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f5c:	dc20      	bgt.n	8005fa0 <arm_rfft_fast_init_f32+0x90>
 8005f5e:	2b80      	cmp	r3, #128	; 0x80
 8005f60:	d015      	beq.n	8005f8e <arm_rfft_fast_init_f32+0x7e>
 8005f62:	2b80      	cmp	r3, #128	; 0x80
 8005f64:	dc1c      	bgt.n	8005fa0 <arm_rfft_fast_init_f32+0x90>
 8005f66:	2b20      	cmp	r3, #32
 8005f68:	d017      	beq.n	8005f9a <arm_rfft_fast_init_f32+0x8a>
 8005f6a:	2b40      	cmp	r3, #64	; 0x40
 8005f6c:	d012      	beq.n	8005f94 <arm_rfft_fast_init_f32+0x84>
 8005f6e:	e017      	b.n	8005fa0 <arm_rfft_fast_init_f32+0x90>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 8005f70:	4b14      	ldr	r3, [pc, #80]	; (8005fc4 <arm_rfft_fast_init_f32+0xb4>)
 8005f72:	60fb      	str	r3, [r7, #12]
    break;
 8005f74:	e017      	b.n	8005fa6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 8005f76:	4b14      	ldr	r3, [pc, #80]	; (8005fc8 <arm_rfft_fast_init_f32+0xb8>)
 8005f78:	60fb      	str	r3, [r7, #12]
    break;
 8005f7a:	e014      	b.n	8005fa6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 8005f7c:	4b13      	ldr	r3, [pc, #76]	; (8005fcc <arm_rfft_fast_init_f32+0xbc>)
 8005f7e:	60fb      	str	r3, [r7, #12]
    break;
 8005f80:	e011      	b.n	8005fa6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 8005f82:	4b13      	ldr	r3, [pc, #76]	; (8005fd0 <arm_rfft_fast_init_f32+0xc0>)
 8005f84:	60fb      	str	r3, [r7, #12]
    break;
 8005f86:	e00e      	b.n	8005fa6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 8005f88:	4b12      	ldr	r3, [pc, #72]	; (8005fd4 <arm_rfft_fast_init_f32+0xc4>)
 8005f8a:	60fb      	str	r3, [r7, #12]
    break;
 8005f8c:	e00b      	b.n	8005fa6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_128))
  case 128U:
    fptr = arm_rfft_128_fast_init_f32;
 8005f8e:	4b12      	ldr	r3, [pc, #72]	; (8005fd8 <arm_rfft_fast_init_f32+0xc8>)
 8005f90:	60fb      	str	r3, [r7, #12]
    break;
 8005f92:	e008      	b.n	8005fa6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 8005f94:	4b11      	ldr	r3, [pc, #68]	; (8005fdc <arm_rfft_fast_init_f32+0xcc>)
 8005f96:	60fb      	str	r3, [r7, #12]
    break;
 8005f98:	e005      	b.n	8005fa6 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 8005f9a:	4b11      	ldr	r3, [pc, #68]	; (8005fe0 <arm_rfft_fast_init_f32+0xd0>)
 8005f9c:	60fb      	str	r3, [r7, #12]
    break;
 8005f9e:	e002      	b.n	8005fa6 <arm_rfft_fast_init_f32+0x96>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 8005fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005fa4:	e009      	b.n	8005fba <arm_rfft_fast_init_f32+0xaa>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d102      	bne.n	8005fb2 <arm_rfft_fast_init_f32+0xa2>
 8005fac:	f04f 33ff 	mov.w	r3, #4294967295
 8005fb0:	e003      	b.n	8005fba <arm_rfft_fast_init_f32+0xaa>
  return fptr( S );
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	4798      	blx	r3
 8005fb8:	4603      	mov	r3, r0

}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	08005ec1 	.word	0x08005ec1
 8005fc8:	08005e71 	.word	0x08005e71
 8005fcc:	08005e21 	.word	0x08005e21
 8005fd0:	08005dd1 	.word	0x08005dd1
 8005fd4:	08005d85 	.word	0x08005d85
 8005fd8:	08005d39 	.word	0x08005d39
 8005fdc:	08005ced 	.word	0x08005ced
 8005fe0:	08005ca1 	.word	0x08005ca1

08005fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005fe8:	4b0e      	ldr	r3, [pc, #56]	; (8006024 <HAL_Init+0x40>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a0d      	ldr	r2, [pc, #52]	; (8006024 <HAL_Init+0x40>)
 8005fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ff2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005ff4:	4b0b      	ldr	r3, [pc, #44]	; (8006024 <HAL_Init+0x40>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a0a      	ldr	r2, [pc, #40]	; (8006024 <HAL_Init+0x40>)
 8005ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ffe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006000:	4b08      	ldr	r3, [pc, #32]	; (8006024 <HAL_Init+0x40>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a07      	ldr	r2, [pc, #28]	; (8006024 <HAL_Init+0x40>)
 8006006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800600a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800600c:	2003      	movs	r0, #3
 800600e:	f000 f94f 	bl	80062b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006012:	2000      	movs	r0, #0
 8006014:	f000 f808 	bl	8006028 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006018:	f7fc fb78 	bl	800270c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	40023c00 	.word	0x40023c00

08006028 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006030:	4b12      	ldr	r3, [pc, #72]	; (800607c <HAL_InitTick+0x54>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	4b12      	ldr	r3, [pc, #72]	; (8006080 <HAL_InitTick+0x58>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	4619      	mov	r1, r3
 800603a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800603e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006042:	fbb2 f3f3 	udiv	r3, r2, r3
 8006046:	4618      	mov	r0, r3
 8006048:	f000 f967 	bl	800631a <HAL_SYSTICK_Config>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e00e      	b.n	8006074 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b0f      	cmp	r3, #15
 800605a:	d80a      	bhi.n	8006072 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800605c:	2200      	movs	r2, #0
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	f04f 30ff 	mov.w	r0, #4294967295
 8006064:	f000 f92f 	bl	80062c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006068:	4a06      	ldr	r2, [pc, #24]	; (8006084 <HAL_InitTick+0x5c>)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	e000      	b.n	8006074 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	200004a0 	.word	0x200004a0
 8006080:	200004bc 	.word	0x200004bc
 8006084:	200004b8 	.word	0x200004b8

08006088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006088:	b480      	push	{r7}
 800608a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <HAL_IncTick+0x20>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	461a      	mov	r2, r3
 8006092:	4b06      	ldr	r3, [pc, #24]	; (80060ac <HAL_IncTick+0x24>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4413      	add	r3, r2
 8006098:	4a04      	ldr	r2, [pc, #16]	; (80060ac <HAL_IncTick+0x24>)
 800609a:	6013      	str	r3, [r2, #0]
}
 800609c:	bf00      	nop
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	200004bc 	.word	0x200004bc
 80060ac:	20013c90 	.word	0x20013c90

080060b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060b0:	b480      	push	{r7}
 80060b2:	af00      	add	r7, sp, #0
  return uwTick;
 80060b4:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <HAL_GetTick+0x14>)
 80060b6:	681b      	ldr	r3, [r3, #0]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20013c90 	.word	0x20013c90

080060c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060d0:	f7ff ffee 	bl	80060b0 <HAL_GetTick>
 80060d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e0:	d005      	beq.n	80060ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <HAL_Delay+0x44>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80060ee:	bf00      	nop
 80060f0:	f7ff ffde 	bl	80060b0 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	68fa      	ldr	r2, [r7, #12]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d8f7      	bhi.n	80060f0 <HAL_Delay+0x28>
  {
  }
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	200004bc 	.word	0x200004bc

08006110 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f003 0307 	and.w	r3, r3, #7
 800611e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006120:	4b0c      	ldr	r3, [pc, #48]	; (8006154 <__NVIC_SetPriorityGrouping+0x44>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800612c:	4013      	ands	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006138:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800613c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006140:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006142:	4a04      	ldr	r2, [pc, #16]	; (8006154 <__NVIC_SetPriorityGrouping+0x44>)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	60d3      	str	r3, [r2, #12]
}
 8006148:	bf00      	nop
 800614a:	3714      	adds	r7, #20
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	e000ed00 	.word	0xe000ed00

08006158 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800615c:	4b04      	ldr	r3, [pc, #16]	; (8006170 <__NVIC_GetPriorityGrouping+0x18>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	0a1b      	lsrs	r3, r3, #8
 8006162:	f003 0307 	and.w	r3, r3, #7
}
 8006166:	4618      	mov	r0, r3
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	e000ed00 	.word	0xe000ed00

08006174 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	4603      	mov	r3, r0
 800617c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800617e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006182:	2b00      	cmp	r3, #0
 8006184:	db0b      	blt.n	800619e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006186:	79fb      	ldrb	r3, [r7, #7]
 8006188:	f003 021f 	and.w	r2, r3, #31
 800618c:	4907      	ldr	r1, [pc, #28]	; (80061ac <__NVIC_EnableIRQ+0x38>)
 800618e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	2001      	movs	r0, #1
 8006196:	fa00 f202 	lsl.w	r2, r0, r2
 800619a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800619e:	bf00      	nop
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	e000e100 	.word	0xe000e100

080061b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	6039      	str	r1, [r7, #0]
 80061ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80061bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	db0a      	blt.n	80061da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	490c      	ldr	r1, [pc, #48]	; (80061fc <__NVIC_SetPriority+0x4c>)
 80061ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80061ce:	0112      	lsls	r2, r2, #4
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	440b      	add	r3, r1
 80061d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80061d8:	e00a      	b.n	80061f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	b2da      	uxtb	r2, r3
 80061de:	4908      	ldr	r1, [pc, #32]	; (8006200 <__NVIC_SetPriority+0x50>)
 80061e0:	79fb      	ldrb	r3, [r7, #7]
 80061e2:	f003 030f 	and.w	r3, r3, #15
 80061e6:	3b04      	subs	r3, #4
 80061e8:	0112      	lsls	r2, r2, #4
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	440b      	add	r3, r1
 80061ee:	761a      	strb	r2, [r3, #24]
}
 80061f0:	bf00      	nop
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	e000e100 	.word	0xe000e100
 8006200:	e000ed00 	.word	0xe000ed00

08006204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006204:	b480      	push	{r7}
 8006206:	b089      	sub	sp, #36	; 0x24
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f1c3 0307 	rsb	r3, r3, #7
 800621e:	2b04      	cmp	r3, #4
 8006220:	bf28      	it	cs
 8006222:	2304      	movcs	r3, #4
 8006224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	3304      	adds	r3, #4
 800622a:	2b06      	cmp	r3, #6
 800622c:	d902      	bls.n	8006234 <NVIC_EncodePriority+0x30>
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3b03      	subs	r3, #3
 8006232:	e000      	b.n	8006236 <NVIC_EncodePriority+0x32>
 8006234:	2300      	movs	r3, #0
 8006236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006238:	f04f 32ff 	mov.w	r2, #4294967295
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	43da      	mvns	r2, r3
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	401a      	ands	r2, r3
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800624c:	f04f 31ff 	mov.w	r1, #4294967295
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	fa01 f303 	lsl.w	r3, r1, r3
 8006256:	43d9      	mvns	r1, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800625c:	4313      	orrs	r3, r2
         );
}
 800625e:	4618      	mov	r0, r3
 8006260:	3724      	adds	r7, #36	; 0x24
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	3b01      	subs	r3, #1
 8006278:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800627c:	d301      	bcc.n	8006282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800627e:	2301      	movs	r3, #1
 8006280:	e00f      	b.n	80062a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006282:	4a0a      	ldr	r2, [pc, #40]	; (80062ac <SysTick_Config+0x40>)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	3b01      	subs	r3, #1
 8006288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800628a:	210f      	movs	r1, #15
 800628c:	f04f 30ff 	mov.w	r0, #4294967295
 8006290:	f7ff ff8e 	bl	80061b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006294:	4b05      	ldr	r3, [pc, #20]	; (80062ac <SysTick_Config+0x40>)
 8006296:	2200      	movs	r2, #0
 8006298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800629a:	4b04      	ldr	r3, [pc, #16]	; (80062ac <SysTick_Config+0x40>)
 800629c:	2207      	movs	r2, #7
 800629e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3708      	adds	r7, #8
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	e000e010 	.word	0xe000e010

080062b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff ff29 	bl	8006110 <__NVIC_SetPriorityGrouping>
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	4603      	mov	r3, r0
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
 80062d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80062d4:	2300      	movs	r3, #0
 80062d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80062d8:	f7ff ff3e 	bl	8006158 <__NVIC_GetPriorityGrouping>
 80062dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	68b9      	ldr	r1, [r7, #8]
 80062e2:	6978      	ldr	r0, [r7, #20]
 80062e4:	f7ff ff8e 	bl	8006204 <NVIC_EncodePriority>
 80062e8:	4602      	mov	r2, r0
 80062ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062ee:	4611      	mov	r1, r2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7ff ff5d 	bl	80061b0 <__NVIC_SetPriority>
}
 80062f6:	bf00      	nop
 80062f8:	3718      	adds	r7, #24
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b082      	sub	sp, #8
 8006302:	af00      	add	r7, sp, #0
 8006304:	4603      	mov	r3, r0
 8006306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff ff31 	bl	8006174 <__NVIC_EnableIRQ>
}
 8006312:	bf00      	nop
 8006314:	3708      	adds	r7, #8
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b082      	sub	sp, #8
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7ff ffa2 	bl	800626c <SysTick_Config>
 8006328:	4603      	mov	r3, r0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e00e      	b.n	8006362 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	795b      	ldrb	r3, [r3, #5]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d105      	bne.n	800635a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7fc fa01 	bl	800275c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2201      	movs	r2, #1
 800635e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3708      	adds	r7, #8
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
	...

0800636c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006378:	f7ff fe9a 	bl	80060b0 <HAL_GetTick>
 800637c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e099      	b.n	80064bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063a8:	e00f      	b.n	80063ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80063aa:	f7ff fe81 	bl	80060b0 <HAL_GetTick>
 80063ae:	4602      	mov	r2, r0
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	2b05      	cmp	r3, #5
 80063b6:	d908      	bls.n	80063ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2220      	movs	r2, #32
 80063bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2203      	movs	r2, #3
 80063c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e078      	b.n	80064bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0301 	and.w	r3, r3, #1
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e8      	bne.n	80063aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80063e0:	697a      	ldr	r2, [r7, #20]
 80063e2:	4b38      	ldr	r3, [pc, #224]	; (80064c4 <HAL_DMA_Init+0x158>)
 80063e4:	4013      	ands	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685a      	ldr	r2, [r3, #4]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80063f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006402:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800640e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6a1b      	ldr	r3, [r3, #32]
 8006414:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006420:	2b04      	cmp	r3, #4
 8006422:	d107      	bne.n	8006434 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800642c:	4313      	orrs	r3, r2
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	f023 0307 	bic.w	r3, r3, #7
 800644a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006450:	697a      	ldr	r2, [r7, #20]
 8006452:	4313      	orrs	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645a:	2b04      	cmp	r3, #4
 800645c:	d117      	bne.n	800648e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006462:	697a      	ldr	r2, [r7, #20]
 8006464:	4313      	orrs	r3, r2
 8006466:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00e      	beq.n	800648e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fb3d 	bl	8006af0 <DMA_CheckFifoParam>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2240      	movs	r2, #64	; 0x40
 8006480:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800648a:	2301      	movs	r3, #1
 800648c:	e016      	b.n	80064bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 faf4 	bl	8006a84 <DMA_CalcBaseAndBitshift>
 800649c:	4603      	mov	r3, r0
 800649e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064a4:	223f      	movs	r2, #63	; 0x3f
 80064a6:	409a      	lsls	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2200      	movs	r2, #0
 80064b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	f010803f 	.word	0xf010803f

080064c8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e050      	b.n	800657c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d101      	bne.n	80064ea <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80064e6:	2302      	movs	r3, #2
 80064e8:	e048      	b.n	800657c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f022 0201 	bic.w	r2, r2, #1
 80064f8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2200      	movs	r2, #0
 8006508:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2200      	movs	r2, #0
 8006510:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2200      	movs	r2, #0
 8006518:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2221      	movs	r2, #33	; 0x21
 8006528:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 faaa 	bl	8006a84 <DMA_CalcBaseAndBitshift>
 8006530:	4603      	mov	r3, r0
 8006532:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800655c:	223f      	movs	r2, #63	; 0x3f
 800655e:	409a      	lsls	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2200      	movs	r2, #0
 800656e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}

08006584 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
 8006590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800659a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d101      	bne.n	80065aa <HAL_DMA_Start_IT+0x26>
 80065a6:	2302      	movs	r3, #2
 80065a8:	e040      	b.n	800662c <HAL_DMA_Start_IT+0xa8>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d12f      	bne.n	800661e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2202      	movs	r2, #2
 80065c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	68b9      	ldr	r1, [r7, #8]
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fa28 	bl	8006a28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065dc:	223f      	movs	r2, #63	; 0x3f
 80065de:	409a      	lsls	r2, r3
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0216 	orr.w	r2, r2, #22
 80065f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0208 	orr.w	r2, r2, #8
 800660a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	e005      	b.n	800662a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006626:	2302      	movs	r3, #2
 8006628:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800662a:	7dfb      	ldrb	r3, [r7, #23]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006640:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006642:	f7ff fd35 	bl	80060b0 <HAL_GetTick>
 8006646:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800664e:	b2db      	uxtb	r3, r3
 8006650:	2b02      	cmp	r3, #2
 8006652:	d008      	beq.n	8006666 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2280      	movs	r2, #128	; 0x80
 8006658:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	e052      	b.n	800670c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f022 0216 	bic.w	r2, r2, #22
 8006674:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	695a      	ldr	r2, [r3, #20]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006684:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	2b00      	cmp	r3, #0
 800668c:	d103      	bne.n	8006696 <HAL_DMA_Abort+0x62>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006692:	2b00      	cmp	r3, #0
 8006694:	d007      	beq.n	80066a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0208 	bic.w	r2, r2, #8
 80066a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 0201 	bic.w	r2, r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066b6:	e013      	b.n	80066e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80066b8:	f7ff fcfa 	bl	80060b0 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b05      	cmp	r3, #5
 80066c4:	d90c      	bls.n	80066e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2203      	movs	r2, #3
 80066d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e015      	b.n	800670c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1e4      	bne.n	80066b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f2:	223f      	movs	r2, #63	; 0x3f
 80066f4:	409a      	lsls	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b086      	sub	sp, #24
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800671c:	2300      	movs	r3, #0
 800671e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006720:	4b8e      	ldr	r3, [pc, #568]	; (800695c <HAL_DMA_IRQHandler+0x248>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a8e      	ldr	r2, [pc, #568]	; (8006960 <HAL_DMA_IRQHandler+0x24c>)
 8006726:	fba2 2303 	umull	r2, r3, r2, r3
 800672a:	0a9b      	lsrs	r3, r3, #10
 800672c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006732:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800673e:	2208      	movs	r2, #8
 8006740:	409a      	lsls	r2, r3
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	4013      	ands	r3, r2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01a      	beq.n	8006780 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f003 0304 	and.w	r3, r3, #4
 8006754:	2b00      	cmp	r3, #0
 8006756:	d013      	beq.n	8006780 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0204 	bic.w	r2, r2, #4
 8006766:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800676c:	2208      	movs	r2, #8
 800676e:	409a      	lsls	r2, r3
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006778:	f043 0201 	orr.w	r2, r3, #1
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006784:	2201      	movs	r2, #1
 8006786:	409a      	lsls	r2, r3
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	4013      	ands	r3, r2
 800678c:	2b00      	cmp	r3, #0
 800678e:	d012      	beq.n	80067b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00b      	beq.n	80067b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067a2:	2201      	movs	r2, #1
 80067a4:	409a      	lsls	r2, r3
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ae:	f043 0202 	orr.w	r2, r3, #2
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ba:	2204      	movs	r2, #4
 80067bc:	409a      	lsls	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d012      	beq.n	80067ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00b      	beq.n	80067ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d8:	2204      	movs	r2, #4
 80067da:	409a      	lsls	r2, r3
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e4:	f043 0204 	orr.w	r2, r3, #4
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f0:	2210      	movs	r2, #16
 80067f2:	409a      	lsls	r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	4013      	ands	r3, r2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d043      	beq.n	8006884 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f003 0308 	and.w	r3, r3, #8
 8006806:	2b00      	cmp	r3, #0
 8006808:	d03c      	beq.n	8006884 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680e:	2210      	movs	r2, #16
 8006810:	409a      	lsls	r2, r3
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d018      	beq.n	8006856 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d108      	bne.n	8006844 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	d024      	beq.n	8006884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	4798      	blx	r3
 8006842:	e01f      	b.n	8006884 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01b      	beq.n	8006884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	4798      	blx	r3
 8006854:	e016      	b.n	8006884 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006860:	2b00      	cmp	r3, #0
 8006862:	d107      	bne.n	8006874 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f022 0208 	bic.w	r2, r2, #8
 8006872:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006878:	2b00      	cmp	r3, #0
 800687a:	d003      	beq.n	8006884 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006888:	2220      	movs	r2, #32
 800688a:	409a      	lsls	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4013      	ands	r3, r2
 8006890:	2b00      	cmp	r3, #0
 8006892:	f000 808f 	beq.w	80069b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f003 0310 	and.w	r3, r3, #16
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f000 8087 	beq.w	80069b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068aa:	2220      	movs	r2, #32
 80068ac:	409a      	lsls	r2, r3
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b05      	cmp	r3, #5
 80068bc:	d136      	bne.n	800692c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f022 0216 	bic.w	r2, r2, #22
 80068cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695a      	ldr	r2, [r3, #20]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d103      	bne.n	80068ee <HAL_DMA_IRQHandler+0x1da>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d007      	beq.n	80068fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f022 0208 	bic.w	r2, r2, #8
 80068fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006902:	223f      	movs	r2, #63	; 0x3f
 8006904:	409a      	lsls	r2, r3
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691e:	2b00      	cmp	r3, #0
 8006920:	d07e      	beq.n	8006a20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	4798      	blx	r3
        }
        return;
 800692a:	e079      	b.n	8006a20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006936:	2b00      	cmp	r3, #0
 8006938:	d01d      	beq.n	8006976 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10d      	bne.n	8006964 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694c:	2b00      	cmp	r3, #0
 800694e:	d031      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	4798      	blx	r3
 8006958:	e02c      	b.n	80069b4 <HAL_DMA_IRQHandler+0x2a0>
 800695a:	bf00      	nop
 800695c:	200004a0 	.word	0x200004a0
 8006960:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006968:	2b00      	cmp	r3, #0
 800696a:	d023      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	4798      	blx	r3
 8006974:	e01e      	b.n	80069b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10f      	bne.n	80069a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f022 0210 	bic.w	r2, r2, #16
 8006992:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2201      	movs	r2, #1
 8006998:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d032      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c0:	f003 0301 	and.w	r3, r3, #1
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d022      	beq.n	8006a0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2205      	movs	r2, #5
 80069cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f022 0201 	bic.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	3301      	adds	r3, #1
 80069e4:	60bb      	str	r3, [r7, #8]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d307      	bcc.n	80069fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0301 	and.w	r3, r3, #1
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f2      	bne.n	80069e0 <HAL_DMA_IRQHandler+0x2cc>
 80069fa:	e000      	b.n	80069fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80069fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d005      	beq.n	8006a22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	4798      	blx	r3
 8006a1e:	e000      	b.n	8006a22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006a20:	bf00      	nop
    }
  }
}
 8006a22:	3718      	adds	r7, #24
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b085      	sub	sp, #20
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	2b40      	cmp	r3, #64	; 0x40
 8006a54:	d108      	bne.n	8006a68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006a66:	e007      	b.n	8006a78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	60da      	str	r2, [r3, #12]
}
 8006a78:	bf00      	nop
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	3b10      	subs	r3, #16
 8006a94:	4a14      	ldr	r2, [pc, #80]	; (8006ae8 <DMA_CalcBaseAndBitshift+0x64>)
 8006a96:	fba2 2303 	umull	r2, r3, r2, r3
 8006a9a:	091b      	lsrs	r3, r3, #4
 8006a9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006a9e:	4a13      	ldr	r2, [pc, #76]	; (8006aec <DMA_CalcBaseAndBitshift+0x68>)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d909      	bls.n	8006ac6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006aba:	f023 0303 	bic.w	r3, r3, #3
 8006abe:	1d1a      	adds	r2, r3, #4
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	659a      	str	r2, [r3, #88]	; 0x58
 8006ac4:	e007      	b.n	8006ad6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ace:	f023 0303 	bic.w	r3, r3, #3
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	aaaaaaab 	.word	0xaaaaaaab
 8006aec:	080375f8 	.word	0x080375f8

08006af0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006af8:	2300      	movs	r3, #0
 8006afa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b00:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d11f      	bne.n	8006b4a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b03      	cmp	r3, #3
 8006b0e:	d856      	bhi.n	8006bbe <DMA_CheckFifoParam+0xce>
 8006b10:	a201      	add	r2, pc, #4	; (adr r2, 8006b18 <DMA_CheckFifoParam+0x28>)
 8006b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b16:	bf00      	nop
 8006b18:	08006b29 	.word	0x08006b29
 8006b1c:	08006b3b 	.word	0x08006b3b
 8006b20:	08006b29 	.word	0x08006b29
 8006b24:	08006bbf 	.word	0x08006bbf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d046      	beq.n	8006bc2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b38:	e043      	b.n	8006bc2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b42:	d140      	bne.n	8006bc6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b48:	e03d      	b.n	8006bc6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b52:	d121      	bne.n	8006b98 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d837      	bhi.n	8006bca <DMA_CheckFifoParam+0xda>
 8006b5a:	a201      	add	r2, pc, #4	; (adr r2, 8006b60 <DMA_CheckFifoParam+0x70>)
 8006b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b60:	08006b71 	.word	0x08006b71
 8006b64:	08006b77 	.word	0x08006b77
 8006b68:	08006b71 	.word	0x08006b71
 8006b6c:	08006b89 	.word	0x08006b89
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006b70:	2301      	movs	r3, #1
 8006b72:	73fb      	strb	r3, [r7, #15]
      break;
 8006b74:	e030      	b.n	8006bd8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d025      	beq.n	8006bce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b86:	e022      	b.n	8006bce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b90:	d11f      	bne.n	8006bd2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006b96:	e01c      	b.n	8006bd2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d903      	bls.n	8006ba6 <DMA_CheckFifoParam+0xb6>
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b03      	cmp	r3, #3
 8006ba2:	d003      	beq.n	8006bac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006ba4:	e018      	b.n	8006bd8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8006baa:	e015      	b.n	8006bd8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00e      	beq.n	8006bd6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	73fb      	strb	r3, [r7, #15]
      break;
 8006bbc:	e00b      	b.n	8006bd6 <DMA_CheckFifoParam+0xe6>
      break;
 8006bbe:	bf00      	nop
 8006bc0:	e00a      	b.n	8006bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8006bc2:	bf00      	nop
 8006bc4:	e008      	b.n	8006bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8006bc6:	bf00      	nop
 8006bc8:	e006      	b.n	8006bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8006bca:	bf00      	nop
 8006bcc:	e004      	b.n	8006bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8006bce:	bf00      	nop
 8006bd0:	e002      	b.n	8006bd8 <DMA_CheckFifoParam+0xe8>
      break;   
 8006bd2:	bf00      	nop
 8006bd4:	e000      	b.n	8006bd8 <DMA_CheckFifoParam+0xe8>
      break;
 8006bd6:	bf00      	nop
    }
  } 
  
  return status; 
 8006bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop

08006be8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b089      	sub	sp, #36	; 0x24
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61fb      	str	r3, [r7, #28]
 8006c02:	e16b      	b.n	8006edc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c04:	2201      	movs	r2, #1
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4013      	ands	r3, r2
 8006c16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	f040 815a 	bne.w	8006ed6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f003 0303 	and.w	r3, r3, #3
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d005      	beq.n	8006c3a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c36:	2b02      	cmp	r3, #2
 8006c38:	d130      	bne.n	8006c9c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	2203      	movs	r2, #3
 8006c46:	fa02 f303 	lsl.w	r3, r2, r3
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	69ba      	ldr	r2, [r7, #24]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c70:	2201      	movs	r2, #1
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	091b      	lsrs	r3, r3, #4
 8006c86:	f003 0201 	and.w	r2, r3, #1
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f003 0303 	and.w	r3, r3, #3
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d017      	beq.n	8006cd8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb8:	43db      	mvns	r3, r3
 8006cba:	69ba      	ldr	r2, [r7, #24]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689a      	ldr	r2, [r3, #8]
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ccc:	69ba      	ldr	r2, [r7, #24]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	69ba      	ldr	r2, [r7, #24]
 8006cd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f003 0303 	and.w	r3, r3, #3
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d123      	bne.n	8006d2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	08da      	lsrs	r2, r3, #3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3208      	adds	r2, #8
 8006cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006cf2:	69fb      	ldr	r3, [r7, #28]
 8006cf4:	f003 0307 	and.w	r3, r3, #7
 8006cf8:	009b      	lsls	r3, r3, #2
 8006cfa:	220f      	movs	r2, #15
 8006cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8006d00:	43db      	mvns	r3, r3
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	4013      	ands	r3, r2
 8006d06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	691a      	ldr	r2, [r3, #16]
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	f003 0307 	and.w	r3, r3, #7
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	fa02 f303 	lsl.w	r3, r2, r3
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	08da      	lsrs	r2, r3, #3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	3208      	adds	r2, #8
 8006d26:	69b9      	ldr	r1, [r7, #24]
 8006d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	005b      	lsls	r3, r3, #1
 8006d36:	2203      	movs	r2, #3
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	43db      	mvns	r3, r3
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	4013      	ands	r3, r2
 8006d42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f003 0203 	and.w	r2, r3, #3
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	005b      	lsls	r3, r3, #1
 8006d50:	fa02 f303 	lsl.w	r3, r2, r3
 8006d54:	69ba      	ldr	r2, [r7, #24]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f000 80b4 	beq.w	8006ed6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
 8006d72:	4b60      	ldr	r3, [pc, #384]	; (8006ef4 <HAL_GPIO_Init+0x30c>)
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	4a5f      	ldr	r2, [pc, #380]	; (8006ef4 <HAL_GPIO_Init+0x30c>)
 8006d78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d7c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d7e:	4b5d      	ldr	r3, [pc, #372]	; (8006ef4 <HAL_GPIO_Init+0x30c>)
 8006d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006d8a:	4a5b      	ldr	r2, [pc, #364]	; (8006ef8 <HAL_GPIO_Init+0x310>)
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	089b      	lsrs	r3, r3, #2
 8006d90:	3302      	adds	r3, #2
 8006d92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	009b      	lsls	r3, r3, #2
 8006da0:	220f      	movs	r2, #15
 8006da2:	fa02 f303 	lsl.w	r3, r2, r3
 8006da6:	43db      	mvns	r3, r3
 8006da8:	69ba      	ldr	r2, [r7, #24]
 8006daa:	4013      	ands	r3, r2
 8006dac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a52      	ldr	r2, [pc, #328]	; (8006efc <HAL_GPIO_Init+0x314>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d02b      	beq.n	8006e0e <HAL_GPIO_Init+0x226>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a51      	ldr	r2, [pc, #324]	; (8006f00 <HAL_GPIO_Init+0x318>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d025      	beq.n	8006e0a <HAL_GPIO_Init+0x222>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a50      	ldr	r2, [pc, #320]	; (8006f04 <HAL_GPIO_Init+0x31c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d01f      	beq.n	8006e06 <HAL_GPIO_Init+0x21e>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a4f      	ldr	r2, [pc, #316]	; (8006f08 <HAL_GPIO_Init+0x320>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d019      	beq.n	8006e02 <HAL_GPIO_Init+0x21a>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a4e      	ldr	r2, [pc, #312]	; (8006f0c <HAL_GPIO_Init+0x324>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d013      	beq.n	8006dfe <HAL_GPIO_Init+0x216>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a4d      	ldr	r2, [pc, #308]	; (8006f10 <HAL_GPIO_Init+0x328>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d00d      	beq.n	8006dfa <HAL_GPIO_Init+0x212>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a4c      	ldr	r2, [pc, #304]	; (8006f14 <HAL_GPIO_Init+0x32c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d007      	beq.n	8006df6 <HAL_GPIO_Init+0x20e>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a4b      	ldr	r2, [pc, #300]	; (8006f18 <HAL_GPIO_Init+0x330>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d101      	bne.n	8006df2 <HAL_GPIO_Init+0x20a>
 8006dee:	2307      	movs	r3, #7
 8006df0:	e00e      	b.n	8006e10 <HAL_GPIO_Init+0x228>
 8006df2:	2308      	movs	r3, #8
 8006df4:	e00c      	b.n	8006e10 <HAL_GPIO_Init+0x228>
 8006df6:	2306      	movs	r3, #6
 8006df8:	e00a      	b.n	8006e10 <HAL_GPIO_Init+0x228>
 8006dfa:	2305      	movs	r3, #5
 8006dfc:	e008      	b.n	8006e10 <HAL_GPIO_Init+0x228>
 8006dfe:	2304      	movs	r3, #4
 8006e00:	e006      	b.n	8006e10 <HAL_GPIO_Init+0x228>
 8006e02:	2303      	movs	r3, #3
 8006e04:	e004      	b.n	8006e10 <HAL_GPIO_Init+0x228>
 8006e06:	2302      	movs	r3, #2
 8006e08:	e002      	b.n	8006e10 <HAL_GPIO_Init+0x228>
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e000      	b.n	8006e10 <HAL_GPIO_Init+0x228>
 8006e0e:	2300      	movs	r3, #0
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	f002 0203 	and.w	r2, r2, #3
 8006e16:	0092      	lsls	r2, r2, #2
 8006e18:	4093      	lsls	r3, r2
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e20:	4935      	ldr	r1, [pc, #212]	; (8006ef8 <HAL_GPIO_Init+0x310>)
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	089b      	lsrs	r3, r3, #2
 8006e26:	3302      	adds	r3, #2
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e2e:	4b3b      	ldr	r3, [pc, #236]	; (8006f1c <HAL_GPIO_Init+0x334>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	43db      	mvns	r3, r3
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	4013      	ands	r3, r2
 8006e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e52:	4a32      	ldr	r2, [pc, #200]	; (8006f1c <HAL_GPIO_Init+0x334>)
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006e58:	4b30      	ldr	r3, [pc, #192]	; (8006f1c <HAL_GPIO_Init+0x334>)
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e5e:	693b      	ldr	r3, [r7, #16]
 8006e60:	43db      	mvns	r3, r3
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	4013      	ands	r3, r2
 8006e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006e74:	69ba      	ldr	r2, [r7, #24]
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e7c:	4a27      	ldr	r2, [pc, #156]	; (8006f1c <HAL_GPIO_Init+0x334>)
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e82:	4b26      	ldr	r3, [pc, #152]	; (8006f1c <HAL_GPIO_Init+0x334>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ea6:	4a1d      	ldr	r2, [pc, #116]	; (8006f1c <HAL_GPIO_Init+0x334>)
 8006ea8:	69bb      	ldr	r3, [r7, #24]
 8006eaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006eac:	4b1b      	ldr	r3, [pc, #108]	; (8006f1c <HAL_GPIO_Init+0x334>)
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	43db      	mvns	r3, r3
 8006eb6:	69ba      	ldr	r2, [r7, #24]
 8006eb8:	4013      	ands	r3, r2
 8006eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d003      	beq.n	8006ed0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006ec8:	69ba      	ldr	r2, [r7, #24]
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ed0:	4a12      	ldr	r2, [pc, #72]	; (8006f1c <HAL_GPIO_Init+0x334>)
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	3301      	adds	r3, #1
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	2b0f      	cmp	r3, #15
 8006ee0:	f67f ae90 	bls.w	8006c04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006ee4:	bf00      	nop
 8006ee6:	bf00      	nop
 8006ee8:	3724      	adds	r7, #36	; 0x24
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	40013800 	.word	0x40013800
 8006efc:	40020000 	.word	0x40020000
 8006f00:	40020400 	.word	0x40020400
 8006f04:	40020800 	.word	0x40020800
 8006f08:	40020c00 	.word	0x40020c00
 8006f0c:	40021000 	.word	0x40021000
 8006f10:	40021400 	.word	0x40021400
 8006f14:	40021800 	.word	0x40021800
 8006f18:	40021c00 	.word	0x40021c00
 8006f1c:	40013c00 	.word	0x40013c00

08006f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	807b      	strh	r3, [r7, #2]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f30:	787b      	ldrb	r3, [r7, #1]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d003      	beq.n	8006f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f36:	887a      	ldrh	r2, [r7, #2]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f3c:	e003      	b.n	8006f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f3e:	887b      	ldrh	r3, [r7, #2]
 8006f40:	041a      	lsls	r2, r3, #16
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	619a      	str	r2, [r3, #24]
}
 8006f46:	bf00      	nop
 8006f48:	370c      	adds	r7, #12
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
	...

08006f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f5e:	4b08      	ldr	r3, [pc, #32]	; (8006f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f60:	695a      	ldr	r2, [r3, #20]
 8006f62:	88fb      	ldrh	r3, [r7, #6]
 8006f64:	4013      	ands	r3, r2
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d006      	beq.n	8006f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f6a:	4a05      	ldr	r2, [pc, #20]	; (8006f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f70:	88fb      	ldrh	r3, [r7, #6]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f000 f806 	bl	8006f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f78:	bf00      	nop
 8006f7a:	3708      	adds	r7, #8
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	40013c00 	.word	0x40013c00

08006f84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006f8e:	bf00      	nop
 8006f90:	370c      	adds	r7, #12
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
	...

08006f9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d101      	bne.n	8006fae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	e12b      	b.n	8007206 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fb4:	b2db      	uxtb	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d106      	bne.n	8006fc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fb fbec 	bl	80027a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2224      	movs	r2, #36	; 0x24
 8006fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0201 	bic.w	r2, r2, #1
 8006fde:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006fee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ffe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007000:	f002 fd2e 	bl	8009a60 <HAL_RCC_GetPCLK1Freq>
 8007004:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	4a81      	ldr	r2, [pc, #516]	; (8007210 <HAL_I2C_Init+0x274>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d807      	bhi.n	8007020 <HAL_I2C_Init+0x84>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	4a80      	ldr	r2, [pc, #512]	; (8007214 <HAL_I2C_Init+0x278>)
 8007014:	4293      	cmp	r3, r2
 8007016:	bf94      	ite	ls
 8007018:	2301      	movls	r3, #1
 800701a:	2300      	movhi	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	e006      	b.n	800702e <HAL_I2C_Init+0x92>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4a7d      	ldr	r2, [pc, #500]	; (8007218 <HAL_I2C_Init+0x27c>)
 8007024:	4293      	cmp	r3, r2
 8007026:	bf94      	ite	ls
 8007028:	2301      	movls	r3, #1
 800702a:	2300      	movhi	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	e0e7      	b.n	8007206 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4a78      	ldr	r2, [pc, #480]	; (800721c <HAL_I2C_Init+0x280>)
 800703a:	fba2 2303 	umull	r2, r3, r2, r3
 800703e:	0c9b      	lsrs	r3, r3, #18
 8007040:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	430a      	orrs	r2, r1
 8007054:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6a1b      	ldr	r3, [r3, #32]
 800705c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	4a6a      	ldr	r2, [pc, #424]	; (8007210 <HAL_I2C_Init+0x274>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d802      	bhi.n	8007070 <HAL_I2C_Init+0xd4>
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	3301      	adds	r3, #1
 800706e:	e009      	b.n	8007084 <HAL_I2C_Init+0xe8>
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8007076:	fb02 f303 	mul.w	r3, r2, r3
 800707a:	4a69      	ldr	r2, [pc, #420]	; (8007220 <HAL_I2C_Init+0x284>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	099b      	lsrs	r3, r3, #6
 8007082:	3301      	adds	r3, #1
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	430b      	orrs	r3, r1
 800708a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	69db      	ldr	r3, [r3, #28]
 8007092:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8007096:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	495c      	ldr	r1, [pc, #368]	; (8007210 <HAL_I2C_Init+0x274>)
 80070a0:	428b      	cmp	r3, r1
 80070a2:	d819      	bhi.n	80070d8 <HAL_I2C_Init+0x13c>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	1e59      	subs	r1, r3, #1
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	005b      	lsls	r3, r3, #1
 80070ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80070b2:	1c59      	adds	r1, r3, #1
 80070b4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80070b8:	400b      	ands	r3, r1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <HAL_I2C_Init+0x138>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	1e59      	subs	r1, r3, #1
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80070cc:	3301      	adds	r3, #1
 80070ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070d2:	e051      	b.n	8007178 <HAL_I2C_Init+0x1dc>
 80070d4:	2304      	movs	r3, #4
 80070d6:	e04f      	b.n	8007178 <HAL_I2C_Init+0x1dc>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d111      	bne.n	8007104 <HAL_I2C_Init+0x168>
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	1e58      	subs	r0, r3, #1
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6859      	ldr	r1, [r3, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	005b      	lsls	r3, r3, #1
 80070ec:	440b      	add	r3, r1
 80070ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80070f2:	3301      	adds	r3, #1
 80070f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	bf0c      	ite	eq
 80070fc:	2301      	moveq	r3, #1
 80070fe:	2300      	movne	r3, #0
 8007100:	b2db      	uxtb	r3, r3
 8007102:	e012      	b.n	800712a <HAL_I2C_Init+0x18e>
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	1e58      	subs	r0, r3, #1
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6859      	ldr	r1, [r3, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	009b      	lsls	r3, r3, #2
 8007110:	440b      	add	r3, r1
 8007112:	0099      	lsls	r1, r3, #2
 8007114:	440b      	add	r3, r1
 8007116:	fbb0 f3f3 	udiv	r3, r0, r3
 800711a:	3301      	adds	r3, #1
 800711c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007120:	2b00      	cmp	r3, #0
 8007122:	bf0c      	ite	eq
 8007124:	2301      	moveq	r3, #1
 8007126:	2300      	movne	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <HAL_I2C_Init+0x196>
 800712e:	2301      	movs	r3, #1
 8007130:	e022      	b.n	8007178 <HAL_I2C_Init+0x1dc>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10e      	bne.n	8007158 <HAL_I2C_Init+0x1bc>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1e58      	subs	r0, r3, #1
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6859      	ldr	r1, [r3, #4]
 8007142:	460b      	mov	r3, r1
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	440b      	add	r3, r1
 8007148:	fbb0 f3f3 	udiv	r3, r0, r3
 800714c:	3301      	adds	r3, #1
 800714e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007152:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007156:	e00f      	b.n	8007178 <HAL_I2C_Init+0x1dc>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	1e58      	subs	r0, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6859      	ldr	r1, [r3, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	440b      	add	r3, r1
 8007166:	0099      	lsls	r1, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	fbb0 f3f3 	udiv	r3, r0, r3
 800716e:	3301      	adds	r3, #1
 8007170:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007174:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007178:	6879      	ldr	r1, [r7, #4]
 800717a:	6809      	ldr	r1, [r1, #0]
 800717c:	4313      	orrs	r3, r2
 800717e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69da      	ldr	r2, [r3, #28]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6a1b      	ldr	r3, [r3, #32]
 8007192:	431a      	orrs	r2, r3
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	430a      	orrs	r2, r1
 800719a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80071a6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	6911      	ldr	r1, [r2, #16]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	68d2      	ldr	r2, [r2, #12]
 80071b2:	4311      	orrs	r1, r2
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6812      	ldr	r2, [r2, #0]
 80071b8:	430b      	orrs	r3, r1
 80071ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	695a      	ldr	r2, [r3, #20]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	431a      	orrs	r2, r3
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	000186a0 	.word	0x000186a0
 8007214:	001e847f 	.word	0x001e847f
 8007218:	003d08ff 	.word	0x003d08ff
 800721c:	431bde83 	.word	0x431bde83
 8007220:	10624dd3 	.word	0x10624dd3

08007224 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b088      	sub	sp, #32
 8007228:	af02      	add	r7, sp, #8
 800722a:	60f8      	str	r0, [r7, #12]
 800722c:	607a      	str	r2, [r7, #4]
 800722e:	461a      	mov	r2, r3
 8007230:	460b      	mov	r3, r1
 8007232:	817b      	strh	r3, [r7, #10]
 8007234:	4613      	mov	r3, r2
 8007236:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007238:	f7fe ff3a 	bl	80060b0 <HAL_GetTick>
 800723c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007244:	b2db      	uxtb	r3, r3
 8007246:	2b20      	cmp	r3, #32
 8007248:	f040 80e0 	bne.w	800740c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	9300      	str	r3, [sp, #0]
 8007250:	2319      	movs	r3, #25
 8007252:	2201      	movs	r2, #1
 8007254:	4970      	ldr	r1, [pc, #448]	; (8007418 <HAL_I2C_Master_Transmit+0x1f4>)
 8007256:	68f8      	ldr	r0, [r7, #12]
 8007258:	f000 fe02 	bl	8007e60 <I2C_WaitOnFlagUntilTimeout>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d001      	beq.n	8007266 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007262:	2302      	movs	r3, #2
 8007264:	e0d3      	b.n	800740e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_I2C_Master_Transmit+0x50>
 8007270:	2302      	movs	r3, #2
 8007272:	e0cc      	b.n	800740e <HAL_I2C_Master_Transmit+0x1ea>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b01      	cmp	r3, #1
 8007288:	d007      	beq.n	800729a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f042 0201 	orr.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2221      	movs	r2, #33	; 0x21
 80072ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2210      	movs	r2, #16
 80072b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	893a      	ldrh	r2, [r7, #8]
 80072ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4a50      	ldr	r2, [pc, #320]	; (800741c <HAL_I2C_Master_Transmit+0x1f8>)
 80072da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80072dc:	8979      	ldrh	r1, [r7, #10]
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	6a3a      	ldr	r2, [r7, #32]
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fbbc 	bl	8007a60 <I2C_MasterRequestWrite>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e08d      	b.n	800740e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072f2:	2300      	movs	r3, #0
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	613b      	str	r3, [r7, #16]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	613b      	str	r3, [r7, #16]
 8007306:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007308:	e066      	b.n	80073d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	6a39      	ldr	r1, [r7, #32]
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f000 fe7c 	bl	800800c <I2C_WaitOnTXEFlagUntilTimeout>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00d      	beq.n	8007336 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	2b04      	cmp	r3, #4
 8007320:	d107      	bne.n	8007332 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007330:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e06b      	b.n	800740e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	781a      	ldrb	r2, [r3, #0]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007350:	b29b      	uxth	r3, r3
 8007352:	3b01      	subs	r3, #1
 8007354:	b29a      	uxth	r2, r3
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	f003 0304 	and.w	r3, r3, #4
 8007370:	2b04      	cmp	r3, #4
 8007372:	d11b      	bne.n	80073ac <HAL_I2C_Master_Transmit+0x188>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007378:	2b00      	cmp	r3, #0
 800737a:	d017      	beq.n	80073ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007380:	781a      	ldrb	r2, [r3, #0]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007396:	b29b      	uxth	r3, r3
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a4:	3b01      	subs	r3, #1
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	6a39      	ldr	r1, [r7, #32]
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fe6c 	bl	800808e <I2C_WaitOnBTFFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00d      	beq.n	80073d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c0:	2b04      	cmp	r3, #4
 80073c2:	d107      	bne.n	80073d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	681a      	ldr	r2, [r3, #0]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e01a      	b.n	800740e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d194      	bne.n	800730a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2220      	movs	r2, #32
 80073f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007408:	2300      	movs	r3, #0
 800740a:	e000      	b.n	800740e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800740c:	2302      	movs	r3, #2
  }
}
 800740e:	4618      	mov	r0, r3
 8007410:	3718      	adds	r7, #24
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	00100002 	.word	0x00100002
 800741c:	ffff0000 	.word	0xffff0000

08007420 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b088      	sub	sp, #32
 8007424:	af02      	add	r7, sp, #8
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	4608      	mov	r0, r1
 800742a:	4611      	mov	r1, r2
 800742c:	461a      	mov	r2, r3
 800742e:	4603      	mov	r3, r0
 8007430:	817b      	strh	r3, [r7, #10]
 8007432:	460b      	mov	r3, r1
 8007434:	813b      	strh	r3, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800743a:	f7fe fe39 	bl	80060b0 <HAL_GetTick>
 800743e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b20      	cmp	r3, #32
 800744a:	f040 80d9 	bne.w	8007600 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	2319      	movs	r3, #25
 8007454:	2201      	movs	r2, #1
 8007456:	496d      	ldr	r1, [pc, #436]	; (800760c <HAL_I2C_Mem_Write+0x1ec>)
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f000 fd01 	bl	8007e60 <I2C_WaitOnFlagUntilTimeout>
 800745e:	4603      	mov	r3, r0
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007464:	2302      	movs	r3, #2
 8007466:	e0cc      	b.n	8007602 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746e:	2b01      	cmp	r3, #1
 8007470:	d101      	bne.n	8007476 <HAL_I2C_Mem_Write+0x56>
 8007472:	2302      	movs	r3, #2
 8007474:	e0c5      	b.n	8007602 <HAL_I2C_Mem_Write+0x1e2>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2201      	movs	r2, #1
 800747a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0301 	and.w	r3, r3, #1
 8007488:	2b01      	cmp	r3, #1
 800748a:	d007      	beq.n	800749c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f042 0201 	orr.w	r2, r2, #1
 800749a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074aa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2221      	movs	r2, #33	; 0x21
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2240      	movs	r2, #64	; 0x40
 80074b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	6a3a      	ldr	r2, [r7, #32]
 80074c6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4a4d      	ldr	r2, [pc, #308]	; (8007610 <HAL_I2C_Mem_Write+0x1f0>)
 80074dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074de:	88f8      	ldrh	r0, [r7, #6]
 80074e0:	893a      	ldrh	r2, [r7, #8]
 80074e2:	8979      	ldrh	r1, [r7, #10]
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	9301      	str	r3, [sp, #4]
 80074e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	4603      	mov	r3, r0
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 fb38 	bl	8007b64 <I2C_RequestMemoryWrite>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d052      	beq.n	80075a0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e081      	b.n	8007602 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f000 fd82 	bl	800800c <I2C_WaitOnTXEFlagUntilTimeout>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00d      	beq.n	800752a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	2b04      	cmp	r3, #4
 8007514:	d107      	bne.n	8007526 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681a      	ldr	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007524:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e06b      	b.n	8007602 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752e:	781a      	ldrb	r2, [r3, #0]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007544:	3b01      	subs	r3, #1
 8007546:	b29a      	uxth	r2, r3
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007550:	b29b      	uxth	r3, r3
 8007552:	3b01      	subs	r3, #1
 8007554:	b29a      	uxth	r2, r3
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	f003 0304 	and.w	r3, r3, #4
 8007564:	2b04      	cmp	r3, #4
 8007566:	d11b      	bne.n	80075a0 <HAL_I2C_Mem_Write+0x180>
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756c:	2b00      	cmp	r3, #0
 800756e:	d017      	beq.n	80075a0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	781a      	ldrb	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800758a:	3b01      	subs	r3, #1
 800758c:	b29a      	uxth	r2, r3
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007596:	b29b      	uxth	r3, r3
 8007598:	3b01      	subs	r3, #1
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1aa      	bne.n	80074fe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fd6e 	bl	800808e <I2C_WaitOnBTFFlagUntilTimeout>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00d      	beq.n	80075d4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	2b04      	cmp	r3, #4
 80075be:	d107      	bne.n	80075d0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075ce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e016      	b.n	8007602 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2220      	movs	r2, #32
 80075e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075fc:	2300      	movs	r3, #0
 80075fe:	e000      	b.n	8007602 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007600:	2302      	movs	r3, #2
  }
}
 8007602:	4618      	mov	r0, r3
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	00100002 	.word	0x00100002
 8007610:	ffff0000 	.word	0xffff0000

08007614 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08c      	sub	sp, #48	; 0x30
 8007618:	af02      	add	r7, sp, #8
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	461a      	mov	r2, r3
 8007622:	4603      	mov	r3, r0
 8007624:	817b      	strh	r3, [r7, #10]
 8007626:	460b      	mov	r3, r1
 8007628:	813b      	strh	r3, [r7, #8]
 800762a:	4613      	mov	r3, r2
 800762c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800762e:	f7fe fd3f 	bl	80060b0 <HAL_GetTick>
 8007632:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800763a:	b2db      	uxtb	r3, r3
 800763c:	2b20      	cmp	r3, #32
 800763e:	f040 8208 	bne.w	8007a52 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	2319      	movs	r3, #25
 8007648:	2201      	movs	r2, #1
 800764a:	497b      	ldr	r1, [pc, #492]	; (8007838 <HAL_I2C_Mem_Read+0x224>)
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f000 fc07 	bl	8007e60 <I2C_WaitOnFlagUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d001      	beq.n	800765c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007658:	2302      	movs	r3, #2
 800765a:	e1fb      	b.n	8007a54 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_I2C_Mem_Read+0x56>
 8007666:	2302      	movs	r3, #2
 8007668:	e1f4      	b.n	8007a54 <HAL_I2C_Mem_Read+0x440>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b01      	cmp	r3, #1
 800767e:	d007      	beq.n	8007690 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0201 	orr.w	r2, r2, #1
 800768e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	681a      	ldr	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800769e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2222      	movs	r2, #34	; 0x22
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2240      	movs	r2, #64	; 0x40
 80076ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80076c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4a5b      	ldr	r2, [pc, #364]	; (800783c <HAL_I2C_Mem_Read+0x228>)
 80076d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80076d2:	88f8      	ldrh	r0, [r7, #6]
 80076d4:	893a      	ldrh	r2, [r7, #8]
 80076d6:	8979      	ldrh	r1, [r7, #10]
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	9301      	str	r3, [sp, #4]
 80076dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	4603      	mov	r3, r0
 80076e2:	68f8      	ldr	r0, [r7, #12]
 80076e4:	f000 fad4 	bl	8007c90 <I2C_RequestMemoryRead>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d001      	beq.n	80076f2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e1b0      	b.n	8007a54 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d113      	bne.n	8007722 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076fa:	2300      	movs	r3, #0
 80076fc:	623b      	str	r3, [r7, #32]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	623b      	str	r3, [r7, #32]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	699b      	ldr	r3, [r3, #24]
 800770c:	623b      	str	r3, [r7, #32]
 800770e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681a      	ldr	r2, [r3, #0]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	e184      	b.n	8007a2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007726:	2b01      	cmp	r3, #1
 8007728:	d11b      	bne.n	8007762 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	681a      	ldr	r2, [r3, #0]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007738:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800773a:	2300      	movs	r3, #0
 800773c:	61fb      	str	r3, [r7, #28]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	61fb      	str	r3, [r7, #28]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	699b      	ldr	r3, [r3, #24]
 800774c:	61fb      	str	r3, [r7, #28]
 800774e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	e164      	b.n	8007a2c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007766:	2b02      	cmp	r3, #2
 8007768:	d11b      	bne.n	80077a2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007778:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007788:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800778a:	2300      	movs	r3, #0
 800778c:	61bb      	str	r3, [r7, #24]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	695b      	ldr	r3, [r3, #20]
 8007794:	61bb      	str	r3, [r7, #24]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699b      	ldr	r3, [r3, #24]
 800779c:	61bb      	str	r3, [r7, #24]
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	e144      	b.n	8007a2c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077a2:	2300      	movs	r3, #0
 80077a4:	617b      	str	r3, [r7, #20]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	695b      	ldr	r3, [r3, #20]
 80077ac:	617b      	str	r3, [r7, #20]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	699b      	ldr	r3, [r3, #24]
 80077b4:	617b      	str	r3, [r7, #20]
 80077b6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80077b8:	e138      	b.n	8007a2c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077be:	2b03      	cmp	r3, #3
 80077c0:	f200 80f1 	bhi.w	80079a6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d123      	bne.n	8007814 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f000 fc9d 	bl	8008110 <I2C_WaitOnRXNEFlagUntilTimeout>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e139      	b.n	8007a54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	691a      	ldr	r2, [r3, #16]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ea:	b2d2      	uxtb	r2, r2
 80077ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29a      	uxth	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007812:	e10b      	b.n	8007a2c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007818:	2b02      	cmp	r3, #2
 800781a:	d14e      	bne.n	80078ba <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800781c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007822:	2200      	movs	r2, #0
 8007824:	4906      	ldr	r1, [pc, #24]	; (8007840 <HAL_I2C_Mem_Read+0x22c>)
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 fb1a 	bl	8007e60 <I2C_WaitOnFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d008      	beq.n	8007844 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e10e      	b.n	8007a54 <HAL_I2C_Mem_Read+0x440>
 8007836:	bf00      	nop
 8007838:	00100002 	.word	0x00100002
 800783c:	ffff0000 	.word	0xffff0000
 8007840:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007852:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691a      	ldr	r2, [r3, #16]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007866:	1c5a      	adds	r2, r3, #1
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800787c:	b29b      	uxth	r3, r3
 800787e:	3b01      	subs	r3, #1
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691a      	ldr	r2, [r3, #16]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007890:	b2d2      	uxtb	r2, r2
 8007892:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	1c5a      	adds	r2, r3, #1
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078b8:	e0b8      	b.n	8007a2c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078bc:	9300      	str	r3, [sp, #0]
 80078be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c0:	2200      	movs	r2, #0
 80078c2:	4966      	ldr	r1, [pc, #408]	; (8007a5c <HAL_I2C_Mem_Read+0x448>)
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f000 facb 	bl	8007e60 <I2C_WaitOnFlagUntilTimeout>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d001      	beq.n	80078d4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e0bf      	b.n	8007a54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691a      	ldr	r2, [r3, #16]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ee:	b2d2      	uxtb	r2, r2
 80078f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	1c5a      	adds	r2, r3, #1
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007900:	3b01      	subs	r3, #1
 8007902:	b29a      	uxth	r2, r3
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	3b01      	subs	r3, #1
 8007910:	b29a      	uxth	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007918:	9300      	str	r3, [sp, #0]
 800791a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800791c:	2200      	movs	r2, #0
 800791e:	494f      	ldr	r1, [pc, #316]	; (8007a5c <HAL_I2C_Mem_Read+0x448>)
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 fa9d 	bl	8007e60 <I2C_WaitOnFlagUntilTimeout>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e091      	b.n	8007a54 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800793e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691a      	ldr	r2, [r3, #16]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794a:	b2d2      	uxtb	r2, r2
 800794c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007952:	1c5a      	adds	r2, r3, #1
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800795c:	3b01      	subs	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007968:	b29b      	uxth	r3, r3
 800796a:	3b01      	subs	r3, #1
 800796c:	b29a      	uxth	r2, r3
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	691a      	ldr	r2, [r3, #16]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797c:	b2d2      	uxtb	r2, r2
 800797e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	1c5a      	adds	r2, r3, #1
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800798e:	3b01      	subs	r3, #1
 8007990:	b29a      	uxth	r2, r3
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800799a:	b29b      	uxth	r3, r3
 800799c:	3b01      	subs	r3, #1
 800799e:	b29a      	uxth	r2, r3
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80079a4:	e042      	b.n	8007a2c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079a8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079aa:	68f8      	ldr	r0, [r7, #12]
 80079ac:	f000 fbb0 	bl	8008110 <I2C_WaitOnRXNEFlagUntilTimeout>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d001      	beq.n	80079ba <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e04c      	b.n	8007a54 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	691a      	ldr	r2, [r3, #16]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	b2d2      	uxtb	r2, r2
 80079c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079d6:	3b01      	subs	r3, #1
 80079d8:	b29a      	uxth	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	3b01      	subs	r3, #1
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	695b      	ldr	r3, [r3, #20]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d118      	bne.n	8007a2c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	691a      	ldr	r2, [r3, #16]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a04:	b2d2      	uxtb	r2, r2
 8007a06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0c:	1c5a      	adds	r2, r3, #1
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	3b01      	subs	r3, #1
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f47f aec2 	bne.w	80077ba <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e000      	b.n	8007a54 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007a52:	2302      	movs	r3, #2
  }
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3728      	adds	r7, #40	; 0x28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	00010004 	.word	0x00010004

08007a60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af02      	add	r7, sp, #8
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	607a      	str	r2, [r7, #4]
 8007a6a:	603b      	str	r3, [r7, #0]
 8007a6c:	460b      	mov	r3, r1
 8007a6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	2b08      	cmp	r3, #8
 8007a7a:	d006      	beq.n	8007a8a <I2C_MasterRequestWrite+0x2a>
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d003      	beq.n	8007a8a <I2C_MasterRequestWrite+0x2a>
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007a88:	d108      	bne.n	8007a9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a98:	601a      	str	r2, [r3, #0]
 8007a9a:	e00b      	b.n	8007ab4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa0:	2b12      	cmp	r3, #18
 8007aa2:	d107      	bne.n	8007ab4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	681a      	ldr	r2, [r3, #0]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ab2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f9cd 	bl	8007e60 <I2C_WaitOnFlagUntilTimeout>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00d      	beq.n	8007ae8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ada:	d103      	bne.n	8007ae4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ae2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e035      	b.n	8007b54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007af0:	d108      	bne.n	8007b04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007af2:	897b      	ldrh	r3, [r7, #10]
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	461a      	mov	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007b00:	611a      	str	r2, [r3, #16]
 8007b02:	e01b      	b.n	8007b3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007b04:	897b      	ldrh	r3, [r7, #10]
 8007b06:	11db      	asrs	r3, r3, #7
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	f003 0306 	and.w	r3, r3, #6
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f063 030f 	orn	r3, r3, #15
 8007b14:	b2da      	uxtb	r2, r3
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	490e      	ldr	r1, [pc, #56]	; (8007b5c <I2C_MasterRequestWrite+0xfc>)
 8007b22:	68f8      	ldr	r0, [r7, #12]
 8007b24:	f000 f9f3 	bl	8007f0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d001      	beq.n	8007b32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e010      	b.n	8007b54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007b32:	897b      	ldrh	r3, [r7, #10]
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	4907      	ldr	r1, [pc, #28]	; (8007b60 <I2C_MasterRequestWrite+0x100>)
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f000 f9e3 	bl	8007f0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d001      	beq.n	8007b52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	e000      	b.n	8007b54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007b52:	2300      	movs	r3, #0
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3718      	adds	r7, #24
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	00010008 	.word	0x00010008
 8007b60:	00010002 	.word	0x00010002

08007b64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b088      	sub	sp, #32
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	60f8      	str	r0, [r7, #12]
 8007b6c:	4608      	mov	r0, r1
 8007b6e:	4611      	mov	r1, r2
 8007b70:	461a      	mov	r2, r3
 8007b72:	4603      	mov	r3, r0
 8007b74:	817b      	strh	r3, [r7, #10]
 8007b76:	460b      	mov	r3, r1
 8007b78:	813b      	strh	r3, [r7, #8]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b8c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	9300      	str	r3, [sp, #0]
 8007b92:	6a3b      	ldr	r3, [r7, #32]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 f960 	bl	8007e60 <I2C_WaitOnFlagUntilTimeout>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00d      	beq.n	8007bc2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bb4:	d103      	bne.n	8007bbe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007bbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007bbe:	2303      	movs	r3, #3
 8007bc0:	e05f      	b.n	8007c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007bc2:	897b      	ldrh	r3, [r7, #10]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007bd0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	6a3a      	ldr	r2, [r7, #32]
 8007bd6:	492d      	ldr	r1, [pc, #180]	; (8007c8c <I2C_RequestMemoryWrite+0x128>)
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f998 	bl	8007f0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007bde:	4603      	mov	r3, r0
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d001      	beq.n	8007be8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007be4:	2301      	movs	r3, #1
 8007be6:	e04c      	b.n	8007c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007be8:	2300      	movs	r3, #0
 8007bea:	617b      	str	r3, [r7, #20]
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c00:	6a39      	ldr	r1, [r7, #32]
 8007c02:	68f8      	ldr	r0, [r7, #12]
 8007c04:	f000 fa02 	bl	800800c <I2C_WaitOnTXEFlagUntilTimeout>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00d      	beq.n	8007c2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	2b04      	cmp	r3, #4
 8007c14:	d107      	bne.n	8007c26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007c26:	2301      	movs	r3, #1
 8007c28:	e02b      	b.n	8007c82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c2a:	88fb      	ldrh	r3, [r7, #6]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d105      	bne.n	8007c3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c30:	893b      	ldrh	r3, [r7, #8]
 8007c32:	b2da      	uxtb	r2, r3
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	611a      	str	r2, [r3, #16]
 8007c3a:	e021      	b.n	8007c80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007c3c:	893b      	ldrh	r3, [r7, #8]
 8007c3e:	0a1b      	lsrs	r3, r3, #8
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4c:	6a39      	ldr	r1, [r7, #32]
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f000 f9dc 	bl	800800c <I2C_WaitOnTXEFlagUntilTimeout>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00d      	beq.n	8007c76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	2b04      	cmp	r3, #4
 8007c60:	d107      	bne.n	8007c72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c72:	2301      	movs	r3, #1
 8007c74:	e005      	b.n	8007c82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007c76:	893b      	ldrh	r3, [r7, #8]
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3718      	adds	r7, #24
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	00010002 	.word	0x00010002

08007c90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b088      	sub	sp, #32
 8007c94:	af02      	add	r7, sp, #8
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	4608      	mov	r0, r1
 8007c9a:	4611      	mov	r1, r2
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	817b      	strh	r3, [r7, #10]
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	813b      	strh	r3, [r7, #8]
 8007ca6:	4613      	mov	r3, r2
 8007ca8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cb8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007cc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	9300      	str	r3, [sp, #0]
 8007cce:	6a3b      	ldr	r3, [r7, #32]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007cd6:	68f8      	ldr	r0, [r7, #12]
 8007cd8:	f000 f8c2 	bl	8007e60 <I2C_WaitOnFlagUntilTimeout>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d00d      	beq.n	8007cfe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cf0:	d103      	bne.n	8007cfa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007cfa:	2303      	movs	r3, #3
 8007cfc:	e0aa      	b.n	8007e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007cfe:	897b      	ldrh	r3, [r7, #10]
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	461a      	mov	r2, r3
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d10:	6a3a      	ldr	r2, [r7, #32]
 8007d12:	4952      	ldr	r1, [pc, #328]	; (8007e5c <I2C_RequestMemoryRead+0x1cc>)
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f8fa 	bl	8007f0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d001      	beq.n	8007d24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
 8007d22:	e097      	b.n	8007e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d24:	2300      	movs	r3, #0
 8007d26:	617b      	str	r3, [r7, #20]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	617b      	str	r3, [r7, #20]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	699b      	ldr	r3, [r3, #24]
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d3c:	6a39      	ldr	r1, [r7, #32]
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 f964 	bl	800800c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d44:	4603      	mov	r3, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00d      	beq.n	8007d66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	2b04      	cmp	r3, #4
 8007d50:	d107      	bne.n	8007d62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007d62:	2301      	movs	r3, #1
 8007d64:	e076      	b.n	8007e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d66:	88fb      	ldrh	r3, [r7, #6]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d105      	bne.n	8007d78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007d6c:	893b      	ldrh	r3, [r7, #8]
 8007d6e:	b2da      	uxtb	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	611a      	str	r2, [r3, #16]
 8007d76:	e021      	b.n	8007dbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007d78:	893b      	ldrh	r3, [r7, #8]
 8007d7a:	0a1b      	lsrs	r3, r3, #8
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	b2da      	uxtb	r2, r3
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d88:	6a39      	ldr	r1, [r7, #32]
 8007d8a:	68f8      	ldr	r0, [r7, #12]
 8007d8c:	f000 f93e 	bl	800800c <I2C_WaitOnTXEFlagUntilTimeout>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00d      	beq.n	8007db2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d107      	bne.n	8007dae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e050      	b.n	8007e54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007db2:	893b      	ldrh	r3, [r7, #8]
 8007db4:	b2da      	uxtb	r2, r3
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dbe:	6a39      	ldr	r1, [r7, #32]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f000 f923 	bl	800800c <I2C_WaitOnTXEFlagUntilTimeout>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00d      	beq.n	8007de8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	2b04      	cmp	r3, #4
 8007dd2:	d107      	bne.n	8007de4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007de2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e035      	b.n	8007e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007df6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	f000 f82b 	bl	8007e60 <I2C_WaitOnFlagUntilTimeout>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d00d      	beq.n	8007e2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e1e:	d103      	bne.n	8007e28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e013      	b.n	8007e54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e2c:	897b      	ldrh	r3, [r7, #10]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	f043 0301 	orr.w	r3, r3, #1
 8007e34:	b2da      	uxtb	r2, r3
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	6a3a      	ldr	r2, [r7, #32]
 8007e40:	4906      	ldr	r1, [pc, #24]	; (8007e5c <I2C_RequestMemoryRead+0x1cc>)
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f000 f863 	bl	8007f0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d001      	beq.n	8007e52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e000      	b.n	8007e54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3718      	adds	r7, #24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	00010002 	.word	0x00010002

08007e60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007e70:	e025      	b.n	8007ebe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e78:	d021      	beq.n	8007ebe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e7a:	f7fe f919 	bl	80060b0 <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	69bb      	ldr	r3, [r7, #24]
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	683a      	ldr	r2, [r7, #0]
 8007e86:	429a      	cmp	r2, r3
 8007e88:	d302      	bcc.n	8007e90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d116      	bne.n	8007ebe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eaa:	f043 0220 	orr.w	r2, r3, #32
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e023      	b.n	8007f06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	0c1b      	lsrs	r3, r3, #16
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b01      	cmp	r3, #1
 8007ec6:	d10d      	bne.n	8007ee4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	695b      	ldr	r3, [r3, #20]
 8007ece:	43da      	mvns	r2, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	bf0c      	ite	eq
 8007eda:	2301      	moveq	r3, #1
 8007edc:	2300      	movne	r3, #0
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	e00c      	b.n	8007efe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699b      	ldr	r3, [r3, #24]
 8007eea:	43da      	mvns	r2, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	4013      	ands	r3, r2
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	bf0c      	ite	eq
 8007ef6:	2301      	moveq	r3, #1
 8007ef8:	2300      	movne	r3, #0
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	461a      	mov	r2, r3
 8007efe:	79fb      	ldrb	r3, [r7, #7]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d0b6      	beq.n	8007e72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	60b9      	str	r1, [r7, #8]
 8007f18:	607a      	str	r2, [r7, #4]
 8007f1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007f1c:	e051      	b.n	8007fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	695b      	ldr	r3, [r3, #20]
 8007f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f2c:	d123      	bne.n	8007f76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007f46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	f043 0204 	orr.w	r2, r3, #4
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e046      	b.n	8008004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f7c:	d021      	beq.n	8007fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7e:	f7fe f897 	bl	80060b0 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	429a      	cmp	r2, r3
 8007f8c:	d302      	bcc.n	8007f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d116      	bne.n	8007fc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2220      	movs	r2, #32
 8007f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fae:	f043 0220 	orr.w	r2, r3, #32
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e020      	b.n	8008004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	0c1b      	lsrs	r3, r3, #16
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	d10c      	bne.n	8007fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	695b      	ldr	r3, [r3, #20]
 8007fd2:	43da      	mvns	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	bf14      	ite	ne
 8007fde:	2301      	movne	r3, #1
 8007fe0:	2300      	moveq	r3, #0
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	e00b      	b.n	8007ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	43da      	mvns	r2, r3
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bf14      	ite	ne
 8007ff8:	2301      	movne	r3, #1
 8007ffa:	2300      	moveq	r3, #0
 8007ffc:	b2db      	uxtb	r3, r3
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d18d      	bne.n	8007f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008018:	e02d      	b.n	8008076 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f8ce 	bl	80081bc <I2C_IsAcknowledgeFailed>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e02d      	b.n	8008086 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008030:	d021      	beq.n	8008076 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008032:	f7fe f83d 	bl	80060b0 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	68ba      	ldr	r2, [r7, #8]
 800803e:	429a      	cmp	r2, r3
 8008040:	d302      	bcc.n	8008048 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d116      	bne.n	8008076 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2200      	movs	r2, #0
 800805a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008062:	f043 0220 	orr.w	r2, r3, #32
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2200      	movs	r2, #0
 800806e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e007      	b.n	8008086 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008080:	2b80      	cmp	r3, #128	; 0x80
 8008082:	d1ca      	bne.n	800801a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3710      	adds	r7, #16
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	60f8      	str	r0, [r7, #12]
 8008096:	60b9      	str	r1, [r7, #8]
 8008098:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800809a:	e02d      	b.n	80080f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800809c:	68f8      	ldr	r0, [r7, #12]
 800809e:	f000 f88d 	bl	80081bc <I2C_IsAcknowledgeFailed>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d001      	beq.n	80080ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e02d      	b.n	8008108 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b2:	d021      	beq.n	80080f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080b4:	f7fd fffc 	bl	80060b0 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d302      	bcc.n	80080ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d116      	bne.n	80080f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2200      	movs	r2, #0
 80080ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2220      	movs	r2, #32
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	2200      	movs	r2, #0
 80080dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e4:	f043 0220 	orr.w	r2, r3, #32
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e007      	b.n	8008108 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	695b      	ldr	r3, [r3, #20]
 80080fe:	f003 0304 	and.w	r3, r3, #4
 8008102:	2b04      	cmp	r3, #4
 8008104:	d1ca      	bne.n	800809c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800811c:	e042      	b.n	80081a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	695b      	ldr	r3, [r3, #20]
 8008124:	f003 0310 	and.w	r3, r3, #16
 8008128:	2b10      	cmp	r3, #16
 800812a:	d119      	bne.n	8008160 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f06f 0210 	mvn.w	r2, #16
 8008134:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2200      	movs	r2, #0
 8008158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800815c:	2301      	movs	r3, #1
 800815e:	e029      	b.n	80081b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008160:	f7fd ffa6 	bl	80060b0 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	429a      	cmp	r2, r3
 800816e:	d302      	bcc.n	8008176 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d116      	bne.n	80081a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2220      	movs	r2, #32
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008190:	f043 0220 	orr.w	r2, r3, #32
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e007      	b.n	80081b4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ae:	2b40      	cmp	r3, #64	; 0x40
 80081b0:	d1b5      	bne.n	800811e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d2:	d11b      	bne.n	800820c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80081dc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2220      	movs	r2, #32
 80081e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f8:	f043 0204 	orr.w	r2, r3, #4
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e000      	b.n	800820e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	370c      	adds	r7, #12
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
	...

0800821c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	b088      	sub	sp, #32
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e128      	b.n	8008480 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d109      	bne.n	800824e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a90      	ldr	r2, [pc, #576]	; (8008488 <HAL_I2S_Init+0x26c>)
 8008246:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7fa fb49 	bl	80028e0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2202      	movs	r2, #2
 8008252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	69db      	ldr	r3, [r3, #28]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6812      	ldr	r2, [r2, #0]
 8008260:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008264:	f023 030f 	bic.w	r3, r3, #15
 8008268:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2202      	movs	r2, #2
 8008270:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	2b02      	cmp	r3, #2
 8008278:	d060      	beq.n	800833c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d102      	bne.n	8008288 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008282:	2310      	movs	r3, #16
 8008284:	617b      	str	r3, [r7, #20]
 8008286:	e001      	b.n	800828c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8008288:	2320      	movs	r3, #32
 800828a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	2b20      	cmp	r3, #32
 8008292:	d802      	bhi.n	800829a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	005b      	lsls	r3, r3, #1
 8008298:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800829a:	2001      	movs	r0, #1
 800829c:	f001 fd16 	bl	8009ccc <HAL_RCCEx_GetPeriphCLKFreq>
 80082a0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082aa:	d125      	bne.n	80082f8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	68db      	ldr	r3, [r3, #12]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d010      	beq.n	80082d6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80082be:	4613      	mov	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	4413      	add	r3, r2
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	461a      	mov	r2, r3
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	695b      	ldr	r3, [r3, #20]
 80082cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80082d0:	3305      	adds	r3, #5
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	e01f      	b.n	8008316 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	00db      	lsls	r3, r3, #3
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80082e0:	4613      	mov	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4413      	add	r3, r2
 80082e6:	005b      	lsls	r3, r3, #1
 80082e8:	461a      	mov	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80082f2:	3305      	adds	r3, #5
 80082f4:	613b      	str	r3, [r7, #16]
 80082f6:	e00e      	b.n	8008316 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8008300:	4613      	mov	r3, r2
 8008302:	009b      	lsls	r3, r3, #2
 8008304:	4413      	add	r3, r2
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	461a      	mov	r2, r3
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008312:	3305      	adds	r3, #5
 8008314:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	4a5c      	ldr	r2, [pc, #368]	; (800848c <HAL_I2S_Init+0x270>)
 800831a:	fba2 2303 	umull	r2, r3, r2, r3
 800831e:	08db      	lsrs	r3, r3, #3
 8008320:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f003 0301 	and.w	r3, r3, #1
 8008328:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800832a:	693a      	ldr	r2, [r7, #16]
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	1ad3      	subs	r3, r2, r3
 8008330:	085b      	lsrs	r3, r3, #1
 8008332:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008334:	69bb      	ldr	r3, [r7, #24]
 8008336:	021b      	lsls	r3, r3, #8
 8008338:	61bb      	str	r3, [r7, #24]
 800833a:	e003      	b.n	8008344 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800833c:	2302      	movs	r3, #2
 800833e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008340:	2300      	movs	r3, #0
 8008342:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	2b01      	cmp	r3, #1
 8008348:	d902      	bls.n	8008350 <HAL_I2S_Init+0x134>
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	2bff      	cmp	r3, #255	; 0xff
 800834e:	d907      	bls.n	8008360 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008354:	f043 0210 	orr.w	r2, r3, #16
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e08f      	b.n	8008480 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	691a      	ldr	r2, [r3, #16]
 8008364:	69bb      	ldr	r3, [r7, #24]
 8008366:	ea42 0103 	orr.w	r1, r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	69fa      	ldr	r2, [r7, #28]
 8008370:	430a      	orrs	r2, r1
 8008372:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800837e:	f023 030f 	bic.w	r3, r3, #15
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	6851      	ldr	r1, [r2, #4]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	6892      	ldr	r2, [r2, #8]
 800838a:	4311      	orrs	r1, r2
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	68d2      	ldr	r2, [r2, #12]
 8008390:	4311      	orrs	r1, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6992      	ldr	r2, [r2, #24]
 8008396:	430a      	orrs	r2, r1
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083a2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	d161      	bne.n	8008470 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a38      	ldr	r2, [pc, #224]	; (8008490 <HAL_I2S_Init+0x274>)
 80083b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a37      	ldr	r2, [pc, #220]	; (8008494 <HAL_I2S_Init+0x278>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d101      	bne.n	80083c0 <HAL_I2S_Init+0x1a4>
 80083bc:	4b36      	ldr	r3, [pc, #216]	; (8008498 <HAL_I2S_Init+0x27c>)
 80083be:	e001      	b.n	80083c4 <HAL_I2S_Init+0x1a8>
 80083c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083c4:	69db      	ldr	r3, [r3, #28]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6812      	ldr	r2, [r2, #0]
 80083ca:	4932      	ldr	r1, [pc, #200]	; (8008494 <HAL_I2S_Init+0x278>)
 80083cc:	428a      	cmp	r2, r1
 80083ce:	d101      	bne.n	80083d4 <HAL_I2S_Init+0x1b8>
 80083d0:	4a31      	ldr	r2, [pc, #196]	; (8008498 <HAL_I2S_Init+0x27c>)
 80083d2:	e001      	b.n	80083d8 <HAL_I2S_Init+0x1bc>
 80083d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80083d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80083dc:	f023 030f 	bic.w	r3, r3, #15
 80083e0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4a2b      	ldr	r2, [pc, #172]	; (8008494 <HAL_I2S_Init+0x278>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	d101      	bne.n	80083f0 <HAL_I2S_Init+0x1d4>
 80083ec:	4b2a      	ldr	r3, [pc, #168]	; (8008498 <HAL_I2S_Init+0x27c>)
 80083ee:	e001      	b.n	80083f4 <HAL_I2S_Init+0x1d8>
 80083f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80083f4:	2202      	movs	r2, #2
 80083f6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a25      	ldr	r2, [pc, #148]	; (8008494 <HAL_I2S_Init+0x278>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d101      	bne.n	8008406 <HAL_I2S_Init+0x1ea>
 8008402:	4b25      	ldr	r3, [pc, #148]	; (8008498 <HAL_I2S_Init+0x27c>)
 8008404:	e001      	b.n	800840a <HAL_I2S_Init+0x1ee>
 8008406:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008416:	d003      	beq.n	8008420 <HAL_I2S_Init+0x204>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d103      	bne.n	8008428 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	e001      	b.n	800842c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8008428:	2300      	movs	r3, #0
 800842a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008436:	4313      	orrs	r3, r2
 8008438:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68db      	ldr	r3, [r3, #12]
 800843e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008440:	4313      	orrs	r3, r2
 8008442:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	699b      	ldr	r3, [r3, #24]
 8008448:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800844a:	4313      	orrs	r3, r2
 800844c:	b29a      	uxth	r2, r3
 800844e:	897b      	ldrh	r3, [r7, #10]
 8008450:	4313      	orrs	r3, r2
 8008452:	b29b      	uxth	r3, r3
 8008454:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008458:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a0d      	ldr	r2, [pc, #52]	; (8008494 <HAL_I2S_Init+0x278>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d101      	bne.n	8008468 <HAL_I2S_Init+0x24c>
 8008464:	4b0c      	ldr	r3, [pc, #48]	; (8008498 <HAL_I2S_Init+0x27c>)
 8008466:	e001      	b.n	800846c <HAL_I2S_Init+0x250>
 8008468:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800846c:	897a      	ldrh	r2, [r7, #10]
 800846e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2200      	movs	r2, #0
 8008474:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	3720      	adds	r7, #32
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	08008b49 	.word	0x08008b49
 800848c:	cccccccd 	.word	0xcccccccd
 8008490:	08008cd1 	.word	0x08008cd1
 8008494:	40003800 	.word	0x40003800
 8008498:	40003400 	.word	0x40003400

0800849c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	60b9      	str	r1, [r7, #8]
 80084a6:	4613      	mov	r3, r2
 80084a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <HAL_I2S_Receive_DMA+0x1a>
 80084b0:	88fb      	ldrh	r3, [r7, #6]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e0a1      	b.n	80085fe <HAL_I2S_Receive_DMA+0x162>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d101      	bne.n	80084ca <HAL_I2S_Receive_DMA+0x2e>
 80084c6:	2302      	movs	r3, #2
 80084c8:	e099      	b.n	80085fe <HAL_I2S_Receive_DMA+0x162>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d005      	beq.n	80084ea <HAL_I2S_Receive_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80084e6:	2302      	movs	r3, #2
 80084e8:	e089      	b.n	80085fe <HAL_I2S_Receive_DMA+0x162>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2204      	movs	r2, #4
 80084ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pRxBuffPtr = pData;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	62da      	str	r2, [r3, #44]	; 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69db      	ldr	r3, [r3, #28]
 8008504:	f003 0307 	and.w	r3, r3, #7
 8008508:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b03      	cmp	r3, #3
 800850e:	d002      	beq.n	8008516 <HAL_I2S_Receive_DMA+0x7a>
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2b05      	cmp	r3, #5
 8008514:	d10a      	bne.n	800852c <HAL_I2S_Receive_DMA+0x90>
  {
    hi2s->RxXferSize = (Size << 1U);
 8008516:	88fb      	ldrh	r3, [r7, #6]
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	b29a      	uxth	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8008520:	88fb      	ldrh	r3, [r7, #6]
 8008522:	005b      	lsls	r3, r3, #1
 8008524:	b29a      	uxth	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	865a      	strh	r2, [r3, #50]	; 0x32
 800852a:	e005      	b.n	8008538 <HAL_I2S_Receive_DMA+0x9c>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	88fa      	ldrh	r2, [r7, #6]
 8008530:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	88fa      	ldrh	r2, [r7, #6]
 8008536:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800853c:	4a32      	ldr	r2, [pc, #200]	; (8008608 <HAL_I2S_Receive_DMA+0x16c>)
 800853e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008544:	4a31      	ldr	r2, [pc, #196]	; (800860c <HAL_I2S_Receive_DMA+0x170>)
 8008546:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800854c:	4a30      	ldr	r2, [pc, #192]	; (8008610 <HAL_I2S_Receive_DMA+0x174>)
 800854e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800855a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800855e:	d10a      	bne.n	8008576 <HAL_I2S_Receive_DMA+0xda>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008560:	2300      	movs	r3, #0
 8008562:	613b      	str	r3, [r7, #16]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68db      	ldr	r3, [r3, #12]
 800856a:	613b      	str	r3, [r7, #16]
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	613b      	str	r3, [r7, #16]
 8008574:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	330c      	adds	r3, #12
 8008580:	4619      	mov	r1, r3
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800858c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800858e:	f7fd fff9 	bl	8006584 <HAL_DMA_Start_IT>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00f      	beq.n	80085b8 <HAL_I2S_Receive_DMA+0x11c>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800859c:	f043 0208 	orr.w	r2, r3, #8
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e022      	b.n	80085fe <HAL_I2S_Receive_DMA+0x162>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	69db      	ldr	r3, [r3, #28]
 80085be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d107      	bne.n	80085d6 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69da      	ldr	r2, [r3, #28]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80085d4:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	f003 0301 	and.w	r3, r3, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d107      	bne.n	80085f4 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685a      	ldr	r2, [r3, #4]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f042 0201 	orr.w	r2, r2, #1
 80085f2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3718      	adds	r7, #24
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	08008a27 	.word	0x08008a27
 800860c:	080089e5 	.word	0x080089e5
 8008610:	08008a43 	.word	0x08008a43

08008614 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b088      	sub	sp, #32
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008628:	d004      	beq.n	8008634 <HAL_I2S_DMAStop+0x20>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	f040 80d1 	bne.w	80087d6 <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00f      	beq.n	800865c <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008640:	4618      	mov	r0, r3
 8008642:	f7fd fff7 	bl	8006634 <HAL_DMA_Abort>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008650:	f043 0208 	orr.w	r2, r3, #8
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800865c:	2364      	movs	r3, #100	; 0x64
 800865e:	2201      	movs	r2, #1
 8008660:	2102      	movs	r1, #2
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fafa 	bl	8008c5c <I2S_WaitFlagStateUntilTimeout>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00b      	beq.n	8008686 <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008672:	f043 0201 	orr.w	r2, r3, #1
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8008686:	2364      	movs	r3, #100	; 0x64
 8008688:	2200      	movs	r2, #0
 800868a:	2180      	movs	r1, #128	; 0x80
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 fae5 	bl	8008c5c <I2S_WaitFlagStateUntilTimeout>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00b      	beq.n	80086b0 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800869c:	f043 0201 	orr.w	r2, r3, #1
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	69da      	ldr	r2, [r3, #28]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086be:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80086c0:	2300      	movs	r3, #0
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	617b      	str	r3, [r7, #20]
 80086cc:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	685a      	ldr	r2, [r3, #4]
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f022 0202 	bic.w	r2, r2, #2
 80086dc:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b05      	cmp	r3, #5
 80086e8:	f040 8165 	bne.w	80089b6 <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00f      	beq.n	8008714 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fd ff9b 	bl	8006634 <HAL_DMA_Abort>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d007      	beq.n	8008714 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008708:	f043 0208 	orr.w	r2, r3, #8
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a8a      	ldr	r2, [pc, #552]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d101      	bne.n	8008722 <HAL_I2S_DMAStop+0x10e>
 800871e:	4b8a      	ldr	r3, [pc, #552]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 8008720:	e001      	b.n	8008726 <HAL_I2S_DMAStop+0x112>
 8008722:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008726:	69da      	ldr	r2, [r3, #28]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4985      	ldr	r1, [pc, #532]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 800872e:	428b      	cmp	r3, r1
 8008730:	d101      	bne.n	8008736 <HAL_I2S_DMAStop+0x122>
 8008732:	4b85      	ldr	r3, [pc, #532]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 8008734:	e001      	b.n	800873a <HAL_I2S_DMAStop+0x126>
 8008736:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800873a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800873e:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8008740:	2300      	movs	r3, #0
 8008742:	613b      	str	r3, [r7, #16]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4a7e      	ldr	r2, [pc, #504]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d101      	bne.n	8008752 <HAL_I2S_DMAStop+0x13e>
 800874e:	4b7e      	ldr	r3, [pc, #504]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 8008750:	e001      	b.n	8008756 <HAL_I2S_DMAStop+0x142>
 8008752:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	613b      	str	r3, [r7, #16]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a79      	ldr	r2, [pc, #484]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d101      	bne.n	8008768 <HAL_I2S_DMAStop+0x154>
 8008764:	4b78      	ldr	r3, [pc, #480]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 8008766:	e001      	b.n	800876c <HAL_I2S_DMAStop+0x158>
 8008768:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a73      	ldr	r2, [pc, #460]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d101      	bne.n	8008780 <HAL_I2S_DMAStop+0x16c>
 800877c:	4b72      	ldr	r3, [pc, #456]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 800877e:	e001      	b.n	8008784 <HAL_I2S_DMAStop+0x170>
 8008780:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	496e      	ldr	r1, [pc, #440]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 800878c:	428b      	cmp	r3, r1
 800878e:	d101      	bne.n	8008794 <HAL_I2S_DMAStop+0x180>
 8008790:	4b6d      	ldr	r3, [pc, #436]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 8008792:	e001      	b.n	8008798 <HAL_I2S_DMAStop+0x184>
 8008794:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008798:	f022 0201 	bic.w	r2, r2, #1
 800879c:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10c      	bne.n	80087c0 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80087ba:	2301      	movs	r3, #1
 80087bc:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80087be:	e0fa      	b.n	80089b6 <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a5f      	ldr	r2, [pc, #380]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d101      	bne.n	80087ce <HAL_I2S_DMAStop+0x1ba>
 80087ca:	4b5f      	ldr	r3, [pc, #380]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 80087cc:	e001      	b.n	80087d2 <HAL_I2S_DMAStop+0x1be>
 80087ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80087d2:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80087d4:	e0ef      	b.n	80089b6 <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087de:	d005      	beq.n	80087ec <HAL_I2S_DMAStop+0x1d8>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087e8:	f040 80e5 	bne.w	80089b6 <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00f      	beq.n	8008814 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fd ff1b 	bl	8006634 <HAL_DMA_Abort>
 80087fe:	4603      	mov	r3, r0
 8008800:	2b00      	cmp	r3, #0
 8008802:	d007      	beq.n	8008814 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008808:	f043 0208 	orr.w	r2, r3, #8
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b05      	cmp	r3, #5
 800881e:	f040 809a 	bne.w	8008956 <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00f      	beq.n	800884a <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	4618      	mov	r0, r3
 8008830:	f7fd ff00 	bl	8006634 <HAL_DMA_Abort>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d007      	beq.n	800884a <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800883e:	f043 0208 	orr.w	r2, r3, #8
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800884a:	f7fd fc31 	bl	80060b0 <HAL_GetTick>
 800884e:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8008850:	e012      	b.n	8008878 <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8008852:	f7fd fc2d 	bl	80060b0 <HAL_GetTick>
 8008856:	4602      	mov	r2, r0
 8008858:	69bb      	ldr	r3, [r7, #24]
 800885a:	1ad3      	subs	r3, r2, r3
 800885c:	2b64      	cmp	r3, #100	; 0x64
 800885e:	d90b      	bls.n	8008878 <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008864:	f043 0201 	orr.w	r2, r3, #1
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8008874:	2301      	movs	r3, #1
 8008876:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a31      	ldr	r2, [pc, #196]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d101      	bne.n	8008886 <HAL_I2S_DMAStop+0x272>
 8008882:	4b31      	ldr	r3, [pc, #196]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 8008884:	e001      	b.n	800888a <HAL_I2S_DMAStop+0x276>
 8008886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	f003 0302 	and.w	r3, r3, #2
 8008890:	2b02      	cmp	r3, #2
 8008892:	d1de      	bne.n	8008852 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8008894:	e012      	b.n	80088bc <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8008896:	f7fd fc0b 	bl	80060b0 <HAL_GetTick>
 800889a:	4602      	mov	r2, r0
 800889c:	69bb      	ldr	r3, [r7, #24]
 800889e:	1ad3      	subs	r3, r2, r3
 80088a0:	2b64      	cmp	r3, #100	; 0x64
 80088a2:	d90b      	bls.n	80088bc <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088a8:	f043 0201 	orr.w	r2, r3, #1
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4a20      	ldr	r2, [pc, #128]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d101      	bne.n	80088ca <HAL_I2S_DMAStop+0x2b6>
 80088c6:	4b20      	ldr	r3, [pc, #128]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 80088c8:	e001      	b.n	80088ce <HAL_I2S_DMAStop+0x2ba>
 80088ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088ce:	689b      	ldr	r3, [r3, #8]
 80088d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088d4:	2b80      	cmp	r3, #128	; 0x80
 80088d6:	d0de      	beq.n	8008896 <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a19      	ldr	r2, [pc, #100]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d101      	bne.n	80088e6 <HAL_I2S_DMAStop+0x2d2>
 80088e2:	4b19      	ldr	r3, [pc, #100]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 80088e4:	e001      	b.n	80088ea <HAL_I2S_DMAStop+0x2d6>
 80088e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088ea:	69da      	ldr	r2, [r3, #28]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4914      	ldr	r1, [pc, #80]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 80088f2:	428b      	cmp	r3, r1
 80088f4:	d101      	bne.n	80088fa <HAL_I2S_DMAStop+0x2e6>
 80088f6:	4b14      	ldr	r3, [pc, #80]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 80088f8:	e001      	b.n	80088fe <HAL_I2S_DMAStop+0x2ea>
 80088fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80088fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008902:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	4a0d      	ldr	r2, [pc, #52]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 800890e:	4293      	cmp	r3, r2
 8008910:	d101      	bne.n	8008916 <HAL_I2S_DMAStop+0x302>
 8008912:	4b0d      	ldr	r3, [pc, #52]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 8008914:	e001      	b.n	800891a <HAL_I2S_DMAStop+0x306>
 8008916:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a07      	ldr	r2, [pc, #28]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d101      	bne.n	800892e <HAL_I2S_DMAStop+0x31a>
 800892a:	4b07      	ldr	r3, [pc, #28]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 800892c:	e001      	b.n	8008932 <HAL_I2S_DMAStop+0x31e>
 800892e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4902      	ldr	r1, [pc, #8]	; (8008944 <HAL_I2S_DMAStop+0x330>)
 800893a:	428b      	cmp	r3, r1
 800893c:	d106      	bne.n	800894c <HAL_I2S_DMAStop+0x338>
 800893e:	4b02      	ldr	r3, [pc, #8]	; (8008948 <HAL_I2S_DMAStop+0x334>)
 8008940:	e006      	b.n	8008950 <HAL_I2S_DMAStop+0x33c>
 8008942:	bf00      	nop
 8008944:	40003800 	.word	0x40003800
 8008948:	40003400 	.word	0x40003400
 800894c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008950:	f022 0202 	bic.w	r2, r2, #2
 8008954:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	69da      	ldr	r2, [r3, #28]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008964:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008966:	2300      	movs	r3, #0
 8008968:	60bb      	str	r3, [r7, #8]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	60bb      	str	r3, [r7, #8]
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	689b      	ldr	r3, [r3, #8]
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685a      	ldr	r2, [r3, #4]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	f022 0201 	bic.w	r2, r2, #1
 800898a:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008994:	d10c      	bne.n	80089b0 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800899a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	77fb      	strb	r3, [r7, #31]
 80089ae:	e002      	b.n	80089b6 <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2201      	movs	r2, #1
 80089ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80089be:	7ffb      	ldrb	r3, [r7, #31]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3720      	adds	r7, #32
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_I2S_GetState>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL state
  */
HAL_I2S_StateTypeDef HAL_I2S_GetState(I2S_HandleTypeDef *hi2s)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  return hi2s->State;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089d6:	b2db      	uxtb	r3, r3
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10e      	bne.n	8008a18 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	685a      	ldr	r2, [r3, #4]
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f022 0201 	bic.w	r2, r2, #1
 8008a08:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7fa fb2d 	bl	8003078 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008a1e:	bf00      	nop
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f7fa fb29 	bl	800308c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008a3a:	bf00      	nop
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	685a      	ldr	r2, [r3, #4]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f022 0203 	bic.w	r2, r2, #3
 8008a5e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2200      	movs	r2, #0
 8008a64:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a78:	f043 0208 	orr.w	r2, r3, #8
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f7fa fcbb 	bl	80033fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008a86:	bf00      	nop
 8008a88:	3710      	adds	r7, #16
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a9a:	881a      	ldrh	r2, [r3, #0]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa6:	1c9a      	adds	r2, r3, #2
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ab0:	b29b      	uxth	r3, r3
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	b29a      	uxth	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d10e      	bne.n	8008ae2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	685a      	ldr	r2, [r3, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008ad2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2201      	movs	r2, #1
 8008ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f7fa f9fd 	bl	8002edc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008ae2:	bf00      	nop
 8008ae4:	3708      	adds	r7, #8
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68da      	ldr	r2, [r3, #12]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afc:	b292      	uxth	r2, r2
 8008afe:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b04:	1c9a      	adds	r2, r3, #2
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	3b01      	subs	r3, #1
 8008b12:	b29a      	uxth	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008b1c:	b29b      	uxth	r3, r3
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10e      	bne.n	8008b40 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685a      	ldr	r2, [r3, #4]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008b30:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f7fa fa9c 	bl	8003078 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008b40:	bf00      	nop
 8008b42:	3708      	adds	r7, #8
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b086      	sub	sp, #24
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	2b04      	cmp	r3, #4
 8008b62:	d13a      	bne.n	8008bda <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d109      	bne.n	8008b82 <I2S_IRQHandler+0x3a>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b78:	2b40      	cmp	r3, #64	; 0x40
 8008b7a:	d102      	bne.n	8008b82 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f7ff ffb4 	bl	8008aea <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b88:	2b40      	cmp	r3, #64	; 0x40
 8008b8a:	d126      	bne.n	8008bda <I2S_IRQHandler+0x92>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f003 0320 	and.w	r3, r3, #32
 8008b96:	2b20      	cmp	r3, #32
 8008b98:	d11f      	bne.n	8008bda <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008ba8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008baa:	2300      	movs	r3, #0
 8008bac:	613b      	str	r3, [r7, #16]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	613b      	str	r3, [r7, #16]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	613b      	str	r3, [r7, #16]
 8008bbe:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bcc:	f043 0202 	orr.w	r2, r3, #2
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f7fa fc11 	bl	80033fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008be0:	b2db      	uxtb	r3, r3
 8008be2:	2b03      	cmp	r3, #3
 8008be4:	d136      	bne.n	8008c54 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f003 0302 	and.w	r3, r3, #2
 8008bec:	2b02      	cmp	r3, #2
 8008bee:	d109      	bne.n	8008c04 <I2S_IRQHandler+0xbc>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bfa:	2b80      	cmp	r3, #128	; 0x80
 8008bfc:	d102      	bne.n	8008c04 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff ff45 	bl	8008a8e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	f003 0308 	and.w	r3, r3, #8
 8008c0a:	2b08      	cmp	r3, #8
 8008c0c:	d122      	bne.n	8008c54 <I2S_IRQHandler+0x10c>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	f003 0320 	and.w	r3, r3, #32
 8008c18:	2b20      	cmp	r3, #32
 8008c1a:	d11b      	bne.n	8008c54 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	685a      	ldr	r2, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c2a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	60fb      	str	r3, [r7, #12]
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	689b      	ldr	r3, [r3, #8]
 8008c36:	60fb      	str	r3, [r7, #12]
 8008c38:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c46:	f043 0204 	orr.w	r2, r3, #4
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f7fa fbd4 	bl	80033fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008c54:	bf00      	nop
 8008c56:	3718      	adds	r7, #24
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}

08008c5c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b086      	sub	sp, #24
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	60f8      	str	r0, [r7, #12]
 8008c64:	60b9      	str	r1, [r7, #8]
 8008c66:	603b      	str	r3, [r7, #0]
 8008c68:	4613      	mov	r3, r2
 8008c6a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c6c:	f7fd fa20 	bl	80060b0 <HAL_GetTick>
 8008c70:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8008c72:	e018      	b.n	8008ca6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c7a:	d014      	beq.n	8008ca6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 8008c7c:	f7fd fa18 	bl	80060b0 <HAL_GetTick>
 8008c80:	4602      	mov	r2, r0
 8008c82:	697b      	ldr	r3, [r7, #20]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d902      	bls.n	8008c92 <I2S_WaitFlagStateUntilTimeout+0x36>
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d109      	bne.n	8008ca6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	2201      	movs	r2, #1
 8008c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8008ca2:	2303      	movs	r3, #3
 8008ca4:	e00f      	b.n	8008cc6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689a      	ldr	r2, [r3, #8]
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	68ba      	ldr	r2, [r7, #8]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	bf0c      	ite	eq
 8008cb6:	2301      	moveq	r3, #1
 8008cb8:	2300      	movne	r3, #0
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d1d7      	bne.n	8008c74 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b088      	sub	sp, #32
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	689b      	ldr	r3, [r3, #8]
 8008cde:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a92      	ldr	r2, [pc, #584]	; (8008f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d101      	bne.n	8008cee <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8008cea:	4b92      	ldr	r3, [pc, #584]	; (8008f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008cec:	e001      	b.n	8008cf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8008cee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008cf2:	689b      	ldr	r3, [r3, #8]
 8008cf4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	4a8b      	ldr	r2, [pc, #556]	; (8008f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d101      	bne.n	8008d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8008d08:	4b8a      	ldr	r3, [pc, #552]	; (8008f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008d0a:	e001      	b.n	8008d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8008d0c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d1c:	d004      	beq.n	8008d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	f040 8099 	bne.w	8008e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	f003 0302 	and.w	r3, r3, #2
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d107      	bne.n	8008d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d002      	beq.n	8008d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 f925 	bl	8008f8c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8008d42:	69bb      	ldr	r3, [r7, #24]
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d107      	bne.n	8008d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 f9c8 	bl	80090ec <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d62:	2b40      	cmp	r3, #64	; 0x40
 8008d64:	d13a      	bne.n	8008ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	f003 0320 	and.w	r3, r3, #32
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d035      	beq.n	8008ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a6e      	ldr	r2, [pc, #440]	; (8008f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d101      	bne.n	8008d7e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8008d7a:	4b6e      	ldr	r3, [pc, #440]	; (8008f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008d7c:	e001      	b.n	8008d82 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8008d7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008d82:	685a      	ldr	r2, [r3, #4]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4969      	ldr	r1, [pc, #420]	; (8008f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008d8a:	428b      	cmp	r3, r1
 8008d8c:	d101      	bne.n	8008d92 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8008d8e:	4b69      	ldr	r3, [pc, #420]	; (8008f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008d90:	e001      	b.n	8008d96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8008d92:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008d96:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008d9a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008daa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008dac:	2300      	movs	r3, #0
 8008dae:	60fb      	str	r3, [r7, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	68db      	ldr	r3, [r3, #12]
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	689b      	ldr	r3, [r3, #8]
 8008dbe:	60fb      	str	r3, [r7, #12]
 8008dc0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dce:	f043 0202 	orr.w	r2, r3, #2
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7fa fb10 	bl	80033fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	f003 0308 	and.w	r3, r3, #8
 8008de2:	2b08      	cmp	r3, #8
 8008de4:	f040 80c3 	bne.w	8008f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f003 0320 	and.w	r3, r3, #32
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 80bd 	beq.w	8008f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008e02:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a49      	ldr	r2, [pc, #292]	; (8008f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d101      	bne.n	8008e12 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8008e0e:	4b49      	ldr	r3, [pc, #292]	; (8008f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008e10:	e001      	b.n	8008e16 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8008e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e16:	685a      	ldr	r2, [r3, #4]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4944      	ldr	r1, [pc, #272]	; (8008f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008e1e:	428b      	cmp	r3, r1
 8008e20:	d101      	bne.n	8008e26 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8008e22:	4b44      	ldr	r3, [pc, #272]	; (8008f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008e24:	e001      	b.n	8008e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008e26:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008e2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008e2e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008e30:	2300      	movs	r3, #0
 8008e32:	60bb      	str	r3, [r7, #8]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	60bb      	str	r3, [r7, #8]
 8008e3c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4a:	f043 0204 	orr.w	r2, r3, #4
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f7fa fad2 	bl	80033fc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008e58:	e089      	b.n	8008f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8008e5a:	69bb      	ldr	r3, [r7, #24]
 8008e5c:	f003 0302 	and.w	r3, r3, #2
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d107      	bne.n	8008e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d002      	beq.n	8008e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f8be 	bl	8008ff0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8008e74:	69fb      	ldr	r3, [r7, #28]
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	2b01      	cmp	r3, #1
 8008e7c:	d107      	bne.n	8008e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8008e7e:	697b      	ldr	r3, [r7, #20]
 8008e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f8fd 	bl	8009088 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e94:	2b40      	cmp	r3, #64	; 0x40
 8008e96:	d12f      	bne.n	8008ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	f003 0320 	and.w	r3, r3, #32
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d02a      	beq.n	8008ef8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	685a      	ldr	r2, [r3, #4]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008eb0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a1e      	ldr	r2, [pc, #120]	; (8008f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d101      	bne.n	8008ec0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008ebc:	4b1d      	ldr	r3, [pc, #116]	; (8008f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008ebe:	e001      	b.n	8008ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008ec0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ec4:	685a      	ldr	r2, [r3, #4]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4919      	ldr	r1, [pc, #100]	; (8008f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008ecc:	428b      	cmp	r3, r1
 8008ece:	d101      	bne.n	8008ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008ed0:	4b18      	ldr	r3, [pc, #96]	; (8008f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008ed2:	e001      	b.n	8008ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008ed4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ed8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008edc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eea:	f043 0202 	orr.w	r2, r3, #2
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f7fa fa82 	bl	80033fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	f003 0308 	and.w	r3, r3, #8
 8008efe:	2b08      	cmp	r3, #8
 8008f00:	d136      	bne.n	8008f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f003 0320 	and.w	r3, r3, #32
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d031      	beq.n	8008f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a07      	ldr	r2, [pc, #28]	; (8008f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d101      	bne.n	8008f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008f16:	4b07      	ldr	r3, [pc, #28]	; (8008f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008f18:	e001      	b.n	8008f1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8008f1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008f1e:	685a      	ldr	r2, [r3, #4]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4902      	ldr	r1, [pc, #8]	; (8008f30 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008f26:	428b      	cmp	r3, r1
 8008f28:	d106      	bne.n	8008f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8008f2a:	4b02      	ldr	r3, [pc, #8]	; (8008f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008f2c:	e006      	b.n	8008f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8008f2e:	bf00      	nop
 8008f30:	40003800 	.word	0x40003800
 8008f34:	40003400 	.word	0x40003400
 8008f38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008f3c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008f40:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008f50:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5e:	f043 0204 	orr.w	r2, r3, #4
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7fa fa48 	bl	80033fc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008f6c:	e000      	b.n	8008f70 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008f6e:	bf00      	nop
}
 8008f70:	bf00      	nop
 8008f72:	3720      	adds	r7, #32
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8008f80:	bf00      	nop
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr

08008f8c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	1c99      	adds	r1, r3, #2
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	6251      	str	r1, [r2, #36]	; 0x24
 8008f9e:	881a      	ldrh	r2, [r3, #0]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	3b01      	subs	r3, #1
 8008fae:	b29a      	uxth	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d113      	bne.n	8008fe6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	685a      	ldr	r2, [r3, #4]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008fcc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d106      	bne.n	8008fe6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f7ff ffc9 	bl	8008f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
	...

08008ff0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b082      	sub	sp, #8
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffc:	1c99      	adds	r1, r3, #2
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	6251      	str	r1, [r2, #36]	; 0x24
 8009002:	8819      	ldrh	r1, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a1d      	ldr	r2, [pc, #116]	; (8009080 <I2SEx_TxISR_I2SExt+0x90>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d101      	bne.n	8009012 <I2SEx_TxISR_I2SExt+0x22>
 800900e:	4b1d      	ldr	r3, [pc, #116]	; (8009084 <I2SEx_TxISR_I2SExt+0x94>)
 8009010:	e001      	b.n	8009016 <I2SEx_TxISR_I2SExt+0x26>
 8009012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009016:	460a      	mov	r2, r1
 8009018:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800901e:	b29b      	uxth	r3, r3
 8009020:	3b01      	subs	r3, #1
 8009022:	b29a      	uxth	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800902c:	b29b      	uxth	r3, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d121      	bne.n	8009076 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4a12      	ldr	r2, [pc, #72]	; (8009080 <I2SEx_TxISR_I2SExt+0x90>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d101      	bne.n	8009040 <I2SEx_TxISR_I2SExt+0x50>
 800903c:	4b11      	ldr	r3, [pc, #68]	; (8009084 <I2SEx_TxISR_I2SExt+0x94>)
 800903e:	e001      	b.n	8009044 <I2SEx_TxISR_I2SExt+0x54>
 8009040:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	490d      	ldr	r1, [pc, #52]	; (8009080 <I2SEx_TxISR_I2SExt+0x90>)
 800904c:	428b      	cmp	r3, r1
 800904e:	d101      	bne.n	8009054 <I2SEx_TxISR_I2SExt+0x64>
 8009050:	4b0c      	ldr	r3, [pc, #48]	; (8009084 <I2SEx_TxISR_I2SExt+0x94>)
 8009052:	e001      	b.n	8009058 <I2SEx_TxISR_I2SExt+0x68>
 8009054:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009058:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800905c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009062:	b29b      	uxth	r3, r3
 8009064:	2b00      	cmp	r3, #0
 8009066:	d106      	bne.n	8009076 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2201      	movs	r2, #1
 800906c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f7ff ff81 	bl	8008f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009076:	bf00      	nop
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	40003800 	.word	0x40003800
 8009084:	40003400 	.word	0x40003400

08009088 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b082      	sub	sp, #8
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68d8      	ldr	r0, [r3, #12]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	1c99      	adds	r1, r3, #2
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	62d1      	str	r1, [r2, #44]	; 0x2c
 80090a0:	b282      	uxth	r2, r0
 80090a2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	3b01      	subs	r3, #1
 80090ac:	b29a      	uxth	r2, r3
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d113      	bne.n	80090e4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80090ca:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d106      	bne.n	80090e4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f7ff ff4a 	bl	8008f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80090e4:	bf00      	nop
 80090e6:	3708      	adds	r7, #8
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a20      	ldr	r2, [pc, #128]	; (800917c <I2SEx_RxISR_I2SExt+0x90>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d101      	bne.n	8009102 <I2SEx_RxISR_I2SExt+0x16>
 80090fe:	4b20      	ldr	r3, [pc, #128]	; (8009180 <I2SEx_RxISR_I2SExt+0x94>)
 8009100:	e001      	b.n	8009106 <I2SEx_RxISR_I2SExt+0x1a>
 8009102:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009106:	68d8      	ldr	r0, [r3, #12]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910c:	1c99      	adds	r1, r3, #2
 800910e:	687a      	ldr	r2, [r7, #4]
 8009110:	62d1      	str	r1, [r2, #44]	; 0x2c
 8009112:	b282      	uxth	r2, r0
 8009114:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800911a:	b29b      	uxth	r3, r3
 800911c:	3b01      	subs	r3, #1
 800911e:	b29a      	uxth	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009128:	b29b      	uxth	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d121      	bne.n	8009172 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a12      	ldr	r2, [pc, #72]	; (800917c <I2SEx_RxISR_I2SExt+0x90>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d101      	bne.n	800913c <I2SEx_RxISR_I2SExt+0x50>
 8009138:	4b11      	ldr	r3, [pc, #68]	; (8009180 <I2SEx_RxISR_I2SExt+0x94>)
 800913a:	e001      	b.n	8009140 <I2SEx_RxISR_I2SExt+0x54>
 800913c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009140:	685a      	ldr	r2, [r3, #4]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	490d      	ldr	r1, [pc, #52]	; (800917c <I2SEx_RxISR_I2SExt+0x90>)
 8009148:	428b      	cmp	r3, r1
 800914a:	d101      	bne.n	8009150 <I2SEx_RxISR_I2SExt+0x64>
 800914c:	4b0c      	ldr	r3, [pc, #48]	; (8009180 <I2SEx_RxISR_I2SExt+0x94>)
 800914e:	e001      	b.n	8009154 <I2SEx_RxISR_I2SExt+0x68>
 8009150:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8009154:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009158:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800915e:	b29b      	uxth	r3, r3
 8009160:	2b00      	cmp	r3, #0
 8009162:	d106      	bne.n	8009172 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f7ff ff03 	bl	8008f78 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8009172:	bf00      	nop
 8009174:	3708      	adds	r7, #8
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	40003800 	.word	0x40003800
 8009180:	40003400 	.word	0x40003400

08009184 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d101      	bne.n	8009196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e267      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0301 	and.w	r3, r3, #1
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d075      	beq.n	800928e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091a2:	4b88      	ldr	r3, [pc, #544]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 80091a4:	689b      	ldr	r3, [r3, #8]
 80091a6:	f003 030c 	and.w	r3, r3, #12
 80091aa:	2b04      	cmp	r3, #4
 80091ac:	d00c      	beq.n	80091c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091ae:	4b85      	ldr	r3, [pc, #532]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80091b6:	2b08      	cmp	r3, #8
 80091b8:	d112      	bne.n	80091e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80091ba:	4b82      	ldr	r3, [pc, #520]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80091c6:	d10b      	bne.n	80091e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091c8:	4b7e      	ldr	r3, [pc, #504]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d05b      	beq.n	800928c <HAL_RCC_OscConfig+0x108>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d157      	bne.n	800928c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	e242      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e8:	d106      	bne.n	80091f8 <HAL_RCC_OscConfig+0x74>
 80091ea:	4b76      	ldr	r3, [pc, #472]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a75      	ldr	r2, [pc, #468]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 80091f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091f4:	6013      	str	r3, [r2, #0]
 80091f6:	e01d      	b.n	8009234 <HAL_RCC_OscConfig+0xb0>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009200:	d10c      	bne.n	800921c <HAL_RCC_OscConfig+0x98>
 8009202:	4b70      	ldr	r3, [pc, #448]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a6f      	ldr	r2, [pc, #444]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800920c:	6013      	str	r3, [r2, #0]
 800920e:	4b6d      	ldr	r3, [pc, #436]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	4a6c      	ldr	r2, [pc, #432]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009214:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	e00b      	b.n	8009234 <HAL_RCC_OscConfig+0xb0>
 800921c:	4b69      	ldr	r3, [pc, #420]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a68      	ldr	r2, [pc, #416]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009222:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	4b66      	ldr	r3, [pc, #408]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a65      	ldr	r2, [pc, #404]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 800922e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009232:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d013      	beq.n	8009264 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800923c:	f7fc ff38 	bl	80060b0 <HAL_GetTick>
 8009240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009242:	e008      	b.n	8009256 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009244:	f7fc ff34 	bl	80060b0 <HAL_GetTick>
 8009248:	4602      	mov	r2, r0
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	1ad3      	subs	r3, r2, r3
 800924e:	2b64      	cmp	r3, #100	; 0x64
 8009250:	d901      	bls.n	8009256 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009252:	2303      	movs	r3, #3
 8009254:	e207      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009256:	4b5b      	ldr	r3, [pc, #364]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d0f0      	beq.n	8009244 <HAL_RCC_OscConfig+0xc0>
 8009262:	e014      	b.n	800928e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009264:	f7fc ff24 	bl	80060b0 <HAL_GetTick>
 8009268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800926a:	e008      	b.n	800927e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800926c:	f7fc ff20 	bl	80060b0 <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	693b      	ldr	r3, [r7, #16]
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	2b64      	cmp	r3, #100	; 0x64
 8009278:	d901      	bls.n	800927e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800927a:	2303      	movs	r3, #3
 800927c:	e1f3      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800927e:	4b51      	ldr	r3, [pc, #324]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1f0      	bne.n	800926c <HAL_RCC_OscConfig+0xe8>
 800928a:	e000      	b.n	800928e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800928c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f003 0302 	and.w	r3, r3, #2
 8009296:	2b00      	cmp	r3, #0
 8009298:	d063      	beq.n	8009362 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800929a:	4b4a      	ldr	r3, [pc, #296]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	f003 030c 	and.w	r3, r3, #12
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00b      	beq.n	80092be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092a6:	4b47      	ldr	r3, [pc, #284]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80092ae:	2b08      	cmp	r3, #8
 80092b0:	d11c      	bne.n	80092ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80092b2:	4b44      	ldr	r3, [pc, #272]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d116      	bne.n	80092ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092be:	4b41      	ldr	r3, [pc, #260]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d005      	beq.n	80092d6 <HAL_RCC_OscConfig+0x152>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d001      	beq.n	80092d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e1c7      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092d6:	4b3b      	ldr	r3, [pc, #236]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	4937      	ldr	r1, [pc, #220]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 80092e6:	4313      	orrs	r3, r2
 80092e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80092ea:	e03a      	b.n	8009362 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d020      	beq.n	8009336 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092f4:	4b34      	ldr	r3, [pc, #208]	; (80093c8 <HAL_RCC_OscConfig+0x244>)
 80092f6:	2201      	movs	r2, #1
 80092f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092fa:	f7fc fed9 	bl	80060b0 <HAL_GetTick>
 80092fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009300:	e008      	b.n	8009314 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009302:	f7fc fed5 	bl	80060b0 <HAL_GetTick>
 8009306:	4602      	mov	r2, r0
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	2b02      	cmp	r3, #2
 800930e:	d901      	bls.n	8009314 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e1a8      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009314:	4b2b      	ldr	r3, [pc, #172]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d0f0      	beq.n	8009302 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009320:	4b28      	ldr	r3, [pc, #160]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	00db      	lsls	r3, r3, #3
 800932e:	4925      	ldr	r1, [pc, #148]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009330:	4313      	orrs	r3, r2
 8009332:	600b      	str	r3, [r1, #0]
 8009334:	e015      	b.n	8009362 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009336:	4b24      	ldr	r3, [pc, #144]	; (80093c8 <HAL_RCC_OscConfig+0x244>)
 8009338:	2200      	movs	r2, #0
 800933a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800933c:	f7fc feb8 	bl	80060b0 <HAL_GetTick>
 8009340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009342:	e008      	b.n	8009356 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009344:	f7fc feb4 	bl	80060b0 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	693b      	ldr	r3, [r7, #16]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	2b02      	cmp	r3, #2
 8009350:	d901      	bls.n	8009356 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009352:	2303      	movs	r3, #3
 8009354:	e187      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009356:	4b1b      	ldr	r3, [pc, #108]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0302 	and.w	r3, r3, #2
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1f0      	bne.n	8009344 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0308 	and.w	r3, r3, #8
 800936a:	2b00      	cmp	r3, #0
 800936c:	d036      	beq.n	80093dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d016      	beq.n	80093a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009376:	4b15      	ldr	r3, [pc, #84]	; (80093cc <HAL_RCC_OscConfig+0x248>)
 8009378:	2201      	movs	r2, #1
 800937a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800937c:	f7fc fe98 	bl	80060b0 <HAL_GetTick>
 8009380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009382:	e008      	b.n	8009396 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009384:	f7fc fe94 	bl	80060b0 <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	2b02      	cmp	r3, #2
 8009390:	d901      	bls.n	8009396 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e167      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009396:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <HAL_RCC_OscConfig+0x240>)
 8009398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d0f0      	beq.n	8009384 <HAL_RCC_OscConfig+0x200>
 80093a2:	e01b      	b.n	80093dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80093a4:	4b09      	ldr	r3, [pc, #36]	; (80093cc <HAL_RCC_OscConfig+0x248>)
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80093aa:	f7fc fe81 	bl	80060b0 <HAL_GetTick>
 80093ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093b0:	e00e      	b.n	80093d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80093b2:	f7fc fe7d 	bl	80060b0 <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	2b02      	cmp	r3, #2
 80093be:	d907      	bls.n	80093d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80093c0:	2303      	movs	r3, #3
 80093c2:	e150      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
 80093c4:	40023800 	.word	0x40023800
 80093c8:	42470000 	.word	0x42470000
 80093cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80093d0:	4b88      	ldr	r3, [pc, #544]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 80093d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80093d4:	f003 0302 	and.w	r3, r3, #2
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1ea      	bne.n	80093b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 0304 	and.w	r3, r3, #4
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f000 8097 	beq.w	8009518 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093ea:	2300      	movs	r3, #0
 80093ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093ee:	4b81      	ldr	r3, [pc, #516]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d10f      	bne.n	800941a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093fa:	2300      	movs	r3, #0
 80093fc:	60bb      	str	r3, [r7, #8]
 80093fe:	4b7d      	ldr	r3, [pc, #500]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009402:	4a7c      	ldr	r2, [pc, #496]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009408:	6413      	str	r3, [r2, #64]	; 0x40
 800940a:	4b7a      	ldr	r3, [pc, #488]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 800940c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800940e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009412:	60bb      	str	r3, [r7, #8]
 8009414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009416:	2301      	movs	r3, #1
 8009418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800941a:	4b77      	ldr	r3, [pc, #476]	; (80095f8 <HAL_RCC_OscConfig+0x474>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009422:	2b00      	cmp	r3, #0
 8009424:	d118      	bne.n	8009458 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009426:	4b74      	ldr	r3, [pc, #464]	; (80095f8 <HAL_RCC_OscConfig+0x474>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	4a73      	ldr	r2, [pc, #460]	; (80095f8 <HAL_RCC_OscConfig+0x474>)
 800942c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009432:	f7fc fe3d 	bl	80060b0 <HAL_GetTick>
 8009436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009438:	e008      	b.n	800944c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800943a:	f7fc fe39 	bl	80060b0 <HAL_GetTick>
 800943e:	4602      	mov	r2, r0
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	1ad3      	subs	r3, r2, r3
 8009444:	2b02      	cmp	r3, #2
 8009446:	d901      	bls.n	800944c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e10c      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800944c:	4b6a      	ldr	r3, [pc, #424]	; (80095f8 <HAL_RCC_OscConfig+0x474>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0f0      	beq.n	800943a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689b      	ldr	r3, [r3, #8]
 800945c:	2b01      	cmp	r3, #1
 800945e:	d106      	bne.n	800946e <HAL_RCC_OscConfig+0x2ea>
 8009460:	4b64      	ldr	r3, [pc, #400]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009464:	4a63      	ldr	r2, [pc, #396]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009466:	f043 0301 	orr.w	r3, r3, #1
 800946a:	6713      	str	r3, [r2, #112]	; 0x70
 800946c:	e01c      	b.n	80094a8 <HAL_RCC_OscConfig+0x324>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	2b05      	cmp	r3, #5
 8009474:	d10c      	bne.n	8009490 <HAL_RCC_OscConfig+0x30c>
 8009476:	4b5f      	ldr	r3, [pc, #380]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947a:	4a5e      	ldr	r2, [pc, #376]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 800947c:	f043 0304 	orr.w	r3, r3, #4
 8009480:	6713      	str	r3, [r2, #112]	; 0x70
 8009482:	4b5c      	ldr	r3, [pc, #368]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009486:	4a5b      	ldr	r2, [pc, #364]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009488:	f043 0301 	orr.w	r3, r3, #1
 800948c:	6713      	str	r3, [r2, #112]	; 0x70
 800948e:	e00b      	b.n	80094a8 <HAL_RCC_OscConfig+0x324>
 8009490:	4b58      	ldr	r3, [pc, #352]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009494:	4a57      	ldr	r2, [pc, #348]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009496:	f023 0301 	bic.w	r3, r3, #1
 800949a:	6713      	str	r3, [r2, #112]	; 0x70
 800949c:	4b55      	ldr	r3, [pc, #340]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 800949e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a0:	4a54      	ldr	r2, [pc, #336]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 80094a2:	f023 0304 	bic.w	r3, r3, #4
 80094a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d015      	beq.n	80094dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80094b0:	f7fc fdfe 	bl	80060b0 <HAL_GetTick>
 80094b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094b6:	e00a      	b.n	80094ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094b8:	f7fc fdfa 	bl	80060b0 <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d901      	bls.n	80094ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80094ca:	2303      	movs	r3, #3
 80094cc:	e0cb      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094ce:	4b49      	ldr	r3, [pc, #292]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 80094d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d2:	f003 0302 	and.w	r3, r3, #2
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d0ee      	beq.n	80094b8 <HAL_RCC_OscConfig+0x334>
 80094da:	e014      	b.n	8009506 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094dc:	f7fc fde8 	bl	80060b0 <HAL_GetTick>
 80094e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094e2:	e00a      	b.n	80094fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80094e4:	f7fc fde4 	bl	80060b0 <HAL_GetTick>
 80094e8:	4602      	mov	r2, r0
 80094ea:	693b      	ldr	r3, [r7, #16]
 80094ec:	1ad3      	subs	r3, r2, r3
 80094ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d901      	bls.n	80094fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e0b5      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094fa:	4b3e      	ldr	r3, [pc, #248]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 80094fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fe:	f003 0302 	and.w	r3, r3, #2
 8009502:	2b00      	cmp	r3, #0
 8009504:	d1ee      	bne.n	80094e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009506:	7dfb      	ldrb	r3, [r7, #23]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d105      	bne.n	8009518 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800950c:	4b39      	ldr	r3, [pc, #228]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	4a38      	ldr	r2, [pc, #224]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009512:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009516:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	699b      	ldr	r3, [r3, #24]
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 80a1 	beq.w	8009664 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009522:	4b34      	ldr	r3, [pc, #208]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009524:	689b      	ldr	r3, [r3, #8]
 8009526:	f003 030c 	and.w	r3, r3, #12
 800952a:	2b08      	cmp	r3, #8
 800952c:	d05c      	beq.n	80095e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	699b      	ldr	r3, [r3, #24]
 8009532:	2b02      	cmp	r3, #2
 8009534:	d141      	bne.n	80095ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009536:	4b31      	ldr	r3, [pc, #196]	; (80095fc <HAL_RCC_OscConfig+0x478>)
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800953c:	f7fc fdb8 	bl	80060b0 <HAL_GetTick>
 8009540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009542:	e008      	b.n	8009556 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009544:	f7fc fdb4 	bl	80060b0 <HAL_GetTick>
 8009548:	4602      	mov	r2, r0
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	2b02      	cmp	r3, #2
 8009550:	d901      	bls.n	8009556 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e087      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009556:	4b27      	ldr	r3, [pc, #156]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1f0      	bne.n	8009544 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	69da      	ldr	r2, [r3, #28]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6a1b      	ldr	r3, [r3, #32]
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009570:	019b      	lsls	r3, r3, #6
 8009572:	431a      	orrs	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009578:	085b      	lsrs	r3, r3, #1
 800957a:	3b01      	subs	r3, #1
 800957c:	041b      	lsls	r3, r3, #16
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009584:	061b      	lsls	r3, r3, #24
 8009586:	491b      	ldr	r1, [pc, #108]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 8009588:	4313      	orrs	r3, r2
 800958a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800958c:	4b1b      	ldr	r3, [pc, #108]	; (80095fc <HAL_RCC_OscConfig+0x478>)
 800958e:	2201      	movs	r2, #1
 8009590:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009592:	f7fc fd8d 	bl	80060b0 <HAL_GetTick>
 8009596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009598:	e008      	b.n	80095ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800959a:	f7fc fd89 	bl	80060b0 <HAL_GetTick>
 800959e:	4602      	mov	r2, r0
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	1ad3      	subs	r3, r2, r3
 80095a4:	2b02      	cmp	r3, #2
 80095a6:	d901      	bls.n	80095ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80095a8:	2303      	movs	r3, #3
 80095aa:	e05c      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095ac:	4b11      	ldr	r3, [pc, #68]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d0f0      	beq.n	800959a <HAL_RCC_OscConfig+0x416>
 80095b8:	e054      	b.n	8009664 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095ba:	4b10      	ldr	r3, [pc, #64]	; (80095fc <HAL_RCC_OscConfig+0x478>)
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095c0:	f7fc fd76 	bl	80060b0 <HAL_GetTick>
 80095c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095c6:	e008      	b.n	80095da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80095c8:	f7fc fd72 	bl	80060b0 <HAL_GetTick>
 80095cc:	4602      	mov	r2, r0
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	1ad3      	subs	r3, r2, r3
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d901      	bls.n	80095da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80095d6:	2303      	movs	r3, #3
 80095d8:	e045      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80095da:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <HAL_RCC_OscConfig+0x470>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1f0      	bne.n	80095c8 <HAL_RCC_OscConfig+0x444>
 80095e6:	e03d      	b.n	8009664 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	699b      	ldr	r3, [r3, #24]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d107      	bne.n	8009600 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e038      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
 80095f4:	40023800 	.word	0x40023800
 80095f8:	40007000 	.word	0x40007000
 80095fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009600:	4b1b      	ldr	r3, [pc, #108]	; (8009670 <HAL_RCC_OscConfig+0x4ec>)
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	699b      	ldr	r3, [r3, #24]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d028      	beq.n	8009660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009618:	429a      	cmp	r2, r3
 800961a:	d121      	bne.n	8009660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009626:	429a      	cmp	r2, r3
 8009628:	d11a      	bne.n	8009660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009630:	4013      	ands	r3, r2
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009636:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009638:	4293      	cmp	r3, r2
 800963a:	d111      	bne.n	8009660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009646:	085b      	lsrs	r3, r3, #1
 8009648:	3b01      	subs	r3, #1
 800964a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800964c:	429a      	cmp	r2, r3
 800964e:	d107      	bne.n	8009660 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800965a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800965c:	429a      	cmp	r2, r3
 800965e:	d001      	beq.n	8009664 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	40023800 	.word	0x40023800

08009674 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d101      	bne.n	8009688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009684:	2301      	movs	r3, #1
 8009686:	e0cc      	b.n	8009822 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009688:	4b68      	ldr	r3, [pc, #416]	; (800982c <HAL_RCC_ClockConfig+0x1b8>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0307 	and.w	r3, r3, #7
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	429a      	cmp	r2, r3
 8009694:	d90c      	bls.n	80096b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009696:	4b65      	ldr	r3, [pc, #404]	; (800982c <HAL_RCC_ClockConfig+0x1b8>)
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	b2d2      	uxtb	r2, r2
 800969c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800969e:	4b63      	ldr	r3, [pc, #396]	; (800982c <HAL_RCC_ClockConfig+0x1b8>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 0307 	and.w	r3, r3, #7
 80096a6:	683a      	ldr	r2, [r7, #0]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d001      	beq.n	80096b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e0b8      	b.n	8009822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0302 	and.w	r3, r3, #2
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d020      	beq.n	80096fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d005      	beq.n	80096d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80096c8:	4b59      	ldr	r3, [pc, #356]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	4a58      	ldr	r2, [pc, #352]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 80096ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80096d2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f003 0308 	and.w	r3, r3, #8
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80096e0:	4b53      	ldr	r3, [pc, #332]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 80096e2:	689b      	ldr	r3, [r3, #8]
 80096e4:	4a52      	ldr	r2, [pc, #328]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 80096e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80096ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80096ec:	4b50      	ldr	r3, [pc, #320]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	494d      	ldr	r1, [pc, #308]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 80096fa:	4313      	orrs	r3, r2
 80096fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 0301 	and.w	r3, r3, #1
 8009706:	2b00      	cmp	r3, #0
 8009708:	d044      	beq.n	8009794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d107      	bne.n	8009722 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009712:	4b47      	ldr	r3, [pc, #284]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d119      	bne.n	8009752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e07f      	b.n	8009822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	2b02      	cmp	r3, #2
 8009728:	d003      	beq.n	8009732 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800972e:	2b03      	cmp	r3, #3
 8009730:	d107      	bne.n	8009742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009732:	4b3f      	ldr	r3, [pc, #252]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d109      	bne.n	8009752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	e06f      	b.n	8009822 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009742:	4b3b      	ldr	r3, [pc, #236]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f003 0302 	and.w	r3, r3, #2
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e067      	b.n	8009822 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009752:	4b37      	ldr	r3, [pc, #220]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f023 0203 	bic.w	r2, r3, #3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	685b      	ldr	r3, [r3, #4]
 800975e:	4934      	ldr	r1, [pc, #208]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 8009760:	4313      	orrs	r3, r2
 8009762:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009764:	f7fc fca4 	bl	80060b0 <HAL_GetTick>
 8009768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800976a:	e00a      	b.n	8009782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800976c:	f7fc fca0 	bl	80060b0 <HAL_GetTick>
 8009770:	4602      	mov	r2, r0
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	1ad3      	subs	r3, r2, r3
 8009776:	f241 3288 	movw	r2, #5000	; 0x1388
 800977a:	4293      	cmp	r3, r2
 800977c:	d901      	bls.n	8009782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800977e:	2303      	movs	r3, #3
 8009780:	e04f      	b.n	8009822 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009782:	4b2b      	ldr	r3, [pc, #172]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f003 020c 	and.w	r2, r3, #12
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	429a      	cmp	r2, r3
 8009792:	d1eb      	bne.n	800976c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009794:	4b25      	ldr	r3, [pc, #148]	; (800982c <HAL_RCC_ClockConfig+0x1b8>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0307 	and.w	r3, r3, #7
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	429a      	cmp	r2, r3
 80097a0:	d20c      	bcs.n	80097bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097a2:	4b22      	ldr	r3, [pc, #136]	; (800982c <HAL_RCC_ClockConfig+0x1b8>)
 80097a4:	683a      	ldr	r2, [r7, #0]
 80097a6:	b2d2      	uxtb	r2, r2
 80097a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80097aa:	4b20      	ldr	r3, [pc, #128]	; (800982c <HAL_RCC_ClockConfig+0x1b8>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f003 0307 	and.w	r3, r3, #7
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d001      	beq.n	80097bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80097b8:	2301      	movs	r3, #1
 80097ba:	e032      	b.n	8009822 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	f003 0304 	and.w	r3, r3, #4
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d008      	beq.n	80097da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80097c8:	4b19      	ldr	r3, [pc, #100]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	4916      	ldr	r1, [pc, #88]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 80097d6:	4313      	orrs	r3, r2
 80097d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f003 0308 	and.w	r3, r3, #8
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d009      	beq.n	80097fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80097e6:	4b12      	ldr	r3, [pc, #72]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	691b      	ldr	r3, [r3, #16]
 80097f2:	00db      	lsls	r3, r3, #3
 80097f4:	490e      	ldr	r1, [pc, #56]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 80097f6:	4313      	orrs	r3, r2
 80097f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097fa:	f000 f821 	bl	8009840 <HAL_RCC_GetSysClockFreq>
 80097fe:	4602      	mov	r2, r0
 8009800:	4b0b      	ldr	r3, [pc, #44]	; (8009830 <HAL_RCC_ClockConfig+0x1bc>)
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	091b      	lsrs	r3, r3, #4
 8009806:	f003 030f 	and.w	r3, r3, #15
 800980a:	490a      	ldr	r1, [pc, #40]	; (8009834 <HAL_RCC_ClockConfig+0x1c0>)
 800980c:	5ccb      	ldrb	r3, [r1, r3]
 800980e:	fa22 f303 	lsr.w	r3, r2, r3
 8009812:	4a09      	ldr	r2, [pc, #36]	; (8009838 <HAL_RCC_ClockConfig+0x1c4>)
 8009814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009816:	4b09      	ldr	r3, [pc, #36]	; (800983c <HAL_RCC_ClockConfig+0x1c8>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4618      	mov	r0, r3
 800981c:	f7fc fc04 	bl	8006028 <HAL_InitTick>

  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	40023c00 	.word	0x40023c00
 8009830:	40023800 	.word	0x40023800
 8009834:	0801a170 	.word	0x0801a170
 8009838:	200004a0 	.word	0x200004a0
 800983c:	200004b8 	.word	0x200004b8

08009840 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009844:	b094      	sub	sp, #80	; 0x50
 8009846:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	647b      	str	r3, [r7, #68]	; 0x44
 800984c:	2300      	movs	r3, #0
 800984e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009850:	2300      	movs	r3, #0
 8009852:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009854:	2300      	movs	r3, #0
 8009856:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009858:	4b79      	ldr	r3, [pc, #484]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	f003 030c 	and.w	r3, r3, #12
 8009860:	2b08      	cmp	r3, #8
 8009862:	d00d      	beq.n	8009880 <HAL_RCC_GetSysClockFreq+0x40>
 8009864:	2b08      	cmp	r3, #8
 8009866:	f200 80e1 	bhi.w	8009a2c <HAL_RCC_GetSysClockFreq+0x1ec>
 800986a:	2b00      	cmp	r3, #0
 800986c:	d002      	beq.n	8009874 <HAL_RCC_GetSysClockFreq+0x34>
 800986e:	2b04      	cmp	r3, #4
 8009870:	d003      	beq.n	800987a <HAL_RCC_GetSysClockFreq+0x3a>
 8009872:	e0db      	b.n	8009a2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009874:	4b73      	ldr	r3, [pc, #460]	; (8009a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8009876:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8009878:	e0db      	b.n	8009a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800987a:	4b72      	ldr	r3, [pc, #456]	; (8009a44 <HAL_RCC_GetSysClockFreq+0x204>)
 800987c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800987e:	e0d8      	b.n	8009a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009880:	4b6f      	ldr	r3, [pc, #444]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009888:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800988a:	4b6d      	ldr	r3, [pc, #436]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x200>)
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009892:	2b00      	cmp	r3, #0
 8009894:	d063      	beq.n	800995e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009896:	4b6a      	ldr	r3, [pc, #424]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	099b      	lsrs	r3, r3, #6
 800989c:	2200      	movs	r2, #0
 800989e:	63bb      	str	r3, [r7, #56]	; 0x38
 80098a0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80098a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098a8:	633b      	str	r3, [r7, #48]	; 0x30
 80098aa:	2300      	movs	r3, #0
 80098ac:	637b      	str	r3, [r7, #52]	; 0x34
 80098ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80098b2:	4622      	mov	r2, r4
 80098b4:	462b      	mov	r3, r5
 80098b6:	f04f 0000 	mov.w	r0, #0
 80098ba:	f04f 0100 	mov.w	r1, #0
 80098be:	0159      	lsls	r1, r3, #5
 80098c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80098c4:	0150      	lsls	r0, r2, #5
 80098c6:	4602      	mov	r2, r0
 80098c8:	460b      	mov	r3, r1
 80098ca:	4621      	mov	r1, r4
 80098cc:	1a51      	subs	r1, r2, r1
 80098ce:	6139      	str	r1, [r7, #16]
 80098d0:	4629      	mov	r1, r5
 80098d2:	eb63 0301 	sbc.w	r3, r3, r1
 80098d6:	617b      	str	r3, [r7, #20]
 80098d8:	f04f 0200 	mov.w	r2, #0
 80098dc:	f04f 0300 	mov.w	r3, #0
 80098e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098e4:	4659      	mov	r1, fp
 80098e6:	018b      	lsls	r3, r1, #6
 80098e8:	4651      	mov	r1, sl
 80098ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80098ee:	4651      	mov	r1, sl
 80098f0:	018a      	lsls	r2, r1, #6
 80098f2:	4651      	mov	r1, sl
 80098f4:	ebb2 0801 	subs.w	r8, r2, r1
 80098f8:	4659      	mov	r1, fp
 80098fa:	eb63 0901 	sbc.w	r9, r3, r1
 80098fe:	f04f 0200 	mov.w	r2, #0
 8009902:	f04f 0300 	mov.w	r3, #0
 8009906:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800990a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800990e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009912:	4690      	mov	r8, r2
 8009914:	4699      	mov	r9, r3
 8009916:	4623      	mov	r3, r4
 8009918:	eb18 0303 	adds.w	r3, r8, r3
 800991c:	60bb      	str	r3, [r7, #8]
 800991e:	462b      	mov	r3, r5
 8009920:	eb49 0303 	adc.w	r3, r9, r3
 8009924:	60fb      	str	r3, [r7, #12]
 8009926:	f04f 0200 	mov.w	r2, #0
 800992a:	f04f 0300 	mov.w	r3, #0
 800992e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009932:	4629      	mov	r1, r5
 8009934:	028b      	lsls	r3, r1, #10
 8009936:	4621      	mov	r1, r4
 8009938:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800993c:	4621      	mov	r1, r4
 800993e:	028a      	lsls	r2, r1, #10
 8009940:	4610      	mov	r0, r2
 8009942:	4619      	mov	r1, r3
 8009944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009946:	2200      	movs	r2, #0
 8009948:	62bb      	str	r3, [r7, #40]	; 0x28
 800994a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800994c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009950:	f7f7 f9aa 	bl	8000ca8 <__aeabi_uldivmod>
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	4613      	mov	r3, r2
 800995a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800995c:	e058      	b.n	8009a10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800995e:	4b38      	ldr	r3, [pc, #224]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	099b      	lsrs	r3, r3, #6
 8009964:	2200      	movs	r2, #0
 8009966:	4618      	mov	r0, r3
 8009968:	4611      	mov	r1, r2
 800996a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800996e:	623b      	str	r3, [r7, #32]
 8009970:	2300      	movs	r3, #0
 8009972:	627b      	str	r3, [r7, #36]	; 0x24
 8009974:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009978:	4642      	mov	r2, r8
 800997a:	464b      	mov	r3, r9
 800997c:	f04f 0000 	mov.w	r0, #0
 8009980:	f04f 0100 	mov.w	r1, #0
 8009984:	0159      	lsls	r1, r3, #5
 8009986:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800998a:	0150      	lsls	r0, r2, #5
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	4641      	mov	r1, r8
 8009992:	ebb2 0a01 	subs.w	sl, r2, r1
 8009996:	4649      	mov	r1, r9
 8009998:	eb63 0b01 	sbc.w	fp, r3, r1
 800999c:	f04f 0200 	mov.w	r2, #0
 80099a0:	f04f 0300 	mov.w	r3, #0
 80099a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80099a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80099ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80099b0:	ebb2 040a 	subs.w	r4, r2, sl
 80099b4:	eb63 050b 	sbc.w	r5, r3, fp
 80099b8:	f04f 0200 	mov.w	r2, #0
 80099bc:	f04f 0300 	mov.w	r3, #0
 80099c0:	00eb      	lsls	r3, r5, #3
 80099c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80099c6:	00e2      	lsls	r2, r4, #3
 80099c8:	4614      	mov	r4, r2
 80099ca:	461d      	mov	r5, r3
 80099cc:	4643      	mov	r3, r8
 80099ce:	18e3      	adds	r3, r4, r3
 80099d0:	603b      	str	r3, [r7, #0]
 80099d2:	464b      	mov	r3, r9
 80099d4:	eb45 0303 	adc.w	r3, r5, r3
 80099d8:	607b      	str	r3, [r7, #4]
 80099da:	f04f 0200 	mov.w	r2, #0
 80099de:	f04f 0300 	mov.w	r3, #0
 80099e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80099e6:	4629      	mov	r1, r5
 80099e8:	028b      	lsls	r3, r1, #10
 80099ea:	4621      	mov	r1, r4
 80099ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80099f0:	4621      	mov	r1, r4
 80099f2:	028a      	lsls	r2, r1, #10
 80099f4:	4610      	mov	r0, r2
 80099f6:	4619      	mov	r1, r3
 80099f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80099fa:	2200      	movs	r2, #0
 80099fc:	61bb      	str	r3, [r7, #24]
 80099fe:	61fa      	str	r2, [r7, #28]
 8009a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009a04:	f7f7 f950 	bl	8000ca8 <__aeabi_uldivmod>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4613      	mov	r3, r2
 8009a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009a10:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <HAL_RCC_GetSysClockFreq+0x200>)
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	0c1b      	lsrs	r3, r3, #16
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	005b      	lsls	r3, r3, #1
 8009a1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009a20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a2a:	e002      	b.n	8009a32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009a2c:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <HAL_RCC_GetSysClockFreq+0x204>)
 8009a2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3750      	adds	r7, #80	; 0x50
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a3e:	bf00      	nop
 8009a40:	40023800 	.word	0x40023800
 8009a44:	00f42400 	.word	0x00f42400

08009a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009a4c:	4b03      	ldr	r3, [pc, #12]	; (8009a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8009a4e:	681b      	ldr	r3, [r3, #0]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	200004a0 	.word	0x200004a0

08009a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009a64:	f7ff fff0 	bl	8009a48 <HAL_RCC_GetHCLKFreq>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	0a9b      	lsrs	r3, r3, #10
 8009a70:	f003 0307 	and.w	r3, r3, #7
 8009a74:	4903      	ldr	r1, [pc, #12]	; (8009a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009a76:	5ccb      	ldrb	r3, [r1, r3]
 8009a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	40023800 	.word	0x40023800
 8009a84:	0801a180 	.word	0x0801a180

08009a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009a8c:	f7ff ffdc 	bl	8009a48 <HAL_RCC_GetHCLKFreq>
 8009a90:	4602      	mov	r2, r0
 8009a92:	4b05      	ldr	r3, [pc, #20]	; (8009aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	0b5b      	lsrs	r3, r3, #13
 8009a98:	f003 0307 	and.w	r3, r3, #7
 8009a9c:	4903      	ldr	r1, [pc, #12]	; (8009aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8009a9e:	5ccb      	ldrb	r3, [r1, r3]
 8009aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	40023800 	.word	0x40023800
 8009aac:	0801a180 	.word	0x0801a180

08009ab0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f003 0301 	and.w	r3, r3, #1
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d105      	bne.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d035      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009ad8:	4b62      	ldr	r3, [pc, #392]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009ade:	f7fc fae7 	bl	80060b0 <HAL_GetTick>
 8009ae2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009ae4:	e008      	b.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009ae6:	f7fc fae3 	bl	80060b0 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	2b02      	cmp	r3, #2
 8009af2:	d901      	bls.n	8009af8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e0b0      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009af8:	4b5b      	ldr	r3, [pc, #364]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d1f0      	bne.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	685b      	ldr	r3, [r3, #4]
 8009b08:	019a      	lsls	r2, r3, #6
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	689b      	ldr	r3, [r3, #8]
 8009b0e:	071b      	lsls	r3, r3, #28
 8009b10:	4955      	ldr	r1, [pc, #340]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b12:	4313      	orrs	r3, r2
 8009b14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009b18:	4b52      	ldr	r3, [pc, #328]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b1e:	f7fc fac7 	bl	80060b0 <HAL_GetTick>
 8009b22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b24:	e008      	b.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009b26:	f7fc fac3 	bl	80060b0 <HAL_GetTick>
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d901      	bls.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b34:	2303      	movs	r3, #3
 8009b36:	e090      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b38:	4b4b      	ldr	r3, [pc, #300]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d0f0      	beq.n	8009b26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f003 0302 	and.w	r3, r3, #2
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 8083 	beq.w	8009c58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b52:	2300      	movs	r3, #0
 8009b54:	60fb      	str	r3, [r7, #12]
 8009b56:	4b44      	ldr	r3, [pc, #272]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5a:	4a43      	ldr	r2, [pc, #268]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b60:	6413      	str	r3, [r2, #64]	; 0x40
 8009b62:	4b41      	ldr	r3, [pc, #260]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b6a:	60fb      	str	r3, [r7, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009b6e:	4b3f      	ldr	r3, [pc, #252]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a3e      	ldr	r2, [pc, #248]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b7a:	f7fc fa99 	bl	80060b0 <HAL_GetTick>
 8009b7e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009b80:	e008      	b.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009b82:	f7fc fa95 	bl	80060b0 <HAL_GetTick>
 8009b86:	4602      	mov	r2, r0
 8009b88:	697b      	ldr	r3, [r7, #20]
 8009b8a:	1ad3      	subs	r3, r2, r3
 8009b8c:	2b02      	cmp	r3, #2
 8009b8e:	d901      	bls.n	8009b94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e062      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009b94:	4b35      	ldr	r3, [pc, #212]	; (8009c6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d0f0      	beq.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009ba0:	4b31      	ldr	r3, [pc, #196]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ba8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d02f      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bb8:	693a      	ldr	r2, [r7, #16]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d028      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009bbe:	4b2a      	ldr	r3, [pc, #168]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bc6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009bc8:	4b29      	ldr	r3, [pc, #164]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009bca:	2201      	movs	r2, #1
 8009bcc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009bce:	4b28      	ldr	r3, [pc, #160]	; (8009c70 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009bd4:	4a24      	ldr	r2, [pc, #144]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009bd6:	693b      	ldr	r3, [r7, #16]
 8009bd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009bda:	4b23      	ldr	r3, [pc, #140]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d114      	bne.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009be6:	f7fc fa63 	bl	80060b0 <HAL_GetTick>
 8009bea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009bec:	e00a      	b.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009bee:	f7fc fa5f 	bl	80060b0 <HAL_GetTick>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d901      	bls.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e02a      	b.n	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c04:	4b18      	ldr	r3, [pc, #96]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c08:	f003 0302 	and.w	r3, r3, #2
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0ee      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	68db      	ldr	r3, [r3, #12]
 8009c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c1c:	d10d      	bne.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009c1e:	4b12      	ldr	r3, [pc, #72]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	68db      	ldr	r3, [r3, #12]
 8009c2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c32:	490d      	ldr	r1, [pc, #52]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	608b      	str	r3, [r1, #8]
 8009c38:	e005      	b.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009c3a:	4b0b      	ldr	r3, [pc, #44]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	4a0a      	ldr	r2, [pc, #40]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009c44:	6093      	str	r3, [r2, #8]
 8009c46:	4b08      	ldr	r3, [pc, #32]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c52:	4905      	ldr	r1, [pc, #20]	; (8009c68 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009c54:	4313      	orrs	r3, r2
 8009c56:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009c58:	2300      	movs	r3, #0
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3718      	adds	r7, #24
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	42470068 	.word	0x42470068
 8009c68:	40023800 	.word	0x40023800
 8009c6c:	40007000 	.word	0x40007000
 8009c70:	42470e40 	.word	0x42470e40

08009c74 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2203      	movs	r2, #3
 8009c80:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8009c82:	4b11      	ldr	r3, [pc, #68]	; (8009cc8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8009c84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c88:	099b      	lsrs	r3, r3, #6
 8009c8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009c92:	4b0d      	ldr	r3, [pc, #52]	; (8009cc8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8009c94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c98:	0f1b      	lsrs	r3, r3, #28
 8009c9a:	f003 0207 	and.w	r2, r3, #7
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8009ca2:	4b09      	ldr	r3, [pc, #36]	; (8009cc8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009caa:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8009cac:	4b06      	ldr	r3, [pc, #24]	; (8009cc8 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8009cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cb0:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	431a      	orrs	r2, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 8009cbc:	bf00      	nop
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	40023800 	.word	0x40023800

08009ccc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d13e      	bne.n	8009d68 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8009cea:	4b23      	ldr	r3, [pc, #140]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009cec:	689b      	ldr	r3, [r3, #8]
 8009cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d005      	beq.n	8009d06 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d12f      	bne.n	8009d60 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d00:	4b1e      	ldr	r3, [pc, #120]	; (8009d7c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009d02:	617b      	str	r3, [r7, #20]
          break;
 8009d04:	e02f      	b.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009d06:	4b1c      	ldr	r3, [pc, #112]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d12:	d108      	bne.n	8009d26 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d14:	4b18      	ldr	r3, [pc, #96]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d1c:	4a18      	ldr	r2, [pc, #96]	; (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d22:	613b      	str	r3, [r7, #16]
 8009d24:	e007      	b.n	8009d36 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d26:	4b14      	ldr	r3, [pc, #80]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d2e:	4a14      	ldr	r2, [pc, #80]	; (8009d80 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d34:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8009d36:	4b10      	ldr	r3, [pc, #64]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d3c:	099b      	lsrs	r3, r3, #6
 8009d3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d42:	693b      	ldr	r3, [r7, #16]
 8009d44:	fb02 f303 	mul.w	r3, r2, r3
 8009d48:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009d4a:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d50:	0f1b      	lsrs	r3, r3, #28
 8009d52:	f003 0307 	and.w	r3, r3, #7
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d5c:	617b      	str	r3, [r7, #20]
          break;
 8009d5e:	e002      	b.n	8009d66 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009d60:	2300      	movs	r3, #0
 8009d62:	617b      	str	r3, [r7, #20]
          break;
 8009d64:	bf00      	nop
        }
      }
      break;
 8009d66:	bf00      	nop
    }
  }
  return frequency;
 8009d68:	697b      	ldr	r3, [r7, #20]
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	371c      	adds	r7, #28
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	40023800 	.word	0x40023800
 8009d7c:	00bb8000 	.word	0x00bb8000
 8009d80:	00f42400 	.word	0x00f42400

08009d84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d101      	bne.n	8009d96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	e07b      	b.n	8009e8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d108      	bne.n	8009db0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009da6:	d009      	beq.n	8009dbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2200      	movs	r2, #0
 8009dac:	61da      	str	r2, [r3, #28]
 8009dae:	e005      	b.n	8009dbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dc8:	b2db      	uxtb	r3, r3
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d106      	bne.n	8009ddc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7f8 fe38 	bl	8002a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2202      	movs	r2, #2
 8009de0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009df2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009e04:	431a      	orrs	r2, r3
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	f003 0302 	and.w	r3, r3, #2
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	695b      	ldr	r3, [r3, #20]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	431a      	orrs	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	69db      	ldr	r3, [r3, #28]
 8009e32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e36:	431a      	orrs	r2, r3
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	6a1b      	ldr	r3, [r3, #32]
 8009e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e40:	ea42 0103 	orr.w	r1, r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	430a      	orrs	r2, r1
 8009e52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	0c1b      	lsrs	r3, r3, #16
 8009e5a:	f003 0104 	and.w	r1, r3, #4
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	f003 0210 	and.w	r2, r3, #16
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	69da      	ldr	r2, [r3, #28]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b082      	sub	sp, #8
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d101      	bne.n	8009ea8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e041      	b.n	8009f2c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d106      	bne.n	8009ec2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f7f8 fe5d 	bl	8002b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2202      	movs	r2, #2
 8009ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	3304      	adds	r3, #4
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	4610      	mov	r0, r2
 8009ed6:	f000 f9cd 	bl	800a274 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2201      	movs	r2, #1
 8009ede:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2201      	movs	r2, #1
 8009f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f42:	b2db      	uxtb	r3, r3
 8009f44:	2b01      	cmp	r3, #1
 8009f46:	d001      	beq.n	8009f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e04e      	b.n	8009fea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2202      	movs	r2, #2
 8009f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	68da      	ldr	r2, [r3, #12]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f042 0201 	orr.w	r2, r2, #1
 8009f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	4a23      	ldr	r2, [pc, #140]	; (8009ff8 <HAL_TIM_Base_Start_IT+0xc4>)
 8009f6a:	4293      	cmp	r3, r2
 8009f6c:	d022      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f76:	d01d      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a1f      	ldr	r2, [pc, #124]	; (8009ffc <HAL_TIM_Base_Start_IT+0xc8>)
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d018      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a1e      	ldr	r2, [pc, #120]	; (800a000 <HAL_TIM_Base_Start_IT+0xcc>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d013      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a1c      	ldr	r2, [pc, #112]	; (800a004 <HAL_TIM_Base_Start_IT+0xd0>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d00e      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a1b      	ldr	r2, [pc, #108]	; (800a008 <HAL_TIM_Base_Start_IT+0xd4>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d009      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a19      	ldr	r2, [pc, #100]	; (800a00c <HAL_TIM_Base_Start_IT+0xd8>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d004      	beq.n	8009fb4 <HAL_TIM_Base_Start_IT+0x80>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a18      	ldr	r2, [pc, #96]	; (800a010 <HAL_TIM_Base_Start_IT+0xdc>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d111      	bne.n	8009fd8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f003 0307 	and.w	r3, r3, #7
 8009fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b06      	cmp	r3, #6
 8009fc4:	d010      	beq.n	8009fe8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	681a      	ldr	r2, [r3, #0]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	f042 0201 	orr.w	r2, r2, #1
 8009fd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fd6:	e007      	b.n	8009fe8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	681a      	ldr	r2, [r3, #0]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f042 0201 	orr.w	r2, r2, #1
 8009fe6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3714      	adds	r7, #20
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr
 8009ff6:	bf00      	nop
 8009ff8:	40010000 	.word	0x40010000
 8009ffc:	40000400 	.word	0x40000400
 800a000:	40000800 	.word	0x40000800
 800a004:	40000c00 	.word	0x40000c00
 800a008:	40010400 	.word	0x40010400
 800a00c:	40014000 	.word	0x40014000
 800a010:	40001800 	.word	0x40001800

0800a014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	f003 0302 	and.w	r3, r3, #2
 800a026:	2b02      	cmp	r3, #2
 800a028:	d122      	bne.n	800a070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	f003 0302 	and.w	r3, r3, #2
 800a034:	2b02      	cmp	r3, #2
 800a036:	d11b      	bne.n	800a070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f06f 0202 	mvn.w	r2, #2
 800a040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2201      	movs	r2, #1
 800a046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	f003 0303 	and.w	r3, r3, #3
 800a052:	2b00      	cmp	r3, #0
 800a054:	d003      	beq.n	800a05e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f8ee 	bl	800a238 <HAL_TIM_IC_CaptureCallback>
 800a05c:	e005      	b.n	800a06a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 f8e0 	bl	800a224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f8f1 	bl	800a24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	691b      	ldr	r3, [r3, #16]
 800a076:	f003 0304 	and.w	r3, r3, #4
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d122      	bne.n	800a0c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f003 0304 	and.w	r3, r3, #4
 800a088:	2b04      	cmp	r3, #4
 800a08a:	d11b      	bne.n	800a0c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f06f 0204 	mvn.w	r2, #4
 800a094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2202      	movs	r2, #2
 800a09a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d003      	beq.n	800a0b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 f8c4 	bl	800a238 <HAL_TIM_IC_CaptureCallback>
 800a0b0:	e005      	b.n	800a0be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f8b6 	bl	800a224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0b8:	6878      	ldr	r0, [r7, #4]
 800a0ba:	f000 f8c7 	bl	800a24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	691b      	ldr	r3, [r3, #16]
 800a0ca:	f003 0308 	and.w	r3, r3, #8
 800a0ce:	2b08      	cmp	r3, #8
 800a0d0:	d122      	bne.n	800a118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68db      	ldr	r3, [r3, #12]
 800a0d8:	f003 0308 	and.w	r3, r3, #8
 800a0dc:	2b08      	cmp	r3, #8
 800a0de:	d11b      	bne.n	800a118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f06f 0208 	mvn.w	r2, #8
 800a0e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2204      	movs	r2, #4
 800a0ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	f003 0303 	and.w	r3, r3, #3
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f000 f89a 	bl	800a238 <HAL_TIM_IC_CaptureCallback>
 800a104:	e005      	b.n	800a112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 f88c 	bl	800a224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f89d 	bl	800a24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2200      	movs	r2, #0
 800a116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	f003 0310 	and.w	r3, r3, #16
 800a122:	2b10      	cmp	r3, #16
 800a124:	d122      	bne.n	800a16c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	f003 0310 	and.w	r3, r3, #16
 800a130:	2b10      	cmp	r3, #16
 800a132:	d11b      	bne.n	800a16c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f06f 0210 	mvn.w	r2, #16
 800a13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2208      	movs	r2, #8
 800a142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d003      	beq.n	800a15a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 f870 	bl	800a238 <HAL_TIM_IC_CaptureCallback>
 800a158:	e005      	b.n	800a166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f862 	bl	800a224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f873 	bl	800a24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	691b      	ldr	r3, [r3, #16]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b01      	cmp	r3, #1
 800a178:	d10e      	bne.n	800a198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	f003 0301 	and.w	r3, r3, #1
 800a184:	2b01      	cmp	r3, #1
 800a186:	d107      	bne.n	800a198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f06f 0201 	mvn.w	r2, #1
 800a190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f7f7 fd9a 	bl	8001ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	691b      	ldr	r3, [r3, #16]
 800a19e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1a2:	2b80      	cmp	r3, #128	; 0x80
 800a1a4:	d10e      	bne.n	800a1c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	68db      	ldr	r3, [r3, #12]
 800a1ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1b0:	2b80      	cmp	r3, #128	; 0x80
 800a1b2:	d107      	bne.n	800a1c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a1bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 f97e 	bl	800a4c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1ce:	2b40      	cmp	r3, #64	; 0x40
 800a1d0:	d10e      	bne.n	800a1f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68db      	ldr	r3, [r3, #12]
 800a1d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1dc:	2b40      	cmp	r3, #64	; 0x40
 800a1de:	d107      	bne.n	800a1f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 f838 	bl	800a260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	f003 0320 	and.w	r3, r3, #32
 800a1fa:	2b20      	cmp	r3, #32
 800a1fc:	d10e      	bne.n	800a21c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	f003 0320 	and.w	r3, r3, #32
 800a208:	2b20      	cmp	r3, #32
 800a20a:	d107      	bne.n	800a21c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f06f 0220 	mvn.w	r2, #32
 800a214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a216:	6878      	ldr	r0, [r7, #4]
 800a218:	f000 f948 	bl	800a4ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a21c:	bf00      	nop
 800a21e:	3708      	adds	r7, #8
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a268:	bf00      	nop
 800a26a:	370c      	adds	r7, #12
 800a26c:	46bd      	mov	sp, r7
 800a26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a272:	4770      	bx	lr

0800a274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a274:	b480      	push	{r7}
 800a276:	b085      	sub	sp, #20
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	4a40      	ldr	r2, [pc, #256]	; (800a388 <TIM_Base_SetConfig+0x114>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d013      	beq.n	800a2b4 <TIM_Base_SetConfig+0x40>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a292:	d00f      	beq.n	800a2b4 <TIM_Base_SetConfig+0x40>
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	4a3d      	ldr	r2, [pc, #244]	; (800a38c <TIM_Base_SetConfig+0x118>)
 800a298:	4293      	cmp	r3, r2
 800a29a:	d00b      	beq.n	800a2b4 <TIM_Base_SetConfig+0x40>
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	4a3c      	ldr	r2, [pc, #240]	; (800a390 <TIM_Base_SetConfig+0x11c>)
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d007      	beq.n	800a2b4 <TIM_Base_SetConfig+0x40>
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	4a3b      	ldr	r2, [pc, #236]	; (800a394 <TIM_Base_SetConfig+0x120>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d003      	beq.n	800a2b4 <TIM_Base_SetConfig+0x40>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	4a3a      	ldr	r2, [pc, #232]	; (800a398 <TIM_Base_SetConfig+0x124>)
 800a2b0:	4293      	cmp	r3, r2
 800a2b2:	d108      	bne.n	800a2c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a2f      	ldr	r2, [pc, #188]	; (800a388 <TIM_Base_SetConfig+0x114>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d02b      	beq.n	800a326 <TIM_Base_SetConfig+0xb2>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d4:	d027      	beq.n	800a326 <TIM_Base_SetConfig+0xb2>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a2c      	ldr	r2, [pc, #176]	; (800a38c <TIM_Base_SetConfig+0x118>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d023      	beq.n	800a326 <TIM_Base_SetConfig+0xb2>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a2b      	ldr	r2, [pc, #172]	; (800a390 <TIM_Base_SetConfig+0x11c>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d01f      	beq.n	800a326 <TIM_Base_SetConfig+0xb2>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a2a      	ldr	r2, [pc, #168]	; (800a394 <TIM_Base_SetConfig+0x120>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d01b      	beq.n	800a326 <TIM_Base_SetConfig+0xb2>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a29      	ldr	r2, [pc, #164]	; (800a398 <TIM_Base_SetConfig+0x124>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d017      	beq.n	800a326 <TIM_Base_SetConfig+0xb2>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a28      	ldr	r2, [pc, #160]	; (800a39c <TIM_Base_SetConfig+0x128>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d013      	beq.n	800a326 <TIM_Base_SetConfig+0xb2>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a27      	ldr	r2, [pc, #156]	; (800a3a0 <TIM_Base_SetConfig+0x12c>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d00f      	beq.n	800a326 <TIM_Base_SetConfig+0xb2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	4a26      	ldr	r2, [pc, #152]	; (800a3a4 <TIM_Base_SetConfig+0x130>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d00b      	beq.n	800a326 <TIM_Base_SetConfig+0xb2>
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	4a25      	ldr	r2, [pc, #148]	; (800a3a8 <TIM_Base_SetConfig+0x134>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d007      	beq.n	800a326 <TIM_Base_SetConfig+0xb2>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4a24      	ldr	r2, [pc, #144]	; (800a3ac <TIM_Base_SetConfig+0x138>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d003      	beq.n	800a326 <TIM_Base_SetConfig+0xb2>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	4a23      	ldr	r2, [pc, #140]	; (800a3b0 <TIM_Base_SetConfig+0x13c>)
 800a322:	4293      	cmp	r3, r2
 800a324:	d108      	bne.n	800a338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a32c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	4313      	orrs	r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	695b      	ldr	r3, [r3, #20]
 800a342:	4313      	orrs	r3, r2
 800a344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a0a      	ldr	r2, [pc, #40]	; (800a388 <TIM_Base_SetConfig+0x114>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d003      	beq.n	800a36c <TIM_Base_SetConfig+0xf8>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a0c      	ldr	r2, [pc, #48]	; (800a398 <TIM_Base_SetConfig+0x124>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d103      	bne.n	800a374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2201      	movs	r2, #1
 800a378:	615a      	str	r2, [r3, #20]
}
 800a37a:	bf00      	nop
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	40010000 	.word	0x40010000
 800a38c:	40000400 	.word	0x40000400
 800a390:	40000800 	.word	0x40000800
 800a394:	40000c00 	.word	0x40000c00
 800a398:	40010400 	.word	0x40010400
 800a39c:	40014000 	.word	0x40014000
 800a3a0:	40014400 	.word	0x40014400
 800a3a4:	40014800 	.word	0x40014800
 800a3a8:	40001800 	.word	0x40001800
 800a3ac:	40001c00 	.word	0x40001c00
 800a3b0:	40002000 	.word	0x40002000

0800a3b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d101      	bne.n	800a3cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3c8:	2302      	movs	r3, #2
 800a3ca:	e05a      	b.n	800a482 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2201      	movs	r2, #1
 800a3d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2202      	movs	r2, #2
 800a3d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	685b      	ldr	r3, [r3, #4]
 800a3e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	689b      	ldr	r3, [r3, #8]
 800a3ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	68fa      	ldr	r2, [r7, #12]
 800a3fa:	4313      	orrs	r3, r2
 800a3fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68fa      	ldr	r2, [r7, #12]
 800a404:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a21      	ldr	r2, [pc, #132]	; (800a490 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d022      	beq.n	800a456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a418:	d01d      	beq.n	800a456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a1d      	ldr	r2, [pc, #116]	; (800a494 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d018      	beq.n	800a456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a1b      	ldr	r2, [pc, #108]	; (800a498 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d013      	beq.n	800a456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	4a1a      	ldr	r2, [pc, #104]	; (800a49c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d00e      	beq.n	800a456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	4a18      	ldr	r2, [pc, #96]	; (800a4a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d009      	beq.n	800a456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a17      	ldr	r2, [pc, #92]	; (800a4a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d004      	beq.n	800a456 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a15      	ldr	r2, [pc, #84]	; (800a4a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d10c      	bne.n	800a470 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a45c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	68ba      	ldr	r2, [r7, #8]
 800a464:	4313      	orrs	r3, r2
 800a466:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2201      	movs	r2, #1
 800a474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop
 800a490:	40010000 	.word	0x40010000
 800a494:	40000400 	.word	0x40000400
 800a498:	40000800 	.word	0x40000800
 800a49c:	40000c00 	.word	0x40000c00
 800a4a0:	40010400 	.word	0x40010400
 800a4a4:	40014000 	.word	0x40014000
 800a4a8:	40001800 	.word	0x40001800

0800a4ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4b4:	bf00      	nop
 800a4b6:	370c      	adds	r7, #12
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr

0800a4c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4c0:	b480      	push	{r7}
 800a4c2:	b083      	sub	sp, #12
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4c8:	bf00      	nop
 800a4ca:	370c      	adds	r7, #12
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr

0800a4d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b082      	sub	sp, #8
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d101      	bne.n	800a4e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e03f      	b.n	800a566 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d106      	bne.n	800a500 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f7f8 faee 	bl	8002adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2224      	movs	r2, #36	; 0x24
 800a504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	68da      	ldr	r2, [r3, #12]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a516:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 f9cb 	bl	800a8b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	691a      	ldr	r2, [r3, #16]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a52c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	695a      	ldr	r2, [r3, #20]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a53c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	68da      	ldr	r2, [r3, #12]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a54c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2200      	movs	r2, #0
 800a552:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2220      	movs	r2, #32
 800a558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2220      	movs	r2, #32
 800a560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a564:	2300      	movs	r3, #0
}
 800a566:	4618      	mov	r0, r3
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}

0800a56e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a56e:	b580      	push	{r7, lr}
 800a570:	b08a      	sub	sp, #40	; 0x28
 800a572:	af02      	add	r7, sp, #8
 800a574:	60f8      	str	r0, [r7, #12]
 800a576:	60b9      	str	r1, [r7, #8]
 800a578:	603b      	str	r3, [r7, #0]
 800a57a:	4613      	mov	r3, r2
 800a57c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a57e:	2300      	movs	r3, #0
 800a580:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a588:	b2db      	uxtb	r3, r3
 800a58a:	2b20      	cmp	r3, #32
 800a58c:	d17c      	bne.n	800a688 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d002      	beq.n	800a59a <HAL_UART_Transmit+0x2c>
 800a594:	88fb      	ldrh	r3, [r7, #6]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e075      	b.n	800a68a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d101      	bne.n	800a5ac <HAL_UART_Transmit+0x3e>
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	e06e      	b.n	800a68a <HAL_UART_Transmit+0x11c>
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2221      	movs	r2, #33	; 0x21
 800a5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a5c2:	f7fb fd75 	bl	80060b0 <HAL_GetTick>
 800a5c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	88fa      	ldrh	r2, [r7, #6]
 800a5cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	88fa      	ldrh	r2, [r7, #6]
 800a5d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5dc:	d108      	bne.n	800a5f0 <HAL_UART_Transmit+0x82>
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	691b      	ldr	r3, [r3, #16]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d104      	bne.n	800a5f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	61bb      	str	r3, [r7, #24]
 800a5ee:	e003      	b.n	800a5f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a600:	e02a      	b.n	800a658 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	9300      	str	r3, [sp, #0]
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2200      	movs	r2, #0
 800a60a:	2180      	movs	r1, #128	; 0x80
 800a60c:	68f8      	ldr	r0, [r7, #12]
 800a60e:	f000 f8e2 	bl	800a7d6 <UART_WaitOnFlagUntilTimeout>
 800a612:	4603      	mov	r3, r0
 800a614:	2b00      	cmp	r3, #0
 800a616:	d001      	beq.n	800a61c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a618:	2303      	movs	r3, #3
 800a61a:	e036      	b.n	800a68a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a61c:	69fb      	ldr	r3, [r7, #28]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10b      	bne.n	800a63a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	881b      	ldrh	r3, [r3, #0]
 800a626:	461a      	mov	r2, r3
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a630:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	3302      	adds	r3, #2
 800a636:	61bb      	str	r3, [r7, #24]
 800a638:	e007      	b.n	800a64a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a63a:	69fb      	ldr	r3, [r7, #28]
 800a63c:	781a      	ldrb	r2, [r3, #0]
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	3301      	adds	r3, #1
 800a648:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a64e:	b29b      	uxth	r3, r3
 800a650:	3b01      	subs	r3, #1
 800a652:	b29a      	uxth	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d1cf      	bne.n	800a602 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	9300      	str	r3, [sp, #0]
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	2200      	movs	r2, #0
 800a66a:	2140      	movs	r1, #64	; 0x40
 800a66c:	68f8      	ldr	r0, [r7, #12]
 800a66e:	f000 f8b2 	bl	800a7d6 <UART_WaitOnFlagUntilTimeout>
 800a672:	4603      	mov	r3, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	d001      	beq.n	800a67c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a678:	2303      	movs	r3, #3
 800a67a:	e006      	b.n	800a68a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	2220      	movs	r2, #32
 800a680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a684:	2300      	movs	r3, #0
 800a686:	e000      	b.n	800a68a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a688:	2302      	movs	r3, #2
  }
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}

0800a692 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a692:	b580      	push	{r7, lr}
 800a694:	b08a      	sub	sp, #40	; 0x28
 800a696:	af02      	add	r7, sp, #8
 800a698:	60f8      	str	r0, [r7, #12]
 800a69a:	60b9      	str	r1, [r7, #8]
 800a69c:	603b      	str	r3, [r7, #0]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b20      	cmp	r3, #32
 800a6b0:	f040 808c 	bne.w	800a7cc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d002      	beq.n	800a6c0 <HAL_UART_Receive+0x2e>
 800a6ba:	88fb      	ldrh	r3, [r7, #6]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d101      	bne.n	800a6c4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	e084      	b.n	800a7ce <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d101      	bne.n	800a6d2 <HAL_UART_Receive+0x40>
 800a6ce:	2302      	movs	r3, #2
 800a6d0:	e07d      	b.n	800a7ce <HAL_UART_Receive+0x13c>
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2222      	movs	r2, #34	; 0x22
 800a6e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a6ee:	f7fb fcdf 	bl	80060b0 <HAL_GetTick>
 800a6f2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	88fa      	ldrh	r2, [r7, #6]
 800a6f8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	88fa      	ldrh	r2, [r7, #6]
 800a6fe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a708:	d108      	bne.n	800a71c <HAL_UART_Receive+0x8a>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	691b      	ldr	r3, [r3, #16]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d104      	bne.n	800a71c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800a712:	2300      	movs	r3, #0
 800a714:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	61bb      	str	r3, [r7, #24]
 800a71a:	e003      	b.n	800a724 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a720:	2300      	movs	r3, #0
 800a722:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800a72c:	e043      	b.n	800a7b6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	9300      	str	r3, [sp, #0]
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	2200      	movs	r2, #0
 800a736:	2120      	movs	r1, #32
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f000 f84c 	bl	800a7d6 <UART_WaitOnFlagUntilTimeout>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800a744:	2303      	movs	r3, #3
 800a746:	e042      	b.n	800a7ce <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800a748:	69fb      	ldr	r3, [r7, #28]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d10c      	bne.n	800a768 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	685b      	ldr	r3, [r3, #4]
 800a754:	b29b      	uxth	r3, r3
 800a756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a75a:	b29a      	uxth	r2, r3
 800a75c:	69bb      	ldr	r3, [r7, #24]
 800a75e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	3302      	adds	r3, #2
 800a764:	61bb      	str	r3, [r7, #24]
 800a766:	e01f      	b.n	800a7a8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a770:	d007      	beq.n	800a782 <HAL_UART_Receive+0xf0>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	689b      	ldr	r3, [r3, #8]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d10a      	bne.n	800a790 <HAL_UART_Receive+0xfe>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	691b      	ldr	r3, [r3, #16]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d106      	bne.n	800a790 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	b2da      	uxtb	r2, r3
 800a78a:	69fb      	ldr	r3, [r7, #28]
 800a78c:	701a      	strb	r2, [r3, #0]
 800a78e:	e008      	b.n	800a7a2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	b2db      	uxtb	r3, r3
 800a798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	69fb      	ldr	r3, [r7, #28]
 800a7a0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d1b6      	bne.n	800a72e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	e000      	b.n	800a7ce <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800a7cc:	2302      	movs	r3, #2
  }
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3720      	adds	r7, #32
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}

0800a7d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b090      	sub	sp, #64	; 0x40
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	60f8      	str	r0, [r7, #12]
 800a7de:	60b9      	str	r1, [r7, #8]
 800a7e0:	603b      	str	r3, [r7, #0]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7e6:	e050      	b.n	800a88a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ee:	d04c      	beq.n	800a88a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a7f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d007      	beq.n	800a806 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7f6:	f7fb fc5b 	bl	80060b0 <HAL_GetTick>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a802:	429a      	cmp	r2, r3
 800a804:	d241      	bcs.n	800a88a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	330c      	adds	r3, #12
 800a80c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a810:	e853 3f00 	ldrex	r3, [r3]
 800a814:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a818:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a81c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	330c      	adds	r3, #12
 800a824:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a826:	637a      	str	r2, [r7, #52]	; 0x34
 800a828:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a82c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a82e:	e841 2300 	strex	r3, r2, [r1]
 800a832:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	2b00      	cmp	r3, #0
 800a838:	d1e5      	bne.n	800a806 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	3314      	adds	r3, #20
 800a840:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	e853 3f00 	ldrex	r3, [r3]
 800a848:	613b      	str	r3, [r7, #16]
   return(result);
 800a84a:	693b      	ldr	r3, [r7, #16]
 800a84c:	f023 0301 	bic.w	r3, r3, #1
 800a850:	63bb      	str	r3, [r7, #56]	; 0x38
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	3314      	adds	r3, #20
 800a858:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a85a:	623a      	str	r2, [r7, #32]
 800a85c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85e:	69f9      	ldr	r1, [r7, #28]
 800a860:	6a3a      	ldr	r2, [r7, #32]
 800a862:	e841 2300 	strex	r3, r2, [r1]
 800a866:	61bb      	str	r3, [r7, #24]
   return(result);
 800a868:	69bb      	ldr	r3, [r7, #24]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1e5      	bne.n	800a83a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2220      	movs	r2, #32
 800a872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2220      	movs	r2, #32
 800a87a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a886:	2303      	movs	r3, #3
 800a888:	e00f      	b.n	800a8aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	4013      	ands	r3, r2
 800a894:	68ba      	ldr	r2, [r7, #8]
 800a896:	429a      	cmp	r2, r3
 800a898:	bf0c      	ite	eq
 800a89a:	2301      	moveq	r3, #1
 800a89c:	2300      	movne	r3, #0
 800a89e:	b2db      	uxtb	r3, r3
 800a8a0:	461a      	mov	r2, r3
 800a8a2:	79fb      	ldrb	r3, [r7, #7]
 800a8a4:	429a      	cmp	r2, r3
 800a8a6:	d09f      	beq.n	800a7e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3740      	adds	r7, #64	; 0x40
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
	...

0800a8b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a8b8:	b0c0      	sub	sp, #256	; 0x100
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a8c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a8cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d0:	68d9      	ldr	r1, [r3, #12]
 800a8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	ea40 0301 	orr.w	r3, r0, r1
 800a8dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a8de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	431a      	orrs	r2, r3
 800a8ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	431a      	orrs	r2, r3
 800a8f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8f8:	69db      	ldr	r3, [r3, #28]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	68db      	ldr	r3, [r3, #12]
 800a908:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a90c:	f021 010c 	bic.w	r1, r1, #12
 800a910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a91a:	430b      	orrs	r3, r1
 800a91c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a91e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a92a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a92e:	6999      	ldr	r1, [r3, #24]
 800a930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	ea40 0301 	orr.w	r3, r0, r1
 800a93a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a93c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a940:	681a      	ldr	r2, [r3, #0]
 800a942:	4b8f      	ldr	r3, [pc, #572]	; (800ab80 <UART_SetConfig+0x2cc>)
 800a944:	429a      	cmp	r2, r3
 800a946:	d005      	beq.n	800a954 <UART_SetConfig+0xa0>
 800a948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	4b8d      	ldr	r3, [pc, #564]	; (800ab84 <UART_SetConfig+0x2d0>)
 800a950:	429a      	cmp	r2, r3
 800a952:	d104      	bne.n	800a95e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a954:	f7ff f898 	bl	8009a88 <HAL_RCC_GetPCLK2Freq>
 800a958:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a95c:	e003      	b.n	800a966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a95e:	f7ff f87f 	bl	8009a60 <HAL_RCC_GetPCLK1Freq>
 800a962:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a96a:	69db      	ldr	r3, [r3, #28]
 800a96c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a970:	f040 810c 	bne.w	800ab8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a978:	2200      	movs	r2, #0
 800a97a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a97e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a986:	4622      	mov	r2, r4
 800a988:	462b      	mov	r3, r5
 800a98a:	1891      	adds	r1, r2, r2
 800a98c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a98e:	415b      	adcs	r3, r3
 800a990:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a996:	4621      	mov	r1, r4
 800a998:	eb12 0801 	adds.w	r8, r2, r1
 800a99c:	4629      	mov	r1, r5
 800a99e:	eb43 0901 	adc.w	r9, r3, r1
 800a9a2:	f04f 0200 	mov.w	r2, #0
 800a9a6:	f04f 0300 	mov.w	r3, #0
 800a9aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a9ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a9b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a9b6:	4690      	mov	r8, r2
 800a9b8:	4699      	mov	r9, r3
 800a9ba:	4623      	mov	r3, r4
 800a9bc:	eb18 0303 	adds.w	r3, r8, r3
 800a9c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a9c4:	462b      	mov	r3, r5
 800a9c6:	eb49 0303 	adc.w	r3, r9, r3
 800a9ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a9da:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a9de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	18db      	adds	r3, r3, r3
 800a9e6:	653b      	str	r3, [r7, #80]	; 0x50
 800a9e8:	4613      	mov	r3, r2
 800a9ea:	eb42 0303 	adc.w	r3, r2, r3
 800a9ee:	657b      	str	r3, [r7, #84]	; 0x54
 800a9f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a9f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a9f8:	f7f6 f956 	bl	8000ca8 <__aeabi_uldivmod>
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	460b      	mov	r3, r1
 800aa00:	4b61      	ldr	r3, [pc, #388]	; (800ab88 <UART_SetConfig+0x2d4>)
 800aa02:	fba3 2302 	umull	r2, r3, r3, r2
 800aa06:	095b      	lsrs	r3, r3, #5
 800aa08:	011c      	lsls	r4, r3, #4
 800aa0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aa14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800aa18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800aa1c:	4642      	mov	r2, r8
 800aa1e:	464b      	mov	r3, r9
 800aa20:	1891      	adds	r1, r2, r2
 800aa22:	64b9      	str	r1, [r7, #72]	; 0x48
 800aa24:	415b      	adcs	r3, r3
 800aa26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aa28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800aa2c:	4641      	mov	r1, r8
 800aa2e:	eb12 0a01 	adds.w	sl, r2, r1
 800aa32:	4649      	mov	r1, r9
 800aa34:	eb43 0b01 	adc.w	fp, r3, r1
 800aa38:	f04f 0200 	mov.w	r2, #0
 800aa3c:	f04f 0300 	mov.w	r3, #0
 800aa40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800aa44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800aa48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800aa4c:	4692      	mov	sl, r2
 800aa4e:	469b      	mov	fp, r3
 800aa50:	4643      	mov	r3, r8
 800aa52:	eb1a 0303 	adds.w	r3, sl, r3
 800aa56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800aa5a:	464b      	mov	r3, r9
 800aa5c:	eb4b 0303 	adc.w	r3, fp, r3
 800aa60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800aa64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800aa70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800aa74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aa78:	460b      	mov	r3, r1
 800aa7a:	18db      	adds	r3, r3, r3
 800aa7c:	643b      	str	r3, [r7, #64]	; 0x40
 800aa7e:	4613      	mov	r3, r2
 800aa80:	eb42 0303 	adc.w	r3, r2, r3
 800aa84:	647b      	str	r3, [r7, #68]	; 0x44
 800aa86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800aa8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800aa8e:	f7f6 f90b 	bl	8000ca8 <__aeabi_uldivmod>
 800aa92:	4602      	mov	r2, r0
 800aa94:	460b      	mov	r3, r1
 800aa96:	4611      	mov	r1, r2
 800aa98:	4b3b      	ldr	r3, [pc, #236]	; (800ab88 <UART_SetConfig+0x2d4>)
 800aa9a:	fba3 2301 	umull	r2, r3, r3, r1
 800aa9e:	095b      	lsrs	r3, r3, #5
 800aaa0:	2264      	movs	r2, #100	; 0x64
 800aaa2:	fb02 f303 	mul.w	r3, r2, r3
 800aaa6:	1acb      	subs	r3, r1, r3
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800aaae:	4b36      	ldr	r3, [pc, #216]	; (800ab88 <UART_SetConfig+0x2d4>)
 800aab0:	fba3 2302 	umull	r2, r3, r3, r2
 800aab4:	095b      	lsrs	r3, r3, #5
 800aab6:	005b      	lsls	r3, r3, #1
 800aab8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800aabc:	441c      	add	r4, r3
 800aabe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aac2:	2200      	movs	r2, #0
 800aac4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aac8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800aacc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800aad0:	4642      	mov	r2, r8
 800aad2:	464b      	mov	r3, r9
 800aad4:	1891      	adds	r1, r2, r2
 800aad6:	63b9      	str	r1, [r7, #56]	; 0x38
 800aad8:	415b      	adcs	r3, r3
 800aada:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aadc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800aae0:	4641      	mov	r1, r8
 800aae2:	1851      	adds	r1, r2, r1
 800aae4:	6339      	str	r1, [r7, #48]	; 0x30
 800aae6:	4649      	mov	r1, r9
 800aae8:	414b      	adcs	r3, r1
 800aaea:	637b      	str	r3, [r7, #52]	; 0x34
 800aaec:	f04f 0200 	mov.w	r2, #0
 800aaf0:	f04f 0300 	mov.w	r3, #0
 800aaf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800aaf8:	4659      	mov	r1, fp
 800aafa:	00cb      	lsls	r3, r1, #3
 800aafc:	4651      	mov	r1, sl
 800aafe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab02:	4651      	mov	r1, sl
 800ab04:	00ca      	lsls	r2, r1, #3
 800ab06:	4610      	mov	r0, r2
 800ab08:	4619      	mov	r1, r3
 800ab0a:	4603      	mov	r3, r0
 800ab0c:	4642      	mov	r2, r8
 800ab0e:	189b      	adds	r3, r3, r2
 800ab10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab14:	464b      	mov	r3, r9
 800ab16:	460a      	mov	r2, r1
 800ab18:	eb42 0303 	adc.w	r3, r2, r3
 800ab1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ab2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ab30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ab34:	460b      	mov	r3, r1
 800ab36:	18db      	adds	r3, r3, r3
 800ab38:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	eb42 0303 	adc.w	r3, r2, r3
 800ab40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ab46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ab4a:	f7f6 f8ad 	bl	8000ca8 <__aeabi_uldivmod>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	4b0d      	ldr	r3, [pc, #52]	; (800ab88 <UART_SetConfig+0x2d4>)
 800ab54:	fba3 1302 	umull	r1, r3, r3, r2
 800ab58:	095b      	lsrs	r3, r3, #5
 800ab5a:	2164      	movs	r1, #100	; 0x64
 800ab5c:	fb01 f303 	mul.w	r3, r1, r3
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	00db      	lsls	r3, r3, #3
 800ab64:	3332      	adds	r3, #50	; 0x32
 800ab66:	4a08      	ldr	r2, [pc, #32]	; (800ab88 <UART_SetConfig+0x2d4>)
 800ab68:	fba2 2303 	umull	r2, r3, r2, r3
 800ab6c:	095b      	lsrs	r3, r3, #5
 800ab6e:	f003 0207 	and.w	r2, r3, #7
 800ab72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4422      	add	r2, r4
 800ab7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ab7c:	e105      	b.n	800ad8a <UART_SetConfig+0x4d6>
 800ab7e:	bf00      	nop
 800ab80:	40011000 	.word	0x40011000
 800ab84:	40011400 	.word	0x40011400
 800ab88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ab8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab90:	2200      	movs	r2, #0
 800ab92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ab96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ab9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ab9e:	4642      	mov	r2, r8
 800aba0:	464b      	mov	r3, r9
 800aba2:	1891      	adds	r1, r2, r2
 800aba4:	6239      	str	r1, [r7, #32]
 800aba6:	415b      	adcs	r3, r3
 800aba8:	627b      	str	r3, [r7, #36]	; 0x24
 800abaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800abae:	4641      	mov	r1, r8
 800abb0:	1854      	adds	r4, r2, r1
 800abb2:	4649      	mov	r1, r9
 800abb4:	eb43 0501 	adc.w	r5, r3, r1
 800abb8:	f04f 0200 	mov.w	r2, #0
 800abbc:	f04f 0300 	mov.w	r3, #0
 800abc0:	00eb      	lsls	r3, r5, #3
 800abc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800abc6:	00e2      	lsls	r2, r4, #3
 800abc8:	4614      	mov	r4, r2
 800abca:	461d      	mov	r5, r3
 800abcc:	4643      	mov	r3, r8
 800abce:	18e3      	adds	r3, r4, r3
 800abd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800abd4:	464b      	mov	r3, r9
 800abd6:	eb45 0303 	adc.w	r3, r5, r3
 800abda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800abde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800abea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800abee:	f04f 0200 	mov.w	r2, #0
 800abf2:	f04f 0300 	mov.w	r3, #0
 800abf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800abfa:	4629      	mov	r1, r5
 800abfc:	008b      	lsls	r3, r1, #2
 800abfe:	4621      	mov	r1, r4
 800ac00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac04:	4621      	mov	r1, r4
 800ac06:	008a      	lsls	r2, r1, #2
 800ac08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ac0c:	f7f6 f84c 	bl	8000ca8 <__aeabi_uldivmod>
 800ac10:	4602      	mov	r2, r0
 800ac12:	460b      	mov	r3, r1
 800ac14:	4b60      	ldr	r3, [pc, #384]	; (800ad98 <UART_SetConfig+0x4e4>)
 800ac16:	fba3 2302 	umull	r2, r3, r3, r2
 800ac1a:	095b      	lsrs	r3, r3, #5
 800ac1c:	011c      	lsls	r4, r3, #4
 800ac1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ac22:	2200      	movs	r2, #0
 800ac24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ac30:	4642      	mov	r2, r8
 800ac32:	464b      	mov	r3, r9
 800ac34:	1891      	adds	r1, r2, r2
 800ac36:	61b9      	str	r1, [r7, #24]
 800ac38:	415b      	adcs	r3, r3
 800ac3a:	61fb      	str	r3, [r7, #28]
 800ac3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ac40:	4641      	mov	r1, r8
 800ac42:	1851      	adds	r1, r2, r1
 800ac44:	6139      	str	r1, [r7, #16]
 800ac46:	4649      	mov	r1, r9
 800ac48:	414b      	adcs	r3, r1
 800ac4a:	617b      	str	r3, [r7, #20]
 800ac4c:	f04f 0200 	mov.w	r2, #0
 800ac50:	f04f 0300 	mov.w	r3, #0
 800ac54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ac58:	4659      	mov	r1, fp
 800ac5a:	00cb      	lsls	r3, r1, #3
 800ac5c:	4651      	mov	r1, sl
 800ac5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ac62:	4651      	mov	r1, sl
 800ac64:	00ca      	lsls	r2, r1, #3
 800ac66:	4610      	mov	r0, r2
 800ac68:	4619      	mov	r1, r3
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	4642      	mov	r2, r8
 800ac6e:	189b      	adds	r3, r3, r2
 800ac70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac74:	464b      	mov	r3, r9
 800ac76:	460a      	mov	r2, r1
 800ac78:	eb42 0303 	adc.w	r3, r2, r3
 800ac7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ac80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	2200      	movs	r2, #0
 800ac88:	67bb      	str	r3, [r7, #120]	; 0x78
 800ac8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ac8c:	f04f 0200 	mov.w	r2, #0
 800ac90:	f04f 0300 	mov.w	r3, #0
 800ac94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ac98:	4649      	mov	r1, r9
 800ac9a:	008b      	lsls	r3, r1, #2
 800ac9c:	4641      	mov	r1, r8
 800ac9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aca2:	4641      	mov	r1, r8
 800aca4:	008a      	lsls	r2, r1, #2
 800aca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800acaa:	f7f5 fffd 	bl	8000ca8 <__aeabi_uldivmod>
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	4b39      	ldr	r3, [pc, #228]	; (800ad98 <UART_SetConfig+0x4e4>)
 800acb4:	fba3 1302 	umull	r1, r3, r3, r2
 800acb8:	095b      	lsrs	r3, r3, #5
 800acba:	2164      	movs	r1, #100	; 0x64
 800acbc:	fb01 f303 	mul.w	r3, r1, r3
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	011b      	lsls	r3, r3, #4
 800acc4:	3332      	adds	r3, #50	; 0x32
 800acc6:	4a34      	ldr	r2, [pc, #208]	; (800ad98 <UART_SetConfig+0x4e4>)
 800acc8:	fba2 2303 	umull	r2, r3, r2, r3
 800accc:	095b      	lsrs	r3, r3, #5
 800acce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800acd2:	441c      	add	r4, r3
 800acd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800acd8:	2200      	movs	r2, #0
 800acda:	673b      	str	r3, [r7, #112]	; 0x70
 800acdc:	677a      	str	r2, [r7, #116]	; 0x74
 800acde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ace2:	4642      	mov	r2, r8
 800ace4:	464b      	mov	r3, r9
 800ace6:	1891      	adds	r1, r2, r2
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	415b      	adcs	r3, r3
 800acec:	60fb      	str	r3, [r7, #12]
 800acee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800acf2:	4641      	mov	r1, r8
 800acf4:	1851      	adds	r1, r2, r1
 800acf6:	6039      	str	r1, [r7, #0]
 800acf8:	4649      	mov	r1, r9
 800acfa:	414b      	adcs	r3, r1
 800acfc:	607b      	str	r3, [r7, #4]
 800acfe:	f04f 0200 	mov.w	r2, #0
 800ad02:	f04f 0300 	mov.w	r3, #0
 800ad06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ad0a:	4659      	mov	r1, fp
 800ad0c:	00cb      	lsls	r3, r1, #3
 800ad0e:	4651      	mov	r1, sl
 800ad10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ad14:	4651      	mov	r1, sl
 800ad16:	00ca      	lsls	r2, r1, #3
 800ad18:	4610      	mov	r0, r2
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	4642      	mov	r2, r8
 800ad20:	189b      	adds	r3, r3, r2
 800ad22:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad24:	464b      	mov	r3, r9
 800ad26:	460a      	mov	r2, r1
 800ad28:	eb42 0303 	adc.w	r3, r2, r3
 800ad2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	2200      	movs	r2, #0
 800ad36:	663b      	str	r3, [r7, #96]	; 0x60
 800ad38:	667a      	str	r2, [r7, #100]	; 0x64
 800ad3a:	f04f 0200 	mov.w	r2, #0
 800ad3e:	f04f 0300 	mov.w	r3, #0
 800ad42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ad46:	4649      	mov	r1, r9
 800ad48:	008b      	lsls	r3, r1, #2
 800ad4a:	4641      	mov	r1, r8
 800ad4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ad50:	4641      	mov	r1, r8
 800ad52:	008a      	lsls	r2, r1, #2
 800ad54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ad58:	f7f5 ffa6 	bl	8000ca8 <__aeabi_uldivmod>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	4b0d      	ldr	r3, [pc, #52]	; (800ad98 <UART_SetConfig+0x4e4>)
 800ad62:	fba3 1302 	umull	r1, r3, r3, r2
 800ad66:	095b      	lsrs	r3, r3, #5
 800ad68:	2164      	movs	r1, #100	; 0x64
 800ad6a:	fb01 f303 	mul.w	r3, r1, r3
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	011b      	lsls	r3, r3, #4
 800ad72:	3332      	adds	r3, #50	; 0x32
 800ad74:	4a08      	ldr	r2, [pc, #32]	; (800ad98 <UART_SetConfig+0x4e4>)
 800ad76:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7a:	095b      	lsrs	r3, r3, #5
 800ad7c:	f003 020f 	and.w	r2, r3, #15
 800ad80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4422      	add	r2, r4
 800ad88:	609a      	str	r2, [r3, #8]
}
 800ad8a:	bf00      	nop
 800ad8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ad90:	46bd      	mov	sp, r7
 800ad92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad96:	bf00      	nop
 800ad98:	51eb851f 	.word	0x51eb851f
 800ad9c:	00000000 	.word	0x00000000

0800ada0 <DCT_Init>:
 *
 * @param      *S    points to an instance of the floating-point DCT structure.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t DCT_Init(DCT_InstanceTypeDef *S)
{
 800ada0:	b5b0      	push	{r4, r5, r7, lr}
 800ada2:	b098      	sub	sp, #96	; 0x60
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  int32_t status;
  uint32_t n_filters = S->NumFilters;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t n_inputs = S->NumInputs;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	623b      	str	r3, [r7, #32]
  float32_t *M = S->pDCTCoefs;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	691b      	ldr	r3, [r3, #16]
 800adb8:	61fb      	str	r3, [r7, #28]
  float64_t normalizer;

  uint32_t shift;

  /* RemoveDCTZero only implemented for DCT Type-III non-normalized with COS tables */
  if (S->RemoveDCTZero != 0)
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00b      	beq.n	800adda <DCT_Init+0x3a>
  {
    if (S->Type != DCT_TYPE_III)
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	7a1b      	ldrb	r3, [r3, #8]
 800adc6:	2b04      	cmp	r3, #4
 800adc8:	d004      	beq.n	800add4 <DCT_Init+0x34>
    {
      status = -1;
 800adca:	f04f 33ff 	mov.w	r3, #4294967295
 800adce:	65fb      	str	r3, [r7, #92]	; 0x5c
      return status;
 800add0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800add2:	e2ae      	b.n	800b332 <DCT_Init+0x592>
    }
    shift = 1;
 800add4:	2301      	movs	r3, #1
 800add6:	65bb      	str	r3, [r7, #88]	; 0x58
 800add8:	e001      	b.n	800adde <DCT_Init+0x3e>
  }
  else
  {
    shift = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	65bb      	str	r3, [r7, #88]	; 0x58
  }

  /* Compute DCT matrix coefficients */
  switch (S->Type)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	7a1b      	ldrb	r3, [r3, #8]
 800ade2:	3b01      	subs	r3, #1
 800ade4:	2b04      	cmp	r3, #4
 800ade6:	f200 829f 	bhi.w	800b328 <DCT_Init+0x588>
 800adea:	a201      	add	r2, pc, #4	; (adr r2, 800adf0 <DCT_Init+0x50>)
 800adec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adf0:	0800ae05 	.word	0x0800ae05
 800adf4:	0800aec7 	.word	0x0800aec7
 800adf8:	0800b01f 	.word	0x0800b01f
 800adfc:	0800b121 	.word	0x0800b121
 800ae00:	0800b1e9 	.word	0x0800b1e9
  {
    case DCT_TYPE_II:
      for (uint32_t i = 0; i < n_filters; i++)
 800ae04:	2300      	movs	r3, #0
 800ae06:	657b      	str	r3, [r7, #84]	; 0x54
 800ae08:	e056      	b.n	800aeb8 <DCT_Init+0x118>
      {
        for (uint32_t j = 0; j < n_inputs; j++)
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	653b      	str	r3, [r7, #80]	; 0x50
 800ae0e:	e04c      	b.n	800aeaa <DCT_Init+0x10a>
        {
          sample = M_PI * (j + 0.5) / n_inputs;
 800ae10:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ae12:	f7f5 fb87 	bl	8000524 <__aeabi_ui2d>
 800ae16:	f04f 0200 	mov.w	r2, #0
 800ae1a:	4bbf      	ldr	r3, [pc, #764]	; (800b118 <DCT_Init+0x378>)
 800ae1c:	f7f5 fa46 	bl	80002ac <__adddf3>
 800ae20:	4602      	mov	r2, r0
 800ae22:	460b      	mov	r3, r1
 800ae24:	4610      	mov	r0, r2
 800ae26:	4619      	mov	r1, r3
 800ae28:	a3b9      	add	r3, pc, #740	; (adr r3, 800b110 <DCT_Init+0x370>)
 800ae2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae2e:	f7f5 fbf3 	bl	8000618 <__aeabi_dmul>
 800ae32:	4602      	mov	r2, r0
 800ae34:	460b      	mov	r3, r1
 800ae36:	4614      	mov	r4, r2
 800ae38:	461d      	mov	r5, r3
 800ae3a:	6a38      	ldr	r0, [r7, #32]
 800ae3c:	f7f5 fb72 	bl	8000524 <__aeabi_ui2d>
 800ae40:	4602      	mov	r2, r0
 800ae42:	460b      	mov	r3, r1
 800ae44:	4620      	mov	r0, r4
 800ae46:	4629      	mov	r1, r5
 800ae48:	f7f5 fd10 	bl	800086c <__aeabi_ddiv>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	460b      	mov	r3, r1
 800ae50:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = 2.0 * cos(sample * i);
 800ae54:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ae56:	f7f5 fb65 	bl	8000524 <__aeabi_ui2d>
 800ae5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ae5e:	f7f5 fbdb 	bl	8000618 <__aeabi_dmul>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	ec43 2b17 	vmov	d7, r2, r3
 800ae6a:	eeb0 0a47 	vmov.f32	s0, s14
 800ae6e:	eef0 0a67 	vmov.f32	s1, s15
 800ae72:	f00b ffa5 	bl	8016dc0 <cos>
 800ae76:	ec51 0b10 	vmov	r0, r1, d0
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	f7f5 fa15 	bl	80002ac <__adddf3>
 800ae82:	4602      	mov	r2, r0
 800ae84:	460b      	mov	r3, r1
 800ae86:	4610      	mov	r0, r2
 800ae88:	4619      	mov	r1, r3
 800ae8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae8c:	6a3a      	ldr	r2, [r7, #32]
 800ae8e:	fb03 f202 	mul.w	r2, r3, r2
 800ae92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ae94:	4413      	add	r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	69fa      	ldr	r2, [r7, #28]
 800ae9a:	18d4      	adds	r4, r2, r3
 800ae9c:	f7f5 feb4 	bl	8000c08 <__aeabi_d2f>
 800aea0:	4603      	mov	r3, r0
 800aea2:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 800aea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aea6:	3301      	adds	r3, #1
 800aea8:	653b      	str	r3, [r7, #80]	; 0x50
 800aeaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d3ae      	bcc.n	800ae10 <DCT_Init+0x70>
      for (uint32_t i = 0; i < n_filters; i++)
 800aeb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	657b      	str	r3, [r7, #84]	; 0x54
 800aeb8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d3a4      	bcc.n	800ae0a <DCT_Init+0x6a>
        }
      }
      status = 0;
 800aec0:	2300      	movs	r3, #0
 800aec2:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800aec4:	e234      	b.n	800b330 <DCT_Init+0x590>

    case DCT_TYPE_II_ORTHO:
      normalizer = 2.0 * sqrt(1.0 / (4 * n_inputs));
 800aec6:	6a3b      	ldr	r3, [r7, #32]
 800aec8:	009b      	lsls	r3, r3, #2
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7f5 fb2a 	bl	8000524 <__aeabi_ui2d>
 800aed0:	4602      	mov	r2, r0
 800aed2:	460b      	mov	r3, r1
 800aed4:	f04f 0000 	mov.w	r0, #0
 800aed8:	4990      	ldr	r1, [pc, #576]	; (800b11c <DCT_Init+0x37c>)
 800aeda:	f7f5 fcc7 	bl	800086c <__aeabi_ddiv>
 800aede:	4602      	mov	r2, r0
 800aee0:	460b      	mov	r3, r1
 800aee2:	ec43 2b17 	vmov	d7, r2, r3
 800aee6:	eeb0 0a47 	vmov.f32	s0, s14
 800aeea:	eef0 0a67 	vmov.f32	s1, s15
 800aeee:	f00c f893 	bl	8017018 <sqrt>
 800aef2:	ec51 0b10 	vmov	r0, r1, d0
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	f7f5 f9d7 	bl	80002ac <__adddf3>
 800aefe:	4602      	mov	r2, r0
 800af00:	460b      	mov	r3, r1
 800af02:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 0; i < n_inputs; i++)
 800af06:	2300      	movs	r3, #0
 800af08:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af0a:	e00c      	b.n	800af26 <DCT_Init+0x186>
      {
        M[i] = normalizer;
 800af0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af0e:	009b      	lsls	r3, r3, #2
 800af10:	69fa      	ldr	r2, [r7, #28]
 800af12:	18d4      	adds	r4, r2, r3
 800af14:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800af18:	f7f5 fe76 	bl	8000c08 <__aeabi_d2f>
 800af1c:	4603      	mov	r3, r0
 800af1e:	6023      	str	r3, [r4, #0]
      for (uint32_t i = 0; i < n_inputs; i++)
 800af20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af22:	3301      	adds	r3, #1
 800af24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d3ee      	bcc.n	800af0c <DCT_Init+0x16c>
      }
      normalizer = 2.0 / sqrt(2 * n_inputs);
 800af2e:	6a3b      	ldr	r3, [r7, #32]
 800af30:	005b      	lsls	r3, r3, #1
 800af32:	4618      	mov	r0, r3
 800af34:	f7f5 faf6 	bl	8000524 <__aeabi_ui2d>
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	ec43 2b10 	vmov	d0, r2, r3
 800af40:	f00c f86a 	bl	8017018 <sqrt>
 800af44:	ec53 2b10 	vmov	r2, r3, d0
 800af48:	f04f 0000 	mov.w	r0, #0
 800af4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800af50:	f7f5 fc8c 	bl	800086c <__aeabi_ddiv>
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 1; i < n_filters; i++)
 800af5c:	2301      	movs	r3, #1
 800af5e:	64bb      	str	r3, [r7, #72]	; 0x48
 800af60:	e056      	b.n	800b010 <DCT_Init+0x270>
      {
        for (uint32_t j = 0; j < n_inputs; j++)
 800af62:	2300      	movs	r3, #0
 800af64:	647b      	str	r3, [r7, #68]	; 0x44
 800af66:	e04c      	b.n	800b002 <DCT_Init+0x262>
        {
          sample = M_PI * (j + 0.5) / n_inputs;
 800af68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800af6a:	f7f5 fadb 	bl	8000524 <__aeabi_ui2d>
 800af6e:	f04f 0200 	mov.w	r2, #0
 800af72:	4b69      	ldr	r3, [pc, #420]	; (800b118 <DCT_Init+0x378>)
 800af74:	f7f5 f99a 	bl	80002ac <__adddf3>
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	4610      	mov	r0, r2
 800af7e:	4619      	mov	r1, r3
 800af80:	a363      	add	r3, pc, #396	; (adr r3, 800b110 <DCT_Init+0x370>)
 800af82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af86:	f7f5 fb47 	bl	8000618 <__aeabi_dmul>
 800af8a:	4602      	mov	r2, r0
 800af8c:	460b      	mov	r3, r1
 800af8e:	4614      	mov	r4, r2
 800af90:	461d      	mov	r5, r3
 800af92:	6a38      	ldr	r0, [r7, #32]
 800af94:	f7f5 fac6 	bl	8000524 <__aeabi_ui2d>
 800af98:	4602      	mov	r2, r0
 800af9a:	460b      	mov	r3, r1
 800af9c:	4620      	mov	r0, r4
 800af9e:	4629      	mov	r1, r5
 800afa0:	f7f5 fc64 	bl	800086c <__aeabi_ddiv>
 800afa4:	4602      	mov	r2, r0
 800afa6:	460b      	mov	r3, r1
 800afa8:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 800afac:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800afae:	f7f5 fab9 	bl	8000524 <__aeabi_ui2d>
 800afb2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800afb6:	f7f5 fb2f 	bl	8000618 <__aeabi_dmul>
 800afba:	4602      	mov	r2, r0
 800afbc:	460b      	mov	r3, r1
 800afbe:	ec43 2b17 	vmov	d7, r2, r3
 800afc2:	eeb0 0a47 	vmov.f32	s0, s14
 800afc6:	eef0 0a67 	vmov.f32	s1, s15
 800afca:	f00b fef9 	bl	8016dc0 <cos>
 800afce:	ec51 0b10 	vmov	r0, r1, d0
 800afd2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800afd6:	f7f5 fb1f 	bl	8000618 <__aeabi_dmul>
 800afda:	4602      	mov	r2, r0
 800afdc:	460b      	mov	r3, r1
 800afde:	4610      	mov	r0, r2
 800afe0:	4619      	mov	r1, r3
 800afe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afe4:	6a3a      	ldr	r2, [r7, #32]
 800afe6:	fb03 f202 	mul.w	r2, r3, r2
 800afea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800afec:	4413      	add	r3, r2
 800afee:	009b      	lsls	r3, r3, #2
 800aff0:	69fa      	ldr	r2, [r7, #28]
 800aff2:	18d4      	adds	r4, r2, r3
 800aff4:	f7f5 fe08 	bl	8000c08 <__aeabi_d2f>
 800aff8:	4603      	mov	r3, r0
 800affa:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 800affc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800affe:	3301      	adds	r3, #1
 800b000:	647b      	str	r3, [r7, #68]	; 0x44
 800b002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b004:	6a3b      	ldr	r3, [r7, #32]
 800b006:	429a      	cmp	r2, r3
 800b008:	d3ae      	bcc.n	800af68 <DCT_Init+0x1c8>
      for (uint32_t i = 1; i < n_filters; i++)
 800b00a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b00c:	3301      	adds	r3, #1
 800b00e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b010:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	429a      	cmp	r2, r3
 800b016:	d3a4      	bcc.n	800af62 <DCT_Init+0x1c2>
        }
      }
      status = 0;
 800b018:	2300      	movs	r3, #0
 800b01a:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800b01c:	e188      	b.n	800b330 <DCT_Init+0x590>

    case DCT_TYPE_II_SCALED:
      normalizer = 2.0 / sqrt(2 * n_inputs);
 800b01e:	6a3b      	ldr	r3, [r7, #32]
 800b020:	005b      	lsls	r3, r3, #1
 800b022:	4618      	mov	r0, r3
 800b024:	f7f5 fa7e 	bl	8000524 <__aeabi_ui2d>
 800b028:	4602      	mov	r2, r0
 800b02a:	460b      	mov	r3, r1
 800b02c:	ec43 2b10 	vmov	d0, r2, r3
 800b030:	f00b fff2 	bl	8017018 <sqrt>
 800b034:	ec53 2b10 	vmov	r2, r3, d0
 800b038:	f04f 0000 	mov.w	r0, #0
 800b03c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b040:	f7f5 fc14 	bl	800086c <__aeabi_ddiv>
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 0; i < n_filters; i++)
 800b04c:	2300      	movs	r3, #0
 800b04e:	643b      	str	r3, [r7, #64]	; 0x40
 800b050:	e056      	b.n	800b100 <DCT_Init+0x360>
      {
        for (uint32_t j = 0; j < n_inputs; j++)
 800b052:	2300      	movs	r3, #0
 800b054:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b056:	e04c      	b.n	800b0f2 <DCT_Init+0x352>
        {
          sample = M_PI * (j + 0.5) / n_inputs;
 800b058:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b05a:	f7f5 fa63 	bl	8000524 <__aeabi_ui2d>
 800b05e:	f04f 0200 	mov.w	r2, #0
 800b062:	4b2d      	ldr	r3, [pc, #180]	; (800b118 <DCT_Init+0x378>)
 800b064:	f7f5 f922 	bl	80002ac <__adddf3>
 800b068:	4602      	mov	r2, r0
 800b06a:	460b      	mov	r3, r1
 800b06c:	4610      	mov	r0, r2
 800b06e:	4619      	mov	r1, r3
 800b070:	a327      	add	r3, pc, #156	; (adr r3, 800b110 <DCT_Init+0x370>)
 800b072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b076:	f7f5 facf 	bl	8000618 <__aeabi_dmul>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	4614      	mov	r4, r2
 800b080:	461d      	mov	r5, r3
 800b082:	6a38      	ldr	r0, [r7, #32]
 800b084:	f7f5 fa4e 	bl	8000524 <__aeabi_ui2d>
 800b088:	4602      	mov	r2, r0
 800b08a:	460b      	mov	r3, r1
 800b08c:	4620      	mov	r0, r4
 800b08e:	4629      	mov	r1, r5
 800b090:	f7f5 fbec 	bl	800086c <__aeabi_ddiv>
 800b094:	4602      	mov	r2, r0
 800b096:	460b      	mov	r3, r1
 800b098:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = normalizer * cos(sample * i);
 800b09c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800b09e:	f7f5 fa41 	bl	8000524 <__aeabi_ui2d>
 800b0a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b0a6:	f7f5 fab7 	bl	8000618 <__aeabi_dmul>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	460b      	mov	r3, r1
 800b0ae:	ec43 2b17 	vmov	d7, r2, r3
 800b0b2:	eeb0 0a47 	vmov.f32	s0, s14
 800b0b6:	eef0 0a67 	vmov.f32	s1, s15
 800b0ba:	f00b fe81 	bl	8016dc0 <cos>
 800b0be:	ec51 0b10 	vmov	r0, r1, d0
 800b0c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b0c6:	f7f5 faa7 	bl	8000618 <__aeabi_dmul>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	4610      	mov	r0, r2
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0d4:	6a3a      	ldr	r2, [r7, #32]
 800b0d6:	fb03 f202 	mul.w	r2, r3, r2
 800b0da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0dc:	4413      	add	r3, r2
 800b0de:	009b      	lsls	r3, r3, #2
 800b0e0:	69fa      	ldr	r2, [r7, #28]
 800b0e2:	18d4      	adds	r4, r2, r3
 800b0e4:	f7f5 fd90 	bl	8000c08 <__aeabi_d2f>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 800b0ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ee:	3301      	adds	r3, #1
 800b0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b0f4:	6a3b      	ldr	r3, [r7, #32]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d3ae      	bcc.n	800b058 <DCT_Init+0x2b8>
      for (uint32_t i = 0; i < n_filters; i++)
 800b0fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	643b      	str	r3, [r7, #64]	; 0x40
 800b100:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	429a      	cmp	r2, r3
 800b106:	d3a4      	bcc.n	800b052 <DCT_Init+0x2b2>
        }
      }
      status = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800b10c:	e110      	b.n	800b330 <DCT_Init+0x590>
 800b10e:	bf00      	nop
 800b110:	54442d18 	.word	0x54442d18
 800b114:	400921fb 	.word	0x400921fb
 800b118:	3fe00000 	.word	0x3fe00000
 800b11c:	3ff00000 	.word	0x3ff00000

    case DCT_TYPE_III:
      for (uint32_t i = 0; i < n_filters; i++)
 800b120:	2300      	movs	r3, #0
 800b122:	63bb      	str	r3, [r7, #56]	; 0x38
 800b124:	e059      	b.n	800b1da <DCT_Init+0x43a>
      {
        sample = M_PI * (i + shift + 0.5) / n_inputs;
 800b126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b128:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b12a:	4413      	add	r3, r2
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7f5 f9f9 	bl	8000524 <__aeabi_ui2d>
 800b132:	f04f 0200 	mov.w	r2, #0
 800b136:	4b84      	ldr	r3, [pc, #528]	; (800b348 <DCT_Init+0x5a8>)
 800b138:	f7f5 f8b8 	bl	80002ac <__adddf3>
 800b13c:	4602      	mov	r2, r0
 800b13e:	460b      	mov	r3, r1
 800b140:	4610      	mov	r0, r2
 800b142:	4619      	mov	r1, r3
 800b144:	a37e      	add	r3, pc, #504	; (adr r3, 800b340 <DCT_Init+0x5a0>)
 800b146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14a:	f7f5 fa65 	bl	8000618 <__aeabi_dmul>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4614      	mov	r4, r2
 800b154:	461d      	mov	r5, r3
 800b156:	6a38      	ldr	r0, [r7, #32]
 800b158:	f7f5 f9e4 	bl	8000524 <__aeabi_ui2d>
 800b15c:	4602      	mov	r2, r0
 800b15e:	460b      	mov	r3, r1
 800b160:	4620      	mov	r0, r4
 800b162:	4629      	mov	r1, r5
 800b164:	f7f5 fb82 	bl	800086c <__aeabi_ddiv>
 800b168:	4602      	mov	r2, r0
 800b16a:	460b      	mov	r3, r1
 800b16c:	e9c7 2302 	strd	r2, r3, [r7, #8]
        for (uint32_t j = 0; j < n_inputs; j++)
 800b170:	2300      	movs	r3, #0
 800b172:	637b      	str	r3, [r7, #52]	; 0x34
 800b174:	e02a      	b.n	800b1cc <DCT_Init+0x42c>
        {
          M[i * n_inputs + j] = 2.0 * cos(sample * j);
 800b176:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b178:	f7f5 f9d4 	bl	8000524 <__aeabi_ui2d>
 800b17c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b180:	f7f5 fa4a 	bl	8000618 <__aeabi_dmul>
 800b184:	4602      	mov	r2, r0
 800b186:	460b      	mov	r3, r1
 800b188:	ec43 2b17 	vmov	d7, r2, r3
 800b18c:	eeb0 0a47 	vmov.f32	s0, s14
 800b190:	eef0 0a67 	vmov.f32	s1, s15
 800b194:	f00b fe14 	bl	8016dc0 <cos>
 800b198:	ec51 0b10 	vmov	r0, r1, d0
 800b19c:	4602      	mov	r2, r0
 800b19e:	460b      	mov	r3, r1
 800b1a0:	f7f5 f884 	bl	80002ac <__adddf3>
 800b1a4:	4602      	mov	r2, r0
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	4610      	mov	r0, r2
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	6a3a      	ldr	r2, [r7, #32]
 800b1b0:	fb03 f202 	mul.w	r2, r3, r2
 800b1b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1b6:	4413      	add	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	69fa      	ldr	r2, [r7, #28]
 800b1bc:	18d4      	adds	r4, r2, r3
 800b1be:	f7f5 fd23 	bl	8000c08 <__aeabi_d2f>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 0; j < n_inputs; j++)
 800b1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1c8:	3301      	adds	r3, #1
 800b1ca:	637b      	str	r3, [r7, #52]	; 0x34
 800b1cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b1ce:	6a3b      	ldr	r3, [r7, #32]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d3d0      	bcc.n	800b176 <DCT_Init+0x3d6>
      for (uint32_t i = 0; i < n_filters; i++)
 800b1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d3a1      	bcc.n	800b126 <DCT_Init+0x386>
        }
      }
      status = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800b1e6:	e0a3      	b.n	800b330 <DCT_Init+0x590>

    case DCT_TYPE_III_ORTHO:
      normalizer = 1.0 / sqrt(n_inputs);
 800b1e8:	6a38      	ldr	r0, [r7, #32]
 800b1ea:	f7f5 f99b 	bl	8000524 <__aeabi_ui2d>
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	ec43 2b10 	vmov	d0, r2, r3
 800b1f6:	f00b ff0f 	bl	8017018 <sqrt>
 800b1fa:	ec53 2b10 	vmov	r2, r3, d0
 800b1fe:	f04f 0000 	mov.w	r0, #0
 800b202:	4952      	ldr	r1, [pc, #328]	; (800b34c <DCT_Init+0x5ac>)
 800b204:	f7f5 fb32 	bl	800086c <__aeabi_ddiv>
 800b208:	4602      	mov	r2, r0
 800b20a:	460b      	mov	r3, r1
 800b20c:	e9c7 2304 	strd	r2, r3, [r7, #16]
      for (uint32_t i = 0; i < n_inputs; i++)
 800b210:	2300      	movs	r3, #0
 800b212:	633b      	str	r3, [r7, #48]	; 0x30
 800b214:	e00c      	b.n	800b230 <DCT_Init+0x490>
      {
        M[i] = normalizer;
 800b216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b218:	009b      	lsls	r3, r3, #2
 800b21a:	69fa      	ldr	r2, [r7, #28]
 800b21c:	18d4      	adds	r4, r2, r3
 800b21e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800b222:	f7f5 fcf1 	bl	8000c08 <__aeabi_d2f>
 800b226:	4603      	mov	r3, r0
 800b228:	6023      	str	r3, [r4, #0]
      for (uint32_t i = 0; i < n_inputs; i++)
 800b22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b22c:	3301      	adds	r3, #1
 800b22e:	633b      	str	r3, [r7, #48]	; 0x30
 800b230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b232:	6a3b      	ldr	r3, [r7, #32]
 800b234:	429a      	cmp	r2, r3
 800b236:	d3ee      	bcc.n	800b216 <DCT_Init+0x476>
      }
      normalizer = sqrt(2.0 / n_inputs);
 800b238:	6a38      	ldr	r0, [r7, #32]
 800b23a:	f7f5 f973 	bl	8000524 <__aeabi_ui2d>
 800b23e:	4602      	mov	r2, r0
 800b240:	460b      	mov	r3, r1
 800b242:	f04f 0000 	mov.w	r0, #0
 800b246:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b24a:	f7f5 fb0f 	bl	800086c <__aeabi_ddiv>
 800b24e:	4602      	mov	r2, r0
 800b250:	460b      	mov	r3, r1
 800b252:	ec43 2b17 	vmov	d7, r2, r3
 800b256:	eeb0 0a47 	vmov.f32	s0, s14
 800b25a:	eef0 0a67 	vmov.f32	s1, s15
 800b25e:	f00b fedb 	bl	8017018 <sqrt>
 800b262:	ed87 0b04 	vstr	d0, [r7, #16]
      for (uint32_t i = 0; i < n_filters; i++)
 800b266:	2300      	movs	r3, #0
 800b268:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b26a:	e056      	b.n	800b31a <DCT_Init+0x57a>
      {
        for (uint32_t j = 1; j < n_inputs; j++)
 800b26c:	2301      	movs	r3, #1
 800b26e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b270:	e04c      	b.n	800b30c <DCT_Init+0x56c>
        {
          sample = M_PI * (i + 0.5) / n_inputs;
 800b272:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b274:	f7f5 f956 	bl	8000524 <__aeabi_ui2d>
 800b278:	f04f 0200 	mov.w	r2, #0
 800b27c:	4b32      	ldr	r3, [pc, #200]	; (800b348 <DCT_Init+0x5a8>)
 800b27e:	f7f5 f815 	bl	80002ac <__adddf3>
 800b282:	4602      	mov	r2, r0
 800b284:	460b      	mov	r3, r1
 800b286:	4610      	mov	r0, r2
 800b288:	4619      	mov	r1, r3
 800b28a:	a32d      	add	r3, pc, #180	; (adr r3, 800b340 <DCT_Init+0x5a0>)
 800b28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b290:	f7f5 f9c2 	bl	8000618 <__aeabi_dmul>
 800b294:	4602      	mov	r2, r0
 800b296:	460b      	mov	r3, r1
 800b298:	4614      	mov	r4, r2
 800b29a:	461d      	mov	r5, r3
 800b29c:	6a38      	ldr	r0, [r7, #32]
 800b29e:	f7f5 f941 	bl	8000524 <__aeabi_ui2d>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	460b      	mov	r3, r1
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	f7f5 fadf 	bl	800086c <__aeabi_ddiv>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
          M[i * n_inputs + j] = cos(sample * j) * normalizer;
 800b2b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2b8:	f7f5 f934 	bl	8000524 <__aeabi_ui2d>
 800b2bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b2c0:	f7f5 f9aa 	bl	8000618 <__aeabi_dmul>
 800b2c4:	4602      	mov	r2, r0
 800b2c6:	460b      	mov	r3, r1
 800b2c8:	ec43 2b17 	vmov	d7, r2, r3
 800b2cc:	eeb0 0a47 	vmov.f32	s0, s14
 800b2d0:	eef0 0a67 	vmov.f32	s1, s15
 800b2d4:	f00b fd74 	bl	8016dc0 <cos>
 800b2d8:	ec51 0b10 	vmov	r0, r1, d0
 800b2dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b2e0:	f7f5 f99a 	bl	8000618 <__aeabi_dmul>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	460b      	mov	r3, r1
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ee:	6a3a      	ldr	r2, [r7, #32]
 800b2f0:	fb03 f202 	mul.w	r2, r3, r2
 800b2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f6:	4413      	add	r3, r2
 800b2f8:	009b      	lsls	r3, r3, #2
 800b2fa:	69fa      	ldr	r2, [r7, #28]
 800b2fc:	18d4      	adds	r4, r2, r3
 800b2fe:	f7f5 fc83 	bl	8000c08 <__aeabi_d2f>
 800b302:	4603      	mov	r3, r0
 800b304:	6023      	str	r3, [r4, #0]
        for (uint32_t j = 1; j < n_inputs; j++)
 800b306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b308:	3301      	adds	r3, #1
 800b30a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b30c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b30e:	6a3b      	ldr	r3, [r7, #32]
 800b310:	429a      	cmp	r2, r3
 800b312:	d3ae      	bcc.n	800b272 <DCT_Init+0x4d2>
      for (uint32_t i = 0; i < n_filters; i++)
 800b314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b316:	3301      	adds	r3, #1
 800b318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b31a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	429a      	cmp	r2, r3
 800b320:	d3a4      	bcc.n	800b26c <DCT_Init+0x4cc>
        }
      }
      status = 0;
 800b322:	2300      	movs	r3, #0
 800b324:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800b326:	e003      	b.n	800b330 <DCT_Init+0x590>

    default:
      /* Other DCT types not implemented or unsupported */
      status = -1;
 800b328:	f04f 33ff 	mov.w	r3, #4294967295
 800b32c:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 800b32e:	bf00      	nop
  }

  return status;
 800b330:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800b332:	4618      	mov	r0, r3
 800b334:	3760      	adds	r7, #96	; 0x60
 800b336:	46bd      	mov	sp, r7
 800b338:	bdb0      	pop	{r4, r5, r7, pc}
 800b33a:	bf00      	nop
 800b33c:	f3af 8000 	nop.w
 800b340:	54442d18 	.word	0x54442d18
 800b344:	400921fb 	.word	0x400921fb
 800b348:	3fe00000 	.word	0x3fe00000
 800b34c:	3ff00000 	.word	0x3ff00000

0800b350 <DCT>:
 * @param      *pIn  points to state buffer.
 * @param      *pOut points to the output buffer.
 * @return none.
 */
void DCT(DCT_InstanceTypeDef *S, float32_t *pIn, float32_t *pOut)
{
 800b350:	b480      	push	{r7}
 800b352:	b095      	sub	sp, #84	; 0x54
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	60b9      	str	r1, [r7, #8]
 800b35a:	607a      	str	r2, [r7, #4]
  float32_t sum;
  uint32_t n_inputs = S->NumInputs;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	685b      	ldr	r3, [r3, #4]
 800b360:	61fb      	str	r3, [r7, #28]
  uint32_t n_filters = S->NumFilters;
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	61bb      	str	r3, [r7, #24]

#ifndef USE_NAIVE_DCT
  float32_t *cosFact = S->pDCTCoefs;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	617b      	str	r3, [r7, #20]
#else
  float32_t normalizer;
#endif /* USE_NAIVE_DCT */

  /* Compute DCT matrix coefficients */
  switch (S->Type)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	7a1b      	ldrb	r3, [r3, #8]
 800b372:	3b01      	subs	r3, #1
 800b374:	2b04      	cmp	r3, #4
 800b376:	f200 8175 	bhi.w	800b664 <DCT+0x314>
 800b37a:	a201      	add	r2, pc, #4	; (adr r2, 800b380 <DCT+0x30>)
 800b37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b380:	0800b395 	.word	0x0800b395
 800b384:	0800b413 	.word	0x0800b413
 800b388:	0800b4d7 	.word	0x0800b4d7
 800b38c:	0800b555 	.word	0x0800b555
 800b390:	0800b5d5 	.word	0x0800b5d5
          sum += pIn[n] * cos(M_PI * k * (n + 0.5) / n_inputs);
        }
        pOut[k] = 2.0f * sum;
      }
    #else
      for (uint32_t k = 0; k < n_filters; k++)
 800b394:	2300      	movs	r3, #0
 800b396:	64bb      	str	r3, [r7, #72]	; 0x48
 800b398:	e036      	b.n	800b408 <DCT+0xb8>
      {
        pOut[k] = 0.0f;
 800b39a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b39c:	009b      	lsls	r3, r3, #2
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	4413      	add	r3, r2
 800b3a2:	f04f 0200 	mov.w	r2, #0
 800b3a6:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 800b3a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3aa:	69fa      	ldr	r2, [r7, #28]
 800b3ac:	fb02 f303 	mul.w	r3, r2, r3
 800b3b0:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 0; n < n_inputs; n++)
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	647b      	str	r3, [r7, #68]	; 0x44
 800b3b6:	e020      	b.n	800b3fa <DCT+0xaa>
        {
          // pOut[k] += pIn[n] * 2.0f * cos(M_PI * k * (n + 0.5) / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 800b3b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ba:	009b      	lsls	r3, r3, #2
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	4413      	add	r3, r2
 800b3c0:	ed93 7a00 	vldr	s14, [r3]
 800b3c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	68ba      	ldr	r2, [r7, #8]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	edd3 6a00 	vldr	s13, [r3]
 800b3d0:	693a      	ldr	r2, [r7, #16]
 800b3d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3d4:	4413      	add	r3, r2
 800b3d6:	009b      	lsls	r3, r3, #2
 800b3d8:	697a      	ldr	r2, [r7, #20]
 800b3da:	4413      	add	r3, r2
 800b3dc:	edd3 7a00 	vldr	s15, [r3]
 800b3e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b3e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b3f0:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 0; n < n_inputs; n++)
 800b3f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	647b      	str	r3, [r7, #68]	; 0x44
 800b3fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3fc:	69fb      	ldr	r3, [r7, #28]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d3da      	bcc.n	800b3b8 <DCT+0x68>
      for (uint32_t k = 0; k < n_filters; k++)
 800b402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b404:	3301      	adds	r3, #1
 800b406:	64bb      	str	r3, [r7, #72]	; 0x48
 800b408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b40a:	69bb      	ldr	r3, [r7, #24]
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d3c4      	bcc.n	800b39a <DCT+0x4a>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 800b410:	e129      	b.n	800b666 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * k * (n + 0.5) / n_inputs);
        }
        pOut[k] = normalizer * 2.0f * sum;
      }
    #else
      sum = 0.0f;
 800b412:	f04f 0300 	mov.w	r3, #0
 800b416:	64fb      	str	r3, [r7, #76]	; 0x4c
      for (uint32_t n = 0; n < n_inputs; n++)
 800b418:	2300      	movs	r3, #0
 800b41a:	643b      	str	r3, [r7, #64]	; 0x40
 800b41c:	e00e      	b.n	800b43c <DCT+0xec>
      {
        sum += pIn[n];
 800b41e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	68ba      	ldr	r2, [r7, #8]
 800b424:	4413      	add	r3, r2
 800b426:	edd3 7a00 	vldr	s15, [r3]
 800b42a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b42e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b432:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      for (uint32_t n = 0; n < n_inputs; n++)
 800b436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b438:	3301      	adds	r3, #1
 800b43a:	643b      	str	r3, [r7, #64]	; 0x40
 800b43c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	429a      	cmp	r2, r3
 800b442:	d3ec      	bcc.n	800b41e <DCT+0xce>
      }
      pOut[0] = cosFact[0] * sum;
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	ed93 7a00 	vldr	s14, [r3]
 800b44a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	edc3 7a00 	vstr	s15, [r3]
      for (uint32_t k = 1; k < n_filters; k++)
 800b458:	2301      	movs	r3, #1
 800b45a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b45c:	e036      	b.n	800b4cc <DCT+0x17c>
      {
        pOut[k] = 0.0f;
 800b45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b460:	009b      	lsls	r3, r3, #2
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	4413      	add	r3, r2
 800b466:	f04f 0200 	mov.w	r2, #0
 800b46a:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 800b46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b46e:	69fa      	ldr	r2, [r7, #28]
 800b470:	fb02 f303 	mul.w	r3, r2, r3
 800b474:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 0; n < n_inputs; n++)
 800b476:	2300      	movs	r3, #0
 800b478:	63bb      	str	r3, [r7, #56]	; 0x38
 800b47a:	e020      	b.n	800b4be <DCT+0x16e>
        {
          // pOut[k] += 2.0f / sqrtf(2 * n_inputs) * pIn[n] * cosf(M_PI * k * (n + 0.5) / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 800b47c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b47e:	009b      	lsls	r3, r3, #2
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	4413      	add	r3, r2
 800b484:	ed93 7a00 	vldr	s14, [r3]
 800b488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48a:	009b      	lsls	r3, r3, #2
 800b48c:	68ba      	ldr	r2, [r7, #8]
 800b48e:	4413      	add	r3, r2
 800b490:	edd3 6a00 	vldr	s13, [r3]
 800b494:	693a      	ldr	r2, [r7, #16]
 800b496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b498:	4413      	add	r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	697a      	ldr	r2, [r7, #20]
 800b49e:	4413      	add	r3, r2
 800b4a0:	edd3 7a00 	vldr	s15, [r3]
 800b4a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4aa:	009b      	lsls	r3, r3, #2
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b4b4:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 0; n < n_inputs; n++)
 800b4b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d3da      	bcc.n	800b47c <DCT+0x12c>
      for (uint32_t k = 1; k < n_filters; k++)
 800b4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4c8:	3301      	adds	r3, #1
 800b4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d3c4      	bcc.n	800b45e <DCT+0x10e>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 800b4d4:	e0c7      	b.n	800b666 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * k * (n + 0.5) / n_inputs);
        }
        pOut[k] = normalizer * sum;
      }
    #else
      for (uint32_t k = 0; k < n_filters; k++)
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	637b      	str	r3, [r7, #52]	; 0x34
 800b4da:	e036      	b.n	800b54a <DCT+0x1fa>
      {
        pOut[k] = 0.0f;
 800b4dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	f04f 0200 	mov.w	r2, #0
 800b4e8:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 800b4ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ec:	69fa      	ldr	r2, [r7, #28]
 800b4ee:	fb02 f303 	mul.w	r3, r2, r3
 800b4f2:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 0; n < n_inputs; n++)
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	633b      	str	r3, [r7, #48]	; 0x30
 800b4f8:	e020      	b.n	800b53c <DCT+0x1ec>
        {
          // pOut[k] += pIn[n] * 2.0f * cos(M_PI * k * (n + 0.5) / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 800b4fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	687a      	ldr	r2, [r7, #4]
 800b500:	4413      	add	r3, r2
 800b502:	ed93 7a00 	vldr	s14, [r3]
 800b506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	4413      	add	r3, r2
 800b50e:	edd3 6a00 	vldr	s13, [r3]
 800b512:	693a      	ldr	r2, [r7, #16]
 800b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b516:	4413      	add	r3, r2
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	697a      	ldr	r2, [r7, #20]
 800b51c:	4413      	add	r3, r2
 800b51e:	edd3 7a00 	vldr	s15, [r3]
 800b522:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	4413      	add	r3, r2
 800b52e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b532:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 0; n < n_inputs; n++)
 800b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b538:	3301      	adds	r3, #1
 800b53a:	633b      	str	r3, [r7, #48]	; 0x30
 800b53c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	429a      	cmp	r2, r3
 800b542:	d3da      	bcc.n	800b4fa <DCT+0x1aa>
      for (uint32_t k = 0; k < n_filters; k++)
 800b544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b546:	3301      	adds	r3, #1
 800b548:	637b      	str	r3, [r7, #52]	; 0x34
 800b54a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d3c4      	bcc.n	800b4dc <DCT+0x18c>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 800b552:	e088      	b.n	800b666 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
        }
        pOut[k] = pIn[0] + 2.0f * sum;
      }
    #else
      for (uint32_t k = 0; k < n_filters; k++)
 800b554:	2300      	movs	r3, #0
 800b556:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b558:	e037      	b.n	800b5ca <DCT+0x27a>
      {
        sum = 0.0f;
 800b55a:	f04f 0300 	mov.w	r3, #0
 800b55e:	64fb      	str	r3, [r7, #76]	; 0x4c
        row = k * n_inputs;
 800b560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b562:	69fa      	ldr	r2, [r7, #28]
 800b564:	fb02 f303 	mul.w	r3, r2, r3
 800b568:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 1; n < n_inputs; n++)
 800b56a:	2301      	movs	r3, #1
 800b56c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b56e:	e018      	b.n	800b5a2 <DCT+0x252>
        {
          // sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
          sum += pIn[n] * cosFact[row + n];
 800b570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	68ba      	ldr	r2, [r7, #8]
 800b576:	4413      	add	r3, r2
 800b578:	ed93 7a00 	vldr	s14, [r3]
 800b57c:	693a      	ldr	r2, [r7, #16]
 800b57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b580:	4413      	add	r3, r2
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	697a      	ldr	r2, [r7, #20]
 800b586:	4413      	add	r3, r2
 800b588:	edd3 7a00 	vldr	s15, [r3]
 800b58c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b590:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b594:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b598:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        for (uint32_t n = 1; n < n_inputs; n++)
 800b59c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59e:	3301      	adds	r3, #1
 800b5a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5a4:	69fb      	ldr	r3, [r7, #28]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d3e2      	bcc.n	800b570 <DCT+0x220>
        }
        pOut[k] = pIn[0] + sum;
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	ed93 7a00 	vldr	s14, [r3]
 800b5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 800b5bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5c0:	edc3 7a00 	vstr	s15, [r3]
      for (uint32_t k = 0; k < n_filters; k++)
 800b5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5c6:	3301      	adds	r3, #1
 800b5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	429a      	cmp	r2, r3
 800b5d0:	d3c3      	bcc.n	800b55a <DCT+0x20a>
      }
    #endif /* USE_NAIVE_DCT */
      break;
 800b5d2:	e048      	b.n	800b666 <DCT+0x316>
          sum += pIn[n] * cos(M_PI * (k + 0.5) * n / n_inputs);
        }
        pOut[k] = pIn[0] / sqrtf(n_inputs) + sqrtf(2.0 / n_inputs) * sum;
      }
    #else
      sum = pIn[0] * cosFact[0];
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	ed93 7a00 	vldr	s14, [r3]
 800b5da:	697b      	ldr	r3, [r7, #20]
 800b5dc:	edd3 7a00 	vldr	s15, [r3]
 800b5e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
      for (uint32_t k = 0; k < n_filters; k++)
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b5ec:	e035      	b.n	800b65a <DCT+0x30a>
      {
        pOut[k] = sum;
 800b5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	687a      	ldr	r2, [r7, #4]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b5f8:	601a      	str	r2, [r3, #0]
        row = k * n_inputs;
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	69fa      	ldr	r2, [r7, #28]
 800b5fe:	fb02 f303 	mul.w	r3, r2, r3
 800b602:	613b      	str	r3, [r7, #16]
        for (uint32_t n = 1; n < n_inputs; n++)
 800b604:	2301      	movs	r3, #1
 800b606:	623b      	str	r3, [r7, #32]
 800b608:	e020      	b.n	800b64c <DCT+0x2fc>
        {
          // pOut[k] += pIn[n] * sqrtf(2.0 / n_inputs) * cos(M_PI * (k + 0.5) * n / n_inputs);
          pOut[k] += pIn[n] * cosFact[row + n];
 800b60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60c:	009b      	lsls	r3, r3, #2
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	4413      	add	r3, r2
 800b612:	ed93 7a00 	vldr	s14, [r3]
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	68ba      	ldr	r2, [r7, #8]
 800b61c:	4413      	add	r3, r2
 800b61e:	edd3 6a00 	vldr	s13, [r3]
 800b622:	693a      	ldr	r2, [r7, #16]
 800b624:	6a3b      	ldr	r3, [r7, #32]
 800b626:	4413      	add	r3, r2
 800b628:	009b      	lsls	r3, r3, #2
 800b62a:	697a      	ldr	r2, [r7, #20]
 800b62c:	4413      	add	r3, r2
 800b62e:	edd3 7a00 	vldr	s15, [r3]
 800b632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	4413      	add	r3, r2
 800b63e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b642:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t n = 1; n < n_inputs; n++)
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	3301      	adds	r3, #1
 800b64a:	623b      	str	r3, [r7, #32]
 800b64c:	6a3a      	ldr	r2, [r7, #32]
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	429a      	cmp	r2, r3
 800b652:	d3da      	bcc.n	800b60a <DCT+0x2ba>
      for (uint32_t k = 0; k < n_filters; k++)
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	3301      	adds	r3, #1
 800b658:	627b      	str	r3, [r7, #36]	; 0x24
 800b65a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b65c:	69bb      	ldr	r3, [r7, #24]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d3c5      	bcc.n	800b5ee <DCT+0x29e>
        }
      }
    #endif /* USE_NAIVE_DCT */
      break;
 800b662:	e000      	b.n	800b666 <DCT+0x316>

    default:
      break;
 800b664:	bf00      	nop
  }
}
 800b666:	bf00      	nop
 800b668:	3754      	adds	r7, #84	; 0x54
 800b66a:	46bd      	mov	sp, r7
 800b66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b670:	4770      	bx	lr
 800b672:	bf00      	nop

0800b674 <buf_to_float_normed>:
 * @param      *pInSignal   points to input signal buffer
 * @param      *pOutSignal  points to output signal buffer
 * @param      len          signal length
 */
void buf_to_float_normed(int16_t *pInSignal, float32_t *pOutSignal, uint32_t len)
{
 800b674:	b480      	push	{r7}
 800b676:	b087      	sub	sp, #28
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	607a      	str	r2, [r7, #4]
  for (uint32_t i = 0; i < len; i++)
 800b680:	2300      	movs	r3, #0
 800b682:	617b      	str	r3, [r7, #20]
 800b684:	e016      	b.n	800b6b4 <buf_to_float_normed+0x40>
  {
    pOutSignal[i] = (float32_t) pInSignal[i] / (1 << 15);
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	68fa      	ldr	r2, [r7, #12]
 800b68c:	4413      	add	r3, r2
 800b68e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b692:	ee07 3a90 	vmov	s15, r3
 800b696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	68ba      	ldr	r2, [r7, #8]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800b6cc <buf_to_float_normed+0x58>
 800b6a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6aa:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < len; i++)
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	617b      	str	r3, [r7, #20]
 800b6b4:	697a      	ldr	r2, [r7, #20]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d3e4      	bcc.n	800b686 <buf_to_float_normed+0x12>
  }
}
 800b6bc:	bf00      	nop
 800b6be:	bf00      	nop
 800b6c0:	371c      	adds	r7, #28
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	47000000 	.word	0x47000000

0800b6d0 <SpectrogramColumn>:
 * @param      *pInSignal  points to the in-place input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Spectrogram column.
 * @return     None
 */
void SpectrogramColumn(SpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b08c      	sub	sp, #48	; 0x30
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	60f8      	str	r0, [r7, #12]
 800b6d8:	60b9      	str	r1, [r7, #8]
 800b6da:	607a      	str	r2, [r7, #4]
  uint32_t frame_len = S->FrameLen;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t n_fft = S->FFTLen;
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	695b      	ldr	r3, [r3, #20]
 800b6e6:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *scratch_buffer = S->pScratch;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	699b      	ldr	r3, [r3, #24]
 800b6ec:	623b      	str	r3, [r7, #32]
  float32_t first_energy;
  float32_t last_energy;

  /* In-place window application (on signal length, not entire n_fft) */
  /* @note: OK to typecast because hannWin content is not modified */
  arm_mult_f32(pInSignal, S->pWindow, pInSignal, frame_len);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	6899      	ldr	r1, [r3, #8]
 800b6f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6f4:	68ba      	ldr	r2, [r7, #8]
 800b6f6:	68b8      	ldr	r0, [r7, #8]
 800b6f8:	f7f7 fe9a 	bl	8003430 <arm_mult_f32>

  /* Zero pad if signal frame length is shorter than n_fft */
  memset(&pInSignal[frame_len], 0, n_fft - frame_len);
 800b6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6fe:	009b      	lsls	r3, r3, #2
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	18d0      	adds	r0, r2, r3
 800b704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b708:	1ad3      	subs	r3, r2, r3
 800b70a:	461a      	mov	r2, r3
 800b70c:	2100      	movs	r1, #0
 800b70e:	f006 fd89 	bl	8012224 <memset>

  /* FFT */
  arm_rfft_fast_f32(S->pRfft, pInSignal, scratch_buffer, 0);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	6818      	ldr	r0, [r3, #0]
 800b716:	2300      	movs	r3, #0
 800b718:	6a3a      	ldr	r2, [r7, #32]
 800b71a:	68b9      	ldr	r1, [r7, #8]
 800b71c:	f7fa fa98 	bl	8005c50 <arm_rfft_fast_f32>

  /* Power spectrum */
  first_energy = scratch_buffer[0] * scratch_buffer[0];
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	ed93 7a00 	vldr	s14, [r3]
 800b726:	6a3b      	ldr	r3, [r7, #32]
 800b728:	edd3 7a00 	vldr	s15, [r3]
 800b72c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b730:	edc7 7a07 	vstr	s15, [r7, #28]
  last_energy = scratch_buffer[1] * scratch_buffer[1];
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	3304      	adds	r3, #4
 800b738:	ed93 7a00 	vldr	s14, [r3]
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	3304      	adds	r3, #4
 800b740:	edd3 7a00 	vldr	s15, [r3]
 800b744:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b748:	edc7 7a06 	vstr	s15, [r7, #24]
  pOutCol[0] = first_energy;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	69fa      	ldr	r2, [r7, #28]
 800b750:	601a      	str	r2, [r3, #0]
  arm_cmplx_mag_squared_f32(&scratch_buffer[2], &pOutCol[1], (n_fft / 2) - 1);
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	f103 0008 	add.w	r0, r3, #8
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	1d19      	adds	r1, r3, #4
 800b75c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b75e:	085b      	lsrs	r3, r3, #1
 800b760:	3b01      	subs	r3, #1
 800b762:	461a      	mov	r2, r3
 800b764:	f7f7 fe8c 	bl	8003480 <arm_cmplx_mag_squared_f32>
  pOutCol[n_fft / 2] = last_energy;
 800b768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76a:	085b      	lsrs	r3, r3, #1
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	687a      	ldr	r2, [r7, #4]
 800b770:	4413      	add	r3, r2
 800b772:	69ba      	ldr	r2, [r7, #24]
 800b774:	601a      	str	r2, [r3, #0]

  /* Magnitude spectrum */
  if (S->Type == SPECTRUM_TYPE_MAGNITUDE)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	791b      	ldrb	r3, [r3, #4]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d12c      	bne.n	800b7d8 <SpectrogramColumn+0x108>
  {
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 800b77e:	2300      	movs	r3, #0
 800b780:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b782:	e023      	b.n	800b7cc <SpectrogramColumn+0xfc>
    {
      arm_sqrt_f32(pOutCol[i], &pOutCol[i]);
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	009b      	lsls	r3, r3, #2
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	4413      	add	r3, r2
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	6879      	ldr	r1, [r7, #4]
 800b794:	440b      	add	r3, r1
 800b796:	617a      	str	r2, [r7, #20]
 800b798:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  const float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 800b79a:	edd7 7a05 	vldr	s15, [r7, #20]
 800b79e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a6:	db09      	blt.n	800b7bc <SpectrogramColumn+0xec>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 800b7a8:	ed97 0a05 	vldr	s0, [r7, #20]
 800b7ac:	f00b fd4a 	bl	8017244 <sqrtf>
 800b7b0:	eef0 7a40 	vmov.f32	s15, s0
 800b7b4:	693b      	ldr	r3, [r7, #16]
 800b7b6:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 800b7ba:	e004      	b.n	800b7c6 <SpectrogramColumn+0xf6>
    }
    else
    {
      *pOut = 0.0f;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	f04f 0200 	mov.w	r2, #0
 800b7c2:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800b7c4:	bf00      	nop
    for (uint32_t i = 0; i < (n_fft / 2) + 1; i++)
 800b7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ce:	085b      	lsrs	r3, r3, #1
 800b7d0:	3301      	adds	r3, #1
 800b7d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d3d5      	bcc.n	800b784 <SpectrogramColumn+0xb4>
    }
  }
}
 800b7d8:	bf00      	nop
 800b7da:	3730      	adds	r7, #48	; 0x30
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <LogMelSpectrogramColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output Log-Mel Spectrogram column.
 * @return     None
 */
void LogMelSpectrogramColumn(LogMelSpectrogramTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 800b7e0:	b590      	push	{r4, r7, lr}
 800b7e2:	b08f      	sub	sp, #60	; 0x3c
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	60f8      	str	r0, [r7, #12]
 800b7e8:	60b9      	str	r1, [r7, #8]
 800b7ea:	607a      	str	r2, [r7, #4]
  uint32_t n_mels = S->MelSpectrogramConf->MelFilter->NumMels;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	685b      	ldr	r3, [r3, #4]
 800b7f2:	691b      	ldr	r3, [r3, #16]
 800b7f4:	623b      	str	r3, [r7, #32]
  float32_t top_dB = S->TopdB;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	61fb      	str	r3, [r7, #28]
  float32_t ref = S->Ref;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	689b      	ldr	r3, [r3, #8]
 800b800:	61bb      	str	r3, [r7, #24]
  float32_t *tmp_buffer = S->MelSpectrogramConf->SpectrogramConf->pScratch;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	699b      	ldr	r3, [r3, #24]
 800b80a:	617b      	str	r3, [r7, #20]

  SpectrogramColumn(S->MelSpectrogramConf->SpectrogramConf, pInSignal, tmp_buffer);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	697a      	ldr	r2, [r7, #20]
 800b814:	68b9      	ldr	r1, [r7, #8]
 800b816:	4618      	mov	r0, r3
 800b818:	f7ff ff5a 	bl	800b6d0 <SpectrogramColumn>

  /* Mel Filter Banks Application to power spectrum column */
  MelFilterbank(S->MelSpectrogramConf->MelFilter, tmp_buffer, pOutCol);
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	6979      	ldr	r1, [r7, #20]
 800b826:	4618      	mov	r0, r3
 800b828:	f000 fa64 	bl	800bcf4 <MelFilterbank>

  /* Scaling */
  for (uint32_t i = 0; i < n_mels; i++) {
 800b82c:	2300      	movs	r3, #0
 800b82e:	637b      	str	r3, [r7, #52]	; 0x34
 800b830:	e012      	b.n	800b858 <LogMelSpectrogramColumn+0x78>
    pOutCol[i] /= ref;
 800b832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	4413      	add	r3, r2
 800b83a:	edd3 6a00 	vldr	s13, [r3]
 800b83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	4413      	add	r3, r2
 800b846:	ed97 7a06 	vldr	s14, [r7, #24]
 800b84a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b84e:	edc3 7a00 	vstr	s15, [r3]
  for (uint32_t i = 0; i < n_mels; i++) {
 800b852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b854:	3301      	adds	r3, #1
 800b856:	637b      	str	r3, [r7, #52]	; 0x34
 800b858:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b85a:	6a3b      	ldr	r3, [r7, #32]
 800b85c:	429a      	cmp	r2, r3
 800b85e:	d3e8      	bcc.n	800b832 <LogMelSpectrogramColumn+0x52>
  }

  /* Avoid log of zero or a negative number */
  for (uint32_t i = 0; i < n_mels; i++) {
 800b860:	2300      	movs	r3, #0
 800b862:	633b      	str	r3, [r7, #48]	; 0x30
 800b864:	e014      	b.n	800b890 <LogMelSpectrogramColumn+0xb0>
    if (pOutCol[i] <= 0.0f) {
 800b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b868:	009b      	lsls	r3, r3, #2
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	4413      	add	r3, r2
 800b86e:	edd3 7a00 	vldr	s15, [r3]
 800b872:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b87a:	d806      	bhi.n	800b88a <LogMelSpectrogramColumn+0xaa>
      pOutCol[i] = FLT_MIN;
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	687a      	ldr	r2, [r7, #4]
 800b882:	4413      	add	r3, r2
 800b884:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800b888:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++) {
 800b88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b88c:	3301      	adds	r3, #1
 800b88e:	633b      	str	r3, [r7, #48]	; 0x30
 800b890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b892:	6a3b      	ldr	r3, [r7, #32]
 800b894:	429a      	cmp	r2, r3
 800b896:	d3e6      	bcc.n	800b866 <LogMelSpectrogramColumn+0x86>
    }
  }

  if (S->LogFormula == LOGMELSPECTROGRAM_SCALE_DB)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	791b      	ldrb	r3, [r3, #4]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d14a      	bne.n	800b936 <LogMelSpectrogramColumn+0x156>
  {
    /* Convert power spectrogram to decibel */
    for (uint32_t i = 0; i < n_mels; i++) {
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8a4:	e018      	b.n	800b8d8 <LogMelSpectrogramColumn+0xf8>
      pOutCol[i] = 10.0f * log10f(pOutCol[i]);
 800b8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	687a      	ldr	r2, [r7, #4]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	edd3 7a00 	vldr	s15, [r3]
 800b8b2:	eeb0 0a67 	vmov.f32	s0, s15
 800b8b6:	f00b fc3f 	bl	8017138 <log10f>
 800b8ba:	eef0 7a40 	vmov.f32	s15, s0
 800b8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	4413      	add	r3, r2
 800b8c6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800b8ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8ce:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 800b8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8da:	6a3b      	ldr	r3, [r7, #32]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d3e2      	bcc.n	800b8a6 <LogMelSpectrogramColumn+0xc6>
    }

    /* Threshold output to -top_dB dB */
    for (uint32_t i = 0; i < n_mels; i++) {
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b8e4:	e022      	b.n	800b92c <LogMelSpectrogramColumn+0x14c>
      pOutCol[i] = (pOutCol[i] < -top_dB) ? (-top_dB) : (pOutCol[i]);
 800b8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	687a      	ldr	r2, [r7, #4]
 800b8ec:	4413      	add	r3, r2
 800b8ee:	ed93 7a00 	vldr	s14, [r3]
 800b8f2:	edd7 7a07 	vldr	s15, [r7, #28]
 800b8f6:	eef1 7a67 	vneg.f32	s15, s15
 800b8fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b902:	d504      	bpl.n	800b90e <LogMelSpectrogramColumn+0x12e>
 800b904:	edd7 7a07 	vldr	s15, [r7, #28]
 800b908:	eef1 7a67 	vneg.f32	s15, s15
 800b90c:	e005      	b.n	800b91a <LogMelSpectrogramColumn+0x13a>
 800b90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	4413      	add	r3, r2
 800b916:	edd3 7a00 	vldr	s15, [r3]
 800b91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	4413      	add	r3, r2
 800b922:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels; i++) {
 800b926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b928:	3301      	adds	r3, #1
 800b92a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b92c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b92e:	6a3b      	ldr	r3, [r7, #32]
 800b930:	429a      	cmp	r2, r3
 800b932:	d3d8      	bcc.n	800b8e6 <LogMelSpectrogramColumn+0x106>
    for (uint32_t i = 0; i < n_mels; i++) {
      pOutCol[i] = logf(pOutCol[i]);
    }
  }

}
 800b934:	e01b      	b.n	800b96e <LogMelSpectrogramColumn+0x18e>
    for (uint32_t i = 0; i < n_mels; i++) {
 800b936:	2300      	movs	r3, #0
 800b938:	627b      	str	r3, [r7, #36]	; 0x24
 800b93a:	e014      	b.n	800b966 <LogMelSpectrogramColumn+0x186>
      pOutCol[i] = logf(pOutCol[i]);
 800b93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	4413      	add	r3, r2
 800b944:	edd3 7a00 	vldr	s15, [r3]
 800b948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94a:	009b      	lsls	r3, r3, #2
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	18d4      	adds	r4, r2, r3
 800b950:	eeb0 0a67 	vmov.f32	s0, s15
 800b954:	f00b fbc2 	bl	80170dc <logf>
 800b958:	eef0 7a40 	vmov.f32	s15, s0
 800b95c:	edc4 7a00 	vstr	s15, [r4]
    for (uint32_t i = 0; i < n_mels; i++) {
 800b960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b962:	3301      	adds	r3, #1
 800b964:	627b      	str	r3, [r7, #36]	; 0x24
 800b966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b968:	6a3b      	ldr	r3, [r7, #32]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d3e6      	bcc.n	800b93c <LogMelSpectrogramColumn+0x15c>
}
 800b96e:	bf00      	nop
 800b970:	373c      	adds	r7, #60	; 0x3c
 800b972:	46bd      	mov	sp, r7
 800b974:	bd90      	pop	{r4, r7, pc}

0800b976 <MfccColumn>:
 * @param      *pInSignal  points to input signal frame of length FFTLen.
 * @param      *pOutCol    points to  output MFCC spectrogram column.
 * @return     None
 */
void MfccColumn(MfccTypeDef *S, float32_t *pInSignal, float32_t *pOutCol)
{
 800b976:	b580      	push	{r7, lr}
 800b978:	b086      	sub	sp, #24
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	60f8      	str	r0, [r7, #12]
 800b97e:	60b9      	str	r1, [r7, #8]
 800b980:	607a      	str	r2, [r7, #4]
  float32_t *tmp_buffer = S->pScratch;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	617b      	str	r3, [r7, #20]

  LogMelSpectrogramColumn(S->LogMelConf, pInSignal, tmp_buffer);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	697a      	ldr	r2, [r7, #20]
 800b98e:	68b9      	ldr	r1, [r7, #8]
 800b990:	4618      	mov	r0, r3
 800b992:	f7ff ff25 	bl	800b7e0 <LogMelSpectrogramColumn>

  /* DCT for computing MFCCs from spectrogram slice. */
  DCT(S->pDCT, tmp_buffer, pOutCol);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	685b      	ldr	r3, [r3, #4]
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	6979      	ldr	r1, [r7, #20]
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7ff fcd6 	bl	800b350 <DCT>
}
 800b9a4:	bf00      	nop
 800b9a6:	3718      	adds	r7, #24
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}

0800b9ac <MelFilterbank_Init>:
 *
 * @param      *MelFilterStruct  The Mel Filter configuration structure.
 * @return none.
 */
void MelFilterbank_Init(MelFilterTypeDef *MelFilterStruct)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b0a4      	sub	sp, #144	; 0x90
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  uint32_t normalize = MelFilterStruct->Normalize;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b8:	663b      	str	r3, [r7, #96]	; 0x60
  uint32_t mel_2_f = MelFilterStruct->Mel2F;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	65fb      	str	r3, [r7, #92]	; 0x5c
  MelFormulaTypedef formula = MelFilterStruct->Formula;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9c6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  uint32_t *fft_bin_numbers_start = MelFilterStruct->pStartIndices;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	657b      	str	r3, [r7, #84]	; 0x54
  uint32_t *fft_bin_numbers_stop = MelFilterStruct->pStopIndices;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	653b      	str	r3, [r7, #80]	; 0x50
  int32_t start_index;
  int32_t stop_index;
  float32_t *weights = MelFilterStruct->pCoefficients;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	689b      	ldr	r3, [r3, #8]
 800b9da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t *n_coefficients = &MelFilterStruct->CoefficientsLength;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	330c      	adds	r3, #12
 800b9e2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t sr = MelFilterStruct->SampRate;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	64bb      	str	r3, [r7, #72]	; 0x48
  uint32_t n_mels = MelFilterStruct->NumMels;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t n_fft = MelFilterStruct->FFTLen;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	695b      	ldr	r3, [r3, #20]
 800b9f4:	643b      	str	r3, [r7, #64]	; 0x40
  float32_t f_min =  MelFilterStruct->FMin;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	69db      	ldr	r3, [r3, #28]
 800b9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  float32_t f_max =  MelFilterStruct->FMax;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6a1b      	ldr	r3, [r3, #32]
 800ba00:	63bb      	str	r3, [r7, #56]	; 0x38

  float32_t enorm;

  // Algorithm based on librosa implementation with memory constraints

  mel_min = MelScale(f_min, formula);
 800ba02:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ba06:	4618      	mov	r0, r3
 800ba08:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800ba0c:	f000 f9c8 	bl	800bda0 <MelScale>
 800ba10:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
  mel_max = MelScale(f_max, formula);
 800ba14:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ba18:	4618      	mov	r0, r3
 800ba1a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 800ba1e:	f000 f9bf 	bl	800bda0 <MelScale>
 800ba22:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
  // Then, create mel_bin_centers = np.linspace(mel_min, mel_max, n_mels + 2) // + 2 to get boundaries
  mel_step = (mel_max - mel_min) / (float32_t) (n_mels - 1 + 2);
 800ba26:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800ba2a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ba2e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800ba32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ba34:	3301      	adds	r3, #1
 800ba36:	ee07 3a90 	vmov	s15, r3
 800ba3a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba42:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
  /* Center frequencies of each FFT bin */
  // fftfreqs = librosa.fft_frequencies(sr=sr, n_fft=n_fft)
  //          = np.linspace(0, float(sr)/2), int(1 + n_fft//2), endpoint=True)
  //          = np.linspace(0, 8000, 513, endpoint=True) # With sr=16000, n_fft=1024
  // fftfreqs_step = (f_max - f_min) / (float32_t) (n_fft / 2);
  fftfreqs_step = ((float32_t) sr / 2.0f) / (float32_t) (n_fft / 2);
 800ba46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba48:	ee07 3a90 	vmov	s15, r3
 800ba4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba50:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800ba54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ba58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ba5a:	085b      	lsrs	r3, r3, #1
 800ba5c:	ee07 3a90 	vmov	s15, r3
 800ba60:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba68:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

  *n_coefficients = 0;
 800ba6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba6e:	2200      	movs	r2, #0
 800ba70:	601a      	str	r2, [r3, #0]
  /* Create filterbanks */
  // The first filterbank will start at the first point,
  // reach its peak at the second point, then return to zero at the 3rd point.
  // The second filterbank will start at the 2nd point, reach its max at the 3rd,
  // then be zero at the 4th etc. A formula for calculating these is as follows:
  for (uint32_t i = 0; i < n_mels; i++)
 800ba72:	2300      	movs	r3, #0
 800ba74:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba76:	e133      	b.n	800bce0 <MelFilterbank_Init+0x334>
  {
    /* Create bin */
    if (mel_2_f != 0) {
 800ba78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d044      	beq.n	800bb08 <MelFilterbank_Init+0x15c>
      mel_f_lower = InverseMelScale(mel_step * i + mel_min, formula);
 800ba7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ba80:	ee07 3a90 	vmov	s15, r3
 800ba84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ba88:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ba8c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba90:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ba94:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba98:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	eeb0 0a67 	vmov.f32	s0, s15
 800baa2:	f000 f9ed 	bl	800be80 <InverseMelScale>
 800baa6:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
      mel_f_center = InverseMelScale(mel_step * (i + 1) + mel_min, formula);
 800baaa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800baac:	3301      	adds	r3, #1
 800baae:	ee07 3a90 	vmov	s15, r3
 800bab2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bab6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800baba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800babe:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bac6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800baca:	4618      	mov	r0, r3
 800bacc:	eeb0 0a67 	vmov.f32	s0, s15
 800bad0:	f000 f9d6 	bl	800be80 <InverseMelScale>
 800bad4:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
      mel_f_upper = InverseMelScale(mel_step * (i + 2) + mel_min, formula);
 800bad8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bada:	3302      	adds	r3, #2
 800badc:	ee07 3a90 	vmov	s15, r3
 800bae0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bae4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bae8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800baec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800baf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800baf4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800baf8:	4618      	mov	r0, r3
 800bafa:	eeb0 0a67 	vmov.f32	s0, s15
 800bafe:	f000 f9bf 	bl	800be80 <InverseMelScale>
 800bb02:	ed87 0a1e 	vstr	s0, [r7, #120]	; 0x78
 800bb06:	e02e      	b.n	800bb66 <MelFilterbank_Init+0x1ba>
    } else {
      mel_f_lower = mel_step * i + mel_min;
 800bb08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb0a:	ee07 3a90 	vmov	s15, r3
 800bb0e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bb12:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bb16:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb1a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb22:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
      mel_f_center = mel_step * (i + 1) + mel_min;
 800bb26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb28:	3301      	adds	r3, #1
 800bb2a:	ee07 3a90 	vmov	s15, r3
 800bb2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bb32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bb36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb3a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb42:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
      mel_f_upper = mel_step * (i + 2) + mel_min;
 800bb46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb48:	3302      	adds	r3, #2
 800bb4a:	ee07 3a90 	vmov	s15, r3
 800bb4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bb52:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800bb56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb5a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bb62:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
    /* Round frequencies to the nearest FFT bins */
    // Note: This could be used for future optimization but does not match when InverseMelScale is not used
    // fft_bin_numbers_start[i] = (uint32_t) (n_fft * mel_f_lower / sr) + 1;
    // fft_bin_numbers_stop[i] = (uint32_t) (n_fft * mel_f_upper / sr);

    fdiff_lower = mel_f_center - mel_f_lower;
 800bb66:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800bb6a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bb6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb72:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    fdiff_upper = mel_f_upper - mel_f_center;
 800bb76:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800bb7a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800bb7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bb82:	edc7 7a08 	vstr	s15, [r7, #32]

    start_index = -1;
 800bb86:	f04f 33ff 	mov.w	r3, #4294967295
 800bb8a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    stop_index = -1;
 800bb8e:	f04f 33ff 	mov.w	r3, #4294967295
 800bb92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    for (uint32_t j = 0; j < n_fft / 2; j++)
 800bb96:	2300      	movs	r3, #0
 800bb98:	667b      	str	r3, [r7, #100]	; 0x64
 800bb9a:	e098      	b.n	800bcce <MelFilterbank_Init+0x322>
    {
      /* Center frequency for FFT bin */
      // fftfreq = j * fftfreqs_step + f_min;
      if (mel_2_f != 0) {
 800bb9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d00b      	beq.n	800bbba <MelFilterbank_Init+0x20e>
        fftfreq = j * fftfreqs_step;
 800bba2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bba4:	ee07 3a90 	vmov	s15, r3
 800bba8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbb4:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
 800bbb8:	e011      	b.n	800bbde <MelFilterbank_Init+0x232>
      } else {
        fftfreq = MelScale(j * fftfreqs_step, formula);
 800bbba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbbc:	ee07 3a90 	vmov	s15, r3
 800bbc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bbc4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbcc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	eeb0 0a67 	vmov.f32	s0, s15
 800bbd6:	f000 f8e3 	bl	800bda0 <MelScale>
 800bbda:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
      }

      ramp_lower = mel_f_lower - fftfreq;
 800bbde:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800bbe2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800bbe6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbea:	edc7 7a07 	vstr	s15, [r7, #28]
      ramp_upper = mel_f_upper - fftfreq;
 800bbee:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800bbf2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800bbf6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbfa:	edc7 7a06 	vstr	s15, [r7, #24]
      /* Lower and upper slopes for current bin */
      lower = -ramp_lower / fdiff_lower;
 800bbfe:	edd7 7a07 	vldr	s15, [r7, #28]
 800bc02:	eef1 6a67 	vneg.f32	s13, s15
 800bc06:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bc0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc0e:	edc7 7a05 	vstr	s15, [r7, #20]
      upper =  ramp_upper / fdiff_upper;
 800bc12:	edd7 6a06 	vldr	s13, [r7, #24]
 800bc16:	ed97 7a08 	vldr	s14, [r7, #32]
 800bc1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc1e:	edc7 7a04 	vstr	s15, [r7, #16]

      // # .. then intersect them with each other and zero
      // weights[i] = np.maximum(0, np.minimum(lower, upper))
      if (lower < upper) min = lower;
 800bc22:	ed97 7a05 	vldr	s14, [r7, #20]
 800bc26:	edd7 7a04 	vldr	s15, [r7, #16]
 800bc2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bc2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc32:	d502      	bpl.n	800bc3a <MelFilterbank_Init+0x28e>
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	673b      	str	r3, [r7, #112]	; 0x70
 800bc38:	e001      	b.n	800bc3e <MelFilterbank_Init+0x292>
      else min = upper;
 800bc3a:	693b      	ldr	r3, [r7, #16]
 800bc3c:	673b      	str	r3, [r7, #112]	; 0x70

      // Only store non-zero values indexed by start and stop indexes
      if (min > 0)
 800bc3e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800bc42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800bc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc4a:	dd2f      	ble.n	800bcac <MelFilterbank_Init+0x300>
      {
        weight = min;
 800bc4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc4e:	66fb      	str	r3, [r7, #108]	; 0x6c
        // At this point, matching with:
        // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=None,htk=False)

        if (normalize != 0)
 800bc50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d013      	beq.n	800bc7e <MelFilterbank_Init+0x2d2>
          //     (area normalization).  Otherwise, leave all the triangles aiming for
          //     a peak value of 1.0
          // # Slaney-style mel is scaled to be approx constant energy per channel
          // enorm = 2.0 / (mel_f[2:n_mels+2] - mel_f[:n_mels])
          // weights *= enorm[:, np.newaxis]
          enorm = 2.0f / (mel_f_upper - mel_f_lower);
 800bc56:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800bc5a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800bc5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bc62:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bc66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc6a:	edc7 7a03 	vstr	s15, [r7, #12]
          weight *= enorm;
 800bc6e:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800bc72:	edd7 7a03 	vldr	s15, [r7, #12]
 800bc76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc7a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
          // At this point, should be matching with:
          // librosa.filters.mel(16000, 1024, fmin=0.0, n_mels=30,norm=1,htk=False)
        }

        /* Store weight coefficient in Lookup table */
        *weights++ = weight;
 800bc7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bc82:	1d1a      	adds	r2, r3, #4
 800bc84:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800bc88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc8a:	601a      	str	r2, [r3, #0]
        if (start_index == -1) {
 800bc8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc94:	d102      	bne.n	800bc9c <MelFilterbank_Init+0x2f0>
          start_index = j;
 800bc96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
        }
        stop_index = j;
 800bc9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        /* Increment coefficient counter */
        *n_coefficients = *n_coefficients + 1;
 800bca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcaa:	601a      	str	r2, [r3, #0]
      }
      fft_bin_numbers_start[i] = start_index;
 800bcac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bcb2:	4413      	add	r3, r2
 800bcb4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800bcb8:	601a      	str	r2, [r3, #0]
      fft_bin_numbers_stop[i] = stop_index;
 800bcba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bcc0:	4413      	add	r3, r2
 800bcc2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bcc6:	601a      	str	r2, [r3, #0]
    for (uint32_t j = 0; j < n_fft / 2; j++)
 800bcc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcca:	3301      	adds	r3, #1
 800bccc:	667b      	str	r3, [r7, #100]	; 0x64
 800bcce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcd0:	085b      	lsrs	r3, r3, #1
 800bcd2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	f4ff af61 	bcc.w	800bb9c <MelFilterbank_Init+0x1f0>
  for (uint32_t i = 0; i < n_mels; i++)
 800bcda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bcdc:	3301      	adds	r3, #1
 800bcde:	66bb      	str	r3, [r7, #104]	; 0x68
 800bce0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bce2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bce4:	429a      	cmp	r2, r3
 800bce6:	f4ff aec7 	bcc.w	800ba78 <MelFilterbank_Init+0xcc>
    }
  }
}
 800bcea:	bf00      	nop
 800bcec:	bf00      	nop
 800bcee:	3790      	adds	r7, #144	; 0x90
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	bd80      	pop	{r7, pc}

0800bcf4 <MelFilterbank>:
 * @param      *M          points to an instance of the floating-point MelFilterbank structure.
 * @param      *pSpectrCol points to the input spectrogram slice of length FFTLen / 2.
 * @param      *pMelCol    points to the output mel energies in each filterbank.
 */
void MelFilterbank(MelFilterTypeDef *M, float32_t *pSpectrCol, float32_t *pMelCol)
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	b08d      	sub	sp, #52	; 0x34
 800bcf8:	af00      	add	r7, sp, #0
 800bcfa:	60f8      	str	r0, [r7, #12]
 800bcfc:	60b9      	str	r1, [r7, #8]
 800bcfe:	607a      	str	r2, [r7, #4]
  uint16_t start_idx;
  uint16_t stop_idx;
  uint32_t *pStart_idxs = M->pStartIndices;
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	61fb      	str	r3, [r7, #28]
  uint32_t *pStop_idxs = M->pStopIndices;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	61bb      	str	r3, [r7, #24]
  float32_t *pCoefs = M->pCoefficients;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t n_mels = M->NumMels;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	691b      	ldr	r3, [r3, #16]
 800bd16:	617b      	str	r3, [r7, #20]
  float32_t sum;

  for (uint32_t i = 0; i < n_mels; i++)
 800bd18:	2300      	movs	r3, #0
 800bd1a:	627b      	str	r3, [r7, #36]	; 0x24
 800bd1c:	e034      	b.n	800bd88 <MelFilterbank+0x94>
  {
    start_idx = pStart_idxs[i];
 800bd1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd20:	009b      	lsls	r3, r3, #2
 800bd22:	69fa      	ldr	r2, [r7, #28]
 800bd24:	4413      	add	r3, r2
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	827b      	strh	r3, [r7, #18]
    stop_idx = pStop_idxs[i];
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	69ba      	ldr	r2, [r7, #24]
 800bd30:	4413      	add	r3, r2
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	823b      	strh	r3, [r7, #16]
    sum = 0.0f;
 800bd36:	f04f 0300 	mov.w	r3, #0
 800bd3a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800bd3c:	8a7b      	ldrh	r3, [r7, #18]
 800bd3e:	623b      	str	r3, [r7, #32]
 800bd40:	e015      	b.n	800bd6e <MelFilterbank+0x7a>
    {
      sum += pSpectrCol[j] * (*pCoefs++);
 800bd42:	6a3b      	ldr	r3, [r7, #32]
 800bd44:	009b      	lsls	r3, r3, #2
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	4413      	add	r3, r2
 800bd4a:	ed93 7a00 	vldr	s14, [r3]
 800bd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd50:	1d1a      	adds	r2, r3, #4
 800bd52:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd54:	edd3 7a00 	vldr	s15, [r3]
 800bd58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd64:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    for (uint32_t j = start_idx; j <= stop_idx; j++)
 800bd68:	6a3b      	ldr	r3, [r7, #32]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	623b      	str	r3, [r7, #32]
 800bd6e:	8a3b      	ldrh	r3, [r7, #16]
 800bd70:	6a3a      	ldr	r2, [r7, #32]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d9e5      	bls.n	800bd42 <MelFilterbank+0x4e>
    }
    pMelCol[i] = sum;
 800bd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	687a      	ldr	r2, [r7, #4]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd80:	601a      	str	r2, [r3, #0]
  for (uint32_t i = 0; i < n_mels; i++)
 800bd82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd84:	3301      	adds	r3, #1
 800bd86:	627b      	str	r3, [r7, #36]	; 0x24
 800bd88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d3c6      	bcc.n	800bd1e <MelFilterbank+0x2a>
  }
}
 800bd90:	bf00      	nop
 800bd92:	bf00      	nop
 800bd94:	3734      	adds	r7, #52	; 0x34
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
	...

0800bda0 <MelScale>:

/* Private functions ---------------------------------------------------------*/

// based on librosa mel_to_hz()
static __INLINE float MelScale(float freq, MelFormulaTypedef type)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b088      	sub	sp, #32
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	ed87 0a01 	vstr	s0, [r7, #4]
 800bdaa:	4603      	mov	r3, r0
 800bdac:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800bdae:	78fb      	ldrb	r3, [r7, #3]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d042      	beq.n	800be3a <MelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 800bdb4:	f04f 0300 	mov.w	r3, #0
 800bdb8:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800bdba:	4b2c      	ldr	r3, [pc, #176]	; (800be6c <MelScale+0xcc>)
 800bdbc:	617b      	str	r3, [r7, #20]
    float mels = (freq - f_min) / f_sp;
 800bdbe:	ed97 7a01 	vldr	s14, [r7, #4]
 800bdc2:	edd7 7a06 	vldr	s15, [r7, #24]
 800bdc6:	ee77 6a67 	vsub.f32	s13, s14, s15
 800bdca:	ed97 7a05 	vldr	s14, [r7, #20]
 800bdce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdd2:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Fill in the log-scale part */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 800bdd6:	4b26      	ldr	r3, [pc, #152]	; (800be70 <MelScale+0xd0>)
 800bdd8:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800bdda:	ed97 7a04 	vldr	s14, [r7, #16]
 800bdde:	edd7 7a06 	vldr	s15, [r7, #24]
 800bde2:	ee77 6a67 	vsub.f32	s13, s14, s15
 800bde6:	ed97 7a05 	vldr	s14, [r7, #20]
 800bdea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdee:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 800bdf2:	4b20      	ldr	r3, [pc, #128]	; (800be74 <MelScale+0xd4>)
 800bdf4:	60bb      	str	r3, [r7, #8]

    if (freq >= min_log_hz)
 800bdf6:	ed97 7a01 	vldr	s14, [r7, #4]
 800bdfa:	edd7 7a04 	vldr	s15, [r7, #16]
 800bdfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800be02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be06:	db15      	blt.n	800be34 <MelScale+0x94>
    {
      mels = min_log_mel + logf(freq / min_log_hz) / logstep;
 800be08:	ed97 7a01 	vldr	s14, [r7, #4]
 800be0c:	edd7 7a04 	vldr	s15, [r7, #16]
 800be10:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800be14:	eeb0 0a66 	vmov.f32	s0, s13
 800be18:	f00b f960 	bl	80170dc <logf>
 800be1c:	eef0 6a40 	vmov.f32	s13, s0
 800be20:	ed97 7a02 	vldr	s14, [r7, #8]
 800be24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be28:	ed97 7a03 	vldr	s14, [r7, #12]
 800be2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be30:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return mels;
 800be34:	edd7 7a07 	vldr	s15, [r7, #28]
 800be38:	e013      	b.n	800be62 <MelScale+0xc2>
  } else {
    /* HTK Formula */
    // The formula for converting from frequency to Mel scale is:
    // M(f) = 1127. * ln(1 + f / 700.)
    //      = 2595. * log10(1 + f / 700.)
    return 1127.0f * logf(1.0f + freq / 700.0f);
 800be3a:	ed97 7a01 	vldr	s14, [r7, #4]
 800be3e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800be78 <MelScale+0xd8>
 800be42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800be46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be4e:	eeb0 0a67 	vmov.f32	s0, s15
 800be52:	f00b f943 	bl	80170dc <logf>
 800be56:	eef0 7a40 	vmov.f32	s15, s0
 800be5a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800be7c <MelScale+0xdc>
 800be5e:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 800be62:	eeb0 0a67 	vmov.f32	s0, s15
 800be66:	3720      	adds	r7, #32
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}
 800be6c:	42855555 	.word	0x42855555
 800be70:	447a0000 	.word	0x447a0000
 800be74:	3d8ccdbb 	.word	0x3d8ccdbb
 800be78:	442f0000 	.word	0x442f0000
 800be7c:	448ce000 	.word	0x448ce000

0800be80 <InverseMelScale>:

// based on librosa hz_to_mel()
static __INLINE float InverseMelScale(float mel_freq, MelFormulaTypedef type)
{
 800be80:	b580      	push	{r7, lr}
 800be82:	b088      	sub	sp, #32
 800be84:	af00      	add	r7, sp, #0
 800be86:	ed87 0a01 	vstr	s0, [r7, #4]
 800be8a:	4603      	mov	r3, r0
 800be8c:	70fb      	strb	r3, [r7, #3]
  if (type != MEL_HTK) {
 800be8e:	78fb      	ldrb	r3, [r7, #3]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d042      	beq.n	800bf1a <InverseMelScale+0x9a>
    /* Malcolm Slaney's Formula */
    /* Fill in the linear scale */
    const float f_min = 0.0f;
 800be94:	f04f 0300 	mov.w	r3, #0
 800be98:	61bb      	str	r3, [r7, #24]
    const float f_sp = (float) (200.0f / 3.0f);
 800be9a:	4b2c      	ldr	r3, [pc, #176]	; (800bf4c <InverseMelScale+0xcc>)
 800be9c:	617b      	str	r3, [r7, #20]
    float freq = f_min + f_sp * mel_freq;
 800be9e:	ed97 7a05 	vldr	s14, [r7, #20]
 800bea2:	edd7 7a01 	vldr	s15, [r7, #4]
 800bea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800beaa:	ed97 7a06 	vldr	s14, [r7, #24]
 800beae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800beb2:	edc7 7a07 	vstr	s15, [r7, #28]

    /* And now the nonlinear scale */
    const float min_log_hz = 1000.0f;                      // beginning of log region (Hz)
 800beb6:	4b26      	ldr	r3, [pc, #152]	; (800bf50 <InverseMelScale+0xd0>)
 800beb8:	613b      	str	r3, [r7, #16]
    const float min_log_mel = (min_log_hz - f_min) / f_sp; // same (Mels)
 800beba:	ed97 7a04 	vldr	s14, [r7, #16]
 800bebe:	edd7 7a06 	vldr	s15, [r7, #24]
 800bec2:	ee77 6a67 	vsub.f32	s13, s14, s15
 800bec6:	ed97 7a05 	vldr	s14, [r7, #20]
 800beca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bece:	edc7 7a03 	vstr	s15, [r7, #12]
    const float logstep = logf(6.4f) / 27.0f;              // step size for log region
 800bed2:	4b20      	ldr	r3, [pc, #128]	; (800bf54 <InverseMelScale+0xd4>)
 800bed4:	60bb      	str	r3, [r7, #8]

    if (mel_freq >= min_log_mel)
 800bed6:	ed97 7a01 	vldr	s14, [r7, #4]
 800beda:	edd7 7a03 	vldr	s15, [r7, #12]
 800bede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bee6:	db15      	blt.n	800bf14 <InverseMelScale+0x94>
    {
      // WARNING: Easy overflow with float32_t
      freq = min_log_hz * expf(logstep * (mel_freq - min_log_mel));
 800bee8:	ed97 7a01 	vldr	s14, [r7, #4]
 800beec:	edd7 7a03 	vldr	s15, [r7, #12]
 800bef0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800bef4:	edd7 7a02 	vldr	s15, [r7, #8]
 800bef8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800befc:	eeb0 0a67 	vmov.f32	s0, s15
 800bf00:	f00b f8b6 	bl	8017070 <expf>
 800bf04:	eeb0 7a40 	vmov.f32	s14, s0
 800bf08:	edd7 7a04 	vldr	s15, [r7, #16]
 800bf0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf10:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    return freq;
 800bf14:	edd7 7a07 	vldr	s15, [r7, #28]
 800bf18:	e013      	b.n	800bf42 <InverseMelScale+0xc2>
  } else {
    /* HTK Formula */
    return 700.0f * (expf(mel_freq / 1127.0f) - 1.0f);
 800bf1a:	edd7 7a01 	vldr	s15, [r7, #4]
 800bf1e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800bf58 <InverseMelScale+0xd8>
 800bf22:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800bf26:	eeb0 0a47 	vmov.f32	s0, s14
 800bf2a:	f00b f8a1 	bl	8017070 <expf>
 800bf2e:	eef0 7a40 	vmov.f32	s15, s0
 800bf32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf3a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800bf5c <InverseMelScale+0xdc>
 800bf3e:	ee67 7a87 	vmul.f32	s15, s15, s14
  }
}
 800bf42:	eeb0 0a67 	vmov.f32	s0, s15
 800bf46:	3720      	adds	r7, #32
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	42855555 	.word	0x42855555
 800bf50:	447a0000 	.word	0x447a0000
 800bf54:	3d8ccdbb 	.word	0x3d8ccdbb
 800bf58:	448ce000 	.word	0x448ce000
 800bf5c:	442f0000 	.word	0x442f0000

0800bf60 <Window_Init>:
 * @param      len    window length.
 * @param      type   window type.
 * @return     0 if successful or -1 if there is an error.
 */
int32_t Window_Init(float32_t *pDst, uint32_t len, WindowTypedef type)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b086      	sub	sp, #24
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	4613      	mov	r3, r2
 800bf6c:	71fb      	strb	r3, [r7, #7]
  int32_t status = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	617b      	str	r3, [r7, #20]

  switch (type)
 800bf72:	79fb      	ldrb	r3, [r7, #7]
 800bf74:	2b02      	cmp	r3, #2
 800bf76:	d01c      	beq.n	800bfb2 <Window_Init+0x52>
 800bf78:	2b02      	cmp	r3, #2
 800bf7a:	dc25      	bgt.n	800bfc8 <Window_Init+0x68>
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <Window_Init+0x26>
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d00b      	beq.n	800bf9c <Window_Init+0x3c>
 800bf84:	e020      	b.n	800bfc8 <Window_Init+0x68>
  {
    case WINDOW_HANN:
      cosine_sum_window_create(pDst, len, 0.5, 0.5, 0.0);
 800bf86:	ed9f 2b16 	vldr	d2, [pc, #88]	; 800bfe0 <Window_Init+0x80>
 800bf8a:	ed9f 1b17 	vldr	d1, [pc, #92]	; 800bfe8 <Window_Init+0x88>
 800bf8e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 800bfe8 <Window_Init+0x88>
 800bf92:	68b9      	ldr	r1, [r7, #8]
 800bf94:	68f8      	ldr	r0, [r7, #12]
 800bf96:	f000 f83b 	bl	800c010 <cosine_sum_window_create>
      break;
 800bf9a:	e019      	b.n	800bfd0 <Window_Init+0x70>
    case WINDOW_HAMMING:
      cosine_sum_window_create(pDst, len, 0.54, 0.46, 0.0);
 800bf9c:	ed9f 2b10 	vldr	d2, [pc, #64]	; 800bfe0 <Window_Init+0x80>
 800bfa0:	ed9f 1b13 	vldr	d1, [pc, #76]	; 800bff0 <Window_Init+0x90>
 800bfa4:	ed9f 0b14 	vldr	d0, [pc, #80]	; 800bff8 <Window_Init+0x98>
 800bfa8:	68b9      	ldr	r1, [r7, #8]
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f000 f830 	bl	800c010 <cosine_sum_window_create>
      break;
 800bfb0:	e00e      	b.n	800bfd0 <Window_Init+0x70>
    case WINDOW_BLACKMAN:
      cosine_sum_window_create(pDst, len, 0.42, 0.5, 0.08);
 800bfb2:	ed9f 2b13 	vldr	d2, [pc, #76]	; 800c000 <Window_Init+0xa0>
 800bfb6:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 800bfe8 <Window_Init+0x88>
 800bfba:	ed9f 0b13 	vldr	d0, [pc, #76]	; 800c008 <Window_Init+0xa8>
 800bfbe:	68b9      	ldr	r1, [r7, #8]
 800bfc0:	68f8      	ldr	r0, [r7, #12]
 800bfc2:	f000 f825 	bl	800c010 <cosine_sum_window_create>
      break;
 800bfc6:	e003      	b.n	800bfd0 <Window_Init+0x70>
    default:
      /* Window type is not implemented */
      status = -1;
 800bfc8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfcc:	617b      	str	r3, [r7, #20]
      break;
 800bfce:	bf00      	nop
  }

  return status;
 800bfd0:	697b      	ldr	r3, [r7, #20]
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3718      	adds	r7, #24
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop
 800bfdc:	f3af 8000 	nop.w
	...
 800bfec:	3fe00000 	.word	0x3fe00000
 800bff0:	d70a3d71 	.word	0xd70a3d71
 800bff4:	3fdd70a3 	.word	0x3fdd70a3
 800bff8:	147ae148 	.word	0x147ae148
 800bffc:	3fe147ae 	.word	0x3fe147ae
 800c000:	47ae147b 	.word	0x47ae147b
 800c004:	3fb47ae1 	.word	0x3fb47ae1
 800c008:	ae147ae1 	.word	0xae147ae1
 800c00c:	3fdae147 	.word	0x3fdae147

0800c010 <cosine_sum_window_create>:

/**
 * @brief Helper function to create cosine-sum windows
 */
void cosine_sum_window_create(float32_t *pDst, uint32_t len, float64_t a0, float64_t a1, float64_t a2)
{
 800c010:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c014:	b08a      	sub	sp, #40	; 0x28
 800c016:	af00      	add	r7, sp, #0
 800c018:	61f8      	str	r0, [r7, #28]
 800c01a:	61b9      	str	r1, [r7, #24]
 800c01c:	ed87 0b04 	vstr	d0, [r7, #16]
 800c020:	ed87 1b02 	vstr	d1, [r7, #8]
 800c024:	ed87 2b00 	vstr	d2, [r7]

  for (uint32_t i = 0; i < len; i++)
 800c028:	2300      	movs	r3, #0
 800c02a:	627b      	str	r3, [r7, #36]	; 0x24
 800c02c:	e067      	b.n	800c0fe <cosine_sum_window_create+0xee>
  {
    *pDst++ = a0
            - a1 * cos(2.0 * M_PI * (float64_t) i / (float64_t) len)
 800c02e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c030:	f7f4 fa78 	bl	8000524 <__aeabi_ui2d>
 800c034:	a338      	add	r3, pc, #224	; (adr r3, 800c118 <cosine_sum_window_create+0x108>)
 800c036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03a:	f7f4 faed 	bl	8000618 <__aeabi_dmul>
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4614      	mov	r4, r2
 800c044:	461d      	mov	r5, r3
 800c046:	69b8      	ldr	r0, [r7, #24]
 800c048:	f7f4 fa6c 	bl	8000524 <__aeabi_ui2d>
 800c04c:	4602      	mov	r2, r0
 800c04e:	460b      	mov	r3, r1
 800c050:	4620      	mov	r0, r4
 800c052:	4629      	mov	r1, r5
 800c054:	f7f4 fc0a 	bl	800086c <__aeabi_ddiv>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	ec43 2b17 	vmov	d7, r2, r3
 800c060:	eeb0 0a47 	vmov.f32	s0, s14
 800c064:	eef0 0a67 	vmov.f32	s1, s15
 800c068:	f00a feaa 	bl	8016dc0 <cos>
 800c06c:	ec51 0b10 	vmov	r0, r1, d0
 800c070:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c074:	f7f4 fad0 	bl	8000618 <__aeabi_dmul>
 800c078:	4602      	mov	r2, r0
 800c07a:	460b      	mov	r3, r1
 800c07c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800c080:	f7f4 f912 	bl	80002a8 <__aeabi_dsub>
 800c084:	4602      	mov	r2, r0
 800c086:	460b      	mov	r3, r1
 800c088:	4614      	mov	r4, r2
 800c08a:	461d      	mov	r5, r3
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800c08c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c08e:	f7f4 fa49 	bl	8000524 <__aeabi_ui2d>
 800c092:	a323      	add	r3, pc, #140	; (adr r3, 800c120 <cosine_sum_window_create+0x110>)
 800c094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c098:	f7f4 fabe 	bl	8000618 <__aeabi_dmul>
 800c09c:	4602      	mov	r2, r0
 800c09e:	460b      	mov	r3, r1
 800c0a0:	4690      	mov	r8, r2
 800c0a2:	4699      	mov	r9, r3
 800c0a4:	69b8      	ldr	r0, [r7, #24]
 800c0a6:	f7f4 fa3d 	bl	8000524 <__aeabi_ui2d>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	4640      	mov	r0, r8
 800c0b0:	4649      	mov	r1, r9
 800c0b2:	f7f4 fbdb 	bl	800086c <__aeabi_ddiv>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	ec43 2b17 	vmov	d7, r2, r3
 800c0be:	eeb0 0a47 	vmov.f32	s0, s14
 800c0c2:	eef0 0a67 	vmov.f32	s1, s15
 800c0c6:	f00a fe7b 	bl	8016dc0 <cos>
 800c0ca:	ec51 0b10 	vmov	r0, r1, d0
 800c0ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0d2:	f7f4 faa1 	bl	8000618 <__aeabi_dmul>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	460b      	mov	r3, r1
 800c0da:	4620      	mov	r0, r4
 800c0dc:	4629      	mov	r1, r5
 800c0de:	f7f4 f8e5 	bl	80002ac <__adddf3>
 800c0e2:	4602      	mov	r2, r0
 800c0e4:	460b      	mov	r3, r1
 800c0e6:	4610      	mov	r0, r2
 800c0e8:	4619      	mov	r1, r3
    *pDst++ = a0
 800c0ea:	69fc      	ldr	r4, [r7, #28]
 800c0ec:	1d23      	adds	r3, r4, #4
 800c0ee:	61fb      	str	r3, [r7, #28]
            + a2 * cos(4.0 * M_PI * (float64_t) i / (float64_t) len);
 800c0f0:	f7f4 fd8a 	bl	8000c08 <__aeabi_d2f>
 800c0f4:	4603      	mov	r3, r0
    *pDst++ = a0
 800c0f6:	6023      	str	r3, [r4, #0]
  for (uint32_t i = 0; i < len; i++)
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fa:	3301      	adds	r3, #1
 800c0fc:	627b      	str	r3, [r7, #36]	; 0x24
 800c0fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	429a      	cmp	r2, r3
 800c104:	d393      	bcc.n	800c02e <cosine_sum_window_create+0x1e>
  }
}
 800c106:	bf00      	nop
 800c108:	bf00      	nop
 800c10a:	3728      	adds	r7, #40	; 0x28
 800c10c:	46bd      	mov	sp, r7
 800c10e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c112:	bf00      	nop
 800c114:	f3af 8000 	nop.w
 800c118:	54442d18 	.word	0x54442d18
 800c11c:	401921fb 	.word	0x401921fb
 800c120:	54442d18 	.word	0x54442d18
 800c124:	402921fb 	.word	0x402921fb

0800c128 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	af00      	add	r7, sp, #0
	  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);*/
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800c12c:	4b10      	ldr	r3, [pc, #64]	; (800c170 <MX_PDM2PCM_Init+0x48>)
 800c12e:	2200      	movs	r2, #0
 800c130:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_BE;
 800c132:	4b0f      	ldr	r3, [pc, #60]	; (800c170 <MX_PDM2PCM_Init+0x48>)
 800c134:	2201      	movs	r2, #1
 800c136:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2104533974;
 800c138:	4b0d      	ldr	r3, [pc, #52]	; (800c170 <MX_PDM2PCM_Init+0x48>)
 800c13a:	4a0e      	ldr	r2, [pc, #56]	; (800c174 <MX_PDM2PCM_Init+0x4c>)
 800c13c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800c13e:	4b0c      	ldr	r3, [pc, #48]	; (800c170 <MX_PDM2PCM_Init+0x48>)
 800c140:	2201      	movs	r2, #1
 800c142:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 800c144:	4b0a      	ldr	r3, [pc, #40]	; (800c170 <MX_PDM2PCM_Init+0x48>)
 800c146:	2201      	movs	r2, #1
 800c148:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800c14a:	4809      	ldr	r0, [pc, #36]	; (800c170 <MX_PDM2PCM_Init+0x48>)
 800c14c:	f001 ff2c 	bl	800dfa8 <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800c150:	4b09      	ldr	r3, [pc, #36]	; (800c178 <MX_PDM2PCM_Init+0x50>)
 800c152:	2202      	movs	r2, #2
 800c154:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 800c156:	4b08      	ldr	r3, [pc, #32]	; (800c178 <MX_PDM2PCM_Init+0x50>)
 800c158:	2210      	movs	r2, #16
 800c15a:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 800c15c:	4b06      	ldr	r3, [pc, #24]	; (800c178 <MX_PDM2PCM_Init+0x50>)
 800c15e:	2218      	movs	r2, #24
 800c160:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 800c162:	4905      	ldr	r1, [pc, #20]	; (800c178 <MX_PDM2PCM_Init+0x50>)
 800c164:	4802      	ldr	r0, [pc, #8]	; (800c170 <MX_PDM2PCM_Init+0x48>)
 800c166:	f001 ffa9 	bl	800e0bc <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800c16a:	bf00      	nop
 800c16c:	bd80      	pop	{r7, pc}
 800c16e:	bf00      	nop
 800c170:	20013c94 	.word	0x20013c94
 800c174:	7d70a3d6 	.word	0x7d70a3d6
 800c178:	20013ce0 	.word	0x20013ce0

0800c17c <speech_commands_model_configure_activations>:


AI_DECLARE_STATIC
ai_bool speech_commands_model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b084      	sub	sp, #16
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
 800c184:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr activations_map[1] = AI_C_ARRAY_INIT;
 800c186:	2300      	movs	r3, #0
 800c188:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_activations_map(activations_map, 1, params)) {
 800c18a:	f107 030c 	add.w	r3, r7, #12
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	2101      	movs	r1, #1
 800c192:	4618      	mov	r0, r3
 800c194:	f002 f916 	bl	800e3c4 <ai_platform_get_activations_map>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d053      	beq.n	800c246 <speech_commands_model_configure_activations+0xca>
    /* Updating activations (byte) offsets */
    serving_default_conv2d_21_input0_output_array.data = AI_PTR(NULL);
 800c19e:	4b2c      	ldr	r3, [pc, #176]	; (800c250 <speech_commands_model_configure_activations+0xd4>)
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	609a      	str	r2, [r3, #8]
    serving_default_conv2d_21_input0_output_array.data_start = AI_PTR(NULL);
 800c1a4:	4b2a      	ldr	r3, [pc, #168]	; (800c250 <speech_commands_model_configure_activations+0xd4>)
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	60da      	str	r2, [r3, #12]
    conv2d_0_output_array.data = AI_PTR(activations_map[0] + 416);
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800c1b0:	4a28      	ldr	r2, [pc, #160]	; (800c254 <speech_commands_model_configure_activations+0xd8>)
 800c1b2:	6093      	str	r3, [r2, #8]
    conv2d_0_output_array.data_start = AI_PTR(activations_map[0] + 416);
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800c1ba:	4a26      	ldr	r2, [pc, #152]	; (800c254 <speech_commands_model_configure_activations+0xd8>)
 800c1bc:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(activations_map[0] + 0);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	4a25      	ldr	r2, [pc, #148]	; (800c258 <speech_commands_model_configure_activations+0xdc>)
 800c1c2:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	4a24      	ldr	r2, [pc, #144]	; (800c258 <speech_commands_model_configure_activations+0xdc>)
 800c1c8:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations_map[0] + 2304);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d0:	4a22      	ldr	r2, [pc, #136]	; (800c25c <speech_commands_model_configure_activations+0xe0>)
 800c1d2:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations_map[0] + 2304);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1da:	4a20      	ldr	r2, [pc, #128]	; (800c25c <speech_commands_model_configure_activations+0xe0>)
 800c1dc:	60d3      	str	r3, [r2, #12]
    nl_4_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	4a1f      	ldr	r2, [pc, #124]	; (800c260 <speech_commands_model_configure_activations+0xe4>)
 800c1e2:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	4a1e      	ldr	r2, [pc, #120]	; (800c260 <speech_commands_model_configure_activations+0xe4>)
 800c1e8:	60d3      	str	r3, [r2, #12]
    dense_5_output_array.data = AI_PTR(activations_map[0] + 256);
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c1f0:	4a1c      	ldr	r2, [pc, #112]	; (800c264 <speech_commands_model_configure_activations+0xe8>)
 800c1f2:	6093      	str	r3, [r2, #8]
    dense_5_output_array.data_start = AI_PTR(activations_map[0] + 256);
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c1fa:	4a1a      	ldr	r2, [pc, #104]	; (800c264 <speech_commands_model_configure_activations+0xe8>)
 800c1fc:	60d3      	str	r3, [r2, #12]
    nl_5_nl_output_array.data = AI_PTR(activations_map[0] + 0);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	4a19      	ldr	r2, [pc, #100]	; (800c268 <speech_commands_model_configure_activations+0xec>)
 800c202:	6093      	str	r3, [r2, #8]
    nl_5_nl_output_array.data_start = AI_PTR(activations_map[0] + 0);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	4a18      	ldr	r2, [pc, #96]	; (800c268 <speech_commands_model_configure_activations+0xec>)
 800c208:	60d3      	str	r3, [r2, #12]
    dense_6_output_array.data = AI_PTR(activations_map[0] + 256);
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c210:	4a16      	ldr	r2, [pc, #88]	; (800c26c <speech_commands_model_configure_activations+0xf0>)
 800c212:	6093      	str	r3, [r2, #8]
    dense_6_output_array.data_start = AI_PTR(activations_map[0] + 256);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800c21a:	4a14      	ldr	r2, [pc, #80]	; (800c26c <speech_commands_model_configure_activations+0xf0>)
 800c21c:	60d3      	str	r3, [r2, #12]
    nl_7_output_array.data = AI_PTR(NULL);
 800c21e:	4b14      	ldr	r3, [pc, #80]	; (800c270 <speech_commands_model_configure_activations+0xf4>)
 800c220:	2200      	movs	r2, #0
 800c222:	609a      	str	r2, [r3, #8]
    nl_7_output_array.data_start = AI_PTR(NULL);
 800c224:	4b12      	ldr	r3, [pc, #72]	; (800c270 <speech_commands_model_configure_activations+0xf4>)
 800c226:	2200      	movs	r2, #0
 800c228:	60da      	str	r2, [r3, #12]
    conv2d_1_scratch0_array.data = AI_PTR(activations_map[0] + 12064);
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800c230:	3320      	adds	r3, #32
 800c232:	4a10      	ldr	r2, [pc, #64]	; (800c274 <speech_commands_model_configure_activations+0xf8>)
 800c234:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(activations_map[0] + 12064);
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 800c23c:	3320      	adds	r3, #32
 800c23e:	4a0d      	ldr	r2, [pc, #52]	; (800c274 <speech_commands_model_configure_activations+0xf8>)
 800c240:	60d3      	str	r3, [r2, #12]
    
    return true;
 800c242:	2301      	movs	r3, #1
 800c244:	e000      	b.n	800c248 <speech_commands_model_configure_activations+0xcc>
  }
  return false;
 800c246:	2300      	movs	r3, #0
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3710      	adds	r7, #16
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}
 800c250:	200004c0 	.word	0x200004c0
 800c254:	200004d0 	.word	0x200004d0
 800c258:	200004e0 	.word	0x200004e0
 800c25c:	200004f0 	.word	0x200004f0
 800c260:	20000500 	.word	0x20000500
 800c264:	20000510 	.word	0x20000510
 800c268:	20000520 	.word	0x20000520
 800c26c:	20000530 	.word	0x20000530
 800c270:	20000540 	.word	0x20000540
 800c274:	200005f0 	.word	0x200005f0

0800c278 <speech_commands_model_configure_weights>:


AI_DECLARE_STATIC
ai_bool speech_commands_model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)
  AI_UNUSED(net_ctx)

  ai_ptr weights_map[1] = AI_C_ARRAY_INIT;
 800c282:	2300      	movs	r3, #0
 800c284:	60fb      	str	r3, [r7, #12]

  if (ai_platform_get_weights_map(weights_map, 1, params)) {
 800c286:	f107 030c 	add.w	r3, r7, #12
 800c28a:	683a      	ldr	r2, [r7, #0]
 800c28c:	2101      	movs	r1, #1
 800c28e:	4618      	mov	r0, r3
 800c290:	f002 f864 	bl	800e35c <ai_platform_get_weights_map>
 800c294:	4603      	mov	r3, r0
 800c296:	2b00      	cmp	r3, #0
 800c298:	f000 80b0 	beq.w	800c3fc <speech_commands_model_configure_weights+0x184>
    /* Updating weights with array addresses */
    
    conv2d_0_weights_array.format |= AI_FMT_FLAG_CONST;
 800c29c:	4b5a      	ldr	r3, [pc, #360]	; (800c408 <speech_commands_model_configure_weights+0x190>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2a4:	4a58      	ldr	r2, [pc, #352]	; (800c408 <speech_commands_model_configure_weights+0x190>)
 800c2a6:	6013      	str	r3, [r2, #0]
    conv2d_0_weights_array.data = AI_PTR(weights_map[0] + 0);
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	4a57      	ldr	r2, [pc, #348]	; (800c408 <speech_commands_model_configure_weights+0x190>)
 800c2ac:	6093      	str	r3, [r2, #8]
    conv2d_0_weights_array.data_start = AI_PTR(weights_map[0] + 0);
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	4a55      	ldr	r2, [pc, #340]	; (800c408 <speech_commands_model_configure_weights+0x190>)
 800c2b2:	60d3      	str	r3, [r2, #12]
    conv2d_0_bias_array.format |= AI_FMT_FLAG_CONST;
 800c2b4:	4b55      	ldr	r3, [pc, #340]	; (800c40c <speech_commands_model_configure_weights+0x194>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2bc:	4a53      	ldr	r2, [pc, #332]	; (800c40c <speech_commands_model_configure_weights+0x194>)
 800c2be:	6013      	str	r3, [r2, #0]
    conv2d_0_bias_array.data = AI_PTR(weights_map[0] + 288);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800c2c6:	4a51      	ldr	r2, [pc, #324]	; (800c40c <speech_commands_model_configure_weights+0x194>)
 800c2c8:	6093      	str	r3, [r2, #8]
    conv2d_0_bias_array.data_start = AI_PTR(weights_map[0] + 288);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800c2d0:	4a4e      	ldr	r2, [pc, #312]	; (800c40c <speech_commands_model_configure_weights+0x194>)
 800c2d2:	60d3      	str	r3, [r2, #12]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 800c2d4:	4b4e      	ldr	r3, [pc, #312]	; (800c410 <speech_commands_model_configure_weights+0x198>)
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2dc:	4a4c      	ldr	r2, [pc, #304]	; (800c410 <speech_commands_model_configure_weights+0x198>)
 800c2de:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(weights_map[0] + 320);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c2e6:	4a4a      	ldr	r2, [pc, #296]	; (800c410 <speech_commands_model_configure_weights+0x198>)
 800c2e8:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(weights_map[0] + 320);
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800c2f0:	4a47      	ldr	r2, [pc, #284]	; (800c410 <speech_commands_model_configure_weights+0x198>)
 800c2f2:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800c2f4:	4b47      	ldr	r3, [pc, #284]	; (800c414 <speech_commands_model_configure_weights+0x19c>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2fc:	4a45      	ldr	r2, [pc, #276]	; (800c414 <speech_commands_model_configure_weights+0x19c>)
 800c2fe:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(weights_map[0] + 2624);
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 800c306:	4a43      	ldr	r2, [pc, #268]	; (800c414 <speech_commands_model_configure_weights+0x19c>)
 800c308:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(weights_map[0] + 2624);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	f503 6324 	add.w	r3, r3, #2624	; 0xa40
 800c310:	4a40      	ldr	r2, [pc, #256]	; (800c414 <speech_commands_model_configure_weights+0x19c>)
 800c312:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800c314:	4b40      	ldr	r3, [pc, #256]	; (800c418 <speech_commands_model_configure_weights+0x1a0>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c31c:	4a3e      	ldr	r2, [pc, #248]	; (800c418 <speech_commands_model_configure_weights+0x1a0>)
 800c31e:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights_map[0] + 2656);
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 800c326:	4a3c      	ldr	r2, [pc, #240]	; (800c418 <speech_commands_model_configure_weights+0x1a0>)
 800c328:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights_map[0] + 2656);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	f503 6326 	add.w	r3, r3, #2656	; 0xa60
 800c330:	4a39      	ldr	r2, [pc, #228]	; (800c418 <speech_commands_model_configure_weights+0x1a0>)
 800c332:	60d3      	str	r3, [r2, #12]
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800c334:	4b39      	ldr	r3, [pc, #228]	; (800c41c <speech_commands_model_configure_weights+0x1a4>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c33c:	4a37      	ldr	r2, [pc, #220]	; (800c41c <speech_commands_model_configure_weights+0x1a4>)
 800c33e:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights_map[0] + 150112);
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800c346:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c34a:	4a34      	ldr	r2, [pc, #208]	; (800c41c <speech_commands_model_configure_weights+0x1a4>)
 800c34c:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights_map[0] + 150112);
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800c354:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c358:	4a30      	ldr	r2, [pc, #192]	; (800c41c <speech_commands_model_configure_weights+0x1a4>)
 800c35a:	60d3      	str	r3, [r2, #12]
    dense_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800c35c:	4b30      	ldr	r3, [pc, #192]	; (800c420 <speech_commands_model_configure_weights+0x1a8>)
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c364:	4a2e      	ldr	r2, [pc, #184]	; (800c420 <speech_commands_model_configure_weights+0x1a8>)
 800c366:	6013      	str	r3, [r2, #0]
    dense_5_weights_array.data = AI_PTR(weights_map[0] + 150368);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800c36e:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800c372:	4a2b      	ldr	r2, [pc, #172]	; (800c420 <speech_commands_model_configure_weights+0x1a8>)
 800c374:	6093      	str	r3, [r2, #8]
    dense_5_weights_array.data_start = AI_PTR(weights_map[0] + 150368);
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	f503 3312 	add.w	r3, r3, #149504	; 0x24800
 800c37c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800c380:	4a27      	ldr	r2, [pc, #156]	; (800c420 <speech_commands_model_configure_weights+0x1a8>)
 800c382:	60d3      	str	r3, [r2, #12]
    dense_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800c384:	4b27      	ldr	r3, [pc, #156]	; (800c424 <speech_commands_model_configure_weights+0x1ac>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c38c:	4a25      	ldr	r2, [pc, #148]	; (800c424 <speech_commands_model_configure_weights+0x1ac>)
 800c38e:	6013      	str	r3, [r2, #0]
    dense_5_bias_array.data = AI_PTR(weights_map[0] + 166752);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	f503 3322 	add.w	r3, r3, #165888	; 0x28800
 800c396:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800c39a:	4a22      	ldr	r2, [pc, #136]	; (800c424 <speech_commands_model_configure_weights+0x1ac>)
 800c39c:	6093      	str	r3, [r2, #8]
    dense_5_bias_array.data_start = AI_PTR(weights_map[0] + 166752);
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f503 3322 	add.w	r3, r3, #165888	; 0x28800
 800c3a4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800c3a8:	4a1e      	ldr	r2, [pc, #120]	; (800c424 <speech_commands_model_configure_weights+0x1ac>)
 800c3aa:	60d3      	str	r3, [r2, #12]
    dense_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800c3ac:	4b1e      	ldr	r3, [pc, #120]	; (800c428 <speech_commands_model_configure_weights+0x1b0>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c3b4:	4a1c      	ldr	r2, [pc, #112]	; (800c428 <speech_commands_model_configure_weights+0x1b0>)
 800c3b6:	6013      	str	r3, [r2, #0]
    dense_6_weights_array.data = AI_PTR(weights_map[0] + 167008);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	f503 3323 	add.w	r3, r3, #166912	; 0x28c00
 800c3be:	3360      	adds	r3, #96	; 0x60
 800c3c0:	4a19      	ldr	r2, [pc, #100]	; (800c428 <speech_commands_model_configure_weights+0x1b0>)
 800c3c2:	6093      	str	r3, [r2, #8]
    dense_6_weights_array.data_start = AI_PTR(weights_map[0] + 167008);
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	f503 3323 	add.w	r3, r3, #166912	; 0x28c00
 800c3ca:	3360      	adds	r3, #96	; 0x60
 800c3cc:	4a16      	ldr	r2, [pc, #88]	; (800c428 <speech_commands_model_configure_weights+0x1b0>)
 800c3ce:	60d3      	str	r3, [r2, #12]
    dense_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800c3d0:	4b16      	ldr	r3, [pc, #88]	; (800c42c <speech_commands_model_configure_weights+0x1b4>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c3d8:	4a14      	ldr	r2, [pc, #80]	; (800c42c <speech_commands_model_configure_weights+0x1b4>)
 800c3da:	6013      	str	r3, [r2, #0]
    dense_6_bias_array.data = AI_PTR(weights_map[0] + 176736);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
 800c3e2:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c3e6:	4a11      	ldr	r2, [pc, #68]	; (800c42c <speech_commands_model_configure_weights+0x1b4>)
 800c3e8:	6093      	str	r3, [r2, #8]
    dense_6_bias_array.data_start = AI_PTR(weights_map[0] + 176736);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f503 332c 	add.w	r3, r3, #176128	; 0x2b000
 800c3f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c3f4:	4a0d      	ldr	r2, [pc, #52]	; (800c42c <speech_commands_model_configure_weights+0x1b4>)
 800c3f6:	60d3      	str	r3, [r2, #12]
    return true;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e000      	b.n	800c3fe <speech_commands_model_configure_weights+0x186>
  }
  return false;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	3710      	adds	r7, #16
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
 800c406:	bf00      	nop
 800c408:	20000550 	.word	0x20000550
 800c40c:	20000560 	.word	0x20000560
 800c410:	20000570 	.word	0x20000570
 800c414:	20000580 	.word	0x20000580
 800c418:	20000590 	.word	0x20000590
 800c41c:	200005a0 	.word	0x200005a0
 800c420:	200005b0 	.word	0x200005b0
 800c424:	200005c0 	.word	0x200005c0
 800c428:	200005d0 	.word	0x200005d0
 800c42c:	200005e0 	.word	0x200005e0

0800c430 <ai_speech_commands_model_create>:
}

AI_API_ENTRY
ai_error ai_speech_commands_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af02      	add	r7, sp, #8
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800c43a:	2300      	movs	r3, #0
 800c43c:	9301      	str	r3, [sp, #4]
 800c43e:	2304      	movs	r3, #4
 800c440:	9300      	str	r3, [sp, #0]
 800c442:	2301      	movs	r3, #1
 800c444:	4a04      	ldr	r2, [pc, #16]	; (800c458 <ai_speech_commands_model_create+0x28>)
 800c446:	6839      	ldr	r1, [r7, #0]
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f001 ffef 	bl	800e42c <ai_platform_network_create>
 800c44e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	20000e98 	.word	0x20000e98

0800c45c <ai_speech_commands_model_init>:
}

AI_API_ENTRY
ai_bool ai_speech_commands_model_init(
  ai_handle network, const ai_network_params* params)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800c466:	6839      	ldr	r1, [r7, #0]
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f002 f8b5 	bl	800e5d8 <ai_platform_network_init>
 800c46e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d101      	bne.n	800c47a <ai_speech_commands_model_init+0x1e>
 800c476:	2300      	movs	r3, #0
 800c478:	e028      	b.n	800c4cc <ai_speech_commands_model_init+0x70>

  ai_bool ok = true;
 800c47a:	2301      	movs	r3, #1
 800c47c:	72fb      	strb	r3, [r7, #11]
  ok &= speech_commands_model_configure_weights(net_ctx, params);
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	68f8      	ldr	r0, [r7, #12]
 800c482:	f7ff fef9 	bl	800c278 <speech_commands_model_configure_weights>
 800c486:	4603      	mov	r3, r0
 800c488:	461a      	mov	r2, r3
 800c48a:	7afb      	ldrb	r3, [r7, #11]
 800c48c:	4013      	ands	r3, r2
 800c48e:	2b00      	cmp	r3, #0
 800c490:	bf14      	ite	ne
 800c492:	2301      	movne	r3, #1
 800c494:	2300      	moveq	r3, #0
 800c496:	72fb      	strb	r3, [r7, #11]
  ok &= speech_commands_model_configure_activations(net_ctx, params);
 800c498:	6839      	ldr	r1, [r7, #0]
 800c49a:	68f8      	ldr	r0, [r7, #12]
 800c49c:	f7ff fe6e 	bl	800c17c <speech_commands_model_configure_activations>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	461a      	mov	r2, r3
 800c4a4:	7afb      	ldrb	r3, [r7, #11]
 800c4a6:	4013      	ands	r3, r2
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	bf14      	ite	ne
 800c4ac:	2301      	movne	r3, #1
 800c4ae:	2300      	moveq	r3, #0
 800c4b0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f002 f9a2 	bl	800e7fc <ai_platform_network_post_init>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	7afb      	ldrb	r3, [r7, #11]
 800c4be:	4013      	ands	r3, r2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	bf14      	ite	ne
 800c4c4:	2301      	movne	r3, #1
 800c4c6:	2300      	moveq	r3, #0
 800c4c8:	72fb      	strb	r3, [r7, #11]

  return ok;
 800c4ca:	7afb      	ldrb	r3, [r7, #11]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <ai_speech_commands_model_run>:


AI_API_ENTRY
ai_i32 ai_speech_commands_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	68b9      	ldr	r1, [r7, #8]
 800c4e4:	68f8      	ldr	r0, [r7, #12]
 800c4e6:	f002 fa1d 	bl	800e924 <ai_platform_network_process>
 800c4ea:	4603      	mov	r3, r0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3710      	adds	r7, #16
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <ai_speech_commands_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_speech_commands_model_data_weights_get(void)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	af00      	add	r7, sp, #0
    AI_PTR(AI_MAGIC_MARKER),
    AI_PTR(s_speech_commands_model_weights_array_u64),
    AI_PTR(AI_MAGIC_MARKER)
  };

  return AI_HANDLE_PTR(s_speech_commands_model_weights_map);
 800c4f8:	4b02      	ldr	r3, [pc, #8]	; (800c504 <ai_speech_commands_model_data_weights_get+0x10>)

}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c502:	4770      	bx	lr
 800c504:	08062938 	.word	0x08062938

0800c508 <D16_GENERIC>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	b089      	sub	sp, #36	; 0x24
 800c50e:	68d4      	ldr	r4, [r2, #12]
 800c510:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c512:	6993      	ldr	r3, [r2, #24]
 800c514:	9407      	str	r4, [sp, #28]
 800c516:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c518:	9306      	str	r3, [sp, #24]
 800c51a:	9402      	str	r4, [sp, #8]
 800c51c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c520:	f8d2 b014 	ldr.w	fp, [r2, #20]
 800c524:	69d3      	ldr	r3, [r2, #28]
 800c526:	6896      	ldr	r6, [r2, #8]
 800c528:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c52a:	9103      	str	r1, [sp, #12]
 800c52c:	2d00      	cmp	r5, #0
 800c52e:	d066      	beq.n	800c5fe <D16_GENERIC+0xf6>
 800c530:	f004 0510 	and.w	r5, r4, #16
 800c534:	f004 0420 	and.w	r4, r4, #32
 800c538:	9504      	str	r5, [sp, #16]
 800c53a:	4938      	ldr	r1, [pc, #224]	; (800c61c <D16_GENERIC+0x114>)
 800c53c:	9405      	str	r4, [sp, #20]
 800c53e:	f04f 0e00 	mov.w	lr, #0
 800c542:	4635      	mov	r5, r6
 800c544:	e04f      	b.n	800c5e6 <D16_GENERIC+0xde>
 800c546:	5d87      	ldrb	r7, [r0, r6]
 800c548:	7804      	ldrb	r4, [r0, #0]
 800c54a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c54e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 800c552:	b2e6      	uxtb	r6, r4
 800c554:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800c558:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800c55c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800c560:	4433      	add	r3, r6
 800c562:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800c566:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800c56a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c56e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800c572:	0aa3      	lsrs	r3, r4, #10
 800c574:	4c2a      	ldr	r4, [pc, #168]	; (800c620 <D16_GENERIC+0x118>)
 800c576:	fb26 5404 	smlad	r4, r6, r4, r5
 800c57a:	4d2a      	ldr	r5, [pc, #168]	; (800c624 <D16_GENERIC+0x11c>)
 800c57c:	fb26 f505 	smuad	r5, r6, r5
 800c580:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800c584:	eb04 080a 	add.w	r8, r4, sl
 800c588:	eba8 080b 	sub.w	r8, r8, fp
 800c58c:	4646      	mov	r6, r8
 800c58e:	17f7      	asrs	r7, r6, #31
 800c590:	e9cd 6700 	strd	r6, r7, [sp]
 800c594:	9e04      	ldr	r6, [sp, #16]
 800c596:	f10e 0c01 	add.w	ip, lr, #1
 800c59a:	b16e      	cbz	r6, 800c5b8 <D16_GENERIC+0xb0>
 800c59c:	6a16      	ldr	r6, [r2, #32]
 800c59e:	9f01      	ldr	r7, [sp, #4]
 800c5a0:	fba8 8906 	umull	r8, r9, r8, r6
 800c5a4:	fb06 9907 	mla	r9, r6, r7, r9
 800c5a8:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800c5ac:	f149 0900 	adc.w	r9, r9, #0
 800c5b0:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800c5b4:	46a3      	mov	fp, r4
 800c5b6:	4654      	mov	r4, sl
 800c5b8:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800c5ba:	9f02      	ldr	r7, [sp, #8]
 800c5bc:	0424      	lsls	r4, r4, #16
 800c5be:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c5c2:	f04f 0900 	mov.w	r9, #0
 800c5c6:	fb0e fe06 	mul.w	lr, lr, r6
 800c5ca:	fbc7 8904 	smlal	r8, r9, r7, r4
 800c5ce:	9e03      	ldr	r6, [sp, #12]
 800c5d0:	464f      	mov	r7, r9
 800c5d2:	10bc      	asrs	r4, r7, #2
 800c5d4:	f304 040f 	ssat	r4, #16, r4
 800c5d8:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 800c5dc:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800c5de:	fa1f fe8c 	uxth.w	lr, ip
 800c5e2:	4574      	cmp	r4, lr
 800c5e4:	d90a      	bls.n	800c5fc <D16_GENERIC+0xf4>
 800c5e6:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800c5e8:	2c01      	cmp	r4, #1
 800c5ea:	b2e6      	uxtb	r6, r4
 800c5ec:	d1ab      	bne.n	800c546 <D16_GENERIC+0x3e>
 800c5ee:	9e05      	ldr	r6, [sp, #20]
 800c5f0:	f850 4b02 	ldr.w	r4, [r0], #2
 800c5f4:	2e00      	cmp	r6, #0
 800c5f6:	d0ac      	beq.n	800c552 <D16_GENERIC+0x4a>
 800c5f8:	ba64      	rev16	r4, r4
 800c5fa:	e7aa      	b.n	800c552 <D16_GENERIC+0x4a>
 800c5fc:	462e      	mov	r6, r5
 800c5fe:	9907      	ldr	r1, [sp, #28]
 800c600:	61d3      	str	r3, [r2, #28]
 800c602:	9b06      	ldr	r3, [sp, #24]
 800c604:	6096      	str	r6, [r2, #8]
 800c606:	2000      	movs	r0, #0
 800c608:	60d1      	str	r1, [r2, #12]
 800c60a:	f8c2 a010 	str.w	sl, [r2, #16]
 800c60e:	f8c2 b014 	str.w	fp, [r2, #20]
 800c612:	6193      	str	r3, [r2, #24]
 800c614:	b009      	add	sp, #36	; 0x24
 800c616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61a:	bf00      	nop
 800c61c:	20000000 	.word	0x20000000
 800c620:	00030001 	.word	0x00030001
 800c624:	00010003 	.word	0x00010003

0800c628 <D24_GENERIC>:
 800c628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c62c:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 800c62e:	6993      	ldr	r3, [r2, #24]
 800c630:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800c632:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c636:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800c63a:	6894      	ldr	r4, [r2, #8]
 800c63c:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800c640:	b089      	sub	sp, #36	; 0x24
 800c642:	9307      	str	r3, [sp, #28]
 800c644:	9503      	str	r5, [sp, #12]
 800c646:	69d3      	ldr	r3, [r2, #28]
 800c648:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800c64a:	9104      	str	r1, [sp, #16]
 800c64c:	2e00      	cmp	r6, #0
 800c64e:	f000 8096 	beq.w	800c77e <D24_GENERIC+0x156>
 800c652:	f005 0610 	and.w	r6, r5, #16
 800c656:	f005 0520 	and.w	r5, r5, #32
 800c65a:	4954      	ldr	r1, [pc, #336]	; (800c7ac <D24_GENERIC+0x184>)
 800c65c:	9605      	str	r6, [sp, #20]
 800c65e:	9506      	str	r5, [sp, #24]
 800c660:	f04f 0e00 	mov.w	lr, #0
 800c664:	f8cd 9008 	str.w	r9, [sp, #8]
 800c668:	e06a      	b.n	800c740 <D24_GENERIC+0x118>
 800c66a:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 800c66e:	f810 8007 	ldrb.w	r8, [r0, r7]
 800c672:	f890 c000 	ldrb.w	ip, [r0]
 800c676:	042d      	lsls	r5, r5, #16
 800c678:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800c67c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 800c680:	44ac      	add	ip, r5
 800c682:	4438      	add	r0, r7
 800c684:	fa5f f68c 	uxtb.w	r6, ip
 800c688:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800c68c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800c690:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 800c694:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c698:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800c69c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800c6a0:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 800c6a4:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800c6a8:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800c6ac:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800c6b0:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800c6b4:	4d3e      	ldr	r5, [pc, #248]	; (800c7b0 <D24_GENERIC+0x188>)
 800c6b6:	fb26 b705 	smlad	r7, r6, r5, fp
 800c6ba:	4d3e      	ldr	r5, [pc, #248]	; (800c7b4 <D24_GENERIC+0x18c>)
 800c6bc:	fb26 4b05 	smlad	fp, r6, r5, r4
 800c6c0:	f3c3 0409 	ubfx	r4, r3, #0, #10
 800c6c4:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800c6c8:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800c6cc:	2401      	movs	r4, #1
 800c6ce:	fb26 f604 	smuad	r6, r6, r4
 800c6d2:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 800c6d6:	9f02      	ldr	r7, [sp, #8]
 800c6d8:	eb0e 0c04 	add.w	ip, lr, r4
 800c6dc:	eb08 0406 	add.w	r4, r8, r6
 800c6e0:	eb05 060a 	add.w	r6, r5, sl
 800c6e4:	1bf6      	subs	r6, r6, r7
 800c6e6:	4637      	mov	r7, r6
 800c6e8:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800c6ec:	e9cd 7800 	strd	r7, r8, [sp]
 800c6f0:	9f05      	ldr	r7, [sp, #20]
 800c6f2:	b177      	cbz	r7, 800c712 <D24_GENERIC+0xea>
 800c6f4:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800c6f8:	9502      	str	r5, [sp, #8]
 800c6fa:	fba6 9a08 	umull	r9, sl, r6, r8
 800c6fe:	9e01      	ldr	r6, [sp, #4]
 800c700:	fb08 aa06 	mla	sl, r8, r6, sl
 800c704:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 800c708:	f14a 0700 	adc.w	r7, sl, #0
 800c70c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800c710:	4655      	mov	r5, sl
 800c712:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 800c714:	9f03      	ldr	r7, [sp, #12]
 800c716:	03ad      	lsls	r5, r5, #14
 800c718:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c71c:	f04f 0900 	mov.w	r9, #0
 800c720:	fb0e fe06 	mul.w	lr, lr, r6
 800c724:	fbc7 8905 	smlal	r8, r9, r7, r5
 800c728:	9e04      	ldr	r6, [sp, #16]
 800c72a:	464f      	mov	r7, r9
 800c72c:	10bd      	asrs	r5, r7, #2
 800c72e:	f305 050f 	ssat	r5, #16, r5
 800c732:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 800c736:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c738:	fa1f fe8c 	uxth.w	lr, ip
 800c73c:	4575      	cmp	r5, lr
 800c73e:	d91c      	bls.n	800c77a <D24_GENERIC+0x152>
 800c740:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800c742:	b2ef      	uxtb	r7, r5
 800c744:	2d01      	cmp	r5, #1
 800c746:	b23e      	sxth	r6, r7
 800c748:	d18f      	bne.n	800c66a <D24_GENERIC+0x42>
 800c74a:	9d06      	ldr	r5, [sp, #24]
 800c74c:	b15d      	cbz	r5, 800c766 <D24_GENERIC+0x13e>
 800c74e:	f01e 0f01 	tst.w	lr, #1
 800c752:	d122      	bne.n	800c79a <D24_GENERIC+0x172>
 800c754:	7805      	ldrb	r5, [r0, #0]
 800c756:	78c7      	ldrb	r7, [r0, #3]
 800c758:	7846      	ldrb	r6, [r0, #1]
 800c75a:	022d      	lsls	r5, r5, #8
 800c75c:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800c760:	44b4      	add	ip, r6
 800c762:	3002      	adds	r0, #2
 800c764:	e78e      	b.n	800c684 <D24_GENERIC+0x5c>
 800c766:	7846      	ldrb	r6, [r0, #1]
 800c768:	f890 c002 	ldrb.w	ip, [r0, #2]
 800c76c:	f810 5b03 	ldrb.w	r5, [r0], #3
 800c770:	0236      	lsls	r6, r6, #8
 800c772:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 800c776:	44ac      	add	ip, r5
 800c778:	e784      	b.n	800c684 <D24_GENERIC+0x5c>
 800c77a:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c77e:	61d3      	str	r3, [r2, #28]
 800c780:	9b07      	ldr	r3, [sp, #28]
 800c782:	6094      	str	r4, [r2, #8]
 800c784:	2000      	movs	r0, #0
 800c786:	f8c2 b00c 	str.w	fp, [r2, #12]
 800c78a:	f8c2 a010 	str.w	sl, [r2, #16]
 800c78e:	f8c2 9014 	str.w	r9, [r2, #20]
 800c792:	6193      	str	r3, [r2, #24]
 800c794:	b009      	add	sp, #36	; 0x24
 800c796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c79a:	78c5      	ldrb	r5, [r0, #3]
 800c79c:	7887      	ldrb	r7, [r0, #2]
 800c79e:	f810 6b04 	ldrb.w	r6, [r0], #4
 800c7a2:	022d      	lsls	r5, r5, #8
 800c7a4:	eb05 4c07 	add.w	ip, r5, r7, lsl #16
 800c7a8:	44b4      	add	ip, r6
 800c7aa:	e76b      	b.n	800c684 <D24_GENERIC+0x5c>
 800c7ac:	20000000 	.word	0x20000000
 800c7b0:	00030001 	.word	0x00030001
 800c7b4:	00060007 	.word	0x00060007

0800c7b8 <D32_GENERIC>:
 800c7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7bc:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c7be:	6993      	ldr	r3, [r2, #24]
 800c7c0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c7c2:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c7c6:	f8d2 9014 	ldr.w	r9, [r2, #20]
 800c7ca:	69d6      	ldr	r6, [r2, #28]
 800c7cc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 800c7d0:	b089      	sub	sp, #36	; 0x24
 800c7d2:	9307      	str	r3, [sp, #28]
 800c7d4:	9403      	str	r4, [sp, #12]
 800c7d6:	6893      	ldr	r3, [r2, #8]
 800c7d8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c7da:	9104      	str	r1, [sp, #16]
 800c7dc:	2d00      	cmp	r5, #0
 800c7de:	f000 809f 	beq.w	800c920 <D32_GENERIC+0x168>
 800c7e2:	f004 0510 	and.w	r5, r4, #16
 800c7e6:	f004 0420 	and.w	r4, r4, #32
 800c7ea:	9505      	str	r5, [sp, #20]
 800c7ec:	4953      	ldr	r1, [pc, #332]	; (800c93c <D32_GENERIC+0x184>)
 800c7ee:	9406      	str	r4, [sp, #24]
 800c7f0:	f04f 0c00 	mov.w	ip, #0
 800c7f4:	f8cd 9008 	str.w	r9, [sp, #8]
 800c7f8:	461d      	mov	r5, r3
 800c7fa:	4617      	mov	r7, r2
 800c7fc:	e077      	b.n	800c8ee <D32_GENERIC+0x136>
 800c7fe:	f818 3003 	ldrb.w	r3, [r8, r3]
 800c802:	f810 800e 	ldrb.w	r8, [r0, lr]
 800c806:	f810 e002 	ldrb.w	lr, [r0, r2]
 800c80a:	7800      	ldrb	r0, [r0, #0]
 800c80c:	041b      	lsls	r3, r3, #16
 800c80e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800c812:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800c816:	4403      	add	r3, r0
 800c818:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 800c81c:	b2dc      	uxtb	r4, r3
 800c81e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800c822:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800c826:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 800c82a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800c82e:	0e1b      	lsrs	r3, r3, #24
 800c830:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 800c834:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 800c838:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c83c:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800c840:	eb06 2e92 	add.w	lr, r6, r2, lsr #10
 800c844:	eb03 269e 	add.w	r6, r3, lr, lsr #10
 800c848:	f3c6 0309 	ubfx	r3, r6, #0, #10
 800c84c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800c850:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800c854:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800c858:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 800c85c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c860:	4b37      	ldr	r3, [pc, #220]	; (800c940 <D32_GENERIC+0x188>)
 800c862:	fb22 b403 	smlad	r4, r2, r3, fp
 800c866:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800c86a:	fb2e 4803 	smlad	r8, lr, r3, r4
 800c86e:	4b35      	ldr	r3, [pc, #212]	; (800c944 <D32_GENERIC+0x18c>)
 800c870:	fb22 5503 	smlad	r5, r2, r3, r5
 800c874:	4b34      	ldr	r3, [pc, #208]	; (800c948 <D32_GENERIC+0x190>)
 800c876:	fb2e 5b03 	smlad	fp, lr, r3, r5
 800c87a:	2301      	movs	r3, #1
 800c87c:	fb22 f203 	smuad	r2, r2, r3
 800c880:	4b32      	ldr	r3, [pc, #200]	; (800c94c <D32_GENERIC+0x194>)
 800c882:	fb2e 2503 	smlad	r5, lr, r3, r2
 800c886:	9b02      	ldr	r3, [sp, #8]
 800c888:	f5a8 4480 	sub.w	r4, r8, #16384	; 0x4000
 800c88c:	eb04 080a 	add.w	r8, r4, sl
 800c890:	eba8 0803 	sub.w	r8, r8, r3
 800c894:	4642      	mov	r2, r8
 800c896:	17d3      	asrs	r3, r2, #31
 800c898:	e9cd 2300 	strd	r2, r3, [sp]
 800c89c:	9b05      	ldr	r3, [sp, #20]
 800c89e:	f10c 0e01 	add.w	lr, ip, #1
 800c8a2:	b16b      	cbz	r3, 800c8c0 <D32_GENERIC+0x108>
 800c8a4:	6a3a      	ldr	r2, [r7, #32]
 800c8a6:	9b01      	ldr	r3, [sp, #4]
 800c8a8:	9402      	str	r4, [sp, #8]
 800c8aa:	fba8 8902 	umull	r8, r9, r8, r2
 800c8ae:	fb02 9903 	mla	r9, r2, r3, r9
 800c8b2:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800c8b6:	f149 0900 	adc.w	r9, r9, #0
 800c8ba:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800c8be:	4654      	mov	r4, sl
 800c8c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c8c2:	9a04      	ldr	r2, [sp, #16]
 800c8c4:	fb0c fc03 	mul.w	ip, ip, r3
 800c8c8:	9b03      	ldr	r3, [sp, #12]
 800c8ca:	0364      	lsls	r4, r4, #13
 800c8cc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800c8d0:	f04f 0900 	mov.w	r9, #0
 800c8d4:	fbc3 8904 	smlal	r8, r9, r3, r4
 800c8d8:	464b      	mov	r3, r9
 800c8da:	109b      	asrs	r3, r3, #2
 800c8dc:	f303 030f 	ssat	r3, #16, r3
 800c8e0:	f822 301c 	strh.w	r3, [r2, ip, lsl #1]
 800c8e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c8e6:	fa1f fc8e 	uxth.w	ip, lr
 800c8ea:	4563      	cmp	r3, ip
 800c8ec:	d914      	bls.n	800c918 <D32_GENERIC+0x160>
 800c8ee:	8d7c      	ldrh	r4, [r7, #42]	; 0x2a
 800c8f0:	b2e2      	uxtb	r2, r4
 800c8f2:	eb02 0e42 	add.w	lr, r2, r2, lsl #1
 800c8f6:	eb00 080e 	add.w	r8, r0, lr
 800c8fa:	4253      	negs	r3, r2
 800c8fc:	2c01      	cmp	r4, #1
 800c8fe:	eb08 0403 	add.w	r4, r8, r3
 800c902:	f47f af7c 	bne.w	800c7fe <D32_GENERIC+0x46>
 800c906:	1d02      	adds	r2, r0, #4
 800c908:	6803      	ldr	r3, [r0, #0]
 800c90a:	9806      	ldr	r0, [sp, #24]
 800c90c:	b110      	cbz	r0, 800c914 <D32_GENERIC+0x15c>
 800c90e:	ba5b      	rev16	r3, r3
 800c910:	4610      	mov	r0, r2
 800c912:	e783      	b.n	800c81c <D32_GENERIC+0x64>
 800c914:	4610      	mov	r0, r2
 800c916:	e781      	b.n	800c81c <D32_GENERIC+0x64>
 800c918:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800c91c:	462b      	mov	r3, r5
 800c91e:	463a      	mov	r2, r7
 800c920:	6093      	str	r3, [r2, #8]
 800c922:	9b07      	ldr	r3, [sp, #28]
 800c924:	f8c2 b00c 	str.w	fp, [r2, #12]
 800c928:	2000      	movs	r0, #0
 800c92a:	61d6      	str	r6, [r2, #28]
 800c92c:	f8c2 a010 	str.w	sl, [r2, #16]
 800c930:	f8c2 9014 	str.w	r9, [r2, #20]
 800c934:	6193      	str	r3, [r2, #24]
 800c936:	b009      	add	sp, #36	; 0x24
 800c938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93c:	20000000 	.word	0x20000000
 800c940:	00060003 	.word	0x00060003
 800c944:	000a000c 	.word	0x000a000c
 800c948:	000c000a 	.word	0x000c000a
 800c94c:	00030006 	.word	0x00030006

0800c950 <D48_GENERIC>:
 800c950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c954:	b089      	sub	sp, #36	; 0x24
 800c956:	6953      	ldr	r3, [r2, #20]
 800c958:	68d4      	ldr	r4, [r2, #12]
 800c95a:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800c95c:	9302      	str	r3, [sp, #8]
 800c95e:	9400      	str	r4, [sp, #0]
 800c960:	6993      	ldr	r3, [r2, #24]
 800c962:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800c964:	9307      	str	r3, [sp, #28]
 800c966:	9403      	str	r4, [sp, #12]
 800c968:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800c96c:	69d6      	ldr	r6, [r2, #28]
 800c96e:	6893      	ldr	r3, [r2, #8]
 800c970:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800c972:	9104      	str	r1, [sp, #16]
 800c974:	2d00      	cmp	r5, #0
 800c976:	f000 80c5 	beq.w	800cb04 <D48_GENERIC+0x1b4>
 800c97a:	f004 0510 	and.w	r5, r4, #16
 800c97e:	f004 0420 	and.w	r4, r4, #32
 800c982:	4967      	ldr	r1, [pc, #412]	; (800cb20 <D48_GENERIC+0x1d0>)
 800c984:	9505      	str	r5, [sp, #20]
 800c986:	9406      	str	r4, [sp, #24]
 800c988:	f04f 0c00 	mov.w	ip, #0
 800c98c:	4657      	mov	r7, sl
 800c98e:	9301      	str	r3, [sp, #4]
 800c990:	e09c      	b.n	800cacc <D48_GENERIC+0x17c>
 800c992:	f81b 4005 	ldrb.w	r4, [fp, r5]
 800c996:	f810 b009 	ldrb.w	fp, [r0, r9]
 800c99a:	f81a 9009 	ldrb.w	r9, [sl, r9]
 800c99e:	f810 a00e 	ldrb.w	sl, [r0, lr]
 800c9a2:	7800      	ldrb	r0, [r0, #0]
 800c9a4:	0424      	lsls	r4, r4, #16
 800c9a6:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800c9aa:	f818 4005 	ldrb.w	r4, [r8, r5]
 800c9ae:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 800c9b2:	44a8      	add	r8, r5
 800c9b4:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 800c9b8:	eb0b 0500 	add.w	r5, fp, r0
 800c9bc:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 800c9c0:	fa5f f885 	uxtb.w	r8, r5
 800c9c4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 800c9c8:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800c9cc:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800c9d0:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 800c9d4:	0e2d      	lsrs	r5, r5, #24
 800c9d6:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800c9da:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800c9de:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 800c9e2:	b2e6      	uxtb	r6, r4
 800c9e4:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 800c9e8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800c9ec:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800c9f0:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800c9f4:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 800c9f8:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800c9fc:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800ca00:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 800ca04:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ca08:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800ca0c:	f3c6 0909 	ubfx	r9, r6, #0, #10
 800ca10:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800ca14:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800ca18:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ca1c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 800ca20:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 800ca24:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 800ca28:	4c3e      	ldr	r4, [pc, #248]	; (800cb24 <D48_GENERIC+0x1d4>)
 800ca2a:	9d00      	ldr	r5, [sp, #0]
 800ca2c:	fb2a 5404 	smlad	r4, sl, r4, r5
 800ca30:	4d3d      	ldr	r5, [pc, #244]	; (800cb28 <D48_GENERIC+0x1d8>)
 800ca32:	fb28 4405 	smlad	r4, r8, r5, r4
 800ca36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ca3a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800ca3e:	4c3b      	ldr	r4, [pc, #236]	; (800cb2c <D48_GENERIC+0x1dc>)
 800ca40:	9b01      	ldr	r3, [sp, #4]
 800ca42:	fb2a 3304 	smlad	r3, sl, r4, r3
 800ca46:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 800ca4a:	fb28 3304 	smlad	r3, r8, r4, r3
 800ca4e:	4c38      	ldr	r4, [pc, #224]	; (800cb30 <D48_GENERIC+0x1e0>)
 800ca50:	fb2e 3304 	smlad	r3, lr, r4, r3
 800ca54:	2501      	movs	r5, #1
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	fb2a fa05 	smuad	sl, sl, r5
 800ca5c:	4b35      	ldr	r3, [pc, #212]	; (800cb34 <D48_GENERIC+0x1e4>)
 800ca5e:	fb28 a803 	smlad	r8, r8, r3, sl
 800ca62:	4b35      	ldr	r3, [pc, #212]	; (800cb38 <D48_GENERIC+0x1e8>)
 800ca64:	fb2e 8303 	smlad	r3, lr, r3, r8
 800ca68:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 800ca6c:	9301      	str	r3, [sp, #4]
 800ca6e:	9b02      	ldr	r3, [sp, #8]
 800ca70:	eb04 0807 	add.w	r8, r4, r7
 800ca74:	eba8 0803 	sub.w	r8, r8, r3
 800ca78:	9b05      	ldr	r3, [sp, #20]
 800ca7a:	4465      	add	r5, ip
 800ca7c:	ea4f 7be8 	mov.w	fp, r8, asr #31
 800ca80:	b163      	cbz	r3, 800ca9c <D48_GENERIC+0x14c>
 800ca82:	6a17      	ldr	r7, [r2, #32]
 800ca84:	9402      	str	r4, [sp, #8]
 800ca86:	fba8 8907 	umull	r8, r9, r8, r7
 800ca8a:	fb07 990b 	mla	r9, r7, fp, r9
 800ca8e:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 800ca92:	f149 0900 	adc.w	r9, r9, #0
 800ca96:	ea4f 0749 	mov.w	r7, r9, lsl #1
 800ca9a:	463c      	mov	r4, r7
 800ca9c:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 800caa0:	9b03      	ldr	r3, [sp, #12]
 800caa2:	02e4      	lsls	r4, r4, #11
 800caa4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800caa8:	f04f 0900 	mov.w	r9, #0
 800caac:	fb0c fc0e 	mul.w	ip, ip, lr
 800cab0:	fbc3 8904 	smlal	r8, r9, r3, r4
 800cab4:	9b04      	ldr	r3, [sp, #16]
 800cab6:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800caba:	f304 040f 	ssat	r4, #16, r4
 800cabe:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 800cac2:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cac4:	fa1f fc85 	uxth.w	ip, r5
 800cac8:	4564      	cmp	r4, ip
 800caca:	d919      	bls.n	800cb00 <D48_GENERIC+0x1b0>
 800cacc:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800cace:	fa5f fe84 	uxtb.w	lr, r4
 800cad2:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 800cad6:	f1ce 0500 	rsb	r5, lr, #0
 800cada:	eb00 0b09 	add.w	fp, r0, r9
 800cade:	eb0b 0a05 	add.w	sl, fp, r5
 800cae2:	2c01      	cmp	r4, #1
 800cae4:	eb0a 0809 	add.w	r8, sl, r9
 800cae8:	f47f af53 	bne.w	800c992 <D48_GENERIC+0x42>
 800caec:	9b06      	ldr	r3, [sp, #24]
 800caee:	6805      	ldr	r5, [r0, #0]
 800caf0:	6844      	ldr	r4, [r0, #4]
 800caf2:	3006      	adds	r0, #6
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	f43f af63 	beq.w	800c9c0 <D48_GENERIC+0x70>
 800cafa:	ba6d      	rev16	r5, r5
 800cafc:	ba64      	rev16	r4, r4
 800cafe:	e75f      	b.n	800c9c0 <D48_GENERIC+0x70>
 800cb00:	9b01      	ldr	r3, [sp, #4]
 800cb02:	46ba      	mov	sl, r7
 800cb04:	6093      	str	r3, [r2, #8]
 800cb06:	9b00      	ldr	r3, [sp, #0]
 800cb08:	60d3      	str	r3, [r2, #12]
 800cb0a:	9b02      	ldr	r3, [sp, #8]
 800cb0c:	6153      	str	r3, [r2, #20]
 800cb0e:	9b07      	ldr	r3, [sp, #28]
 800cb10:	61d6      	str	r6, [r2, #28]
 800cb12:	2000      	movs	r0, #0
 800cb14:	f8c2 a010 	str.w	sl, [r2, #16]
 800cb18:	6193      	str	r3, [r2, #24]
 800cb1a:	b009      	add	sp, #36	; 0x24
 800cb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb20:	20000000 	.word	0x20000000
 800cb24:	000f000a 	.word	0x000f000a
 800cb28:	00060003 	.word	0x00060003
 800cb2c:	00150019 	.word	0x00150019
 800cb30:	00190015 	.word	0x00190015
 800cb34:	00030006 	.word	0x00030006
 800cb38:	000a000f 	.word	0x000a000f

0800cb3c <D64_GENERIC>:
 800cb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb40:	b089      	sub	sp, #36	; 0x24
 800cb42:	6913      	ldr	r3, [r2, #16]
 800cb44:	6895      	ldr	r5, [r2, #8]
 800cb46:	9303      	str	r3, [sp, #12]
 800cb48:	9501      	str	r5, [sp, #4]
 800cb4a:	6953      	ldr	r3, [r2, #20]
 800cb4c:	68d5      	ldr	r5, [r2, #12]
 800cb4e:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800cb50:	9304      	str	r3, [sp, #16]
 800cb52:	9500      	str	r5, [sp, #0]
 800cb54:	6993      	ldr	r3, [r2, #24]
 800cb56:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800cb58:	9307      	str	r3, [sp, #28]
 800cb5a:	9505      	str	r5, [sp, #20]
 800cb5c:	69d3      	ldr	r3, [r2, #28]
 800cb5e:	9106      	str	r1, [sp, #24]
 800cb60:	2c00      	cmp	r4, #0
 800cb62:	f000 80d9 	beq.w	800cd18 <D64_GENERIC+0x1dc>
 800cb66:	6a11      	ldr	r1, [r2, #32]
 800cb68:	9102      	str	r1, [sp, #8]
 800cb6a:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 800cd58 <D64_GENERIC+0x21c>
 800cb6e:	f04f 0c00 	mov.w	ip, #0
 800cb72:	4681      	mov	r9, r0
 800cb74:	e0c1      	b.n	800ccfa <D64_GENERIC+0x1be>
 800cb76:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 800cb7a:	4274      	negs	r4, r6
 800cb7c:	eb09 0708 	add.w	r7, r9, r8
 800cb80:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 800cb84:	eb0a 0548 	add.w	r5, sl, r8, lsl #1
 800cb88:	5d38      	ldrb	r0, [r7, r4]
 800cb8a:	5d29      	ldrb	r1, [r5, r4]
 800cb8c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 800cb90:	f819 a008 	ldrb.w	sl, [r9, r8]
 800cb94:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 800cb98:	f899 7000 	ldrb.w	r7, [r9]
 800cb9c:	f815 9014 	ldrb.w	r9, [r5, r4, lsl #1]
 800cba0:	4425      	add	r5, r4
 800cba2:	0409      	lsls	r1, r1, #16
 800cba4:	0400      	lsls	r0, r0, #16
 800cba6:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800cbaa:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800cbae:	f815 b014 	ldrb.w	fp, [r5, r4, lsl #1]
 800cbb2:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 800cbb6:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 800cbba:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800cbbe:	4459      	add	r1, fp
 800cbc0:	eb04 0986 	add.w	r9, r4, r6, lsl #2
 800cbc4:	4438      	add	r0, r7
 800cbc6:	b2c5      	uxtb	r5, r0
 800cbc8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800cbcc:	f85e 6025 	ldr.w	r6, [lr, r5, lsl #2]
 800cbd0:	f85e 5024 	ldr.w	r5, [lr, r4, lsl #2]
 800cbd4:	f3c0 4407 	ubfx	r4, r0, #16, #8
 800cbd8:	0e00      	lsrs	r0, r0, #24
 800cbda:	eb03 0806 	add.w	r8, r3, r6
 800cbde:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 800cbe2:	f85e 4020 	ldr.w	r4, [lr, r0, lsl #2]
 800cbe6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800cbea:	b2c8      	uxtb	r0, r1
 800cbec:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800cbf0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800cbf4:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 800cbf8:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 800cbfc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800cc00:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800cc04:	0e09      	lsrs	r1, r1, #24
 800cc06:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 800cc0a:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800cc0e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 800cc12:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800cc16:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 800cc1a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800cc1e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 800cc22:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800cc26:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800cc2a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800cc2e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 800cc32:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800cc36:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800cc3a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800cc3e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800cc42:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 800cc46:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800cc4a:	0a8b      	lsrs	r3, r1, #10
 800cc4c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800cc50:	4939      	ldr	r1, [pc, #228]	; (800cd38 <D64_GENERIC+0x1fc>)
 800cc52:	9c00      	ldr	r4, [sp, #0]
 800cc54:	fb28 4101 	smlad	r1, r8, r1, r4
 800cc58:	4c38      	ldr	r4, [pc, #224]	; (800cd3c <D64_GENERIC+0x200>)
 800cc5a:	fb27 1104 	smlad	r1, r7, r4, r1
 800cc5e:	4c38      	ldr	r4, [pc, #224]	; (800cd40 <D64_GENERIC+0x204>)
 800cc60:	fb20 1104 	smlad	r1, r0, r4, r1
 800cc64:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 800cc68:	fb2a 1106 	smlad	r1, sl, r6, r1
 800cc6c:	4c35      	ldr	r4, [pc, #212]	; (800cd44 <D64_GENERIC+0x208>)
 800cc6e:	9d01      	ldr	r5, [sp, #4]
 800cc70:	fb28 5404 	smlad	r4, r8, r4, r5
 800cc74:	4d33      	ldr	r5, [pc, #204]	; (800cd44 <D64_GENERIC+0x208>)
 800cc76:	fb2a 4415 	smladx	r4, sl, r5, r4
 800cc7a:	4d33      	ldr	r5, [pc, #204]	; (800cd48 <D64_GENERIC+0x20c>)
 800cc7c:	fb27 4405 	smlad	r4, r7, r5, r4
 800cc80:	fb20 4415 	smladx	r4, r0, r5, r4
 800cc84:	2501      	movs	r5, #1
 800cc86:	9400      	str	r4, [sp, #0]
 800cc88:	fb28 f805 	smuad	r8, r8, r5
 800cc8c:	4c2f      	ldr	r4, [pc, #188]	; (800cd4c <D64_GENERIC+0x210>)
 800cc8e:	fb27 8704 	smlad	r7, r7, r4, r8
 800cc92:	4c2f      	ldr	r4, [pc, #188]	; (800cd50 <D64_GENERIC+0x214>)
 800cc94:	fb20 7004 	smlad	r0, r0, r4, r7
 800cc98:	4c2e      	ldr	r4, [pc, #184]	; (800cd54 <D64_GENERIC+0x218>)
 800cc9a:	fb2a 0004 	smlad	r0, sl, r4, r0
 800cc9e:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 800cca2:	9902      	ldr	r1, [sp, #8]
 800cca4:	9001      	str	r0, [sp, #4]
 800cca6:	b189      	cbz	r1, 800cccc <D64_GENERIC+0x190>
 800cca8:	9803      	ldr	r0, [sp, #12]
 800ccaa:	9c04      	ldr	r4, [sp, #16]
 800ccac:	9604      	str	r6, [sp, #16]
 800ccae:	4430      	add	r0, r6
 800ccb0:	1b00      	subs	r0, r0, r4
 800ccb2:	17c5      	asrs	r5, r0, #31
 800ccb4:	460f      	mov	r7, r1
 800ccb6:	fba0 0101 	umull	r0, r1, r0, r1
 800ccba:	fb07 1105 	mla	r1, r7, r5, r1
 800ccbe:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800ccc2:	f141 0100 	adc.w	r1, r1, #0
 800ccc6:	0049      	lsls	r1, r1, #1
 800ccc8:	9103      	str	r1, [sp, #12]
 800ccca:	460e      	mov	r6, r1
 800cccc:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800ccce:	9905      	ldr	r1, [sp, #20]
 800ccd0:	9806      	ldr	r0, [sp, #24]
 800ccd2:	02b6      	lsls	r6, r6, #10
 800ccd4:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800ccd8:	f04f 0800 	mov.w	r8, #0
 800ccdc:	fb0c f404 	mul.w	r4, ip, r4
 800cce0:	fbc1 7806 	smlal	r7, r8, r1, r6
 800cce4:	4641      	mov	r1, r8
 800cce6:	1089      	asrs	r1, r1, #2
 800cce8:	f301 010f 	ssat	r1, #16, r1
 800ccec:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800ccf0:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 800ccf2:	f10c 0c01 	add.w	ip, ip, #1
 800ccf6:	4561      	cmp	r1, ip
 800ccf8:	dd0e      	ble.n	800cd18 <D64_GENERIC+0x1dc>
 800ccfa:	8d56      	ldrh	r6, [r2, #42]	; 0x2a
 800ccfc:	2e01      	cmp	r6, #1
 800ccfe:	f47f af3a 	bne.w	800cb76 <D64_GENERIC+0x3a>
 800cd02:	6b56      	ldr	r6, [r2, #52]	; 0x34
 800cd04:	06b4      	lsls	r4, r6, #26
 800cd06:	e899 0003 	ldmia.w	r9, {r0, r1}
 800cd0a:	f109 0908 	add.w	r9, r9, #8
 800cd0e:	f57f af5a 	bpl.w	800cbc6 <D64_GENERIC+0x8a>
 800cd12:	ba40      	rev16	r0, r0
 800cd14:	ba49      	rev16	r1, r1
 800cd16:	e756      	b.n	800cbc6 <D64_GENERIC+0x8a>
 800cd18:	61d3      	str	r3, [r2, #28]
 800cd1a:	9b03      	ldr	r3, [sp, #12]
 800cd1c:	9901      	ldr	r1, [sp, #4]
 800cd1e:	6113      	str	r3, [r2, #16]
 800cd20:	9b04      	ldr	r3, [sp, #16]
 800cd22:	6091      	str	r1, [r2, #8]
 800cd24:	6153      	str	r3, [r2, #20]
 800cd26:	9900      	ldr	r1, [sp, #0]
 800cd28:	9b07      	ldr	r3, [sp, #28]
 800cd2a:	60d1      	str	r1, [r2, #12]
 800cd2c:	2000      	movs	r0, #0
 800cd2e:	6193      	str	r3, [r2, #24]
 800cd30:	b009      	add	sp, #36	; 0x24
 800cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd36:	bf00      	nop
 800cd38:	001c0015 	.word	0x001c0015
 800cd3c:	000f000a 	.word	0x000f000a
 800cd40:	00060003 	.word	0x00060003
 800cd44:	0024002a 	.word	0x0024002a
 800cd48:	002e0030 	.word	0x002e0030
 800cd4c:	00030006 	.word	0x00030006
 800cd50:	000a000f 	.word	0x000a000f
 800cd54:	0015001c 	.word	0x0015001c
 800cd58:	20000000 	.word	0x20000000

0800cd5c <D80_GENERIC>:
 800cd5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd60:	b08b      	sub	sp, #44	; 0x2c
 800cd62:	6914      	ldr	r4, [r2, #16]
 800cd64:	9404      	str	r4, [sp, #16]
 800cd66:	6954      	ldr	r4, [r2, #20]
 800cd68:	9405      	str	r4, [sp, #20]
 800cd6a:	6994      	ldr	r4, [r2, #24]
 800cd6c:	9409      	str	r4, [sp, #36]	; 0x24
 800cd6e:	6894      	ldr	r4, [r2, #8]
 800cd70:	9402      	str	r4, [sp, #8]
 800cd72:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800cd74:	68d4      	ldr	r4, [r2, #12]
 800cd76:	9401      	str	r4, [sp, #4]
 800cd78:	6b14      	ldr	r4, [r2, #48]	; 0x30
 800cd7a:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800cd7e:	9406      	str	r4, [sp, #24]
 800cd80:	9107      	str	r1, [sp, #28]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	f000 810f 	beq.w	800cfa6 <D80_GENERIC+0x24a>
 800cd88:	6a13      	ldr	r3, [r2, #32]
 800cd8a:	9308      	str	r3, [sp, #32]
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	9200      	str	r2, [sp, #0]
 800cd90:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800cff8 <D80_GENERIC+0x29c>
 800cd94:	f8cd b00c 	str.w	fp, [sp, #12]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	e0ed      	b.n	800cf78 <D80_GENERIC+0x21c>
 800cd9c:	fa5f fc8c 	uxtb.w	ip, ip
 800cda0:	fa0f f48c 	sxth.w	r4, ip
 800cda4:	0066      	lsls	r6, r4, #1
 800cda6:	eb06 0804 	add.w	r8, r6, r4
 800cdaa:	f1cc 0500 	rsb	r5, ip, #0
 800cdae:	eb00 0108 	add.w	r1, r0, r8
 800cdb2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800cdb6:	194b      	adds	r3, r1, r5
 800cdb8:	5d49      	ldrb	r1, [r1, r5]
 800cdba:	f810 a008 	ldrb.w	sl, [r0, r8]
 800cdbe:	f813 b004 	ldrb.w	fp, [r3, r4]
 800cdc2:	f810 c00c 	ldrb.w	ip, [r0, ip]
 800cdc6:	f890 8000 	ldrb.w	r8, [r0]
 800cdca:	eb03 0e04 	add.w	lr, r3, r4
 800cdce:	eb0e 0705 	add.w	r7, lr, r5
 800cdd2:	0409      	lsls	r1, r1, #16
 800cdd4:	f81e 3005 	ldrb.w	r3, [lr, r5]
 800cdd8:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 800cddc:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 800cde0:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 800cde4:	eb0a 0004 	add.w	r0, sl, r4
 800cde8:	041b      	lsls	r3, r3, #16
 800cdea:	f81a a004 	ldrb.w	sl, [sl, r4]
 800cdee:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 800cdf2:	5d44      	ldrb	r4, [r0, r5]
 800cdf4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800cdf8:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800cdfc:	4428      	add	r0, r5
 800cdfe:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 800ce02:	4441      	add	r1, r8
 800ce04:	4430      	add	r0, r6
 800ce06:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800ce0a:	441f      	add	r7, r3
 800ce0c:	b2cd      	uxtb	r5, r1
 800ce0e:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800ce12:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 800ce16:	f859 e023 	ldr.w	lr, [r9, r3, lsl #2]
 800ce1a:	9b03      	ldr	r3, [sp, #12]
 800ce1c:	f3c1 4507 	ubfx	r5, r1, #16, #8
 800ce20:	0e09      	lsrs	r1, r1, #24
 800ce22:	4433      	add	r3, r6
 800ce24:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800ce28:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 800ce2c:	b2fd      	uxtb	r5, r7
 800ce2e:	eb0e 2193 	add.w	r1, lr, r3, lsr #10
 800ce32:	469b      	mov	fp, r3
 800ce34:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800ce38:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800ce3c:	f859 c025 	ldr.w	ip, [r9, r5, lsl #2]
 800ce40:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 800ce44:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 800ce48:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 800ce4c:	0e3b      	lsrs	r3, r7, #24
 800ce4e:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 800ce52:	f859 702e 	ldr.w	r7, [r9, lr, lsl #2]
 800ce56:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ce5a:	fa5f fe84 	uxtb.w	lr, r4
 800ce5e:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 800ce62:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800ce66:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800ce6a:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 800ce6e:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 800ce72:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800ce76:	eb0e 2e93 	add.w	lr, lr, r3, lsr #10
 800ce7a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800ce7e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ce82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce86:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800ce8a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ce8e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800ce92:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ce96:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800ce9a:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800ce9e:	f3c4 0109 	ubfx	r1, r4, #0, #10
 800cea2:	0aa3      	lsrs	r3, r4, #10
 800cea4:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800cea8:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800ceac:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ceb0:	ea41 4e0e 	orr.w	lr, r1, lr, lsl #16
 800ceb4:	9303      	str	r3, [sp, #12]
 800ceb6:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800ceba:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 800cebe:	4b42      	ldr	r3, [pc, #264]	; (800cfc8 <D80_GENERIC+0x26c>)
 800cec0:	9901      	ldr	r1, [sp, #4]
 800cec2:	fb2b 1303 	smlad	r3, fp, r3, r1
 800cec6:	4941      	ldr	r1, [pc, #260]	; (800cfcc <D80_GENERIC+0x270>)
 800cec8:	fb28 3301 	smlad	r3, r8, r1, r3
 800cecc:	4940      	ldr	r1, [pc, #256]	; (800cfd0 <D80_GENERIC+0x274>)
 800cece:	fb2c 3301 	smlad	r3, ip, r1, r3
 800ced2:	4940      	ldr	r1, [pc, #256]	; (800cfd4 <D80_GENERIC+0x278>)
 800ced4:	fb27 3301 	smlad	r3, r7, r1, r3
 800ced8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800cedc:	fb2e 3301 	smlad	r3, lr, r1, r3
 800cee0:	493d      	ldr	r1, [pc, #244]	; (800cfd8 <D80_GENERIC+0x27c>)
 800cee2:	9c02      	ldr	r4, [sp, #8]
 800cee4:	fb2b 4401 	smlad	r4, fp, r1, r4
 800cee8:	493c      	ldr	r1, [pc, #240]	; (800cfdc <D80_GENERIC+0x280>)
 800ceea:	fb28 4401 	smlad	r4, r8, r1, r4
 800ceee:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 800cef2:	fb2c 4101 	smlad	r1, ip, r1, r4
 800cef6:	4c3a      	ldr	r4, [pc, #232]	; (800cfe0 <D80_GENERIC+0x284>)
 800cef8:	fb27 1104 	smlad	r1, r7, r4, r1
 800cefc:	4c39      	ldr	r4, [pc, #228]	; (800cfe4 <D80_GENERIC+0x288>)
 800cefe:	fb2e 1104 	smlad	r1, lr, r4, r1
 800cf02:	9101      	str	r1, [sp, #4]
 800cf04:	2101      	movs	r1, #1
 800cf06:	fb2b fb01 	smuad	fp, fp, r1
 800cf0a:	4937      	ldr	r1, [pc, #220]	; (800cfe8 <D80_GENERIC+0x28c>)
 800cf0c:	fb28 b801 	smlad	r8, r8, r1, fp
 800cf10:	4d36      	ldr	r5, [pc, #216]	; (800cfec <D80_GENERIC+0x290>)
 800cf12:	fb2c 8c05 	smlad	ip, ip, r5, r8
 800cf16:	4d36      	ldr	r5, [pc, #216]	; (800cff0 <D80_GENERIC+0x294>)
 800cf18:	fb27 c705 	smlad	r7, r7, r5, ip
 800cf1c:	4d35      	ldr	r5, [pc, #212]	; (800cff4 <D80_GENERIC+0x298>)
 800cf1e:	fb2e 7105 	smlad	r1, lr, r5, r7
 800cf22:	9102      	str	r1, [sp, #8]
 800cf24:	9908      	ldr	r1, [sp, #32]
 800cf26:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800cf2a:	b181      	cbz	r1, 800cf4e <D80_GENERIC+0x1f2>
 800cf2c:	9c04      	ldr	r4, [sp, #16]
 800cf2e:	9d05      	ldr	r5, [sp, #20]
 800cf30:	9305      	str	r3, [sp, #20]
 800cf32:	441c      	add	r4, r3
 800cf34:	1b64      	subs	r4, r4, r5
 800cf36:	17e7      	asrs	r7, r4, #31
 800cf38:	fba4 4501 	umull	r4, r5, r4, r1
 800cf3c:	fb01 5507 	mla	r5, r1, r7, r5
 800cf40:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 800cf44:	f145 0500 	adc.w	r5, r5, #0
 800cf48:	0069      	lsls	r1, r5, #1
 800cf4a:	9104      	str	r1, [sp, #16]
 800cf4c:	460b      	mov	r3, r1
 800cf4e:	9e00      	ldr	r6, [sp, #0]
 800cf50:	9f06      	ldr	r7, [sp, #24]
 800cf52:	8d31      	ldrh	r1, [r6, #40]	; 0x28
 800cf54:	025b      	lsls	r3, r3, #9
 800cf56:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800cf5a:	2500      	movs	r5, #0
 800cf5c:	fb02 f101 	mul.w	r1, r2, r1
 800cf60:	fbc7 4503 	smlal	r4, r5, r7, r3
 800cf64:	9c07      	ldr	r4, [sp, #28]
 800cf66:	10ab      	asrs	r3, r5, #2
 800cf68:	f303 030f 	ssat	r3, #16, r3
 800cf6c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 800cf70:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 800cf72:	3201      	adds	r2, #1
 800cf74:	4293      	cmp	r3, r2
 800cf76:	dd13      	ble.n	800cfa0 <D80_GENERIC+0x244>
 800cf78:	9b00      	ldr	r3, [sp, #0]
 800cf7a:	f8b3 c02a 	ldrh.w	ip, [r3, #42]	; 0x2a
 800cf7e:	f1bc 0f01 	cmp.w	ip, #1
 800cf82:	f47f af0b 	bne.w	800cd9c <D80_GENERIC+0x40>
 800cf86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf88:	6884      	ldr	r4, [r0, #8]
 800cf8a:	069b      	lsls	r3, r3, #26
 800cf8c:	e890 0082 	ldmia.w	r0, {r1, r7}
 800cf90:	f100 000a 	add.w	r0, r0, #10
 800cf94:	f57f af3a 	bpl.w	800ce0c <D80_GENERIC+0xb0>
 800cf98:	ba49      	rev16	r1, r1
 800cf9a:	ba7f      	rev16	r7, r7
 800cf9c:	ba64      	rev16	r4, r4
 800cf9e:	e735      	b.n	800ce0c <D80_GENERIC+0xb0>
 800cfa0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800cfa4:	4632      	mov	r2, r6
 800cfa6:	9b02      	ldr	r3, [sp, #8]
 800cfa8:	6093      	str	r3, [r2, #8]
 800cfaa:	9b01      	ldr	r3, [sp, #4]
 800cfac:	60d3      	str	r3, [r2, #12]
 800cfae:	9b04      	ldr	r3, [sp, #16]
 800cfb0:	6113      	str	r3, [r2, #16]
 800cfb2:	9b05      	ldr	r3, [sp, #20]
 800cfb4:	6153      	str	r3, [r2, #20]
 800cfb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfb8:	f8c2 b01c 	str.w	fp, [r2, #28]
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	6193      	str	r3, [r2, #24]
 800cfc0:	b00b      	add	sp, #44	; 0x2c
 800cfc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfc6:	bf00      	nop
 800cfc8:	002d0024 	.word	0x002d0024
 800cfcc:	001c0015 	.word	0x001c0015
 800cfd0:	000f000a 	.word	0x000f000a
 800cfd4:	00060003 	.word	0x00060003
 800cfd8:	0037003f 	.word	0x0037003f
 800cfdc:	00450049 	.word	0x00450049
 800cfe0:	00490045 	.word	0x00490045
 800cfe4:	003f0037 	.word	0x003f0037
 800cfe8:	00030006 	.word	0x00030006
 800cfec:	000a000f 	.word	0x000a000f
 800cff0:	0015001c 	.word	0x0015001c
 800cff4:	0024002d 	.word	0x0024002d
 800cff8:	20000000 	.word	0x20000000

0800cffc <D128_GENERIC>:
 800cffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d000:	b093      	sub	sp, #76	; 0x4c
 800d002:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d004:	9005      	str	r0, [sp, #20]
 800d006:	4610      	mov	r0, r2
 800d008:	9201      	str	r2, [sp, #4]
 800d00a:	6912      	ldr	r2, [r2, #16]
 800d00c:	920c      	str	r2, [sp, #48]	; 0x30
 800d00e:	4602      	mov	r2, r0
 800d010:	6940      	ldr	r0, [r0, #20]
 800d012:	900d      	str	r0, [sp, #52]	; 0x34
 800d014:	4610      	mov	r0, r2
 800d016:	4614      	mov	r4, r2
 800d018:	6992      	ldr	r2, [r2, #24]
 800d01a:	9211      	str	r2, [sp, #68]	; 0x44
 800d01c:	69c2      	ldr	r2, [r0, #28]
 800d01e:	9202      	str	r2, [sp, #8]
 800d020:	68e2      	ldr	r2, [r4, #12]
 800d022:	6880      	ldr	r0, [r0, #8]
 800d024:	9203      	str	r2, [sp, #12]
 800d026:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d028:	9004      	str	r0, [sp, #16]
 800d02a:	920e      	str	r2, [sp, #56]	; 0x38
 800d02c:	910f      	str	r1, [sp, #60]	; 0x3c
 800d02e:	2b00      	cmp	r3, #0
 800d030:	f000 819b 	beq.w	800d36a <D128_GENERIC+0x36e>
 800d034:	6a23      	ldr	r3, [r4, #32]
 800d036:	9310      	str	r3, [sp, #64]	; 0x40
 800d038:	2300      	movs	r3, #0
 800d03a:	f8df 93a8 	ldr.w	r9, [pc, #936]	; 800d3e4 <D128_GENERIC+0x3e8>
 800d03e:	9306      	str	r3, [sp, #24]
 800d040:	e17a      	b.n	800d338 <D128_GENERIC+0x33c>
 800d042:	b2d2      	uxtb	r2, r2
 800d044:	9d05      	ldr	r5, [sp, #20]
 800d046:	b214      	sxth	r4, r2
 800d048:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 800d04c:	4250      	negs	r0, r2
 800d04e:	eb05 010a 	add.w	r1, r5, sl
 800d052:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d056:	eb01 0800 	add.w	r8, r1, r0
 800d05a:	eb0b 0c04 	add.w	ip, fp, r4
 800d05e:	eb08 070c 	add.w	r7, r8, ip
 800d062:	183b      	adds	r3, r7, r0
 800d064:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800d068:	eb03 0e40 	add.w	lr, r3, r0, lsl #1
 800d06c:	eb0e 0604 	add.w	r6, lr, r4
 800d070:	9307      	str	r3, [sp, #28]
 800d072:	1833      	adds	r3, r6, r0
 800d074:	9305      	str	r3, [sp, #20]
 800d076:	462b      	mov	r3, r5
 800d078:	f815 a00a 	ldrb.w	sl, [r5, sl]
 800d07c:	f8cd a020 	str.w	sl, [sp, #32]
 800d080:	f818 a00c 	ldrb.w	sl, [r8, ip]
 800d084:	f813 c002 	ldrb.w	ip, [r3, r2]
 800d088:	f81e 8004 	ldrb.w	r8, [lr, r4]
 800d08c:	5c3a      	ldrb	r2, [r7, r0]
 800d08e:	f817 e010 	ldrb.w	lr, [r7, r0, lsl #1]
 800d092:	781f      	ldrb	r7, [r3, #0]
 800d094:	9b07      	ldr	r3, [sp, #28]
 800d096:	9d05      	ldr	r5, [sp, #20]
 800d098:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 800d09c:	5c09      	ldrb	r1, [r1, r0]
 800d09e:	9709      	str	r7, [sp, #36]	; 0x24
 800d0a0:	9307      	str	r3, [sp, #28]
 800d0a2:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 800d0a6:	5c33      	ldrb	r3, [r6, r0]
 800d0a8:	0412      	lsls	r2, r2, #16
 800d0aa:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800d0ae:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 800d0b2:	9d08      	ldr	r5, [sp, #32]
 800d0b4:	eb06 0a04 	add.w	sl, r6, r4
 800d0b8:	0409      	lsls	r1, r1, #16
 800d0ba:	eb01 6105 	add.w	r1, r1, r5, lsl #24
 800d0be:	f81a 5000 	ldrb.w	r5, [sl, r0]
 800d0c2:	5d36      	ldrb	r6, [r6, r4]
 800d0c4:	9c05      	ldr	r4, [sp, #20]
 800d0c6:	042d      	lsls	r5, r5, #16
 800d0c8:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 800d0cc:	eb01 210c 	add.w	r1, r1, ip, lsl #8
 800d0d0:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800d0d4:	f814 4010 	ldrb.w	r4, [r4, r0, lsl #1]
 800d0d8:	eb0a 0c00 	add.w	ip, sl, r0
 800d0dc:	041b      	lsls	r3, r3, #16
 800d0de:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800d0e2:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800d0e6:	f81c a010 	ldrb.w	sl, [ip, r0, lsl #1]
 800d0ea:	9d07      	ldr	r5, [sp, #28]
 800d0ec:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800d0f0:	eb0c 0040 	add.w	r0, ip, r0, lsl #1
 800d0f4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d0f6:	4458      	add	r0, fp
 800d0f8:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 800d0fc:	9005      	str	r0, [sp, #20]
 800d0fe:	4439      	add	r1, r7
 800d100:	442a      	add	r2, r5
 800d102:	44b2      	add	sl, r6
 800d104:	1918      	adds	r0, r3, r4
 800d106:	b2cb      	uxtb	r3, r1
 800d108:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d10c:	9e02      	ldr	r6, [sp, #8]
 800d10e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d112:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 800d116:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800d11a:	441e      	add	r6, r3
 800d11c:	0e09      	lsrs	r1, r1, #24
 800d11e:	4633      	mov	r3, r6
 800d120:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d124:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 800d128:	b2d4      	uxtb	r4, r2
 800d12a:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d12e:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d132:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 800d136:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d13a:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d13e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d142:	0e12      	lsrs	r2, r2, #24
 800d144:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800d148:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800d14c:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800d150:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 800d154:	9702      	str	r7, [sp, #8]
 800d156:	b2c2      	uxtb	r2, r0
 800d158:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800d15c:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 800d160:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 800d164:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800d168:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800d16c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 800d170:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800d174:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800d178:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800d17c:	0e00      	lsrs	r0, r0, #24
 800d17e:	fa5f f68a 	uxtb.w	r6, sl
 800d182:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d186:	9309      	str	r3, [sp, #36]	; 0x24
 800d188:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800d18c:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 800d190:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800d194:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800d198:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d19c:	950a      	str	r5, [sp, #40]	; 0x28
 800d19e:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800d1a2:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800d1a6:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800d1aa:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d1ae:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800d1b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d1b6:	920b      	str	r2, [sp, #44]	; 0x2c
 800d1b8:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800d1bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d1be:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800d1c2:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800d1c6:	9307      	str	r3, [sp, #28]
 800d1c8:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d1cc:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800d1d0:	9b02      	ldr	r3, [sp, #8]
 800d1d2:	f8cd c008 	str.w	ip, [sp, #8]
 800d1d6:	4694      	mov	ip, r2
 800d1d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1da:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800d1de:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 800d1e2:	9a02      	ldr	r2, [sp, #8]
 800d1e4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d1e8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800d1ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800d1f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d1f2:	f8cd a020 	str.w	sl, [sp, #32]
 800d1f6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800d1fa:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800d1fe:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d202:	9b07      	ldr	r3, [sp, #28]
 800d204:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d208:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800d20c:	ea42 480e 	orr.w	r8, r2, lr, lsl #16
 800d210:	9a08      	ldr	r2, [sp, #32]
 800d212:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d21a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d21e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d222:	f3c2 0e09 	ubfx	lr, r2, #0, #10
 800d226:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800d22a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d22e:	0a96      	lsrs	r6, r2, #10
 800d230:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d234:	9602      	str	r6, [sp, #8]
 800d236:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800d23a:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800d23e:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 800d242:	4e53      	ldr	r6, [pc, #332]	; (800d390 <D128_GENERIC+0x394>)
 800d244:	9f03      	ldr	r7, [sp, #12]
 800d246:	fb2c 7606 	smlad	r6, ip, r6, r7
 800d24a:	4f52      	ldr	r7, [pc, #328]	; (800d394 <D128_GENERIC+0x398>)
 800d24c:	fb2a 6607 	smlad	r6, sl, r7, r6
 800d250:	4f51      	ldr	r7, [pc, #324]	; (800d398 <D128_GENERIC+0x39c>)
 800d252:	fb21 6607 	smlad	r6, r1, r7, r6
 800d256:	4f51      	ldr	r7, [pc, #324]	; (800d39c <D128_GENERIC+0x3a0>)
 800d258:	fb24 6607 	smlad	r6, r4, r7, r6
 800d25c:	4f50      	ldr	r7, [pc, #320]	; (800d3a0 <D128_GENERIC+0x3a4>)
 800d25e:	fb28 6607 	smlad	r6, r8, r7, r6
 800d262:	4f50      	ldr	r7, [pc, #320]	; (800d3a4 <D128_GENERIC+0x3a8>)
 800d264:	fb20 6607 	smlad	r6, r0, r7, r6
 800d268:	4f4f      	ldr	r7, [pc, #316]	; (800d3a8 <D128_GENERIC+0x3ac>)
 800d26a:	fb23 6607 	smlad	r6, r3, r7, r6
 800d26e:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 800d272:	fb25 6607 	smlad	r6, r5, r7, r6
 800d276:	4f4d      	ldr	r7, [pc, #308]	; (800d3ac <D128_GENERIC+0x3b0>)
 800d278:	9a04      	ldr	r2, [sp, #16]
 800d27a:	fb2c 2e07 	smlad	lr, ip, r7, r2
 800d27e:	4a4c      	ldr	r2, [pc, #304]	; (800d3b0 <D128_GENERIC+0x3b4>)
 800d280:	fb2a ee02 	smlad	lr, sl, r2, lr
 800d284:	4f4b      	ldr	r7, [pc, #300]	; (800d3b4 <D128_GENERIC+0x3b8>)
 800d286:	fb21 ee07 	smlad	lr, r1, r7, lr
 800d28a:	4f4b      	ldr	r7, [pc, #300]	; (800d3b8 <D128_GENERIC+0x3bc>)
 800d28c:	fb24 ee07 	smlad	lr, r4, r7, lr
 800d290:	4f4a      	ldr	r7, [pc, #296]	; (800d3bc <D128_GENERIC+0x3c0>)
 800d292:	fb28 ee07 	smlad	lr, r8, r7, lr
 800d296:	4f4a      	ldr	r7, [pc, #296]	; (800d3c0 <D128_GENERIC+0x3c4>)
 800d298:	fb20 ee07 	smlad	lr, r0, r7, lr
 800d29c:	4f49      	ldr	r7, [pc, #292]	; (800d3c4 <D128_GENERIC+0x3c8>)
 800d29e:	fb23 e707 	smlad	r7, r3, r7, lr
 800d2a2:	f8df e144 	ldr.w	lr, [pc, #324]	; 800d3e8 <D128_GENERIC+0x3ec>
 800d2a6:	fb25 720e 	smlad	r2, r5, lr, r7
 800d2aa:	f04f 0b01 	mov.w	fp, #1
 800d2ae:	9203      	str	r2, [sp, #12]
 800d2b0:	fb2c fb0b 	smuad	fp, ip, fp
 800d2b4:	4f44      	ldr	r7, [pc, #272]	; (800d3c8 <D128_GENERIC+0x3cc>)
 800d2b6:	fb2a ba07 	smlad	sl, sl, r7, fp
 800d2ba:	4f44      	ldr	r7, [pc, #272]	; (800d3cc <D128_GENERIC+0x3d0>)
 800d2bc:	fb21 aa07 	smlad	sl, r1, r7, sl
 800d2c0:	4f43      	ldr	r7, [pc, #268]	; (800d3d0 <D128_GENERIC+0x3d4>)
 800d2c2:	fb24 aa07 	smlad	sl, r4, r7, sl
 800d2c6:	4f43      	ldr	r7, [pc, #268]	; (800d3d4 <D128_GENERIC+0x3d8>)
 800d2c8:	fb28 a707 	smlad	r7, r8, r7, sl
 800d2cc:	4a42      	ldr	r2, [pc, #264]	; (800d3d8 <D128_GENERIC+0x3dc>)
 800d2ce:	fb20 7702 	smlad	r7, r0, r2, r7
 800d2d2:	4a42      	ldr	r2, [pc, #264]	; (800d3dc <D128_GENERIC+0x3e0>)
 800d2d4:	fb23 7702 	smlad	r7, r3, r2, r7
 800d2d8:	4b41      	ldr	r3, [pc, #260]	; (800d3e0 <D128_GENERIC+0x3e4>)
 800d2da:	fb25 7303 	smlad	r3, r5, r3, r7
 800d2de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800d2e0:	9304      	str	r3, [sp, #16]
 800d2e2:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800d2e6:	b185      	cbz	r5, 800d30a <D128_GENERIC+0x30e>
 800d2e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2ea:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d2ec:	960d      	str	r6, [sp, #52]	; 0x34
 800d2ee:	4432      	add	r2, r6
 800d2f0:	1a52      	subs	r2, r2, r1
 800d2f2:	17d1      	asrs	r1, r2, #31
 800d2f4:	fba2 2305 	umull	r2, r3, r2, r5
 800d2f8:	fb05 3301 	mla	r3, r5, r1, r3
 800d2fc:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d300:	f143 0300 	adc.w	r3, r3, #0
 800d304:	005b      	lsls	r3, r3, #1
 800d306:	930c      	str	r3, [sp, #48]	; 0x30
 800d308:	461e      	mov	r6, r3
 800d30a:	9801      	ldr	r0, [sp, #4]
 800d30c:	9c06      	ldr	r4, [sp, #24]
 800d30e:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800d310:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800d312:	01f6      	lsls	r6, r6, #7
 800d314:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d318:	2300      	movs	r3, #0
 800d31a:	fbc5 2306 	smlal	r2, r3, r5, r6
 800d31e:	fb04 f101 	mul.w	r1, r4, r1
 800d322:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d324:	109b      	asrs	r3, r3, #2
 800d326:	f303 030f 	ssat	r3, #16, r3
 800d32a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800d32e:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800d330:	1c62      	adds	r2, r4, #1
 800d332:	4293      	cmp	r3, r2
 800d334:	9206      	str	r2, [sp, #24]
 800d336:	dd18      	ble.n	800d36a <D128_GENERIC+0x36e>
 800d338:	9b01      	ldr	r3, [sp, #4]
 800d33a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d33c:	2a01      	cmp	r2, #1
 800d33e:	f47f ae80 	bne.w	800d042 <D128_GENERIC+0x46>
 800d342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d344:	9d05      	ldr	r5, [sp, #20]
 800d346:	069b      	lsls	r3, r3, #26
 800d348:	6829      	ldr	r1, [r5, #0]
 800d34a:	686a      	ldr	r2, [r5, #4]
 800d34c:	68a8      	ldr	r0, [r5, #8]
 800d34e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800d352:	f105 0410 	add.w	r4, r5, #16
 800d356:	d506      	bpl.n	800d366 <D128_GENERIC+0x36a>
 800d358:	ba49      	rev16	r1, r1
 800d35a:	ba52      	rev16	r2, r2
 800d35c:	ba40      	rev16	r0, r0
 800d35e:	fa9a fa9a 	rev16.w	sl, sl
 800d362:	9405      	str	r4, [sp, #20]
 800d364:	e6cf      	b.n	800d106 <D128_GENERIC+0x10a>
 800d366:	9405      	str	r4, [sp, #20]
 800d368:	e6cd      	b.n	800d106 <D128_GENERIC+0x10a>
 800d36a:	9a01      	ldr	r2, [sp, #4]
 800d36c:	9904      	ldr	r1, [sp, #16]
 800d36e:	6091      	str	r1, [r2, #8]
 800d370:	9903      	ldr	r1, [sp, #12]
 800d372:	60d1      	str	r1, [r2, #12]
 800d374:	9b02      	ldr	r3, [sp, #8]
 800d376:	61d3      	str	r3, [r2, #28]
 800d378:	4611      	mov	r1, r2
 800d37a:	4613      	mov	r3, r2
 800d37c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d37e:	610a      	str	r2, [r1, #16]
 800d380:	990d      	ldr	r1, [sp, #52]	; 0x34
 800d382:	6159      	str	r1, [r3, #20]
 800d384:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d386:	6199      	str	r1, [r3, #24]
 800d388:	2000      	movs	r0, #0
 800d38a:	b013      	add	sp, #76	; 0x4c
 800d38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d390:	00780069 	.word	0x00780069
 800d394:	005b004e 	.word	0x005b004e
 800d398:	00420037 	.word	0x00420037
 800d39c:	002d0024 	.word	0x002d0024
 800d3a0:	001c0015 	.word	0x001c0015
 800d3a4:	000f000a 	.word	0x000f000a
 800d3a8:	00060003 	.word	0x00060003
 800d3ac:	00880096 	.word	0x00880096
 800d3b0:	00a200ac 	.word	0x00a200ac
 800d3b4:	00b400ba 	.word	0x00b400ba
 800d3b8:	00be00c0 	.word	0x00be00c0
 800d3bc:	00c000be 	.word	0x00c000be
 800d3c0:	00ba00b4 	.word	0x00ba00b4
 800d3c4:	00ac00a2 	.word	0x00ac00a2
 800d3c8:	00030006 	.word	0x00030006
 800d3cc:	000a000f 	.word	0x000a000f
 800d3d0:	0015001c 	.word	0x0015001c
 800d3d4:	0024002d 	.word	0x0024002d
 800d3d8:	00370042 	.word	0x00370042
 800d3dc:	004e005b 	.word	0x004e005b
 800d3e0:	00690078 	.word	0x00690078
 800d3e4:	20000000 	.word	0x20000000
 800d3e8:	00960088 	.word	0x00960088

0800d3ec <D16_1CH_HTONS_VOL_HP>:
 800d3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3f0:	4691      	mov	r9, r2
 800d3f2:	b083      	sub	sp, #12
 800d3f4:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800d3f6:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800d3fa:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800d3fe:	9300      	str	r3, [sp, #0]
 800d400:	4680      	mov	r8, r0
 800d402:	f8d9 7014 	ldr.w	r7, [r9, #20]
 800d406:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800d40a:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d40e:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800d412:	9401      	str	r4, [sp, #4]
 800d414:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 800d418:	f8d9 e020 	ldr.w	lr, [r9, #32]
 800d41c:	2a00      	cmp	r2, #0
 800d41e:	d04e      	beq.n	800d4be <D16_1CH_HTONS_VOL_HP+0xd2>
 800d420:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800d4cc <D16_1CH_HTONS_VOL_HP+0xe0>
 800d424:	1e8c      	subs	r4, r1, #2
 800d426:	eb08 0b42 	add.w	fp, r8, r2, lsl #1
 800d42a:	f858 2b02 	ldr.w	r2, [r8], #2
 800d42e:	ba52      	rev16	r2, r2
 800d430:	b2d6      	uxtb	r6, r2
 800d432:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d436:	f85c 2026 	ldr.w	r2, [ip, r6, lsl #2]
 800d43a:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800d43e:	4413      	add	r3, r2
 800d440:	eb01 2293 	add.w	r2, r1, r3, lsr #10
 800d444:	f3c2 0109 	ubfx	r1, r2, #0, #10
 800d448:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d44c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800d450:	0a93      	lsrs	r3, r2, #10
 800d452:	4a1c      	ldr	r2, [pc, #112]	; (800d4c4 <D16_1CH_HTONS_VOL_HP+0xd8>)
 800d454:	fb21 5202 	smlad	r2, r1, r2, r5
 800d458:	4d1b      	ldr	r5, [pc, #108]	; (800d4c8 <D16_1CH_HTONS_VOL_HP+0xdc>)
 800d45a:	fb21 f505 	smuad	r5, r1, r5
 800d45e:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 800d462:	4410      	add	r0, r2
 800d464:	1bc0      	subs	r0, r0, r7
 800d466:	17c7      	asrs	r7, r0, #31
 800d468:	fba0 010e 	umull	r0, r1, r0, lr
 800d46c:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d470:	fb0e 1107 	mla	r1, lr, r7, r1
 800d474:	f141 0100 	adc.w	r1, r1, #0
 800d478:	0448      	lsls	r0, r1, #17
 800d47a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d47e:	2700      	movs	r7, #0
 800d480:	fbc0 670a 	smlal	r6, r7, r0, sl
 800d484:	45d8      	cmp	r8, fp
 800d486:	ea4f 0041 	mov.w	r0, r1, lsl #1
 800d48a:	ea4f 01a7 	mov.w	r1, r7, asr #2
 800d48e:	4617      	mov	r7, r2
 800d490:	f301 010f 	ssat	r1, #16, r1
 800d494:	f824 1f02 	strh.w	r1, [r4, #2]!
 800d498:	d1c7      	bne.n	800d42a <D16_1CH_HTONS_VOL_HP+0x3e>
 800d49a:	9901      	ldr	r1, [sp, #4]
 800d49c:	f8c9 301c 	str.w	r3, [r9, #28]
 800d4a0:	9b00      	ldr	r3, [sp, #0]
 800d4a2:	f8c9 0010 	str.w	r0, [r9, #16]
 800d4a6:	2000      	movs	r0, #0
 800d4a8:	f8c9 5008 	str.w	r5, [r9, #8]
 800d4ac:	f8c9 100c 	str.w	r1, [r9, #12]
 800d4b0:	f8c9 2014 	str.w	r2, [r9, #20]
 800d4b4:	f8c9 3018 	str.w	r3, [r9, #24]
 800d4b8:	b003      	add	sp, #12
 800d4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4be:	463a      	mov	r2, r7
 800d4c0:	4621      	mov	r1, r4
 800d4c2:	e7eb      	b.n	800d49c <D16_1CH_HTONS_VOL_HP+0xb0>
 800d4c4:	00030001 	.word	0x00030001
 800d4c8:	00010003 	.word	0x00010003
 800d4cc:	20000000 	.word	0x20000000

0800d4d0 <D24_1CH_HTONS_VOL_HP>:
 800d4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4d4:	b089      	sub	sp, #36	; 0x24
 800d4d6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d4d8:	6996      	ldr	r6, [r2, #24]
 800d4da:	9304      	str	r3, [sp, #16]
 800d4dc:	6b17      	ldr	r7, [r2, #48]	; 0x30
 800d4de:	9207      	str	r2, [sp, #28]
 800d4e0:	6915      	ldr	r5, [r2, #16]
 800d4e2:	6954      	ldr	r4, [r2, #20]
 800d4e4:	9606      	str	r6, [sp, #24]
 800d4e6:	6893      	ldr	r3, [r2, #8]
 800d4e8:	69d6      	ldr	r6, [r2, #28]
 800d4ea:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800d4ee:	f8d2 a020 	ldr.w	sl, [r2, #32]
 800d4f2:	9a04      	ldr	r2, [sp, #16]
 800d4f4:	9705      	str	r7, [sp, #20]
 800d4f6:	2a00      	cmp	r2, #0
 800d4f8:	d07e      	beq.n	800d5f8 <D24_1CH_HTONS_VOL_HP+0x128>
 800d4fa:	f1a1 0b02 	sub.w	fp, r1, #2
 800d4fe:	2700      	movs	r7, #0
 800d500:	46a8      	mov	r8, r5
 800d502:	f8cd b004 	str.w	fp, [sp, #4]
 800d506:	4655      	mov	r5, sl
 800d508:	46e3      	mov	fp, ip
 800d50a:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800d604 <D24_1CH_HTONS_VOL_HP+0x134>
 800d50e:	46ba      	mov	sl, r7
 800d510:	469c      	mov	ip, r3
 800d512:	e055      	b.n	800d5c0 <D24_1CH_HTONS_VOL_HP+0xf0>
 800d514:	7802      	ldrb	r2, [r0, #0]
 800d516:	78c3      	ldrb	r3, [r0, #3]
 800d518:	7841      	ldrb	r1, [r0, #1]
 800d51a:	0212      	lsls	r2, r2, #8
 800d51c:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800d520:	440b      	add	r3, r1
 800d522:	3002      	adds	r0, #2
 800d524:	b2d9      	uxtb	r1, r3
 800d526:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d52a:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800d52e:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800d532:	0c1b      	lsrs	r3, r3, #16
 800d534:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800d538:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800d53c:	f85e 6023 	ldr.w	r6, [lr, r3, lsl #2]
 800d540:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800d544:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800d548:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800d54c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800d550:	4a2a      	ldr	r2, [pc, #168]	; (800d5fc <D24_1CH_HTONS_VOL_HP+0x12c>)
 800d552:	fb23 b102 	smlad	r1, r3, r2, fp
 800d556:	4a2a      	ldr	r2, [pc, #168]	; (800d600 <D24_1CH_HTONS_VOL_HP+0x130>)
 800d558:	fb23 cb02 	smlad	fp, r3, r2, ip
 800d55c:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800d560:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800d564:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 800d568:	2201      	movs	r2, #1
 800d56a:	fb23 f702 	smuad	r7, r3, r2
 800d56e:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 800d572:	eb01 0208 	add.w	r2, r1, r8
 800d576:	1b12      	subs	r2, r2, r4
 800d578:	17d4      	asrs	r4, r2, #31
 800d57a:	fba2 2305 	umull	r2, r3, r2, r5
 800d57e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d582:	fb05 3304 	mla	r3, r5, r4, r3
 800d586:	f143 0300 	adc.w	r3, r3, #0
 800d58a:	9c05      	ldr	r4, [sp, #20]
 800d58c:	03da      	lsls	r2, r3, #15
 800d58e:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d592:	f04f 0900 	mov.w	r9, #0
 800d596:	fbc4 8902 	smlal	r8, r9, r4, r2
 800d59a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800d59e:	9a01      	ldr	r2, [sp, #4]
 800d5a0:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800d5a4:	9b03      	ldr	r3, [sp, #12]
 800d5a6:	109b      	asrs	r3, r3, #2
 800d5a8:	f303 030f 	ssat	r3, #16, r3
 800d5ac:	f822 3f02 	strh.w	r3, [r2, #2]!
 800d5b0:	9b04      	ldr	r3, [sp, #16]
 800d5b2:	9201      	str	r2, [sp, #4]
 800d5b4:	f10a 0a01 	add.w	sl, sl, #1
 800d5b8:	459a      	cmp	sl, r3
 800d5ba:	44bc      	add	ip, r7
 800d5bc:	460c      	mov	r4, r1
 800d5be:	d00b      	beq.n	800d5d8 <D24_1CH_HTONS_VOL_HP+0x108>
 800d5c0:	f01a 0f01 	tst.w	sl, #1
 800d5c4:	d0a6      	beq.n	800d514 <D24_1CH_HTONS_VOL_HP+0x44>
 800d5c6:	78c2      	ldrb	r2, [r0, #3]
 800d5c8:	7883      	ldrb	r3, [r0, #2]
 800d5ca:	f810 1b04 	ldrb.w	r1, [r0], #4
 800d5ce:	0212      	lsls	r2, r2, #8
 800d5d0:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800d5d4:	440b      	add	r3, r1
 800d5d6:	e7a5      	b.n	800d524 <D24_1CH_HTONS_VOL_HP+0x54>
 800d5d8:	4663      	mov	r3, ip
 800d5da:	4645      	mov	r5, r8
 800d5dc:	46dc      	mov	ip, fp
 800d5de:	9807      	ldr	r0, [sp, #28]
 800d5e0:	6141      	str	r1, [r0, #20]
 800d5e2:	9906      	ldr	r1, [sp, #24]
 800d5e4:	6083      	str	r3, [r0, #8]
 800d5e6:	f8c0 c00c 	str.w	ip, [r0, #12]
 800d5ea:	61c6      	str	r6, [r0, #28]
 800d5ec:	6105      	str	r5, [r0, #16]
 800d5ee:	6181      	str	r1, [r0, #24]
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	b009      	add	sp, #36	; 0x24
 800d5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5f8:	4621      	mov	r1, r4
 800d5fa:	e7f0      	b.n	800d5de <D24_1CH_HTONS_VOL_HP+0x10e>
 800d5fc:	00030001 	.word	0x00030001
 800d600:	00060007 	.word	0x00060007
 800d604:	20000000 	.word	0x20000000

0800d608 <D32_1CH_HTONS_VOL_HP>:
 800d608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d60c:	4692      	mov	sl, r2
 800d60e:	b087      	sub	sp, #28
 800d610:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800d612:	f8da 3018 	ldr.w	r3, [sl, #24]
 800d616:	f8da 5030 	ldr.w	r5, [sl, #48]	; 0x30
 800d61a:	9304      	str	r3, [sp, #16]
 800d61c:	f8da 4010 	ldr.w	r4, [sl, #16]
 800d620:	f8da 8014 	ldr.w	r8, [sl, #20]
 800d624:	f8da 601c 	ldr.w	r6, [sl, #28]
 800d628:	f8da 3008 	ldr.w	r3, [sl, #8]
 800d62c:	f8da e00c 	ldr.w	lr, [sl, #12]
 800d630:	9501      	str	r5, [sp, #4]
 800d632:	f8da c020 	ldr.w	ip, [sl, #32]
 800d636:	2a00      	cmp	r2, #0
 800d638:	d07b      	beq.n	800d732 <D32_1CH_HTONS_VOL_HP+0x12a>
 800d63a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d63e:	4f3e      	ldr	r7, [pc, #248]	; (800d738 <D32_1CH_HTONS_VOL_HP+0x130>)
 800d640:	f8cd c00c 	str.w	ip, [sp, #12]
 800d644:	9202      	str	r2, [sp, #8]
 800d646:	460d      	mov	r5, r1
 800d648:	46a1      	mov	r9, r4
 800d64a:	4684      	mov	ip, r0
 800d64c:	f8cd a014 	str.w	sl, [sp, #20]
 800d650:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d654:	ba49      	rev16	r1, r1
 800d656:	b2c8      	uxtb	r0, r1
 800d658:	f3c1 2207 	ubfx	r2, r1, #8, #8
 800d65c:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 800d660:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 800d664:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800d668:	0e09      	lsrs	r1, r1, #24
 800d66a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 800d66e:	f857 602a 	ldr.w	r6, [r7, sl, lsl #2]
 800d672:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800d676:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800d67a:	eb06 2a92 	add.w	sl, r6, r2, lsr #10
 800d67e:	eb01 269a 	add.w	r6, r1, sl, lsr #10
 800d682:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d686:	f3c6 0109 	ubfx	r1, r6, #0, #10
 800d68a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800d68e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d692:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 800d696:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800d69a:	4a28      	ldr	r2, [pc, #160]	; (800d73c <D32_1CH_HTONS_VOL_HP+0x134>)
 800d69c:	fb20 e202 	smlad	r2, r0, r2, lr
 800d6a0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d6a4:	fb2a 2101 	smlad	r1, sl, r1, r2
 800d6a8:	4a25      	ldr	r2, [pc, #148]	; (800d740 <D32_1CH_HTONS_VOL_HP+0x138>)
 800d6aa:	fb20 3302 	smlad	r3, r0, r2, r3
 800d6ae:	4a25      	ldr	r2, [pc, #148]	; (800d744 <D32_1CH_HTONS_VOL_HP+0x13c>)
 800d6b0:	fb2a 3e02 	smlad	lr, sl, r2, r3
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	fb20 f003 	smuad	r0, r0, r3
 800d6ba:	4b23      	ldr	r3, [pc, #140]	; (800d748 <D32_1CH_HTONS_VOL_HP+0x140>)
 800d6bc:	fb2a 0303 	smlad	r3, sl, r3, r0
 800d6c0:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800d6c4:	9c03      	ldr	r4, [sp, #12]
 800d6c6:	eb02 0009 	add.w	r0, r2, r9
 800d6ca:	eba0 0008 	sub.w	r0, r0, r8
 800d6ce:	ea4f 7be0 	mov.w	fp, r0, asr #31
 800d6d2:	fba0 0104 	umull	r0, r1, r0, r4
 800d6d6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d6da:	fb04 110b 	mla	r1, r4, fp, r1
 800d6de:	f141 0100 	adc.w	r1, r1, #0
 800d6e2:	9c01      	ldr	r4, [sp, #4]
 800d6e4:	0388      	lsls	r0, r1, #14
 800d6e6:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800d6ea:	f04f 0900 	mov.w	r9, #0
 800d6ee:	fbc0 8904 	smlal	r8, r9, r0, r4
 800d6f2:	ea4f 00a9 	mov.w	r0, r9, asr #2
 800d6f6:	ea4f 0941 	mov.w	r9, r1, lsl #1
 800d6fa:	f300 000f 	ssat	r0, #16, r0
 800d6fe:	9902      	ldr	r1, [sp, #8]
 800d700:	f825 0b02 	strh.w	r0, [r5], #2
 800d704:	428d      	cmp	r5, r1
 800d706:	4690      	mov	r8, r2
 800d708:	d1a2      	bne.n	800d650 <D32_1CH_HTONS_VOL_HP+0x48>
 800d70a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800d70e:	464c      	mov	r4, r9
 800d710:	f8ca 3008 	str.w	r3, [sl, #8]
 800d714:	9b04      	ldr	r3, [sp, #16]
 800d716:	f8ca e00c 	str.w	lr, [sl, #12]
 800d71a:	2000      	movs	r0, #0
 800d71c:	f8ca 601c 	str.w	r6, [sl, #28]
 800d720:	f8ca 4010 	str.w	r4, [sl, #16]
 800d724:	f8ca 2014 	str.w	r2, [sl, #20]
 800d728:	f8ca 3018 	str.w	r3, [sl, #24]
 800d72c:	b007      	add	sp, #28
 800d72e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d732:	4642      	mov	r2, r8
 800d734:	e7ec      	b.n	800d710 <D32_1CH_HTONS_VOL_HP+0x108>
 800d736:	bf00      	nop
 800d738:	20000000 	.word	0x20000000
 800d73c:	00060003 	.word	0x00060003
 800d740:	000a000c 	.word	0x000a000c
 800d744:	000c000a 	.word	0x000c000a
 800d748:	00030006 	.word	0x00030006

0800d74c <D48_1CH_HTONS_VOL_HP>:
 800d74c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d750:	4613      	mov	r3, r2
 800d752:	461c      	mov	r4, r3
 800d754:	b087      	sub	sp, #28
 800d756:	4625      	mov	r5, r4
 800d758:	4626      	mov	r6, r4
 800d75a:	6b2d      	ldr	r5, [r5, #48]	; 0x30
 800d75c:	9205      	str	r2, [sp, #20]
 800d75e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800d760:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800d764:	9501      	str	r5, [sp, #4]
 800d766:	4680      	mov	r8, r0
 800d768:	6a35      	ldr	r5, [r6, #32]
 800d76a:	6918      	ldr	r0, [r3, #16]
 800d76c:	699b      	ldr	r3, [r3, #24]
 800d76e:	9304      	str	r3, [sp, #16]
 800d770:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 800d774:	68a3      	ldr	r3, [r4, #8]
 800d776:	9502      	str	r5, [sp, #8]
 800d778:	68e4      	ldr	r4, [r4, #12]
 800d77a:	2a00      	cmp	r2, #0
 800d77c:	f000 808c 	beq.w	800d898 <D48_1CH_HTONS_VOL_HP+0x14c>
 800d780:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d784:	4d45      	ldr	r5, [pc, #276]	; (800d89c <D48_1CH_HTONS_VOL_HP+0x150>)
 800d786:	9203      	str	r2, [sp, #12]
 800d788:	468c      	mov	ip, r1
 800d78a:	e898 0044 	ldmia.w	r8, {r2, r6}
 800d78e:	f108 0806 	add.w	r8, r8, #6
 800d792:	ba52      	rev16	r2, r2
 800d794:	ba76      	rev16	r6, r6
 800d796:	b2d7      	uxtb	r7, r2
 800d798:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800d79c:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 800d7a0:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 800d7a4:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800d7a8:	0e12      	lsrs	r2, r2, #24
 800d7aa:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 800d7ae:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 800d7b2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800d7b6:	fa5f fb86 	uxtb.w	fp, r6
 800d7ba:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 800d7be:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 800d7c2:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 800d7c6:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 800d7ca:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 800d7ce:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800d7d2:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800d7d6:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 800d7da:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800d7de:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d7e2:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 800d7e6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d7ea:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800d7ee:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800d7f2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 800d7f6:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 800d7fa:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800d7fe:	4a28      	ldr	r2, [pc, #160]	; (800d8a0 <D48_1CH_HTONS_VOL_HP+0x154>)
 800d800:	fb2a 4202 	smlad	r2, sl, r2, r4
 800d804:	4927      	ldr	r1, [pc, #156]	; (800d8a4 <D48_1CH_HTONS_VOL_HP+0x158>)
 800d806:	fb27 2201 	smlad	r2, r7, r1, r2
 800d80a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800d80e:	fb26 2201 	smlad	r2, r6, r1, r2
 800d812:	4925      	ldr	r1, [pc, #148]	; (800d8a8 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800d814:	fb2a 3401 	smlad	r4, sl, r1, r3
 800d818:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800d81c:	fb27 4403 	smlad	r4, r7, r3, r4
 800d820:	4b22      	ldr	r3, [pc, #136]	; (800d8ac <D48_1CH_HTONS_VOL_HP+0x160>)
 800d822:	fb26 4403 	smlad	r4, r6, r3, r4
 800d826:	2101      	movs	r1, #1
 800d828:	fb2a fa01 	smuad	sl, sl, r1
 800d82c:	4b20      	ldr	r3, [pc, #128]	; (800d8b0 <D48_1CH_HTONS_VOL_HP+0x164>)
 800d82e:	fb27 a703 	smlad	r7, r7, r3, sl
 800d832:	4b20      	ldr	r3, [pc, #128]	; (800d8b4 <D48_1CH_HTONS_VOL_HP+0x168>)
 800d834:	fb26 7303 	smlad	r3, r6, r3, r7
 800d838:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800d83c:	9e02      	ldr	r6, [sp, #8]
 800d83e:	9f01      	ldr	r7, [sp, #4]
 800d840:	4410      	add	r0, r2
 800d842:	eba0 0009 	sub.w	r0, r0, r9
 800d846:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 800d84a:	fba0 0106 	umull	r0, r1, r0, r6
 800d84e:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800d852:	fb06 110a 	mla	r1, r6, sl, r1
 800d856:	f141 0100 	adc.w	r1, r1, #0
 800d85a:	0308      	lsls	r0, r1, #12
 800d85c:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800d860:	f04f 0a00 	mov.w	sl, #0
 800d864:	fbc0 9a07 	smlal	r9, sl, r0, r7
 800d868:	4657      	mov	r7, sl
 800d86a:	10b8      	asrs	r0, r7, #2
 800d86c:	f300 000f 	ssat	r0, #16, r0
 800d870:	f82c 0b02 	strh.w	r0, [ip], #2
 800d874:	0048      	lsls	r0, r1, #1
 800d876:	9903      	ldr	r1, [sp, #12]
 800d878:	458c      	cmp	ip, r1
 800d87a:	4691      	mov	r9, r2
 800d87c:	d185      	bne.n	800d78a <D48_1CH_HTONS_VOL_HP+0x3e>
 800d87e:	9d05      	ldr	r5, [sp, #20]
 800d880:	616a      	str	r2, [r5, #20]
 800d882:	9a04      	ldr	r2, [sp, #16]
 800d884:	6128      	str	r0, [r5, #16]
 800d886:	2000      	movs	r0, #0
 800d888:	60ab      	str	r3, [r5, #8]
 800d88a:	60ec      	str	r4, [r5, #12]
 800d88c:	f8c5 e01c 	str.w	lr, [r5, #28]
 800d890:	61aa      	str	r2, [r5, #24]
 800d892:	b007      	add	sp, #28
 800d894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d898:	464a      	mov	r2, r9
 800d89a:	e7f0      	b.n	800d87e <D48_1CH_HTONS_VOL_HP+0x132>
 800d89c:	20000000 	.word	0x20000000
 800d8a0:	000f000a 	.word	0x000f000a
 800d8a4:	00060003 	.word	0x00060003
 800d8a8:	00150019 	.word	0x00150019
 800d8ac:	00190015 	.word	0x00190015
 800d8b0:	00030006 	.word	0x00030006
 800d8b4:	000a000f 	.word	0x000a000f

0800d8b8 <D64_1CH_HTONS_VOL_HP>:
 800d8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8bc:	b089      	sub	sp, #36	; 0x24
 800d8be:	4614      	mov	r4, r2
 800d8c0:	9207      	str	r2, [sp, #28]
 800d8c2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800d8c4:	f8d2 c010 	ldr.w	ip, [r2, #16]
 800d8c8:	f8d2 8014 	ldr.w	r8, [r2, #20]
 800d8cc:	6992      	ldr	r2, [r2, #24]
 800d8ce:	9206      	str	r2, [sp, #24]
 800d8d0:	68e2      	ldr	r2, [r4, #12]
 800d8d2:	9201      	str	r2, [sp, #4]
 800d8d4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d8d6:	9203      	str	r2, [sp, #12]
 800d8d8:	6a22      	ldr	r2, [r4, #32]
 800d8da:	69e5      	ldr	r5, [r4, #28]
 800d8dc:	68a6      	ldr	r6, [r4, #8]
 800d8de:	9204      	str	r2, [sp, #16]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	f000 80b0 	beq.w	800da46 <D64_1CH_HTONS_VOL_HP+0x18e>
 800d8e6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800d8ea:	4f58      	ldr	r7, [pc, #352]	; (800da4c <D64_1CH_HTONS_VOL_HP+0x194>)
 800d8ec:	9305      	str	r3, [sp, #20]
 800d8ee:	9102      	str	r1, [sp, #8]
 800d8f0:	f850 2b08 	ldr.w	r2, [r0], #8
 800d8f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800d8f8:	ba52      	rev16	r2, r2
 800d8fa:	fa93 f993 	rev16.w	r9, r3
 800d8fe:	b2d4      	uxtb	r4, r2
 800d900:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d904:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
 800d908:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d90c:	9901      	ldr	r1, [sp, #4]
 800d90e:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800d912:	0e12      	lsrs	r2, r2, #24
 800d914:	44ab      	add	fp, r5
 800d916:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d91a:	f857 4022 	ldr.w	r4, [r7, r2, lsl #2]
 800d91e:	fa5f f289 	uxtb.w	r2, r9
 800d922:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800d926:	f3c9 2307 	ubfx	r3, r9, #8, #8
 800d92a:	eb05 2a9e 	add.w	sl, r5, lr, lsr #10
 800d92e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800d932:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800d936:	f3c9 4507 	ubfx	r5, r9, #16, #8
 800d93a:	eb04 249a 	add.w	r4, r4, sl, lsr #10
 800d93e:	ea4f 6919 	mov.w	r9, r9, lsr #24
 800d942:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800d946:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 800d94a:	f857 9029 	ldr.w	r9, [r7, r9, lsl #2]
 800d94e:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800d952:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800d956:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 800d95a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800d95e:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800d962:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800d966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d96a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800d96e:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 800d972:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800d976:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 800d97a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800d97e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 800d982:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 800d986:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800d98a:	ea4f 2599 	mov.w	r5, r9, lsr #10
 800d98e:	4b30      	ldr	r3, [pc, #192]	; (800da50 <D64_1CH_HTONS_VOL_HP+0x198>)
 800d990:	fb2b 1303 	smlad	r3, fp, r3, r1
 800d994:	492f      	ldr	r1, [pc, #188]	; (800da54 <D64_1CH_HTONS_VOL_HP+0x19c>)
 800d996:	fb24 3301 	smlad	r3, r4, r1, r3
 800d99a:	492f      	ldr	r1, [pc, #188]	; (800da58 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 800d99c:	fb22 3301 	smlad	r3, r2, r1, r3
 800d9a0:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800d9a4:	fb2e 390a 	smlad	r9, lr, sl, r3
 800d9a8:	4b2c      	ldr	r3, [pc, #176]	; (800da5c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 800d9aa:	fb2b 6603 	smlad	r6, fp, r3, r6
 800d9ae:	fb2e 6613 	smladx	r6, lr, r3, r6
 800d9b2:	4b2b      	ldr	r3, [pc, #172]	; (800da60 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 800d9b4:	fb24 6603 	smlad	r6, r4, r3, r6
 800d9b8:	fb22 6313 	smladx	r3, r2, r3, r6
 800d9bc:	f04f 0a01 	mov.w	sl, #1
 800d9c0:	9301      	str	r3, [sp, #4]
 800d9c2:	fb2b fb0a 	smuad	fp, fp, sl
 800d9c6:	4b27      	ldr	r3, [pc, #156]	; (800da64 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 800d9c8:	fb24 ba03 	smlad	sl, r4, r3, fp
 800d9cc:	4b26      	ldr	r3, [pc, #152]	; (800da68 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 800d9ce:	fb22 a203 	smlad	r2, r2, r3, sl
 800d9d2:	4b26      	ldr	r3, [pc, #152]	; (800da6c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 800d9d4:	fb2e 2603 	smlad	r6, lr, r3, r2
 800d9d8:	f5a9 3a00 	sub.w	sl, r9, #131072	; 0x20000
 800d9dc:	eb0a 020c 	add.w	r2, sl, ip
 800d9e0:	9c04      	ldr	r4, [sp, #16]
 800d9e2:	9903      	ldr	r1, [sp, #12]
 800d9e4:	eba2 0208 	sub.w	r2, r2, r8
 800d9e8:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800d9ec:	fba2 2304 	umull	r2, r3, r2, r4
 800d9f0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800d9f4:	fb04 3309 	mla	r3, r4, r9, r3
 800d9f8:	f143 0300 	adc.w	r3, r3, #0
 800d9fc:	02da      	lsls	r2, r3, #11
 800d9fe:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800da02:	f04f 0900 	mov.w	r9, #0
 800da06:	fbc1 8902 	smlal	r8, r9, r1, r2
 800da0a:	9902      	ldr	r1, [sp, #8]
 800da0c:	ea4f 02a9 	mov.w	r2, r9, asr #2
 800da10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800da14:	f302 020f 	ssat	r2, #16, r2
 800da18:	9b05      	ldr	r3, [sp, #20]
 800da1a:	f821 2b02 	strh.w	r2, [r1], #2
 800da1e:	4299      	cmp	r1, r3
 800da20:	9102      	str	r1, [sp, #8]
 800da22:	46d0      	mov	r8, sl
 800da24:	f47f af64 	bne.w	800d8f0 <D64_1CH_HTONS_VOL_HP+0x38>
 800da28:	9a07      	ldr	r2, [sp, #28]
 800da2a:	9901      	ldr	r1, [sp, #4]
 800da2c:	60d1      	str	r1, [r2, #12]
 800da2e:	9906      	ldr	r1, [sp, #24]
 800da30:	6096      	str	r6, [r2, #8]
 800da32:	2000      	movs	r0, #0
 800da34:	61d5      	str	r5, [r2, #28]
 800da36:	f8c2 c010 	str.w	ip, [r2, #16]
 800da3a:	f8c2 a014 	str.w	sl, [r2, #20]
 800da3e:	6191      	str	r1, [r2, #24]
 800da40:	b009      	add	sp, #36	; 0x24
 800da42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da46:	46c2      	mov	sl, r8
 800da48:	4622      	mov	r2, r4
 800da4a:	e7ee      	b.n	800da2a <D64_1CH_HTONS_VOL_HP+0x172>
 800da4c:	20000000 	.word	0x20000000
 800da50:	001c0015 	.word	0x001c0015
 800da54:	000f000a 	.word	0x000f000a
 800da58:	00060003 	.word	0x00060003
 800da5c:	0024002a 	.word	0x0024002a
 800da60:	002e0030 	.word	0x002e0030
 800da64:	00030006 	.word	0x00030006
 800da68:	000a000f 	.word	0x000a000f
 800da6c:	0015001c 	.word	0x0015001c

0800da70 <D80_1CH_HTONS_VOL_HP>:
 800da70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da74:	4613      	mov	r3, r2
 800da76:	b089      	sub	sp, #36	; 0x24
 800da78:	4686      	mov	lr, r0
 800da7a:	6918      	ldr	r0, [r3, #16]
 800da7c:	9000      	str	r0, [sp, #0]
 800da7e:	4618      	mov	r0, r3
 800da80:	461c      	mov	r4, r3
 800da82:	695b      	ldr	r3, [r3, #20]
 800da84:	9302      	str	r3, [sp, #8]
 800da86:	6983      	ldr	r3, [r0, #24]
 800da88:	9306      	str	r3, [sp, #24]
 800da8a:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800da8e:	69c3      	ldr	r3, [r0, #28]
 800da90:	68c0      	ldr	r0, [r0, #12]
 800da92:	9207      	str	r2, [sp, #28]
 800da94:	9001      	str	r0, [sp, #4]
 800da96:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800da98:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800da9a:	9003      	str	r0, [sp, #12]
 800da9c:	6a20      	ldr	r0, [r4, #32]
 800da9e:	9004      	str	r0, [sp, #16]
 800daa0:	2a00      	cmp	r2, #0
 800daa2:	f000 80d2 	beq.w	800dc4a <D80_1CH_HTONS_VOL_HP+0x1da>
 800daa6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800daaa:	4869      	ldr	r0, [pc, #420]	; (800dc50 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800daac:	9205      	str	r2, [sp, #20]
 800daae:	461c      	mov	r4, r3
 800dab0:	f8de 5000 	ldr.w	r5, [lr]
 800dab4:	f8de 2004 	ldr.w	r2, [lr, #4]
 800dab8:	f8de 3008 	ldr.w	r3, [lr, #8]
 800dabc:	f10e 0e0a 	add.w	lr, lr, #10
 800dac0:	ba6d      	rev16	r5, r5
 800dac2:	ba52      	rev16	r2, r2
 800dac4:	fa93 fb93 	rev16.w	fp, r3
 800dac8:	b2ee      	uxtb	r6, r5
 800daca:	f3c5 2307 	ubfx	r3, r5, #8, #8
 800dace:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 800dad2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800dad6:	f3c5 4607 	ubfx	r6, r5, #16, #8
 800dada:	eb04 0a07 	add.w	sl, r4, r7
 800dade:	0e2d      	lsrs	r5, r5, #24
 800dae0:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 800dae4:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 800dae8:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 800daec:	eb04 2993 	add.w	r9, r4, r3, lsr #10
 800daf0:	b2d5      	uxtb	r5, r2
 800daf2:	f3c2 2407 	ubfx	r4, r2, #8, #8
 800daf6:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 800dafa:	f850 5024 	ldr.w	r5, [r0, r4, lsl #2]
 800dafe:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800db02:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 800db06:	0e12      	lsrs	r2, r2, #24
 800db08:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 800db0c:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
 800db10:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 800db14:	fa5f f48b 	uxtb.w	r4, fp
 800db18:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 800db1c:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800db20:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800db24:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800db28:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 800db2c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800db30:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 800db34:	eb0b 2b94 	add.w	fp, fp, r4, lsr #10
 800db38:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800db3c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800db40:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800db44:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800db48:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800db4c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800db50:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 800db54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800db58:	f3cb 0609 	ubfx	r6, fp, #0, #10
 800db5c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800db60:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800db64:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800db68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800db6c:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 800db70:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800db74:	ea4f 249b 	mov.w	r4, fp, lsr #10
 800db78:	4d36      	ldr	r5, [pc, #216]	; (800dc54 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800db7a:	9f01      	ldr	r7, [sp, #4]
 800db7c:	fb23 7505 	smlad	r5, r3, r5, r7
 800db80:	4f35      	ldr	r7, [pc, #212]	; (800dc58 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800db82:	fb29 5507 	smlad	r5, r9, r7, r5
 800db86:	4f35      	ldr	r7, [pc, #212]	; (800dc5c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800db88:	fb28 5507 	smlad	r5, r8, r7, r5
 800db8c:	4f34      	ldr	r7, [pc, #208]	; (800dc60 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800db8e:	fb22 5507 	smlad	r5, r2, r7, r5
 800db92:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
 800db96:	fb26 5b0a 	smlad	fp, r6, sl, r5
 800db9a:	4d32      	ldr	r5, [pc, #200]	; (800dc64 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800db9c:	fb23 cc05 	smlad	ip, r3, r5, ip
 800dba0:	4d31      	ldr	r5, [pc, #196]	; (800dc68 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800dba2:	fb29 cc05 	smlad	ip, r9, r5, ip
 800dba6:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 800dbaa:	fb28 c505 	smlad	r5, r8, r5, ip
 800dbae:	4f2f      	ldr	r7, [pc, #188]	; (800dc6c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800dbb0:	fb22 5507 	smlad	r5, r2, r7, r5
 800dbb4:	4f2e      	ldr	r7, [pc, #184]	; (800dc70 <D80_1CH_HTONS_VOL_HP+0x200>)
 800dbb6:	fb26 5507 	smlad	r5, r6, r7, r5
 800dbba:	f04f 0a01 	mov.w	sl, #1
 800dbbe:	9501      	str	r5, [sp, #4]
 800dbc0:	fb23 fa0a 	smuad	sl, r3, sl
 800dbc4:	4b2b      	ldr	r3, [pc, #172]	; (800dc74 <D80_1CH_HTONS_VOL_HP+0x204>)
 800dbc6:	fb29 a903 	smlad	r9, r9, r3, sl
 800dbca:	4d2b      	ldr	r5, [pc, #172]	; (800dc78 <D80_1CH_HTONS_VOL_HP+0x208>)
 800dbcc:	fb28 9805 	smlad	r8, r8, r5, r9
 800dbd0:	4d2a      	ldr	r5, [pc, #168]	; (800dc7c <D80_1CH_HTONS_VOL_HP+0x20c>)
 800dbd2:	fb22 8205 	smlad	r2, r2, r5, r8
 800dbd6:	4b2a      	ldr	r3, [pc, #168]	; (800dc80 <D80_1CH_HTONS_VOL_HP+0x210>)
 800dbd8:	fb26 2c03 	smlad	ip, r6, r3, r2
 800dbdc:	9b00      	ldr	r3, [sp, #0]
 800dbde:	9d04      	ldr	r5, [sp, #16]
 800dbe0:	f5ab 3a7a 	sub.w	sl, fp, #256000	; 0x3e800
 800dbe4:	4453      	add	r3, sl
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	9b02      	ldr	r3, [sp, #8]
 800dbea:	f8cd a008 	str.w	sl, [sp, #8]
 800dbee:	1ad2      	subs	r2, r2, r3
 800dbf0:	17d7      	asrs	r7, r2, #31
 800dbf2:	fba2 2305 	umull	r2, r3, r2, r5
 800dbf6:	fb05 3307 	mla	r3, r5, r7, r3
 800dbfa:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800dbfe:	f143 0300 	adc.w	r3, r3, #0
 800dc02:	9d03      	ldr	r5, [sp, #12]
 800dc04:	029a      	lsls	r2, r3, #10
 800dc06:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dc0a:	2700      	movs	r7, #0
 800dc0c:	005b      	lsls	r3, r3, #1
 800dc0e:	fbc5 6702 	smlal	r6, r7, r5, r2
 800dc12:	10ba      	asrs	r2, r7, #2
 800dc14:	9300      	str	r3, [sp, #0]
 800dc16:	f302 020f 	ssat	r2, #16, r2
 800dc1a:	9b05      	ldr	r3, [sp, #20]
 800dc1c:	f821 2b02 	strh.w	r2, [r1], #2
 800dc20:	4299      	cmp	r1, r3
 800dc22:	f47f af45 	bne.w	800dab0 <D80_1CH_HTONS_VOL_HP+0x40>
 800dc26:	4623      	mov	r3, r4
 800dc28:	9907      	ldr	r1, [sp, #28]
 800dc2a:	9801      	ldr	r0, [sp, #4]
 800dc2c:	60c8      	str	r0, [r1, #12]
 800dc2e:	9a00      	ldr	r2, [sp, #0]
 800dc30:	f8c1 c008 	str.w	ip, [r1, #8]
 800dc34:	4608      	mov	r0, r1
 800dc36:	61cb      	str	r3, [r1, #28]
 800dc38:	610a      	str	r2, [r1, #16]
 800dc3a:	f8c1 a014 	str.w	sl, [r1, #20]
 800dc3e:	9906      	ldr	r1, [sp, #24]
 800dc40:	6181      	str	r1, [r0, #24]
 800dc42:	2000      	movs	r0, #0
 800dc44:	b009      	add	sp, #36	; 0x24
 800dc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800dc4e:	e7eb      	b.n	800dc28 <D80_1CH_HTONS_VOL_HP+0x1b8>
 800dc50:	20000000 	.word	0x20000000
 800dc54:	002d0024 	.word	0x002d0024
 800dc58:	001c0015 	.word	0x001c0015
 800dc5c:	000f000a 	.word	0x000f000a
 800dc60:	00060003 	.word	0x00060003
 800dc64:	0037003f 	.word	0x0037003f
 800dc68:	00450049 	.word	0x00450049
 800dc6c:	00490045 	.word	0x00490045
 800dc70:	003f0037 	.word	0x003f0037
 800dc74:	00030006 	.word	0x00030006
 800dc78:	000a000f 	.word	0x000a000f
 800dc7c:	0015001c 	.word	0x0015001c
 800dc80:	0024002d 	.word	0x0024002d

0800dc84 <D128_1CH_HTONS_VOL_HP>:
 800dc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc88:	b093      	sub	sp, #76	; 0x4c
 800dc8a:	4614      	mov	r4, r2
 800dc8c:	9211      	str	r2, [sp, #68]	; 0x44
 800dc8e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800dc90:	6912      	ldr	r2, [r2, #16]
 800dc92:	9203      	str	r2, [sp, #12]
 800dc94:	4622      	mov	r2, r4
 800dc96:	4615      	mov	r5, r2
 800dc98:	6964      	ldr	r4, [r4, #20]
 800dc9a:	9406      	str	r4, [sp, #24]
 800dc9c:	4614      	mov	r4, r2
 800dc9e:	6992      	ldr	r2, [r2, #24]
 800dca0:	9210      	str	r2, [sp, #64]	; 0x40
 800dca2:	68ea      	ldr	r2, [r5, #12]
 800dca4:	9204      	str	r2, [sp, #16]
 800dca6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800dca8:	69e6      	ldr	r6, [r4, #28]
 800dcaa:	920d      	str	r2, [sp, #52]	; 0x34
 800dcac:	68a4      	ldr	r4, [r4, #8]
 800dcae:	6a2a      	ldr	r2, [r5, #32]
 800dcb0:	9405      	str	r4, [sp, #20]
 800dcb2:	920e      	str	r2, [sp, #56]	; 0x38
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	f000 8145 	beq.w	800df44 <D128_1CH_HTONS_VOL_HP+0x2c0>
 800dcba:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800dcbe:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcc0:	f8df 82dc 	ldr.w	r8, [pc, #732]	; 800dfa0 <D128_1CH_HTONS_VOL_HP+0x31c>
 800dcc4:	9107      	str	r1, [sp, #28]
 800dcc6:	f100 0310 	add.w	r3, r0, #16
 800dcca:	4699      	mov	r9, r3
 800dccc:	f1a9 0110 	sub.w	r1, r9, #16
 800dcd0:	c90e      	ldmia	r1, {r1, r2, r3}
 800dcd2:	f859 0c04 	ldr.w	r0, [r9, #-4]
 800dcd6:	ba49      	rev16	r1, r1
 800dcd8:	ba52      	rev16	r2, r2
 800dcda:	ba5b      	rev16	r3, r3
 800dcdc:	fa90 fa90 	rev16.w	sl, r0
 800dce0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800dce4:	b2cc      	uxtb	r4, r1
 800dce6:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800dcea:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800dcee:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800dcf2:	0e09      	lsrs	r1, r1, #24
 800dcf4:	4426      	add	r6, r4
 800dcf6:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800dcfa:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800dcfe:	b2d0      	uxtb	r0, r2
 800dd00:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800dd04:	eb04 2b95 	add.w	fp, r4, r5, lsr #10
 800dd08:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800dd0c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800dd10:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800dd14:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800dd18:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800dd1c:	0e12      	lsrs	r2, r2, #24
 800dd1e:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800dd22:	9701      	str	r7, [sp, #4]
 800dd24:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800dd28:	4627      	mov	r7, r4
 800dd2a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800dd2e:	9702      	str	r7, [sp, #8]
 800dd30:	b2da      	uxtb	r2, r3
 800dd32:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 800dd36:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 800dd3a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800dd3e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 800dd42:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 800dd46:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800dd4a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800dd4e:	0e1b      	lsrs	r3, r3, #24
 800dd50:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800dd54:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800dd58:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800dd5c:	fa5f f38a 	uxtb.w	r3, sl
 800dd60:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800dd64:	960a      	str	r6, [sp, #40]	; 0x28
 800dd66:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 800dd6a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800dd6e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800dd72:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800dd76:	950b      	str	r5, [sp, #44]	; 0x2c
 800dd78:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800dd7c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800dd80:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800dd84:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800dd88:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800dd8c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800dd90:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800dd94:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800dd98:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800dd9c:	9308      	str	r3, [sp, #32]
 800dd9e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800dda2:	9b01      	ldr	r3, [sp, #4]
 800dda4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800dda8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ddac:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800ddb0:	9b02      	ldr	r3, [sp, #8]
 800ddb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ddb6:	9302      	str	r3, [sp, #8]
 800ddb8:	9b08      	ldr	r3, [sp, #32]
 800ddba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ddbe:	9308      	str	r3, [sp, #32]
 800ddc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddc2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800ddc6:	950c      	str	r5, [sp, #48]	; 0x30
 800ddc8:	461d      	mov	r5, r3
 800ddca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ddcc:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800ddd0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800ddd4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800ddd8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800dddc:	9301      	str	r3, [sp, #4]
 800ddde:	9b02      	ldr	r3, [sp, #8]
 800dde0:	9202      	str	r2, [sp, #8]
 800dde2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dde4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dde6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800ddea:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800ddee:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800ddf2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800ddf6:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800ddfa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800ddfe:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800de02:	9b08      	ldr	r3, [sp, #32]
 800de04:	9f01      	ldr	r7, [sp, #4]
 800de06:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800de0a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800de0e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800de12:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800de16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800de1a:	46be      	mov	lr, r7
 800de1c:	0a96      	lsrs	r6, r2, #10
 800de1e:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800de22:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 800de26:	4f49      	ldr	r7, [pc, #292]	; (800df4c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800de28:	9a04      	ldr	r2, [sp, #16]
 800de2a:	fb2e 2e07 	smlad	lr, lr, r7, r2
 800de2e:	4a48      	ldr	r2, [pc, #288]	; (800df50 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800de30:	fb2a ee02 	smlad	lr, sl, r2, lr
 800de34:	4a47      	ldr	r2, [pc, #284]	; (800df54 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800de36:	fb21 ee02 	smlad	lr, r1, r2, lr
 800de3a:	4a47      	ldr	r2, [pc, #284]	; (800df58 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800de3c:	fb24 ee02 	smlad	lr, r4, r2, lr
 800de40:	4a46      	ldr	r2, [pc, #280]	; (800df5c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800de42:	9f02      	ldr	r7, [sp, #8]
 800de44:	fb27 ee02 	smlad	lr, r7, r2, lr
 800de48:	4a45      	ldr	r2, [pc, #276]	; (800df60 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800de4a:	fb20 ee02 	smlad	lr, r0, r2, lr
 800de4e:	4a45      	ldr	r2, [pc, #276]	; (800df64 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800de50:	fb23 e702 	smlad	r7, r3, r2, lr
 800de54:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 800de58:	fb25 7e0e 	smlad	lr, r5, lr, r7
 800de5c:	9f01      	ldr	r7, [sp, #4]
 800de5e:	4a42      	ldr	r2, [pc, #264]	; (800df68 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800de60:	46bc      	mov	ip, r7
 800de62:	9f05      	ldr	r7, [sp, #20]
 800de64:	fb2c 7c02 	smlad	ip, ip, r2, r7
 800de68:	4a40      	ldr	r2, [pc, #256]	; (800df6c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800de6a:	fb2a cc02 	smlad	ip, sl, r2, ip
 800de6e:	4f40      	ldr	r7, [pc, #256]	; (800df70 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800de70:	fb21 cc07 	smlad	ip, r1, r7, ip
 800de74:	4f3f      	ldr	r7, [pc, #252]	; (800df74 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800de76:	fb24 cc07 	smlad	ip, r4, r7, ip
 800de7a:	4f3f      	ldr	r7, [pc, #252]	; (800df78 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800de7c:	9a02      	ldr	r2, [sp, #8]
 800de7e:	fb22 cc07 	smlad	ip, r2, r7, ip
 800de82:	4f3e      	ldr	r7, [pc, #248]	; (800df7c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800de84:	fb20 cc07 	smlad	ip, r0, r7, ip
 800de88:	4f3d      	ldr	r7, [pc, #244]	; (800df80 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800de8a:	fb23 c707 	smlad	r7, r3, r7, ip
 800de8e:	f8df c114 	ldr.w	ip, [pc, #276]	; 800dfa4 <D128_1CH_HTONS_VOL_HP+0x320>
 800de92:	fb25 720c 	smlad	r2, r5, ip, r7
 800de96:	f04f 0b01 	mov.w	fp, #1
 800de9a:	9204      	str	r2, [sp, #16]
 800de9c:	9f01      	ldr	r7, [sp, #4]
 800de9e:	fb27 fb0b 	smuad	fp, r7, fp
 800dea2:	4f38      	ldr	r7, [pc, #224]	; (800df84 <D128_1CH_HTONS_VOL_HP+0x300>)
 800dea4:	fb2a ba07 	smlad	sl, sl, r7, fp
 800dea8:	4f37      	ldr	r7, [pc, #220]	; (800df88 <D128_1CH_HTONS_VOL_HP+0x304>)
 800deaa:	fb21 aa07 	smlad	sl, r1, r7, sl
 800deae:	4f37      	ldr	r7, [pc, #220]	; (800df8c <D128_1CH_HTONS_VOL_HP+0x308>)
 800deb0:	fb24 aa07 	smlad	sl, r4, r7, sl
 800deb4:	4f36      	ldr	r7, [pc, #216]	; (800df90 <D128_1CH_HTONS_VOL_HP+0x30c>)
 800deb6:	9a02      	ldr	r2, [sp, #8]
 800deb8:	fb22 a707 	smlad	r7, r2, r7, sl
 800debc:	4a35      	ldr	r2, [pc, #212]	; (800df94 <D128_1CH_HTONS_VOL_HP+0x310>)
 800debe:	fb20 7702 	smlad	r7, r0, r2, r7
 800dec2:	4a35      	ldr	r2, [pc, #212]	; (800df98 <D128_1CH_HTONS_VOL_HP+0x314>)
 800dec4:	fb23 7702 	smlad	r7, r3, r2, r7
 800dec8:	4b34      	ldr	r3, [pc, #208]	; (800df9c <D128_1CH_HTONS_VOL_HP+0x318>)
 800deca:	fb25 7303 	smlad	r3, r5, r3, r7
 800dece:	9305      	str	r3, [sp, #20]
 800ded0:	9b03      	ldr	r3, [sp, #12]
 800ded2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ded4:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 800ded8:	4473      	add	r3, lr
 800deda:	461a      	mov	r2, r3
 800dedc:	9b06      	ldr	r3, [sp, #24]
 800dede:	f8cd e018 	str.w	lr, [sp, #24]
 800dee2:	1ad2      	subs	r2, r2, r3
 800dee4:	17d1      	asrs	r1, r2, #31
 800dee6:	fba2 2304 	umull	r2, r3, r2, r4
 800deea:	fb04 3301 	mla	r3, r4, r1, r3
 800deee:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800def2:	f143 0300 	adc.w	r3, r3, #0
 800def6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800def8:	021a      	lsls	r2, r3, #8
 800defa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800defe:	2100      	movs	r1, #0
 800df00:	fbc4 0102 	smlal	r0, r1, r4, r2
 800df04:	108a      	asrs	r2, r1, #2
 800df06:	9907      	ldr	r1, [sp, #28]
 800df08:	f302 020f 	ssat	r2, #16, r2
 800df0c:	005b      	lsls	r3, r3, #1
 800df0e:	f821 2b02 	strh.w	r2, [r1], #2
 800df12:	9303      	str	r3, [sp, #12]
 800df14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df16:	9107      	str	r1, [sp, #28]
 800df18:	4299      	cmp	r1, r3
 800df1a:	f109 0910 	add.w	r9, r9, #16
 800df1e:	f47f aed5 	bne.w	800dccc <D128_1CH_HTONS_VOL_HP+0x48>
 800df22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800df24:	9905      	ldr	r1, [sp, #20]
 800df26:	6091      	str	r1, [r2, #8]
 800df28:	9904      	ldr	r1, [sp, #16]
 800df2a:	60d1      	str	r1, [r2, #12]
 800df2c:	4613      	mov	r3, r2
 800df2e:	61d6      	str	r6, [r2, #28]
 800df30:	9910      	ldr	r1, [sp, #64]	; 0x40
 800df32:	9a03      	ldr	r2, [sp, #12]
 800df34:	611a      	str	r2, [r3, #16]
 800df36:	2000      	movs	r0, #0
 800df38:	f8c3 e014 	str.w	lr, [r3, #20]
 800df3c:	6199      	str	r1, [r3, #24]
 800df3e:	b013      	add	sp, #76	; 0x4c
 800df40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df44:	f8dd e018 	ldr.w	lr, [sp, #24]
 800df48:	e7eb      	b.n	800df22 <D128_1CH_HTONS_VOL_HP+0x29e>
 800df4a:	bf00      	nop
 800df4c:	00780069 	.word	0x00780069
 800df50:	005b004e 	.word	0x005b004e
 800df54:	00420037 	.word	0x00420037
 800df58:	002d0024 	.word	0x002d0024
 800df5c:	001c0015 	.word	0x001c0015
 800df60:	000f000a 	.word	0x000f000a
 800df64:	00060003 	.word	0x00060003
 800df68:	00880096 	.word	0x00880096
 800df6c:	00a200ac 	.word	0x00a200ac
 800df70:	00b400ba 	.word	0x00b400ba
 800df74:	00be00c0 	.word	0x00be00c0
 800df78:	00c000be 	.word	0x00c000be
 800df7c:	00ba00b4 	.word	0x00ba00b4
 800df80:	00ac00a2 	.word	0x00ac00a2
 800df84:	00030006 	.word	0x00030006
 800df88:	000a000f 	.word	0x000a000f
 800df8c:	0015001c 	.word	0x0015001c
 800df90:	0024002d 	.word	0x0024002d
 800df94:	00370042 	.word	0x00370042
 800df98:	004e005b 	.word	0x004e005b
 800df9c:	00690078 	.word	0x00690078
 800dfa0:	20000000 	.word	0x20000000
 800dfa4:	00960088 	.word	0x00960088

0800dfa8 <PDM_Filter_Init>:
 800dfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfaa:	2240      	movs	r2, #64	; 0x40
 800dfac:	4604      	mov	r4, r0
 800dfae:	2100      	movs	r1, #0
 800dfb0:	300c      	adds	r0, #12
 800dfb2:	f004 f937 	bl	8012224 <memset>
 800dfb6:	493b      	ldr	r1, [pc, #236]	; (800e0a4 <PDM_Filter_Init+0xfc>)
 800dfb8:	483b      	ldr	r0, [pc, #236]	; (800e0a8 <PDM_Filter_Init+0x100>)
 800dfba:	f000 f98d 	bl	800e2d8 <CRC_Lock>
 800dfbe:	8822      	ldrh	r2, [r4, #0]
 800dfc0:	8963      	ldrh	r3, [r4, #10]
 800dfc2:	4938      	ldr	r1, [pc, #224]	; (800e0a4 <PDM_Filter_Init+0xfc>)
 800dfc4:	8925      	ldrh	r5, [r4, #8]
 800dfc6:	86a3      	strh	r3, [r4, #52]	; 0x34
 800dfc8:	2801      	cmp	r0, #1
 800dfca:	f04f 0300 	mov.w	r3, #0
 800dfce:	bf18      	it	ne
 800dfd0:	2100      	movne	r1, #0
 800dfd2:	2a01      	cmp	r2, #1
 800dfd4:	6461      	str	r1, [r4, #68]	; 0x44
 800dfd6:	86e5      	strh	r5, [r4, #54]	; 0x36
 800dfd8:	61a3      	str	r3, [r4, #24]
 800dfda:	6123      	str	r3, [r4, #16]
 800dfdc:	6163      	str	r3, [r4, #20]
 800dfde:	60e3      	str	r3, [r4, #12]
 800dfe0:	6263      	str	r3, [r4, #36]	; 0x24
 800dfe2:	61e3      	str	r3, [r4, #28]
 800dfe4:	6223      	str	r3, [r4, #32]
 800dfe6:	6423      	str	r3, [r4, #64]	; 0x40
 800dfe8:	d918      	bls.n	800e01c <PDM_Filter_Init+0x74>
 800dfea:	2003      	movs	r0, #3
 800dfec:	2302      	movs	r3, #2
 800dfee:	8862      	ldrh	r2, [r4, #2]
 800dff0:	2a01      	cmp	r2, #1
 800dff2:	d91d      	bls.n	800e030 <PDM_Filter_Init+0x88>
 800dff4:	2140      	movs	r1, #64	; 0x40
 800dff6:	2300      	movs	r3, #0
 800dff8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800dffa:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
 800dffe:	6862      	ldr	r2, [r4, #4]
 800e000:	bf04      	itt	eq
 800e002:	6421      	streq	r1, [r4, #64]	; 0x40
 800e004:	460b      	moveq	r3, r1
 800e006:	b11a      	cbz	r2, 800e010 <PDM_Filter_Init+0x68>
 800e008:	f043 0310 	orr.w	r3, r3, #16
 800e00c:	6423      	str	r3, [r4, #64]	; 0x40
 800e00e:	62e2      	str	r2, [r4, #44]	; 0x2c
 800e010:	2200      	movs	r2, #0
 800e012:	8722      	strh	r2, [r4, #56]	; 0x38
 800e014:	b908      	cbnz	r0, 800e01a <PDM_Filter_Init+0x72>
 800e016:	3380      	adds	r3, #128	; 0x80
 800e018:	6423      	str	r3, [r4, #64]	; 0x40
 800e01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e01c:	4d23      	ldr	r5, [pc, #140]	; (800e0ac <PDM_Filter_Init+0x104>)
 800e01e:	d010      	beq.n	800e042 <PDM_Filter_Init+0x9a>
 800e020:	782a      	ldrb	r2, [r5, #0]
 800e022:	2a01      	cmp	r2, #1
 800e024:	d027      	beq.n	800e076 <PDM_Filter_Init+0xce>
 800e026:	8862      	ldrh	r2, [r4, #2]
 800e028:	2a01      	cmp	r2, #1
 800e02a:	f04f 0001 	mov.w	r0, #1
 800e02e:	d8e1      	bhi.n	800dff4 <PDM_Filter_Init+0x4c>
 800e030:	d001      	beq.n	800e036 <PDM_Filter_Init+0x8e>
 800e032:	4618      	mov	r0, r3
 800e034:	e7de      	b.n	800dff4 <PDM_Filter_Init+0x4c>
 800e036:	2220      	movs	r2, #32
 800e038:	4618      	mov	r0, r3
 800e03a:	6422      	str	r2, [r4, #64]	; 0x40
 800e03c:	4613      	mov	r3, r2
 800e03e:	2160      	movs	r1, #96	; 0x60
 800e040:	e7da      	b.n	800dff8 <PDM_Filter_Init+0x50>
 800e042:	7829      	ldrb	r1, [r5, #0]
 800e044:	2900      	cmp	r1, #0
 800e046:	d1ee      	bne.n	800e026 <PDM_Filter_Init+0x7e>
 800e048:	4919      	ldr	r1, [pc, #100]	; (800e0b0 <PDM_Filter_Init+0x108>)
 800e04a:	f8df e06c 	ldr.w	lr, [pc, #108]	; 800e0b8 <PDM_Filter_Init+0x110>
 800e04e:	4f19      	ldr	r7, [pc, #100]	; (800e0b4 <PDM_Filter_Init+0x10c>)
 800e050:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e054:	684a      	ldr	r2, [r1, #4]
 800e056:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e05a:	ea02 0007 	and.w	r0, r2, r7
 800e05e:	4303      	orrs	r3, r0
 800e060:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e064:	4413      	add	r3, r2
 800e066:	f841 3f04 	str.w	r3, [r1, #4]!
 800e06a:	428e      	cmp	r6, r1
 800e06c:	d1f2      	bne.n	800e054 <PDM_Filter_Init+0xac>
 800e06e:	2001      	movs	r0, #1
 800e070:	7028      	strb	r0, [r5, #0]
 800e072:	2300      	movs	r3, #0
 800e074:	e7bb      	b.n	800dfee <PDM_Filter_Init+0x46>
 800e076:	490e      	ldr	r1, [pc, #56]	; (800e0b0 <PDM_Filter_Init+0x108>)
 800e078:	f8df e03c 	ldr.w	lr, [pc, #60]	; 800e0b8 <PDM_Filter_Init+0x110>
 800e07c:	4f0d      	ldr	r7, [pc, #52]	; (800e0b4 <PDM_Filter_Init+0x10c>)
 800e07e:	f501 6680 	add.w	r6, r1, #1024	; 0x400
 800e082:	684a      	ldr	r2, [r1, #4]
 800e084:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 800e088:	ea02 0007 	and.w	r0, r2, r7
 800e08c:	4303      	orrs	r3, r0
 800e08e:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800e092:	4413      	add	r3, r2
 800e094:	f841 3f04 	str.w	r3, [r1, #4]!
 800e098:	428e      	cmp	r6, r1
 800e09a:	d1f2      	bne.n	800e082 <PDM_Filter_Init+0xda>
 800e09c:	2300      	movs	r3, #0
 800e09e:	702b      	strb	r3, [r5, #0]
 800e0a0:	e7c1      	b.n	800e026 <PDM_Filter_Init+0x7e>
 800e0a2:	bf00      	nop
 800e0a4:	b5e8b5cd 	.word	0xb5e8b5cd
 800e0a8:	f407a5c2 	.word	0xf407a5c2
 800e0ac:	200010d0 	.word	0x200010d0
 800e0b0:	1ffffffc 	.word	0x1ffffffc
 800e0b4:	000ffc00 	.word	0x000ffc00
 800e0b8:	3ff00000 	.word	0x3ff00000

0800e0bc <PDM_Filter_setConfig>:
 800e0bc:	4b66      	ldr	r3, [pc, #408]	; (800e258 <PDM_Filter_setConfig+0x19c>)
 800e0be:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d001      	beq.n	800e0c8 <PDM_Filter_setConfig+0xc>
 800e0c4:	2004      	movs	r0, #4
 800e0c6:	4770      	bx	lr
 800e0c8:	b530      	push	{r4, r5, lr}
 800e0ca:	880a      	ldrh	r2, [r1, #0]
 800e0cc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800e0ce:	ed2d 8b04 	vpush	{d8-d9}
 800e0d2:	4604      	mov	r4, r0
 800e0d4:	460d      	mov	r5, r1
 800e0d6:	1e51      	subs	r1, r2, #1
 800e0d8:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 800e0dc:	2906      	cmp	r1, #6
 800e0de:	b083      	sub	sp, #12
 800e0e0:	6420      	str	r0, [r4, #64]	; 0x40
 800e0e2:	d91a      	bls.n	800e11a <PDM_Filter_setConfig+0x5e>
 800e0e4:	2008      	movs	r0, #8
 800e0e6:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e0ea:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e0ee:	4299      	cmp	r1, r3
 800e0f0:	d07e      	beq.n	800e1f0 <PDM_Filter_setConfig+0x134>
 800e0f2:	f113 0f0c 	cmn.w	r3, #12
 800e0f6:	da2a      	bge.n	800e14e <PDM_Filter_setConfig+0x92>
 800e0f8:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800e0fc:	3040      	adds	r0, #64	; 0x40
 800e0fe:	80ab      	strh	r3, [r5, #4]
 800e100:	8622      	strh	r2, [r4, #48]	; 0x30
 800e102:	886b      	ldrh	r3, [r5, #2]
 800e104:	8663      	strh	r3, [r4, #50]	; 0x32
 800e106:	b920      	cbnz	r0, 800e112 <PDM_Filter_setConfig+0x56>
 800e108:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e10a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e10e:	6423      	str	r3, [r4, #64]	; 0x40
 800e110:	2000      	movs	r0, #0
 800e112:	b003      	add	sp, #12
 800e114:	ecbd 8b04 	vpop	{d8-d9}
 800e118:	bd30      	pop	{r4, r5, pc}
 800e11a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e11c:	4291      	cmp	r1, r2
 800e11e:	d06c      	beq.n	800e1fa <PDM_Filter_setConfig+0x13e>
 800e120:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 800e124:	f023 0301 	bic.w	r3, r3, #1
 800e128:	4313      	orrs	r3, r2
 800e12a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800e12e:	6423      	str	r3, [r4, #64]	; 0x40
 800e130:	2970      	cmp	r1, #112	; 0x70
 800e132:	f003 030f 	and.w	r3, r3, #15
 800e136:	f103 33ff 	add.w	r3, r3, #4294967295
 800e13a:	d066      	beq.n	800e20a <PDM_Filter_setConfig+0x14e>
 800e13c:	2b06      	cmp	r3, #6
 800e13e:	f200 8089 	bhi.w	800e254 <PDM_Filter_setConfig+0x198>
 800e142:	e8df f003 	tbb	[pc, r3]
 800e146:	4f52      	.short	0x4f52
 800e148:	3d43494c 	.word	0x3d43494c
 800e14c:	46          	.byte	0x46
 800e14d:	00          	.byte	0x00
 800e14e:	2b33      	cmp	r3, #51	; 0x33
 800e150:	dc32      	bgt.n	800e1b8 <PDM_Filter_setConfig+0xfc>
 800e152:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e154:	f002 020f 	and.w	r2, r2, #15
 800e158:	3a01      	subs	r2, #1
 800e15a:	2a06      	cmp	r2, #6
 800e15c:	d872      	bhi.n	800e244 <PDM_Filter_setConfig+0x188>
 800e15e:	493f      	ldr	r1, [pc, #252]	; (800e25c <PDM_Filter_setConfig+0x1a0>)
 800e160:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800e164:	ed92 9a00 	vldr	s18, [r2]
 800e168:	ed92 8a07 	vldr	s16, [r2, #28]
 800e16c:	9001      	str	r0, [sp, #4]
 800e16e:	ee07 3a90 	vmov	s15, r3
 800e172:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e176:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800e17a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 800e17e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 800e182:	f009 f807 	bl	8017194 <powf>
 800e186:	eddf 0a36 	vldr	s1, [pc, #216]	; 800e260 <PDM_Filter_setConfig+0x1a4>
 800e18a:	eef0 8a40 	vmov.f32	s17, s0
 800e18e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 800e192:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800e196:	f008 fffd 	bl	8017194 <powf>
 800e19a:	ee28 8a28 	vmul.f32	s16, s16, s17
 800e19e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e1a2:	f008 fe71 	bl	8016e88 <roundf>
 800e1a6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800e1aa:	88ab      	ldrh	r3, [r5, #4]
 800e1ac:	882a      	ldrh	r2, [r5, #0]
 800e1ae:	9801      	ldr	r0, [sp, #4]
 800e1b0:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
 800e1b4:	8723      	strh	r3, [r4, #56]	; 0x38
 800e1b6:	e7a3      	b.n	800e100 <PDM_Filter_setConfig+0x44>
 800e1b8:	2333      	movs	r3, #51	; 0x33
 800e1ba:	3040      	adds	r0, #64	; 0x40
 800e1bc:	80ab      	strh	r3, [r5, #4]
 800e1be:	e79f      	b.n	800e100 <PDM_Filter_setConfig+0x44>
 800e1c0:	4b28      	ldr	r3, [pc, #160]	; (800e264 <PDM_Filter_setConfig+0x1a8>)
 800e1c2:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1c4:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e1c8:	2000      	movs	r0, #0
 800e1ca:	e792      	b.n	800e0f2 <PDM_Filter_setConfig+0x36>
 800e1cc:	4b26      	ldr	r3, [pc, #152]	; (800e268 <PDM_Filter_setConfig+0x1ac>)
 800e1ce:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1d0:	e7f8      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e1d2:	4b26      	ldr	r3, [pc, #152]	; (800e26c <PDM_Filter_setConfig+0x1b0>)
 800e1d4:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1d6:	e7f5      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e1d8:	4b25      	ldr	r3, [pc, #148]	; (800e270 <PDM_Filter_setConfig+0x1b4>)
 800e1da:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1dc:	e7f2      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e1de:	4b25      	ldr	r3, [pc, #148]	; (800e274 <PDM_Filter_setConfig+0x1b8>)
 800e1e0:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1e2:	e7ef      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e1e4:	4b24      	ldr	r3, [pc, #144]	; (800e278 <PDM_Filter_setConfig+0x1bc>)
 800e1e6:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1e8:	e7ec      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e1ea:	4b24      	ldr	r3, [pc, #144]	; (800e27c <PDM_Filter_setConfig+0x1c0>)
 800e1ec:	64a3      	str	r3, [r4, #72]	; 0x48
 800e1ee:	e7e9      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e1f0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
 800e1f2:	4291      	cmp	r1, r2
 800e1f4:	f47f af7d 	bne.w	800e0f2 <PDM_Filter_setConfig+0x36>
 800e1f8:	e783      	b.n	800e102 <PDM_Filter_setConfig+0x46>
 800e1fa:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800e1fe:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	; 0x38
 800e202:	4299      	cmp	r1, r3
 800e204:	d023      	beq.n	800e24e <PDM_Filter_setConfig+0x192>
 800e206:	2000      	movs	r0, #0
 800e208:	e773      	b.n	800e0f2 <PDM_Filter_setConfig+0x36>
 800e20a:	2b06      	cmp	r3, #6
 800e20c:	d822      	bhi.n	800e254 <PDM_Filter_setConfig+0x198>
 800e20e:	e8df f003 	tbb	[pc, r3]
 800e212:	1316      	.short	0x1316
 800e214:	070a0d10 	.word	0x070a0d10
 800e218:	04          	.byte	0x04
 800e219:	00          	.byte	0x00
 800e21a:	4b19      	ldr	r3, [pc, #100]	; (800e280 <PDM_Filter_setConfig+0x1c4>)
 800e21c:	64a3      	str	r3, [r4, #72]	; 0x48
 800e21e:	e7d1      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e220:	4b18      	ldr	r3, [pc, #96]	; (800e284 <PDM_Filter_setConfig+0x1c8>)
 800e222:	64a3      	str	r3, [r4, #72]	; 0x48
 800e224:	e7ce      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e226:	4b18      	ldr	r3, [pc, #96]	; (800e288 <PDM_Filter_setConfig+0x1cc>)
 800e228:	64a3      	str	r3, [r4, #72]	; 0x48
 800e22a:	e7cb      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e22c:	4b17      	ldr	r3, [pc, #92]	; (800e28c <PDM_Filter_setConfig+0x1d0>)
 800e22e:	64a3      	str	r3, [r4, #72]	; 0x48
 800e230:	e7c8      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e232:	4b17      	ldr	r3, [pc, #92]	; (800e290 <PDM_Filter_setConfig+0x1d4>)
 800e234:	64a3      	str	r3, [r4, #72]	; 0x48
 800e236:	e7c5      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e238:	4b16      	ldr	r3, [pc, #88]	; (800e294 <PDM_Filter_setConfig+0x1d8>)
 800e23a:	64a3      	str	r3, [r4, #72]	; 0x48
 800e23c:	e7c2      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e23e:	4b16      	ldr	r3, [pc, #88]	; (800e298 <PDM_Filter_setConfig+0x1dc>)
 800e240:	64a3      	str	r3, [r4, #72]	; 0x48
 800e242:	e7bf      	b.n	800e1c4 <PDM_Filter_setConfig+0x108>
 800e244:	ed9f 8a15 	vldr	s16, [pc, #84]	; 800e29c <PDM_Filter_setConfig+0x1e0>
 800e248:	eeb0 9a48 	vmov.f32	s18, s16
 800e24c:	e78e      	b.n	800e16c <PDM_Filter_setConfig+0xb0>
 800e24e:	886b      	ldrh	r3, [r5, #2]
 800e250:	8663      	strh	r3, [r4, #50]	; 0x32
 800e252:	e759      	b.n	800e108 <PDM_Filter_setConfig+0x4c>
 800e254:	2000      	movs	r0, #0
 800e256:	e746      	b.n	800e0e6 <PDM_Filter_setConfig+0x2a>
 800e258:	b5e8b5cd 	.word	0xb5e8b5cd
 800e25c:	0801a00c 	.word	0x0801a00c
 800e260:	42000000 	.word	0x42000000
 800e264:	0800c629 	.word	0x0800c629
 800e268:	0800c509 	.word	0x0800c509
 800e26c:	0800c7b9 	.word	0x0800c7b9
 800e270:	0800cffd 	.word	0x0800cffd
 800e274:	0800cd5d 	.word	0x0800cd5d
 800e278:	0800cb3d 	.word	0x0800cb3d
 800e27c:	0800c951 	.word	0x0800c951
 800e280:	0800d609 	.word	0x0800d609
 800e284:	0800d4d1 	.word	0x0800d4d1
 800e288:	0800d3ed 	.word	0x0800d3ed
 800e28c:	0800dc85 	.word	0x0800dc85
 800e290:	0800da71 	.word	0x0800da71
 800e294:	0800d8b9 	.word	0x0800d8b9
 800e298:	0800d74d 	.word	0x0800d74d
 800e29c:	00000000 	.word	0x00000000

0800e2a0 <PDM_Filter>:
 800e2a0:	b410      	push	{r4}
 800e2a2:	4b0c      	ldr	r3, [pc, #48]	; (800e2d4 <PDM_Filter+0x34>)
 800e2a4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 800e2a6:	429c      	cmp	r4, r3
 800e2a8:	d003      	beq.n	800e2b2 <PDM_Filter+0x12>
 800e2aa:	2004      	movs	r0, #4
 800e2ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2b0:	4770      	bx	lr
 800e2b2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e2b4:	05dc      	lsls	r4, r3, #23
 800e2b6:	d407      	bmi.n	800e2c8 <PDM_Filter+0x28>
 800e2b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e2bc:	bf14      	ite	ne
 800e2be:	2020      	movne	r0, #32
 800e2c0:	2030      	moveq	r0, #48	; 0x30
 800e2c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2c6:	4770      	bx	lr
 800e2c8:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800e2ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2ce:	320c      	adds	r2, #12
 800e2d0:	4718      	bx	r3
 800e2d2:	bf00      	nop
 800e2d4:	b5e8b5cd 	.word	0xb5e8b5cd

0800e2d8 <CRC_Lock>:
 800e2d8:	4a17      	ldr	r2, [pc, #92]	; (800e338 <CRC_Lock+0x60>)
 800e2da:	6813      	ldr	r3, [r2, #0]
 800e2dc:	b410      	push	{r4}
 800e2de:	f023 0301 	bic.w	r3, r3, #1
 800e2e2:	4c16      	ldr	r4, [pc, #88]	; (800e33c <CRC_Lock+0x64>)
 800e2e4:	6013      	str	r3, [r2, #0]
 800e2e6:	6823      	ldr	r3, [r4, #0]
 800e2e8:	b933      	cbnz	r3, 800e2f8 <CRC_Lock+0x20>
 800e2ea:	4b15      	ldr	r3, [pc, #84]	; (800e340 <CRC_Lock+0x68>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e2f2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800e2f6:	d00f      	beq.n	800e318 <CRC_Lock+0x40>
 800e2f8:	4a12      	ldr	r2, [pc, #72]	; (800e344 <CRC_Lock+0x6c>)
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	6013      	str	r3, [r2, #0]
 800e2fe:	6813      	ldr	r3, [r2, #0]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d1fc      	bne.n	800e2fe <CRC_Lock+0x26>
 800e304:	4b10      	ldr	r3, [pc, #64]	; (800e348 <CRC_Lock+0x70>)
 800e306:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e30a:	6018      	str	r0, [r3, #0]
 800e30c:	6818      	ldr	r0, [r3, #0]
 800e30e:	1a08      	subs	r0, r1, r0
 800e310:	fab0 f080 	clz	r0, r0
 800e314:	0940      	lsrs	r0, r0, #5
 800e316:	4770      	bx	lr
 800e318:	4a0c      	ldr	r2, [pc, #48]	; (800e34c <CRC_Lock+0x74>)
 800e31a:	2301      	movs	r3, #1
 800e31c:	6013      	str	r3, [r2, #0]
 800e31e:	6813      	ldr	r3, [r2, #0]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d1fc      	bne.n	800e31e <CRC_Lock+0x46>
 800e324:	4b0a      	ldr	r3, [pc, #40]	; (800e350 <CRC_Lock+0x78>)
 800e326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e32a:	6018      	str	r0, [r3, #0]
 800e32c:	6818      	ldr	r0, [r3, #0]
 800e32e:	1a40      	subs	r0, r0, r1
 800e330:	fab0 f080 	clz	r0, r0
 800e334:	0940      	lsrs	r0, r0, #5
 800e336:	4770      	bx	lr
 800e338:	e0002000 	.word	0xe0002000
 800e33c:	e0042000 	.word	0xe0042000
 800e340:	5c001000 	.word	0x5c001000
 800e344:	40023008 	.word	0x40023008
 800e348:	40023000 	.word	0x40023000
 800e34c:	58024c08 	.word	0x58024c08
 800e350:	58024c00 	.word	0x58024c00

0800e354 <_ai_platform_acquire_crc>:
 800e354:	2001      	movs	r0, #1
 800e356:	4770      	bx	lr

0800e358 <_ai_platform_release_crc>:
 800e358:	4770      	bx	lr
 800e35a:	bf00      	nop

0800e35c <ai_platform_get_weights_map>:
 800e35c:	b132      	cbz	r2, 800e36c <ai_platform_get_weights_map+0x10>
 800e35e:	6912      	ldr	r2, [r2, #16]
 800e360:	b122      	cbz	r2, 800e36c <ai_platform_get_weights_map+0x10>
 800e362:	b110      	cbz	r0, 800e36a <ai_platform_get_weights_map+0xe>
 800e364:	b921      	cbnz	r1, 800e370 <ai_platform_get_weights_map+0x14>
 800e366:	4608      	mov	r0, r1
 800e368:	4770      	bx	lr
 800e36a:	4770      	bx	lr
 800e36c:	4610      	mov	r0, r2
 800e36e:	4770      	bx	lr
 800e370:	b470      	push	{r4, r5, r6}
 800e372:	4b13      	ldr	r3, [pc, #76]	; (800e3c0 <ai_platform_get_weights_map+0x64>)
 800e374:	6815      	ldr	r5, [r2, #0]
 800e376:	429d      	cmp	r5, r3
 800e378:	d007      	beq.n	800e38a <ai_platform_get_weights_map+0x2e>
 800e37a:	6002      	str	r2, [r0, #0]
 800e37c:	f1a1 0001 	sub.w	r0, r1, #1
 800e380:	fab0 f080 	clz	r0, r0
 800e384:	0940      	lsrs	r0, r0, #5
 800e386:	bc70      	pop	{r4, r5, r6}
 800e388:	4770      	bx	lr
 800e38a:	6854      	ldr	r4, [r2, #4]
 800e38c:	42ac      	cmp	r4, r5
 800e38e:	f102 0204 	add.w	r2, r2, #4
 800e392:	d011      	beq.n	800e3b8 <ai_platform_get_weights_map+0x5c>
 800e394:	1f03      	subs	r3, r0, #4
 800e396:	4616      	mov	r6, r2
 800e398:	2000      	movs	r0, #0
 800e39a:	e003      	b.n	800e3a4 <ai_platform_get_weights_map+0x48>
 800e39c:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800e3a0:	42ac      	cmp	r4, r5
 800e3a2:	d009      	beq.n	800e3b8 <ai_platform_get_weights_map+0x5c>
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	4281      	cmp	r1, r0
 800e3a8:	f843 4f04 	str.w	r4, [r3, #4]!
 800e3ac:	d1f6      	bne.n	800e39c <ai_platform_get_weights_map+0x40>
 800e3ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e3b2:	4b03      	ldr	r3, [pc, #12]	; (800e3c0 <ai_platform_get_weights_map+0x64>)
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d001      	beq.n	800e3bc <ai_platform_get_weights_map+0x60>
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	e7e4      	b.n	800e386 <ai_platform_get_weights_map+0x2a>
 800e3bc:	2001      	movs	r0, #1
 800e3be:	e7e2      	b.n	800e386 <ai_platform_get_weights_map+0x2a>
 800e3c0:	a1facade 	.word	0xa1facade

0800e3c4 <ai_platform_get_activations_map>:
 800e3c4:	b132      	cbz	r2, 800e3d4 <ai_platform_get_activations_map+0x10>
 800e3c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800e3c8:	b122      	cbz	r2, 800e3d4 <ai_platform_get_activations_map+0x10>
 800e3ca:	b110      	cbz	r0, 800e3d2 <ai_platform_get_activations_map+0xe>
 800e3cc:	b921      	cbnz	r1, 800e3d8 <ai_platform_get_activations_map+0x14>
 800e3ce:	4608      	mov	r0, r1
 800e3d0:	4770      	bx	lr
 800e3d2:	4770      	bx	lr
 800e3d4:	4610      	mov	r0, r2
 800e3d6:	4770      	bx	lr
 800e3d8:	b470      	push	{r4, r5, r6}
 800e3da:	4b13      	ldr	r3, [pc, #76]	; (800e428 <ai_platform_get_activations_map+0x64>)
 800e3dc:	6815      	ldr	r5, [r2, #0]
 800e3de:	429d      	cmp	r5, r3
 800e3e0:	d007      	beq.n	800e3f2 <ai_platform_get_activations_map+0x2e>
 800e3e2:	6002      	str	r2, [r0, #0]
 800e3e4:	f1a1 0001 	sub.w	r0, r1, #1
 800e3e8:	fab0 f080 	clz	r0, r0
 800e3ec:	0940      	lsrs	r0, r0, #5
 800e3ee:	bc70      	pop	{r4, r5, r6}
 800e3f0:	4770      	bx	lr
 800e3f2:	6854      	ldr	r4, [r2, #4]
 800e3f4:	42ac      	cmp	r4, r5
 800e3f6:	f102 0204 	add.w	r2, r2, #4
 800e3fa:	d011      	beq.n	800e420 <ai_platform_get_activations_map+0x5c>
 800e3fc:	1f03      	subs	r3, r0, #4
 800e3fe:	4616      	mov	r6, r2
 800e400:	2000      	movs	r0, #0
 800e402:	e003      	b.n	800e40c <ai_platform_get_activations_map+0x48>
 800e404:	f856 4f04 	ldr.w	r4, [r6, #4]!
 800e408:	42ac      	cmp	r4, r5
 800e40a:	d009      	beq.n	800e420 <ai_platform_get_activations_map+0x5c>
 800e40c:	3001      	adds	r0, #1
 800e40e:	4281      	cmp	r1, r0
 800e410:	f843 4f04 	str.w	r4, [r3, #4]!
 800e414:	d1f6      	bne.n	800e404 <ai_platform_get_activations_map+0x40>
 800e416:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e41a:	4b03      	ldr	r3, [pc, #12]	; (800e428 <ai_platform_get_activations_map+0x64>)
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d001      	beq.n	800e424 <ai_platform_get_activations_map+0x60>
 800e420:	2000      	movs	r0, #0
 800e422:	e7e4      	b.n	800e3ee <ai_platform_get_activations_map+0x2a>
 800e424:	2001      	movs	r0, #1
 800e426:	e7e2      	b.n	800e3ee <ai_platform_get_activations_map+0x2a>
 800e428:	a1facade 	.word	0xa1facade

0800e42c <ai_platform_network_create>:
 800e42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e430:	b082      	sub	sp, #8
 800e432:	4607      	mov	r7, r0
 800e434:	4616      	mov	r6, r2
 800e436:	461d      	mov	r5, r3
 800e438:	f89d 4020 	ldrb.w	r4, [sp, #32]
 800e43c:	f89d 8024 	ldrb.w	r8, [sp, #36]	; 0x24
 800e440:	f7ff ff88 	bl	800e354 <_ai_platform_acquire_crc>
 800e444:	b178      	cbz	r0, 800e466 <ai_platform_network_create+0x3a>
 800e446:	4b5a      	ldr	r3, [pc, #360]	; (800e5b0 <ai_platform_network_create+0x184>)
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e44e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e452:	4602      	mov	r2, r0
 800e454:	d00c      	beq.n	800e470 <ai_platform_network_create+0x44>
 800e456:	4b57      	ldr	r3, [pc, #348]	; (800e5b4 <ai_platform_network_create+0x188>)
 800e458:	2118      	movs	r1, #24
 800e45a:	6019      	str	r1, [r3, #0]
 800e45c:	6819      	ldr	r1, [r3, #0]
 800e45e:	2918      	cmp	r1, #24
 800e460:	d034      	beq.n	800e4cc <ai_platform_network_create+0xa0>
 800e462:	f7ff ff79 	bl	800e358 <_ai_platform_release_crc>
 800e466:	f241 0033 	movw	r0, #4147	; 0x1033
 800e46a:	b002      	add	sp, #8
 800e46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e470:	4b51      	ldr	r3, [pc, #324]	; (800e5b8 <ai_platform_network_create+0x18c>)
 800e472:	2101      	movs	r1, #1
 800e474:	6019      	str	r1, [r3, #0]
 800e476:	2114      	movs	r1, #20
 800e478:	e001      	b.n	800e47e <ai_platform_network_create+0x52>
 800e47a:	3901      	subs	r1, #1
 800e47c:	d002      	beq.n	800e484 <ai_platform_network_create+0x58>
 800e47e:	6818      	ldr	r0, [r3, #0]
 800e480:	2800      	cmp	r0, #0
 800e482:	d1fa      	bne.n	800e47a <ai_platform_network_create+0x4e>
 800e484:	4b4c      	ldr	r3, [pc, #304]	; (800e5b8 <ai_platform_network_create+0x18c>)
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	b9f3      	cbnz	r3, 800e4c8 <ai_platform_network_create+0x9c>
 800e48a:	4610      	mov	r0, r2
 800e48c:	f7ff ff64 	bl	800e358 <_ai_platform_release_crc>
 800e490:	4a4a      	ldr	r2, [pc, #296]	; (800e5bc <ai_platform_network_create+0x190>)
 800e492:	6813      	ldr	r3, [r2, #0]
 800e494:	f023 0301 	bic.w	r3, r3, #1
 800e498:	6013      	str	r3, [r2, #0]
 800e49a:	f7ff ff5b 	bl	800e354 <_ai_platform_acquire_crc>
 800e49e:	4b44      	ldr	r3, [pc, #272]	; (800e5b0 <ai_platform_network_create+0x184>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e4a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e4aa:	d015      	beq.n	800e4d8 <ai_platform_network_create+0xac>
 800e4ac:	4b41      	ldr	r3, [pc, #260]	; (800e5b4 <ai_platform_network_create+0x188>)
 800e4ae:	2201      	movs	r2, #1
 800e4b0:	601a      	str	r2, [r3, #0]
 800e4b2:	681a      	ldr	r2, [r3, #0]
 800e4b4:	2a00      	cmp	r2, #0
 800e4b6:	d1fc      	bne.n	800e4b2 <ai_platform_network_create+0x86>
 800e4b8:	4b41      	ldr	r3, [pc, #260]	; (800e5c0 <ai_platform_network_create+0x194>)
 800e4ba:	4a42      	ldr	r2, [pc, #264]	; (800e5c4 <ai_platform_network_create+0x198>)
 800e4bc:	601a      	str	r2, [r3, #0]
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	4b41      	ldr	r3, [pc, #260]	; (800e5c8 <ai_platform_network_create+0x19c>)
 800e4c2:	429a      	cmp	r2, r3
 800e4c4:	d016      	beq.n	800e4f4 <ai_platform_network_create+0xc8>
 800e4c6:	e7fe      	b.n	800e4c6 <ai_platform_network_create+0x9a>
 800e4c8:	4610      	mov	r0, r2
 800e4ca:	e7ca      	b.n	800e462 <ai_platform_network_create+0x36>
 800e4cc:	2101      	movs	r1, #1
 800e4ce:	6019      	str	r1, [r3, #0]
 800e4d0:	6819      	ldr	r1, [r3, #0]
 800e4d2:	2900      	cmp	r1, #0
 800e4d4:	d1fc      	bne.n	800e4d0 <ai_platform_network_create+0xa4>
 800e4d6:	e7d8      	b.n	800e48a <ai_platform_network_create+0x5e>
 800e4d8:	4b37      	ldr	r3, [pc, #220]	; (800e5b8 <ai_platform_network_create+0x18c>)
 800e4da:	2201      	movs	r2, #1
 800e4dc:	601a      	str	r2, [r3, #0]
 800e4de:	681a      	ldr	r2, [r3, #0]
 800e4e0:	2a00      	cmp	r2, #0
 800e4e2:	d1fc      	bne.n	800e4de <ai_platform_network_create+0xb2>
 800e4e4:	4b39      	ldr	r3, [pc, #228]	; (800e5cc <ai_platform_network_create+0x1a0>)
 800e4e6:	4a37      	ldr	r2, [pc, #220]	; (800e5c4 <ai_platform_network_create+0x198>)
 800e4e8:	601a      	str	r2, [r3, #0]
 800e4ea:	681a      	ldr	r2, [r3, #0]
 800e4ec:	4b36      	ldr	r3, [pc, #216]	; (800e5c8 <ai_platform_network_create+0x19c>)
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d000      	beq.n	800e4f4 <ai_platform_network_create+0xc8>
 800e4f2:	e7fe      	b.n	800e4f2 <ai_platform_network_create+0xc6>
 800e4f4:	f7ff ff30 	bl	800e358 <_ai_platform_release_crc>
 800e4f8:	b1af      	cbz	r7, 800e526 <ai_platform_network_create+0xfa>
 800e4fa:	4b35      	ldr	r3, [pc, #212]	; (800e5d0 <ai_platform_network_create+0x1a4>)
 800e4fc:	6033      	str	r3, [r6, #0]
 800e4fe:	603e      	str	r6, [r7, #0]
 800e500:	f000 fc8e 	bl	800ee20 <core_init>
 800e504:	b990      	cbnz	r0, 800e52c <ai_platform_network_create+0x100>
 800e506:	062d      	lsls	r5, r5, #24
 800e508:	0424      	lsls	r4, r4, #16
 800e50a:	2230      	movs	r2, #48	; 0x30
 800e50c:	2300      	movs	r3, #0
 800e50e:	603b      	str	r3, [r7, #0]
 800e510:	2110      	movs	r1, #16
 800e512:	ea44 2308 	orr.w	r3, r4, r8, lsl #8
 800e516:	2000      	movs	r0, #0
 800e518:	432b      	orrs	r3, r5
 800e51a:	f362 0007 	bfi	r0, r2, #0, #8
 800e51e:	6473      	str	r3, [r6, #68]	; 0x44
 800e520:	f361 201f 	bfi	r0, r1, #8, #24
 800e524:	e7a1      	b.n	800e46a <ai_platform_network_create+0x3e>
 800e526:	f241 0010 	movw	r0, #4112	; 0x1010
 800e52a:	e79e      	b.n	800e46a <ai_platform_network_create+0x3e>
 800e52c:	4a23      	ldr	r2, [pc, #140]	; (800e5bc <ai_platform_network_create+0x190>)
 800e52e:	6813      	ldr	r3, [r2, #0]
 800e530:	f023 0301 	bic.w	r3, r3, #1
 800e534:	6013      	str	r3, [r2, #0]
 800e536:	f7ff ff0d 	bl	800e354 <_ai_platform_acquire_crc>
 800e53a:	4b1d      	ldr	r3, [pc, #116]	; (800e5b0 <ai_platform_network_create+0x184>)
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e546:	d00d      	beq.n	800e564 <ai_platform_network_create+0x138>
 800e548:	4b1a      	ldr	r3, [pc, #104]	; (800e5b4 <ai_platform_network_create+0x188>)
 800e54a:	2201      	movs	r2, #1
 800e54c:	601a      	str	r2, [r3, #0]
 800e54e:	681a      	ldr	r2, [r3, #0]
 800e550:	2a00      	cmp	r2, #0
 800e552:	d1fc      	bne.n	800e54e <ai_platform_network_create+0x122>
 800e554:	4b1a      	ldr	r3, [pc, #104]	; (800e5c0 <ai_platform_network_create+0x194>)
 800e556:	4a1b      	ldr	r2, [pc, #108]	; (800e5c4 <ai_platform_network_create+0x198>)
 800e558:	601a      	str	r2, [r3, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	4b1a      	ldr	r3, [pc, #104]	; (800e5c8 <ai_platform_network_create+0x19c>)
 800e55e:	429a      	cmp	r2, r3
 800e560:	d00e      	beq.n	800e580 <ai_platform_network_create+0x154>
 800e562:	e7fe      	b.n	800e562 <ai_platform_network_create+0x136>
 800e564:	4b14      	ldr	r3, [pc, #80]	; (800e5b8 <ai_platform_network_create+0x18c>)
 800e566:	2201      	movs	r2, #1
 800e568:	601a      	str	r2, [r3, #0]
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	2a00      	cmp	r2, #0
 800e56e:	d1fc      	bne.n	800e56a <ai_platform_network_create+0x13e>
 800e570:	4b16      	ldr	r3, [pc, #88]	; (800e5cc <ai_platform_network_create+0x1a0>)
 800e572:	4a14      	ldr	r2, [pc, #80]	; (800e5c4 <ai_platform_network_create+0x198>)
 800e574:	601a      	str	r2, [r3, #0]
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	4b13      	ldr	r3, [pc, #76]	; (800e5c8 <ai_platform_network_create+0x19c>)
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d000      	beq.n	800e580 <ai_platform_network_create+0x154>
 800e57e:	e7fe      	b.n	800e57e <ai_platform_network_create+0x152>
 800e580:	062d      	lsls	r5, r5, #24
 800e582:	0424      	lsls	r4, r4, #16
 800e584:	f7ff fee8 	bl	800e358 <_ai_platform_release_crc>
 800e588:	ea45 0304 	orr.w	r3, r5, r4
 800e58c:	f1b3 7f82 	cmp.w	r3, #17039360	; 0x1040000
 800e590:	d001      	beq.n	800e596 <ai_platform_network_create+0x16a>
 800e592:	2201      	movs	r2, #1
 800e594:	e7ba      	b.n	800e50c <ai_platform_network_create+0xe0>
 800e596:	a802      	add	r0, sp, #8
 800e598:	4b0e      	ldr	r3, [pc, #56]	; (800e5d4 <ai_platform_network_create+0x1a8>)
 800e59a:	f840 3d04 	str.w	r3, [r0, #-4]!
 800e59e:	f003 fcb3 	bl	8011f08 <ai_check_custom_types>
 800e5a2:	b110      	cbz	r0, 800e5aa <ai_platform_network_create+0x17e>
 800e5a4:	2100      	movs	r1, #0
 800e5a6:	460a      	mov	r2, r1
 800e5a8:	e7b3      	b.n	800e512 <ai_platform_network_create+0xe6>
 800e5aa:	2202      	movs	r2, #2
 800e5ac:	e7ae      	b.n	800e50c <ai_platform_network_create+0xe0>
 800e5ae:	bf00      	nop
 800e5b0:	e0042000 	.word	0xe0042000
 800e5b4:	58024c08 	.word	0x58024c08
 800e5b8:	40023008 	.word	0x40023008
 800e5bc:	e0002000 	.word	0xe0002000
 800e5c0:	58024c00 	.word	0x58024c00
 800e5c4:	f407a5c2 	.word	0xf407a5c2
 800e5c8:	b5e8b5cd 	.word	0xb5e8b5cd
 800e5cc:	40023000 	.word	0x40023000
 800e5d0:	a1c00100 	.word	0xa1c00100
 800e5d4:	84048403 	.word	0x84048403

0800e5d8 <ai_platform_network_init>:
 800e5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	d04d      	beq.n	800e67c <ai_platform_network_init+0xa4>
 800e5e0:	4b7c      	ldr	r3, [pc, #496]	; (800e7d4 <ai_platform_network_init+0x1fc>)
 800e5e2:	6802      	ldr	r2, [r0, #0]
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	d148      	bne.n	800e67c <ai_platform_network_init+0xa4>
 800e5ea:	4a7b      	ldr	r2, [pc, #492]	; (800e7d8 <ai_platform_network_init+0x200>)
 800e5ec:	6813      	ldr	r3, [r2, #0]
 800e5ee:	f023 0301 	bic.w	r3, r3, #1
 800e5f2:	6013      	str	r3, [r2, #0]
 800e5f4:	460d      	mov	r5, r1
 800e5f6:	f7ff fead 	bl	800e354 <_ai_platform_acquire_crc>
 800e5fa:	4b78      	ldr	r3, [pc, #480]	; (800e7dc <ai_platform_network_init+0x204>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e606:	d00d      	beq.n	800e624 <ai_platform_network_init+0x4c>
 800e608:	4b75      	ldr	r3, [pc, #468]	; (800e7e0 <ai_platform_network_init+0x208>)
 800e60a:	2201      	movs	r2, #1
 800e60c:	601a      	str	r2, [r3, #0]
 800e60e:	681a      	ldr	r2, [r3, #0]
 800e610:	2a00      	cmp	r2, #0
 800e612:	d1fc      	bne.n	800e60e <ai_platform_network_init+0x36>
 800e614:	4b73      	ldr	r3, [pc, #460]	; (800e7e4 <ai_platform_network_init+0x20c>)
 800e616:	4a74      	ldr	r2, [pc, #464]	; (800e7e8 <ai_platform_network_init+0x210>)
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	681a      	ldr	r2, [r3, #0]
 800e61c:	4b73      	ldr	r3, [pc, #460]	; (800e7ec <ai_platform_network_init+0x214>)
 800e61e:	429a      	cmp	r2, r3
 800e620:	d00d      	beq.n	800e63e <ai_platform_network_init+0x66>
 800e622:	e7fe      	b.n	800e622 <ai_platform_network_init+0x4a>
 800e624:	4b72      	ldr	r3, [pc, #456]	; (800e7f0 <ai_platform_network_init+0x218>)
 800e626:	2201      	movs	r2, #1
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	681a      	ldr	r2, [r3, #0]
 800e62c:	2a00      	cmp	r2, #0
 800e62e:	d1fc      	bne.n	800e62a <ai_platform_network_init+0x52>
 800e630:	4b70      	ldr	r3, [pc, #448]	; (800e7f4 <ai_platform_network_init+0x21c>)
 800e632:	4a6d      	ldr	r2, [pc, #436]	; (800e7e8 <ai_platform_network_init+0x210>)
 800e634:	601a      	str	r2, [r3, #0]
 800e636:	681a      	ldr	r2, [r3, #0]
 800e638:	4b6c      	ldr	r3, [pc, #432]	; (800e7ec <ai_platform_network_init+0x214>)
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d11d      	bne.n	800e67a <ai_platform_network_init+0xa2>
 800e63e:	f7ff fe8b 	bl	800e358 <_ai_platform_release_crc>
 800e642:	2d00      	cmp	r5, #0
 800e644:	d076      	beq.n	800e734 <ai_platform_network_init+0x15c>
 800e646:	4b6c      	ldr	r3, [pc, #432]	; (800e7f8 <ai_platform_network_init+0x220>)
 800e648:	682a      	ldr	r2, [r5, #0]
 800e64a:	f8d5 c010 	ldr.w	ip, [r5, #16]
 800e64e:	429a      	cmp	r2, r3
 800e650:	d030      	beq.n	800e6b4 <ai_platform_network_init+0xdc>
 800e652:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800e654:	46a9      	mov	r9, r5
 800e656:	f105 0118 	add.w	r1, r5, #24
 800e65a:	2e00      	cmp	r6, #0
 800e65c:	f000 8095 	beq.w	800e78a <ai_platform_network_init+0x1b2>
 800e660:	f1bc 0f00 	cmp.w	ip, #0
 800e664:	f000 80a4 	beq.w	800e7b0 <ai_platform_network_init+0x1d8>
 800e668:	f8b4 801e 	ldrh.w	r8, [r4, #30]
 800e66c:	f1b8 0f01 	cmp.w	r8, #1
 800e670:	d16a      	bne.n	800e748 <ai_platform_network_init+0x170>
 800e672:	2700      	movs	r7, #0
 800e674:	468c      	mov	ip, r1
 800e676:	83a7      	strh	r7, [r4, #28]
 800e678:	e028      	b.n	800e6cc <ai_platform_network_init+0xf4>
 800e67a:	e7fe      	b.n	800e67a <ai_platform_network_init+0xa2>
 800e67c:	4a56      	ldr	r2, [pc, #344]	; (800e7d8 <ai_platform_network_init+0x200>)
 800e67e:	6813      	ldr	r3, [r2, #0]
 800e680:	f023 0301 	bic.w	r3, r3, #1
 800e684:	6013      	str	r3, [r2, #0]
 800e686:	f7ff fe65 	bl	800e354 <_ai_platform_acquire_crc>
 800e68a:	4b54      	ldr	r3, [pc, #336]	; (800e7dc <ai_platform_network_init+0x204>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e696:	d067      	beq.n	800e768 <ai_platform_network_init+0x190>
 800e698:	4b51      	ldr	r3, [pc, #324]	; (800e7e0 <ai_platform_network_init+0x208>)
 800e69a:	2201      	movs	r2, #1
 800e69c:	601a      	str	r2, [r3, #0]
 800e69e:	681a      	ldr	r2, [r3, #0]
 800e6a0:	2a00      	cmp	r2, #0
 800e6a2:	d1fc      	bne.n	800e69e <ai_platform_network_init+0xc6>
 800e6a4:	4b4f      	ldr	r3, [pc, #316]	; (800e7e4 <ai_platform_network_init+0x20c>)
 800e6a6:	4a50      	ldr	r2, [pc, #320]	; (800e7e8 <ai_platform_network_init+0x210>)
 800e6a8:	601a      	str	r2, [r3, #0]
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	4b4f      	ldr	r3, [pc, #316]	; (800e7ec <ai_platform_network_init+0x214>)
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d067      	beq.n	800e782 <ai_platform_network_init+0x1aa>
 800e6b2:	e7fe      	b.n	800e6b2 <ai_platform_network_init+0xda>
 800e6b4:	8be1      	ldrh	r1, [r4, #30]
 800e6b6:	88eb      	ldrh	r3, [r5, #6]
 800e6b8:	89af      	ldrh	r7, [r5, #12]
 800e6ba:	f8b5 800e 	ldrh.w	r8, [r5, #14]
 800e6be:	88aa      	ldrh	r2, [r5, #4]
 800e6c0:	f8d5 9008 	ldr.w	r9, [r5, #8]
 800e6c4:	428b      	cmp	r3, r1
 800e6c6:	d13f      	bne.n	800e748 <ai_platform_network_init+0x170>
 800e6c8:	83a2      	strh	r2, [r4, #28]
 800e6ca:	b19b      	cbz	r3, 800e6f4 <ai_platform_network_init+0x11c>
 800e6cc:	f04f 0e00 	mov.w	lr, #0
 800e6d0:	46f2      	mov	sl, lr
 800e6d2:	eb09 060e 	add.w	r6, r9, lr
 800e6d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e6d8:	6a25      	ldr	r5, [r4, #32]
 800e6da:	4475      	add	r5, lr
 800e6dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e6de:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e6e2:	e885 0003 	stmia.w	r5, {r0, r1}
 800e6e6:	8be3      	ldrh	r3, [r4, #30]
 800e6e8:	f10a 0a01 	add.w	sl, sl, #1
 800e6ec:	459a      	cmp	sl, r3
 800e6ee:	f10e 0e18 	add.w	lr, lr, #24
 800e6f2:	d3ee      	bcc.n	800e6d2 <ai_platform_network_init+0xfa>
 800e6f4:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800e6f6:	4598      	cmp	r8, r3
 800e6f8:	d12e      	bne.n	800e758 <ai_platform_network_init+0x180>
 800e6fa:	84a7      	strh	r7, [r4, #36]	; 0x24
 800e6fc:	f1b8 0f00 	cmp.w	r8, #0
 800e700:	d012      	beq.n	800e728 <ai_platform_network_init+0x150>
 800e702:	2700      	movs	r7, #0
 800e704:	46be      	mov	lr, r7
 800e706:	eb0c 0607 	add.w	r6, ip, r7
 800e70a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e70c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800e70e:	443d      	add	r5, r7
 800e710:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e712:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e716:	e885 0003 	stmia.w	r5, {r0, r1}
 800e71a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800e71c:	f10e 0e01 	add.w	lr, lr, #1
 800e720:	459e      	cmp	lr, r3
 800e722:	f107 0718 	add.w	r7, r7, #24
 800e726:	d3ee      	bcc.n	800e706 <ai_platform_network_init+0x12e>
 800e728:	2303      	movs	r3, #3
 800e72a:	60e3      	str	r3, [r4, #12]
 800e72c:	4620      	mov	r0, r4
 800e72e:	f003 fc15 	bl	8011f5c <ai_layers_init_all>
 800e732:	e006      	b.n	800e742 <ai_platform_network_init+0x16a>
 800e734:	f104 0010 	add.w	r0, r4, #16
 800e738:	2211      	movs	r2, #17
 800e73a:	2110      	movs	r1, #16
 800e73c:	462c      	mov	r4, r5
 800e73e:	f000 fb71 	bl	800ee24 <core_set_error>
 800e742:	4620      	mov	r0, r4
 800e744:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e748:	f104 0010 	add.w	r0, r4, #16
 800e74c:	2212      	movs	r2, #18
 800e74e:	2116      	movs	r1, #22
 800e750:	f000 fb68 	bl	800ee24 <core_set_error>
 800e754:	2400      	movs	r4, #0
 800e756:	e7f4      	b.n	800e742 <ai_platform_network_init+0x16a>
 800e758:	f104 0010 	add.w	r0, r4, #16
 800e75c:	2213      	movs	r2, #19
 800e75e:	2116      	movs	r1, #22
 800e760:	f000 fb60 	bl	800ee24 <core_set_error>
 800e764:	2400      	movs	r4, #0
 800e766:	e7ec      	b.n	800e742 <ai_platform_network_init+0x16a>
 800e768:	4b21      	ldr	r3, [pc, #132]	; (800e7f0 <ai_platform_network_init+0x218>)
 800e76a:	2201      	movs	r2, #1
 800e76c:	601a      	str	r2, [r3, #0]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	2a00      	cmp	r2, #0
 800e772:	d1fc      	bne.n	800e76e <ai_platform_network_init+0x196>
 800e774:	4b1f      	ldr	r3, [pc, #124]	; (800e7f4 <ai_platform_network_init+0x21c>)
 800e776:	4a1c      	ldr	r2, [pc, #112]	; (800e7e8 <ai_platform_network_init+0x210>)
 800e778:	601a      	str	r2, [r3, #0]
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	4b1b      	ldr	r3, [pc, #108]	; (800e7ec <ai_platform_network_init+0x214>)
 800e77e:	429a      	cmp	r2, r3
 800e780:	d115      	bne.n	800e7ae <ai_platform_network_init+0x1d6>
 800e782:	f7ff fde9 	bl	800e358 <_ai_platform_release_crc>
 800e786:	2400      	movs	r4, #0
 800e788:	e7db      	b.n	800e742 <ai_platform_network_init+0x16a>
 800e78a:	8c28      	ldrh	r0, [r5, #32]
 800e78c:	8bea      	ldrh	r2, [r5, #30]
 800e78e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e790:	fb02 f200 	mul.w	r2, r2, r0
 800e794:	fb03 f302 	mul.w	r3, r3, r2
 800e798:	2b00      	cmp	r3, #0
 800e79a:	f43f af61 	beq.w	800e660 <ai_platform_network_init+0x88>
 800e79e:	f104 0010 	add.w	r0, r4, #16
 800e7a2:	2213      	movs	r2, #19
 800e7a4:	2110      	movs	r1, #16
 800e7a6:	4634      	mov	r4, r6
 800e7a8:	f000 fb3c 	bl	800ee24 <core_set_error>
 800e7ac:	e7c9      	b.n	800e742 <ai_platform_network_init+0x16a>
 800e7ae:	e7fe      	b.n	800e7ae <ai_platform_network_init+0x1d6>
 800e7b0:	8928      	ldrh	r0, [r5, #8]
 800e7b2:	88ea      	ldrh	r2, [r5, #6]
 800e7b4:	68eb      	ldr	r3, [r5, #12]
 800e7b6:	fb02 f200 	mul.w	r2, r2, r0
 800e7ba:	fb03 f302 	mul.w	r3, r3, r2
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	f43f af52 	beq.w	800e668 <ai_platform_network_init+0x90>
 800e7c4:	f104 0010 	add.w	r0, r4, #16
 800e7c8:	2212      	movs	r2, #18
 800e7ca:	2110      	movs	r1, #16
 800e7cc:	4664      	mov	r4, ip
 800e7ce:	f000 fb29 	bl	800ee24 <core_set_error>
 800e7d2:	e7b6      	b.n	800e742 <ai_platform_network_init+0x16a>
 800e7d4:	a1c00100 	.word	0xa1c00100
 800e7d8:	e0002000 	.word	0xe0002000
 800e7dc:	e0042000 	.word	0xe0042000
 800e7e0:	58024c08 	.word	0x58024c08
 800e7e4:	58024c00 	.word	0x58024c00
 800e7e8:	f407a5c2 	.word	0xf407a5c2
 800e7ec:	b5e8b5cd 	.word	0xb5e8b5cd
 800e7f0:	40023008 	.word	0x40023008
 800e7f4:	40023000 	.word	0x40023000
 800e7f8:	a1facade 	.word	0xa1facade

0800e7fc <ai_platform_network_post_init>:
 800e7fc:	b538      	push	{r3, r4, r5, lr}
 800e7fe:	b120      	cbz	r0, 800e80a <ai_platform_network_post_init+0xe>
 800e800:	4b3f      	ldr	r3, [pc, #252]	; (800e900 <ai_platform_network_post_init+0x104>)
 800e802:	6802      	ldr	r2, [r0, #0]
 800e804:	429a      	cmp	r2, r3
 800e806:	4604      	mov	r4, r0
 800e808:	d02d      	beq.n	800e866 <ai_platform_network_post_init+0x6a>
 800e80a:	4a3e      	ldr	r2, [pc, #248]	; (800e904 <ai_platform_network_post_init+0x108>)
 800e80c:	6813      	ldr	r3, [r2, #0]
 800e80e:	f023 0301 	bic.w	r3, r3, #1
 800e812:	6013      	str	r3, [r2, #0]
 800e814:	f7ff fd9e 	bl	800e354 <_ai_platform_acquire_crc>
 800e818:	4b3b      	ldr	r3, [pc, #236]	; (800e908 <ai_platform_network_post_init+0x10c>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e824:	d00d      	beq.n	800e842 <ai_platform_network_post_init+0x46>
 800e826:	4b39      	ldr	r3, [pc, #228]	; (800e90c <ai_platform_network_post_init+0x110>)
 800e828:	2201      	movs	r2, #1
 800e82a:	601a      	str	r2, [r3, #0]
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	2a00      	cmp	r2, #0
 800e830:	d1fc      	bne.n	800e82c <ai_platform_network_post_init+0x30>
 800e832:	4b37      	ldr	r3, [pc, #220]	; (800e910 <ai_platform_network_post_init+0x114>)
 800e834:	4a37      	ldr	r2, [pc, #220]	; (800e914 <ai_platform_network_post_init+0x118>)
 800e836:	601a      	str	r2, [r3, #0]
 800e838:	681a      	ldr	r2, [r3, #0]
 800e83a:	4b37      	ldr	r3, [pc, #220]	; (800e918 <ai_platform_network_post_init+0x11c>)
 800e83c:	429a      	cmp	r2, r3
 800e83e:	d00d      	beq.n	800e85c <ai_platform_network_post_init+0x60>
 800e840:	e7fe      	b.n	800e840 <ai_platform_network_post_init+0x44>
 800e842:	4b36      	ldr	r3, [pc, #216]	; (800e91c <ai_platform_network_post_init+0x120>)
 800e844:	2201      	movs	r2, #1
 800e846:	601a      	str	r2, [r3, #0]
 800e848:	681a      	ldr	r2, [r3, #0]
 800e84a:	2a00      	cmp	r2, #0
 800e84c:	d1fc      	bne.n	800e848 <ai_platform_network_post_init+0x4c>
 800e84e:	4b34      	ldr	r3, [pc, #208]	; (800e920 <ai_platform_network_post_init+0x124>)
 800e850:	4a30      	ldr	r2, [pc, #192]	; (800e914 <ai_platform_network_post_init+0x118>)
 800e852:	601a      	str	r2, [r3, #0]
 800e854:	681a      	ldr	r2, [r3, #0]
 800e856:	4b30      	ldr	r3, [pc, #192]	; (800e918 <ai_platform_network_post_init+0x11c>)
 800e858:	429a      	cmp	r2, r3
 800e85a:	d103      	bne.n	800e864 <ai_platform_network_post_init+0x68>
 800e85c:	f7ff fd7c 	bl	800e358 <_ai_platform_release_crc>
 800e860:	2000      	movs	r0, #0
 800e862:	bd38      	pop	{r3, r4, r5, pc}
 800e864:	e7fe      	b.n	800e864 <ai_platform_network_post_init+0x68>
 800e866:	4a27      	ldr	r2, [pc, #156]	; (800e904 <ai_platform_network_post_init+0x108>)
 800e868:	6813      	ldr	r3, [r2, #0]
 800e86a:	f023 0301 	bic.w	r3, r3, #1
 800e86e:	6013      	str	r3, [r2, #0]
 800e870:	f7ff fd70 	bl	800e354 <_ai_platform_acquire_crc>
 800e874:	4b24      	ldr	r3, [pc, #144]	; (800e908 <ai_platform_network_post_init+0x10c>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e87c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e880:	d00d      	beq.n	800e89e <ai_platform_network_post_init+0xa2>
 800e882:	4b22      	ldr	r3, [pc, #136]	; (800e90c <ai_platform_network_post_init+0x110>)
 800e884:	2201      	movs	r2, #1
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	2a00      	cmp	r2, #0
 800e88c:	d1fc      	bne.n	800e888 <ai_platform_network_post_init+0x8c>
 800e88e:	4b20      	ldr	r3, [pc, #128]	; (800e910 <ai_platform_network_post_init+0x114>)
 800e890:	4a20      	ldr	r2, [pc, #128]	; (800e914 <ai_platform_network_post_init+0x118>)
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	681a      	ldr	r2, [r3, #0]
 800e896:	4b20      	ldr	r3, [pc, #128]	; (800e918 <ai_platform_network_post_init+0x11c>)
 800e898:	429a      	cmp	r2, r3
 800e89a:	d00e      	beq.n	800e8ba <ai_platform_network_post_init+0xbe>
 800e89c:	e7fe      	b.n	800e89c <ai_platform_network_post_init+0xa0>
 800e89e:	4b1f      	ldr	r3, [pc, #124]	; (800e91c <ai_platform_network_post_init+0x120>)
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	601a      	str	r2, [r3, #0]
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	2a00      	cmp	r2, #0
 800e8a8:	d1fc      	bne.n	800e8a4 <ai_platform_network_post_init+0xa8>
 800e8aa:	4b1d      	ldr	r3, [pc, #116]	; (800e920 <ai_platform_network_post_init+0x124>)
 800e8ac:	4a19      	ldr	r2, [pc, #100]	; (800e914 <ai_platform_network_post_init+0x118>)
 800e8ae:	601a      	str	r2, [r3, #0]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	4b19      	ldr	r3, [pc, #100]	; (800e918 <ai_platform_network_post_init+0x11c>)
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d000      	beq.n	800e8ba <ai_platform_network_post_init+0xbe>
 800e8b8:	e7fe      	b.n	800e8b8 <ai_platform_network_post_init+0xbc>
 800e8ba:	f7ff fd4d 	bl	800e358 <_ai_platform_release_crc>
 800e8be:	68e3      	ldr	r3, [r4, #12]
 800e8c0:	f013 0502 	ands.w	r5, r3, #2
 800e8c4:	d011      	beq.n	800e8ea <ai_platform_network_post_init+0xee>
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f003 fb5c 	bl	8011f84 <ai_layers_post_init_all>
 800e8cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e8ce:	b1a3      	cbz	r3, 800e8fa <ai_platform_network_post_init+0xfe>
 800e8d0:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800e8d2:	b195      	cbz	r5, 800e8fa <ai_platform_network_post_init+0xfe>
 800e8d4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e8d6:	4629      	mov	r1, r5
 800e8d8:	2000      	movs	r0, #0
 800e8da:	4798      	blx	r3
 800e8dc:	692b      	ldr	r3, [r5, #16]
 800e8de:	42ab      	cmp	r3, r5
 800e8e0:	d00b      	beq.n	800e8fa <ai_platform_network_post_init+0xfe>
 800e8e2:	461d      	mov	r5, r3
 800e8e4:	b14b      	cbz	r3, 800e8fa <ai_platform_network_post_init+0xfe>
 800e8e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e8e8:	e7f4      	b.n	800e8d4 <ai_platform_network_post_init+0xd8>
 800e8ea:	f104 0010 	add.w	r0, r4, #16
 800e8ee:	2210      	movs	r2, #16
 800e8f0:	2111      	movs	r1, #17
 800e8f2:	f000 fa97 	bl	800ee24 <core_set_error>
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	bd38      	pop	{r3, r4, r5, pc}
 800e8fa:	2001      	movs	r0, #1
 800e8fc:	bd38      	pop	{r3, r4, r5, pc}
 800e8fe:	bf00      	nop
 800e900:	a1c00100 	.word	0xa1c00100
 800e904:	e0002000 	.word	0xe0002000
 800e908:	e0042000 	.word	0xe0042000
 800e90c:	58024c08 	.word	0x58024c08
 800e910:	58024c00 	.word	0x58024c00
 800e914:	f407a5c2 	.word	0xf407a5c2
 800e918:	b5e8b5cd 	.word	0xb5e8b5cd
 800e91c:	40023008 	.word	0x40023008
 800e920:	40023000 	.word	0x40023000

0800e924 <ai_platform_network_process>:
 800e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e928:	b085      	sub	sp, #20
 800e92a:	460d      	mov	r5, r1
 800e92c:	9202      	str	r2, [sp, #8]
 800e92e:	4604      	mov	r4, r0
 800e930:	b120      	cbz	r0, 800e93c <ai_platform_network_process+0x18>
 800e932:	4b7b      	ldr	r3, [pc, #492]	; (800eb20 <ai_platform_network_process+0x1fc>)
 800e934:	6802      	ldr	r2, [r0, #0]
 800e936:	429a      	cmp	r2, r3
 800e938:	bf18      	it	ne
 800e93a:	2400      	movne	r4, #0
 800e93c:	4a79      	ldr	r2, [pc, #484]	; (800eb24 <ai_platform_network_process+0x200>)
 800e93e:	6813      	ldr	r3, [r2, #0]
 800e940:	f023 0301 	bic.w	r3, r3, #1
 800e944:	6013      	str	r3, [r2, #0]
 800e946:	f7ff fd05 	bl	800e354 <_ai_platform_acquire_crc>
 800e94a:	4b77      	ldr	r3, [pc, #476]	; (800eb28 <ai_platform_network_process+0x204>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e956:	d00d      	beq.n	800e974 <ai_platform_network_process+0x50>
 800e958:	4b74      	ldr	r3, [pc, #464]	; (800eb2c <ai_platform_network_process+0x208>)
 800e95a:	2201      	movs	r2, #1
 800e95c:	601a      	str	r2, [r3, #0]
 800e95e:	681a      	ldr	r2, [r3, #0]
 800e960:	2a00      	cmp	r2, #0
 800e962:	d1fc      	bne.n	800e95e <ai_platform_network_process+0x3a>
 800e964:	4b72      	ldr	r3, [pc, #456]	; (800eb30 <ai_platform_network_process+0x20c>)
 800e966:	4a73      	ldr	r2, [pc, #460]	; (800eb34 <ai_platform_network_process+0x210>)
 800e968:	601a      	str	r2, [r3, #0]
 800e96a:	681a      	ldr	r2, [r3, #0]
 800e96c:	4b72      	ldr	r3, [pc, #456]	; (800eb38 <ai_platform_network_process+0x214>)
 800e96e:	429a      	cmp	r2, r3
 800e970:	d00e      	beq.n	800e990 <ai_platform_network_process+0x6c>
 800e972:	e7fe      	b.n	800e972 <ai_platform_network_process+0x4e>
 800e974:	4b71      	ldr	r3, [pc, #452]	; (800eb3c <ai_platform_network_process+0x218>)
 800e976:	2201      	movs	r2, #1
 800e978:	601a      	str	r2, [r3, #0]
 800e97a:	681a      	ldr	r2, [r3, #0]
 800e97c:	2a00      	cmp	r2, #0
 800e97e:	d1fc      	bne.n	800e97a <ai_platform_network_process+0x56>
 800e980:	4b6f      	ldr	r3, [pc, #444]	; (800eb40 <ai_platform_network_process+0x21c>)
 800e982:	4a6c      	ldr	r2, [pc, #432]	; (800eb34 <ai_platform_network_process+0x210>)
 800e984:	601a      	str	r2, [r3, #0]
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	4b6b      	ldr	r3, [pc, #428]	; (800eb38 <ai_platform_network_process+0x214>)
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d000      	beq.n	800e990 <ai_platform_network_process+0x6c>
 800e98e:	e7fe      	b.n	800e98e <ai_platform_network_process+0x6a>
 800e990:	f7ff fce2 	bl	800e358 <_ai_platform_release_crc>
 800e994:	2c00      	cmp	r4, #0
 800e996:	f000 808e 	beq.w	800eab6 <ai_platform_network_process+0x192>
 800e99a:	8da7      	ldrh	r7, [r4, #44]	; 0x2c
 800e99c:	2f00      	cmp	r7, #0
 800e99e:	f040 823c 	bne.w	800ee1a <ai_platform_network_process+0x4f6>
 800e9a2:	68e3      	ldr	r3, [r4, #12]
 800e9a4:	f003 0303 	and.w	r3, r3, #3
 800e9a8:	f04f 0b00 	mov.w	fp, #0
 800e9ac:	2b03      	cmp	r3, #3
 800e9ae:	f8c4 b014 	str.w	fp, [r4, #20]
 800e9b2:	f040 822b 	bne.w	800ee0c <ai_platform_network_process+0x4e8>
 800e9b6:	2d00      	cmp	r5, #0
 800e9b8:	f000 80a8 	beq.w	800eb0c <ai_platform_network_process+0x1e8>
 800e9bc:	2f00      	cmp	r7, #0
 800e9be:	f000 80a5 	beq.w	800eb0c <ai_platform_network_process+0x1e8>
 800e9c2:	883b      	ldrh	r3, [r7, #0]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	f000 80a1 	beq.w	800eb0c <ai_platform_network_process+0x1e8>
 800e9ca:	f8b5 9004 	ldrh.w	r9, [r5, #4]
 800e9ce:	9401      	str	r4, [sp, #4]
 800e9d0:	46d8      	mov	r8, fp
 800e9d2:	4598      	cmp	r8, r3
 800e9d4:	f080 80b6 	bcs.w	800eb44 <ai_platform_network_process+0x220>
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f000 80b2 	beq.w	800eb44 <ai_platform_network_process+0x220>
 800e9e0:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800e9e4:	2e00      	cmp	r6, #0
 800e9e6:	f000 80ad 	beq.w	800eb44 <ai_platform_network_process+0x220>
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	9303      	str	r3, [sp, #12]
 800e9f0:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800e9f4:	eb13 0a04 	adds.w	sl, r3, r4
 800e9f8:	f000 8087 	beq.w	800eb0a <ai_platform_network_process+0x1e6>
 800e9fc:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800ea00:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800ea04:	69b0      	ldr	r0, [r6, #24]
 800ea06:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800ea0a:	6841      	ldr	r1, [r0, #4]
 800ea0c:	fb0b f30e 	mul.w	r3, fp, lr
 800ea10:	fb0c f303 	mul.w	r3, ip, r3
 800ea14:	4299      	cmp	r1, r3
 800ea16:	d36e      	bcc.n	800eaf6 <ai_platform_network_process+0x1d2>
 800ea18:	68f3      	ldr	r3, [r6, #12]
 800ea1a:	68da      	ldr	r2, [r3, #12]
 800ea1c:	455a      	cmp	r2, fp
 800ea1e:	d16a      	bne.n	800eaf6 <ai_platform_network_process+0x1d2>
 800ea20:	689a      	ldr	r2, [r3, #8]
 800ea22:	4572      	cmp	r2, lr
 800ea24:	d167      	bne.n	800eaf6 <ai_platform_network_process+0x1d2>
 800ea26:	685b      	ldr	r3, [r3, #4]
 800ea28:	459c      	cmp	ip, r3
 800ea2a:	d164      	bne.n	800eaf6 <ai_platform_network_process+0x1d2>
 800ea2c:	6800      	ldr	r0, [r0, #0]
 800ea2e:	f003 fb67 	bl	8012100 <ai_array_get_byte_size>
 800ea32:	68f2      	ldr	r2, [r6, #12]
 800ea34:	6973      	ldr	r3, [r6, #20]
 800ea36:	68d2      	ldr	r2, [r2, #12]
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	fb03 f302 	mul.w	r3, r3, r2
 800ea3e:	4298      	cmp	r0, r3
 800ea40:	d359      	bcc.n	800eaf6 <ai_platform_network_process+0x1d2>
 800ea42:	69b3      	ldr	r3, [r6, #24]
 800ea44:	6818      	ldr	r0, [r3, #0]
 800ea46:	f003 fb03 	bl	8012050 <ai_array_to_buffer_fmt>
 800ea4a:	682b      	ldr	r3, [r5, #0]
 800ea4c:	4043      	eors	r3, r0
 800ea4e:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800ea52:	d146      	bne.n	800eae2 <ai_platform_network_process+0x1be>
 800ea54:	692b      	ldr	r3, [r5, #16]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d03a      	beq.n	800ead0 <ai_platform_network_process+0x1ac>
 800ea5a:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800ea5e:	f1bb 0f00 	cmp.w	fp, #0
 800ea62:	d02d      	beq.n	800eac0 <ai_platform_network_process+0x19c>
 800ea64:	68f2      	ldr	r2, [r6, #12]
 800ea66:	6973      	ldr	r3, [r6, #20]
 800ea68:	68d1      	ldr	r1, [r2, #12]
 800ea6a:	68da      	ldr	r2, [r3, #12]
 800ea6c:	fb02 f201 	mul.w	r2, r2, r1
 800ea70:	f8ca 2008 	str.w	r2, [sl, #8]
 800ea74:	88ab      	ldrh	r3, [r5, #4]
 800ea76:	fb02 f203 	mul.w	r2, r2, r3
 800ea7a:	f8ca 200c 	str.w	r2, [sl, #12]
 800ea7e:	6929      	ldr	r1, [r5, #16]
 800ea80:	f8ca 1004 	str.w	r1, [sl, #4]
 800ea84:	692b      	ldr	r3, [r5, #16]
 800ea86:	4413      	add	r3, r2
 800ea88:	9a03      	ldr	r2, [sp, #12]
 800ea8a:	5113      	str	r3, [r2, r4]
 800ea8c:	69b0      	ldr	r0, [r6, #24]
 800ea8e:	6803      	ldr	r3, [r0, #0]
 800ea90:	45d9      	cmp	r9, fp
 800ea92:	bf38      	it	cc
 800ea94:	46d9      	movcc	r9, fp
 800ea96:	009a      	lsls	r2, r3, #2
 800ea98:	d408      	bmi.n	800eaac <ai_platform_network_process+0x188>
 800ea9a:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ea9e:	1a9b      	subs	r3, r3, r2
 800eaa0:	4419      	add	r1, r3
 800eaa2:	6081      	str	r1, [r0, #8]
 800eaa4:	69b3      	ldr	r3, [r6, #24]
 800eaa6:	f8da 2004 	ldr.w	r2, [sl, #4]
 800eaaa:	60da      	str	r2, [r3, #12]
 800eaac:	883b      	ldrh	r3, [r7, #0]
 800eaae:	f108 0801 	add.w	r8, r8, #1
 800eab2:	3518      	adds	r5, #24
 800eab4:	e78d      	b.n	800e9d2 <ai_platform_network_process+0xae>
 800eab6:	46a3      	mov	fp, r4
 800eab8:	4658      	mov	r0, fp
 800eaba:	b005      	add	sp, #20
 800eabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac0:	9c01      	ldr	r4, [sp, #4]
 800eac2:	2221      	movs	r2, #33	; 0x21
 800eac4:	f104 0010 	add.w	r0, r4, #16
 800eac8:	2112      	movs	r1, #18
 800eaca:	f000 f9ab 	bl	800ee24 <core_set_error>
 800eace:	e7f3      	b.n	800eab8 <ai_platform_network_process+0x194>
 800ead0:	9c01      	ldr	r4, [sp, #4]
 800ead2:	2217      	movs	r2, #23
 800ead4:	f104 0010 	add.w	r0, r4, #16
 800ead8:	2112      	movs	r1, #18
 800eada:	469b      	mov	fp, r3
 800eadc:	f000 f9a2 	bl	800ee24 <core_set_error>
 800eae0:	e7ea      	b.n	800eab8 <ai_platform_network_process+0x194>
 800eae2:	9c01      	ldr	r4, [sp, #4]
 800eae4:	2219      	movs	r2, #25
 800eae6:	f104 0010 	add.w	r0, r4, #16
 800eaea:	2112      	movs	r1, #18
 800eaec:	f000 f99a 	bl	800ee24 <core_set_error>
 800eaf0:	f04f 0b00 	mov.w	fp, #0
 800eaf4:	e7e0      	b.n	800eab8 <ai_platform_network_process+0x194>
 800eaf6:	9c01      	ldr	r4, [sp, #4]
 800eaf8:	2218      	movs	r2, #24
 800eafa:	f104 0010 	add.w	r0, r4, #16
 800eafe:	2112      	movs	r1, #18
 800eb00:	f000 f990 	bl	800ee24 <core_set_error>
 800eb04:	f04f 0b00 	mov.w	fp, #0
 800eb08:	e7d6      	b.n	800eab8 <ai_platform_network_process+0x194>
 800eb0a:	9c01      	ldr	r4, [sp, #4]
 800eb0c:	f104 0010 	add.w	r0, r4, #16
 800eb10:	2217      	movs	r2, #23
 800eb12:	2112      	movs	r1, #18
 800eb14:	f000 f986 	bl	800ee24 <core_set_error>
 800eb18:	f04f 0b00 	mov.w	fp, #0
 800eb1c:	e7cc      	b.n	800eab8 <ai_platform_network_process+0x194>
 800eb1e:	bf00      	nop
 800eb20:	a1c00100 	.word	0xa1c00100
 800eb24:	e0002000 	.word	0xe0002000
 800eb28:	e0042000 	.word	0xe0042000
 800eb2c:	58024c08 	.word	0x58024c08
 800eb30:	58024c00 	.word	0x58024c00
 800eb34:	f407a5c2 	.word	0xf407a5c2
 800eb38:	b5e8b5cd 	.word	0xb5e8b5cd
 800eb3c:	40023008 	.word	0x40023008
 800eb40:	40023000 	.word	0x40023000
 800eb44:	9c01      	ldr	r4, [sp, #4]
 800eb46:	9a02      	ldr	r2, [sp, #8]
 800eb48:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800eb4a:	2a00      	cmp	r2, #0
 800eb4c:	f000 80a9 	beq.w	800eca2 <ai_platform_network_process+0x37e>
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	f240 809b 	bls.w	800ec8c <ai_platform_network_process+0x368>
 800eb56:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
 800eb5a:	f11a 0f0c 	cmn.w	sl, #12
 800eb5e:	f000 8095 	beq.w	800ec8c <ai_platform_network_process+0x368>
 800eb62:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f000 8090 	beq.w	800ec8c <ai_platform_network_process+0x368>
 800eb6c:	9d02      	ldr	r5, [sp, #8]
 800eb6e:	9401      	str	r4, [sp, #4]
 800eb70:	f04f 0800 	mov.w	r8, #0
 800eb74:	4598      	cmp	r8, r3
 800eb76:	f080 8092 	bcs.w	800ec9e <ai_platform_network_process+0x37a>
 800eb7a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	f000 808d 	beq.w	800ec9e <ai_platform_network_process+0x37a>
 800eb84:	f853 6028 	ldr.w	r6, [r3, r8, lsl #2]
 800eb88:	2e00      	cmp	r6, #0
 800eb8a:	f000 8088 	beq.w	800ec9e <ai_platform_network_process+0x37a>
 800eb8e:	f8da 3014 	ldr.w	r3, [sl, #20]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	9302      	str	r3, [sp, #8]
 800eb96:	ea4f 1408 	mov.w	r4, r8, lsl #4
 800eb9a:	191f      	adds	r7, r3, r4
 800eb9c:	f000 812d 	beq.w	800edfa <ai_platform_network_process+0x4d6>
 800eba0:	f8b5 e008 	ldrh.w	lr, [r5, #8]
 800eba4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
 800eba8:	69b0      	ldr	r0, [r6, #24]
 800ebaa:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 800ebae:	6841      	ldr	r1, [r0, #4]
 800ebb0:	fb0b f30e 	mul.w	r3, fp, lr
 800ebb4:	fb0c f303 	mul.w	r3, ip, r3
 800ebb8:	4299      	cmp	r1, r3
 800ebba:	d366      	bcc.n	800ec8a <ai_platform_network_process+0x366>
 800ebbc:	68f3      	ldr	r3, [r6, #12]
 800ebbe:	68da      	ldr	r2, [r3, #12]
 800ebc0:	455a      	cmp	r2, fp
 800ebc2:	d162      	bne.n	800ec8a <ai_platform_network_process+0x366>
 800ebc4:	689a      	ldr	r2, [r3, #8]
 800ebc6:	4572      	cmp	r2, lr
 800ebc8:	d15f      	bne.n	800ec8a <ai_platform_network_process+0x366>
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	459c      	cmp	ip, r3
 800ebce:	d15c      	bne.n	800ec8a <ai_platform_network_process+0x366>
 800ebd0:	6800      	ldr	r0, [r0, #0]
 800ebd2:	f003 fa95 	bl	8012100 <ai_array_get_byte_size>
 800ebd6:	68f2      	ldr	r2, [r6, #12]
 800ebd8:	6973      	ldr	r3, [r6, #20]
 800ebda:	68d2      	ldr	r2, [r2, #12]
 800ebdc:	68db      	ldr	r3, [r3, #12]
 800ebde:	fb03 f302 	mul.w	r3, r3, r2
 800ebe2:	4298      	cmp	r0, r3
 800ebe4:	d351      	bcc.n	800ec8a <ai_platform_network_process+0x366>
 800ebe6:	69b3      	ldr	r3, [r6, #24]
 800ebe8:	6818      	ldr	r0, [r3, #0]
 800ebea:	f003 fa31 	bl	8012050 <ai_array_to_buffer_fmt>
 800ebee:	682b      	ldr	r3, [r5, #0]
 800ebf0:	4043      	eors	r3, r0
 800ebf2:	f033 437e 	bics.w	r3, r3, #4261412864	; 0xfe000000
 800ebf6:	d13e      	bne.n	800ec76 <ai_platform_network_process+0x352>
 800ebf8:	692b      	ldr	r3, [r5, #16]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d032      	beq.n	800ec64 <ai_platform_network_process+0x340>
 800ebfe:	f8b5 b004 	ldrh.w	fp, [r5, #4]
 800ec02:	f1bb 0f00 	cmp.w	fp, #0
 800ec06:	d025      	beq.n	800ec54 <ai_platform_network_process+0x330>
 800ec08:	68f2      	ldr	r2, [r6, #12]
 800ec0a:	6973      	ldr	r3, [r6, #20]
 800ec0c:	68d1      	ldr	r1, [r2, #12]
 800ec0e:	68da      	ldr	r2, [r3, #12]
 800ec10:	fb02 f201 	mul.w	r2, r2, r1
 800ec14:	60ba      	str	r2, [r7, #8]
 800ec16:	88ab      	ldrh	r3, [r5, #4]
 800ec18:	fb02 f203 	mul.w	r2, r2, r3
 800ec1c:	60fa      	str	r2, [r7, #12]
 800ec1e:	6929      	ldr	r1, [r5, #16]
 800ec20:	6079      	str	r1, [r7, #4]
 800ec22:	692b      	ldr	r3, [r5, #16]
 800ec24:	4413      	add	r3, r2
 800ec26:	9a02      	ldr	r2, [sp, #8]
 800ec28:	5113      	str	r3, [r2, r4]
 800ec2a:	69b0      	ldr	r0, [r6, #24]
 800ec2c:	6803      	ldr	r3, [r0, #0]
 800ec2e:	45d9      	cmp	r9, fp
 800ec30:	bf38      	it	cc
 800ec32:	46d9      	movcc	r9, fp
 800ec34:	009b      	lsls	r3, r3, #2
 800ec36:	d407      	bmi.n	800ec48 <ai_platform_network_process+0x324>
 800ec38:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800ec3c:	1a9b      	subs	r3, r3, r2
 800ec3e:	4419      	add	r1, r3
 800ec40:	6081      	str	r1, [r0, #8]
 800ec42:	69b3      	ldr	r3, [r6, #24]
 800ec44:	687a      	ldr	r2, [r7, #4]
 800ec46:	60da      	str	r2, [r3, #12]
 800ec48:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800ec4c:	f108 0801 	add.w	r8, r8, #1
 800ec50:	3518      	adds	r5, #24
 800ec52:	e78f      	b.n	800eb74 <ai_platform_network_process+0x250>
 800ec54:	9c01      	ldr	r4, [sp, #4]
 800ec56:	2221      	movs	r2, #33	; 0x21
 800ec58:	f104 0010 	add.w	r0, r4, #16
 800ec5c:	2113      	movs	r1, #19
 800ec5e:	f000 f8e1 	bl	800ee24 <core_set_error>
 800ec62:	e729      	b.n	800eab8 <ai_platform_network_process+0x194>
 800ec64:	9c01      	ldr	r4, [sp, #4]
 800ec66:	2217      	movs	r2, #23
 800ec68:	f104 0010 	add.w	r0, r4, #16
 800ec6c:	2113      	movs	r1, #19
 800ec6e:	469b      	mov	fp, r3
 800ec70:	f000 f8d8 	bl	800ee24 <core_set_error>
 800ec74:	e720      	b.n	800eab8 <ai_platform_network_process+0x194>
 800ec76:	9c01      	ldr	r4, [sp, #4]
 800ec78:	2219      	movs	r2, #25
 800ec7a:	f104 0010 	add.w	r0, r4, #16
 800ec7e:	2113      	movs	r1, #19
 800ec80:	f000 f8d0 	bl	800ee24 <core_set_error>
 800ec84:	f04f 0b00 	mov.w	fp, #0
 800ec88:	e716      	b.n	800eab8 <ai_platform_network_process+0x194>
 800ec8a:	9c01      	ldr	r4, [sp, #4]
 800ec8c:	f104 0010 	add.w	r0, r4, #16
 800ec90:	2218      	movs	r2, #24
 800ec92:	2113      	movs	r1, #19
 800ec94:	f000 f8c6 	bl	800ee24 <core_set_error>
 800ec98:	f04f 0b00 	mov.w	fp, #0
 800ec9c:	e70c      	b.n	800eab8 <ai_platform_network_process+0x194>
 800ec9e:	9c01      	ldr	r4, [sp, #4]
 800eca0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
 800eca2:	f8a4 9014 	strh.w	r9, [r4, #20]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	f000 80a4 	beq.w	800edf4 <ai_platform_network_process+0x4d0>
 800ecac:	2b01      	cmp	r3, #1
 800ecae:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800ecb0:	f240 809e 	bls.w	800edf0 <ai_platform_network_process+0x4cc>
 800ecb4:	f105 070c 	add.w	r7, r5, #12
 800ecb8:	f8b4 b016 	ldrh.w	fp, [r4, #22]
 800ecbc:	8aa3      	ldrh	r3, [r4, #20]
 800ecbe:	455b      	cmp	r3, fp
 800ecc0:	f67f aefa 	bls.w	800eab8 <ai_platform_network_process+0x194>
 800ecc4:	9401      	str	r4, [sp, #4]
 800ecc6:	2d00      	cmp	r5, #0
 800ecc8:	d036      	beq.n	800ed38 <ai_platform_network_process+0x414>
 800ecca:	882b      	ldrh	r3, [r5, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d033      	beq.n	800ed38 <ai_platform_network_process+0x414>
 800ecd0:	686b      	ldr	r3, [r5, #4]
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d030      	beq.n	800ed38 <ai_platform_network_process+0x414>
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	f04f 0800 	mov.w	r8, #0
 800ecdc:	b9db      	cbnz	r3, 800ed16 <ai_platform_network_process+0x3f2>
 800ecde:	e02b      	b.n	800ed38 <ai_platform_network_process+0x414>
 800ece0:	68d4      	ldr	r4, [r2, #12]
 800ece2:	1b00      	subs	r0, r0, r4
 800ece4:	4401      	add	r1, r0
 800ece6:	6091      	str	r1, [r2, #8]
 800ece8:	699b      	ldr	r3, [r3, #24]
 800ecea:	6872      	ldr	r2, [r6, #4]
 800ecec:	60da      	str	r2, [r3, #12]
 800ecee:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800ecf2:	f85a 2009 	ldr.w	r2, [sl, r9]
 800ecf6:	440b      	add	r3, r1
 800ecf8:	4293      	cmp	r3, r2
 800ecfa:	bf24      	itt	cs
 800ecfc:	68f3      	ldrcs	r3, [r6, #12]
 800ecfe:	1ad3      	subcs	r3, r2, r3
 800ed00:	6073      	str	r3, [r6, #4]
 800ed02:	882b      	ldrh	r3, [r5, #0]
 800ed04:	f108 0801 	add.w	r8, r8, #1
 800ed08:	4598      	cmp	r8, r3
 800ed0a:	d215      	bcs.n	800ed38 <ai_platform_network_process+0x414>
 800ed0c:	686b      	ldr	r3, [r5, #4]
 800ed0e:	b19b      	cbz	r3, 800ed38 <ai_platform_network_process+0x414>
 800ed10:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800ed14:	b183      	cbz	r3, 800ed38 <ai_platform_network_process+0x414>
 800ed16:	68a9      	ldr	r1, [r5, #8]
 800ed18:	699a      	ldr	r2, [r3, #24]
 800ed1a:	f8d1 a000 	ldr.w	sl, [r1]
 800ed1e:	6814      	ldr	r4, [r2, #0]
 800ed20:	6890      	ldr	r0, [r2, #8]
 800ed22:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800ed26:	eb0a 0609 	add.w	r6, sl, r9
 800ed2a:	00a4      	lsls	r4, r4, #2
 800ed2c:	6871      	ldr	r1, [r6, #4]
 800ed2e:	d5d7      	bpl.n	800ece0 <ai_platform_network_process+0x3bc>
 800ed30:	68b2      	ldr	r2, [r6, #8]
 800ed32:	f003 fa69 	bl	8012208 <memcpy>
 800ed36:	e7da      	b.n	800ecee <ai_platform_network_process+0x3ca>
 800ed38:	9801      	ldr	r0, [sp, #4]
 800ed3a:	f003 f93b 	bl	8011fb4 <ai_layers_forward_all>
 800ed3e:	2f00      	cmp	r7, #0
 800ed40:	d047      	beq.n	800edd2 <ai_platform_network_process+0x4ae>
 800ed42:	883b      	ldrh	r3, [r7, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d044      	beq.n	800edd2 <ai_platform_network_process+0x4ae>
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d041      	beq.n	800edd2 <ai_platform_network_process+0x4ae>
 800ed4e:	6818      	ldr	r0, [r3, #0]
 800ed50:	2800      	cmp	r0, #0
 800ed52:	d03e      	beq.n	800edd2 <ai_platform_network_process+0x4ae>
 800ed54:	f04f 0800 	mov.w	r8, #0
 800ed58:	e019      	b.n	800ed8e <ai_platform_network_process+0x46a>
 800ed5a:	f85a 2009 	ldr.w	r2, [sl, r9]
 800ed5e:	4293      	cmp	r3, r2
 800ed60:	bf24      	itt	cs
 800ed62:	68f3      	ldrcs	r3, [r6, #12]
 800ed64:	1ad3      	subcs	r3, r2, r3
 800ed66:	6073      	str	r3, [r6, #4]
 800ed68:	6981      	ldr	r1, [r0, #24]
 800ed6a:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800ed6e:	1b12      	subs	r2, r2, r4
 800ed70:	4413      	add	r3, r2
 800ed72:	608b      	str	r3, [r1, #8]
 800ed74:	6983      	ldr	r3, [r0, #24]
 800ed76:	6872      	ldr	r2, [r6, #4]
 800ed78:	60da      	str	r2, [r3, #12]
 800ed7a:	883b      	ldrh	r3, [r7, #0]
 800ed7c:	f108 0801 	add.w	r8, r8, #1
 800ed80:	4598      	cmp	r8, r3
 800ed82:	d226      	bcs.n	800edd2 <ai_platform_network_process+0x4ae>
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	b323      	cbz	r3, 800edd2 <ai_platform_network_process+0x4ae>
 800ed88:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ed8c:	b308      	cbz	r0, 800edd2 <ai_platform_network_process+0x4ae>
 800ed8e:	68bb      	ldr	r3, [r7, #8]
 800ed90:	6981      	ldr	r1, [r0, #24]
 800ed92:	f8d3 a000 	ldr.w	sl, [r3]
 800ed96:	680c      	ldr	r4, [r1, #0]
 800ed98:	ea4f 1908 	mov.w	r9, r8, lsl #4
 800ed9c:	eb0a 0609 	add.w	r6, sl, r9
 800eda0:	e9d6 c201 	ldrd	ip, r2, [r6, #4]
 800eda4:	00a4      	lsls	r4, r4, #2
 800eda6:	eb0c 0302 	add.w	r3, ip, r2
 800edaa:	d5d6      	bpl.n	800ed5a <ai_platform_network_process+0x436>
 800edac:	6889      	ldr	r1, [r1, #8]
 800edae:	4660      	mov	r0, ip
 800edb0:	f003 fa2a 	bl	8012208 <memcpy>
 800edb4:	e9d6 3101 	ldrd	r3, r1, [r6, #4]
 800edb8:	f85a 2009 	ldr.w	r2, [sl, r9]
 800edbc:	440b      	add	r3, r1
 800edbe:	4293      	cmp	r3, r2
 800edc0:	bf24      	itt	cs
 800edc2:	68f3      	ldrcs	r3, [r6, #12]
 800edc4:	1ad3      	subcs	r3, r2, r3
 800edc6:	6073      	str	r3, [r6, #4]
 800edc8:	883b      	ldrh	r3, [r7, #0]
 800edca:	f108 0801 	add.w	r8, r8, #1
 800edce:	4598      	cmp	r8, r3
 800edd0:	d3d8      	bcc.n	800ed84 <ai_platform_network_process+0x460>
 800edd2:	9b01      	ldr	r3, [sp, #4]
 800edd4:	f8b3 b016 	ldrh.w	fp, [r3, #22]
 800edd8:	461a      	mov	r2, r3
 800edda:	f10b 0b01 	add.w	fp, fp, #1
 800edde:	8a9b      	ldrh	r3, [r3, #20]
 800ede0:	fa1f fb8b 	uxth.w	fp, fp
 800ede4:	455b      	cmp	r3, fp
 800ede6:	f8a2 b016 	strh.w	fp, [r2, #22]
 800edea:	f63f af6c 	bhi.w	800ecc6 <ai_platform_network_process+0x3a2>
 800edee:	e663      	b.n	800eab8 <ai_platform_network_process+0x194>
 800edf0:	2700      	movs	r7, #0
 800edf2:	e761      	b.n	800ecb8 <ai_platform_network_process+0x394>
 800edf4:	461d      	mov	r5, r3
 800edf6:	461f      	mov	r7, r3
 800edf8:	e75e      	b.n	800ecb8 <ai_platform_network_process+0x394>
 800edfa:	9c01      	ldr	r4, [sp, #4]
 800edfc:	2217      	movs	r2, #23
 800edfe:	f104 0010 	add.w	r0, r4, #16
 800ee02:	2113      	movs	r1, #19
 800ee04:	f000 f80e 	bl	800ee24 <core_set_error>
 800ee08:	46bb      	mov	fp, r7
 800ee0a:	e655      	b.n	800eab8 <ai_platform_network_process+0x194>
 800ee0c:	f104 0010 	add.w	r0, r4, #16
 800ee10:	2230      	movs	r2, #48	; 0x30
 800ee12:	2111      	movs	r1, #17
 800ee14:	f000 f806 	bl	800ee24 <core_set_error>
 800ee18:	e64e      	b.n	800eab8 <ai_platform_network_process+0x194>
 800ee1a:	6b27      	ldr	r7, [r4, #48]	; 0x30
 800ee1c:	e5c1      	b.n	800e9a2 <ai_platform_network_process+0x7e>
 800ee1e:	bf00      	nop

0800ee20 <core_init>:
 800ee20:	2001      	movs	r0, #1
 800ee22:	4770      	bx	lr

0800ee24 <core_set_error>:
 800ee24:	7803      	ldrb	r3, [r0, #0]
 800ee26:	b933      	cbnz	r3, 800ee36 <core_set_error+0x12>
 800ee28:	7001      	strb	r1, [r0, #0]
 800ee2a:	6803      	ldr	r3, [r0, #0]
 800ee2c:	f362 231f 	bfi	r3, r2, #8, #24
 800ee30:	6003      	str	r3, [r0, #0]
 800ee32:	2001      	movs	r0, #1
 800ee34:	4770      	bx	lr
 800ee36:	2000      	movs	r0, #0
 800ee38:	4770      	bx	lr
 800ee3a:	bf00      	nop

0800ee3c <func_dummy>:
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop

0800ee40 <ai_dict8_dot_array_f32>:
 800ee40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee44:	f8dd c020 	ldr.w	ip, [sp, #32]
 800ee48:	ea5f 08dc 	movs.w	r8, ip, lsr #3
 800ee4c:	f000 80c0 	beq.w	800efd0 <ai_dict8_dot_array_f32+0x190>
 800ee50:	f101 0408 	add.w	r4, r1, #8
 800ee54:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800ee58:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800efd8 <ai_dict8_dot_array_f32+0x198>
 800ee5c:	eb04 0e09 	add.w	lr, r4, r9
 800ee60:	f103 0520 	add.w	r5, r3, #32
 800ee64:	f814 6c07 	ldrb.w	r6, [r4, #-7]
 800ee68:	f814 ac08 	ldrb.w	sl, [r4, #-8]
 800ee6c:	ed15 3a07 	vldr	s6, [r5, #-28]	; 0xffffffe4
 800ee70:	ed15 5a08 	vldr	s10, [r5, #-32]	; 0xffffffe0
 800ee74:	f814 7c06 	ldrb.w	r7, [r4, #-6]
 800ee78:	ed15 4a06 	vldr	s8, [r5, #-24]	; 0xffffffe8
 800ee7c:	ed15 6a05 	vldr	s12, [r5, #-20]	; 0xffffffec
 800ee80:	ed55 3a04 	vldr	s7, [r5, #-16]
 800ee84:	ed55 4a03 	vldr	s9, [r5, #-12]
 800ee88:	ed55 5a02 	vldr	s11, [r5, #-8]
 800ee8c:	ed55 6a01 	vldr	s13, [r5, #-4]
 800ee90:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ee94:	edd6 7a00 	vldr	s15, [r6]
 800ee98:	f814 6c05 	ldrb.w	r6, [r4, #-5]
 800ee9c:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800eea0:	ee67 7a83 	vmul.f32	s15, s15, s6
 800eea4:	ed9a 3a00 	vldr	s6, [sl]
 800eea8:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 800eeac:	eee3 7a05 	vfma.f32	s15, s6, s10
 800eeb0:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800eeb4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eeb8:	ed97 3a00 	vldr	s6, [r7]
 800eebc:	ed96 5a00 	vldr	s10, [r6]
 800eec0:	f814 6c03 	ldrb.w	r6, [r4, #-3]
 800eec4:	f814 7c02 	ldrb.w	r7, [r4, #-2]
 800eec8:	eee3 7a04 	vfma.f32	s15, s6, s8
 800eecc:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800eed0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eed4:	ed9a 3a00 	vldr	s6, [sl]
 800eed8:	ed96 4a00 	vldr	s8, [r6]
 800eedc:	f814 6c01 	ldrb.w	r6, [r4, #-1]
 800eee0:	eee5 7a06 	vfma.f32	s15, s10, s12
 800eee4:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800eee8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800eeec:	ed97 5a00 	vldr	s10, [r7]
 800eef0:	ed96 6a00 	vldr	s12, [r6]
 800eef4:	eee3 7a23 	vfma.f32	s15, s6, s7
 800eef8:	3408      	adds	r4, #8
 800eefa:	45a6      	cmp	lr, r4
 800eefc:	f105 0520 	add.w	r5, r5, #32
 800ef00:	eee4 7a24 	vfma.f32	s15, s8, s9
 800ef04:	eee5 7a25 	vfma.f32	s15, s10, s11
 800ef08:	eee6 7a26 	vfma.f32	s15, s12, s13
 800ef0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ef10:	d1a8      	bne.n	800ee64 <ai_dict8_dot_array_f32+0x24>
 800ef12:	4449      	add	r1, r9
 800ef14:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800ef18:	f01c 0c07 	ands.w	ip, ip, #7
 800ef1c:	d050      	beq.n	800efc0 <ai_dict8_dot_array_f32+0x180>
 800ef1e:	780c      	ldrb	r4, [r1, #0]
 800ef20:	edd3 6a00 	vldr	s13, [r3]
 800ef24:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ef28:	edd4 7a00 	vldr	s15, [r4]
 800ef2c:	f1bc 0f01 	cmp.w	ip, #1
 800ef30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ef34:	d044      	beq.n	800efc0 <ai_dict8_dot_array_f32+0x180>
 800ef36:	784c      	ldrb	r4, [r1, #1]
 800ef38:	edd3 6a01 	vldr	s13, [r3, #4]
 800ef3c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ef40:	edd4 7a00 	vldr	s15, [r4]
 800ef44:	f1bc 0f02 	cmp.w	ip, #2
 800ef48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ef4c:	d038      	beq.n	800efc0 <ai_dict8_dot_array_f32+0x180>
 800ef4e:	788c      	ldrb	r4, [r1, #2]
 800ef50:	edd3 6a02 	vldr	s13, [r3, #8]
 800ef54:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ef58:	edd4 7a00 	vldr	s15, [r4]
 800ef5c:	f1bc 0f03 	cmp.w	ip, #3
 800ef60:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ef64:	d02c      	beq.n	800efc0 <ai_dict8_dot_array_f32+0x180>
 800ef66:	78cc      	ldrb	r4, [r1, #3]
 800ef68:	edd3 6a03 	vldr	s13, [r3, #12]
 800ef6c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ef70:	edd4 7a00 	vldr	s15, [r4]
 800ef74:	f1bc 0f04 	cmp.w	ip, #4
 800ef78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ef7c:	d020      	beq.n	800efc0 <ai_dict8_dot_array_f32+0x180>
 800ef7e:	790c      	ldrb	r4, [r1, #4]
 800ef80:	edd3 6a04 	vldr	s13, [r3, #16]
 800ef84:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800ef88:	edd4 7a00 	vldr	s15, [r4]
 800ef8c:	f1bc 0f05 	cmp.w	ip, #5
 800ef90:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800ef94:	d014      	beq.n	800efc0 <ai_dict8_dot_array_f32+0x180>
 800ef96:	794c      	ldrb	r4, [r1, #5]
 800ef98:	edd3 6a05 	vldr	s13, [r3, #20]
 800ef9c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800efa0:	edd4 7a00 	vldr	s15, [r4]
 800efa4:	f1bc 0f06 	cmp.w	ip, #6
 800efa8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800efac:	d008      	beq.n	800efc0 <ai_dict8_dot_array_f32+0x180>
 800efae:	7989      	ldrb	r1, [r1, #6]
 800efb0:	edd3 7a06 	vldr	s15, [r3, #24]
 800efb4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800efb8:	edd2 6a00 	vldr	s13, [r2]
 800efbc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800efc0:	edd0 7a00 	vldr	s15, [r0]
 800efc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800efc8:	ed80 7a00 	vstr	s14, [r0]
 800efcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efd0:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800efd8 <ai_dict8_dot_array_f32+0x198>
 800efd4:	e7a0      	b.n	800ef18 <ai_dict8_dot_array_f32+0xd8>
 800efd6:	bf00      	nop
 800efd8:	00000000 	.word	0x00000000

0800efdc <ai_dict4_dot_array_f32>:
 800efdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800efe2:	f027 0c01 	bic.w	ip, r7, #1
 800efe6:	ea5f 08d7 	movs.w	r8, r7, lsr #3
 800efea:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 800efee:	f000 80ae 	beq.w	800f14e <ai_dict4_dot_array_f32+0x172>
 800eff2:	1d0d      	adds	r5, r1, #4
 800eff4:	ea4f 0988 	mov.w	r9, r8, lsl #2
 800eff8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800f154 <ai_dict4_dot_array_f32+0x178>
 800effc:	eb05 0e09 	add.w	lr, r5, r9
 800f000:	f103 0420 	add.w	r4, r3, #32
 800f004:	f815 6c04 	ldrb.w	r6, [r5, #-4]
 800f008:	ed14 3a07 	vldr	s6, [r4, #-28]	; 0xffffffe4
 800f00c:	f815 bc03 	ldrb.w	fp, [r5, #-3]
 800f010:	ed54 3a08 	vldr	s7, [r4, #-32]	; 0xffffffe0
 800f014:	ed14 4a06 	vldr	s8, [r4, #-24]	; 0xffffffe8
 800f018:	ed54 4a05 	vldr	s9, [r4, #-20]	; 0xffffffec
 800f01c:	ed14 5a04 	vldr	s10, [r4, #-16]
 800f020:	ed54 5a03 	vldr	s11, [r4, #-12]
 800f024:	ed14 6a02 	vldr	s12, [r4, #-8]
 800f028:	ed54 6a01 	vldr	s13, [r4, #-4]
 800f02c:	f006 0a0f 	and.w	sl, r6, #15
 800f030:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800f034:	edda 7a00 	vldr	s15, [sl]
 800f038:	f815 ac02 	ldrb.w	sl, [r5, #-2]
 800f03c:	0936      	lsrs	r6, r6, #4
 800f03e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f042:	ee67 7a83 	vmul.f32	s15, s15, s6
 800f046:	ed96 3a00 	vldr	s6, [r6]
 800f04a:	ea4f 161b 	mov.w	r6, fp, lsr #4
 800f04e:	eee3 7a23 	vfma.f32	s15, s6, s7
 800f052:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f056:	f00b 0b0f 	and.w	fp, fp, #15
 800f05a:	edd6 3a00 	vldr	s7, [r6]
 800f05e:	f815 6c01 	ldrb.w	r6, [r5, #-1]
 800f062:	eee3 7a84 	vfma.f32	s15, s7, s8
 800f066:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800f06a:	3504      	adds	r5, #4
 800f06c:	ed9b 4a00 	vldr	s8, [fp]
 800f070:	ea4f 1b1a 	mov.w	fp, sl, lsr #4
 800f074:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f078:	eb02 0b8b 	add.w	fp, r2, fp, lsl #2
 800f07c:	f00a 0a0f 	and.w	sl, sl, #15
 800f080:	eddb 4a00 	vldr	s9, [fp]
 800f084:	eee4 7a85 	vfma.f32	s15, s9, s10
 800f088:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800f08c:	45ae      	cmp	lr, r5
 800f08e:	ed9a 5a00 	vldr	s10, [sl]
 800f092:	ea4f 1a16 	mov.w	sl, r6, lsr #4
 800f096:	eee5 7a25 	vfma.f32	s15, s10, s11
 800f09a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800f09e:	f006 060f 	and.w	r6, r6, #15
 800f0a2:	edda 5a00 	vldr	s11, [sl]
 800f0a6:	eee5 7a86 	vfma.f32	s15, s11, s12
 800f0aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f0ae:	f104 0420 	add.w	r4, r4, #32
 800f0b2:	ed96 6a00 	vldr	s12, [r6]
 800f0b6:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f0ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f0be:	d1a1      	bne.n	800f004 <ai_dict4_dot_array_f32+0x28>
 800f0c0:	4449      	add	r1, r9
 800f0c2:	eb03 1348 	add.w	r3, r3, r8, lsl #5
 800f0c6:	459c      	cmp	ip, r3
 800f0c8:	d92d      	bls.n	800f126 <ai_dict4_dot_array_f32+0x14a>
 800f0ca:	f10c 0c07 	add.w	ip, ip, #7
 800f0ce:	f103 0508 	add.w	r5, r3, #8
 800f0d2:	ebac 0c05 	sub.w	ip, ip, r5
 800f0d6:	f02c 0407 	bic.w	r4, ip, #7
 800f0da:	f103 0810 	add.w	r8, r3, #16
 800f0de:	44a0      	add	r8, r4
 800f0e0:	f101 3eff 	add.w	lr, r1, #4294967295
 800f0e4:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 800f0e8:	ed15 6a01 	vldr	s12, [r5, #-4]
 800f0ec:	ed55 6a02 	vldr	s13, [r5, #-8]
 800f0f0:	f004 060f 	and.w	r6, r4, #15
 800f0f4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f0f8:	0924      	lsrs	r4, r4, #4
 800f0fa:	edd6 7a00 	vldr	s15, [r6]
 800f0fe:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800f102:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f106:	ed94 6a00 	vldr	s12, [r4]
 800f10a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800f10e:	3508      	adds	r5, #8
 800f110:	45a8      	cmp	r8, r5
 800f112:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f116:	d1e5      	bne.n	800f0e4 <ai_dict4_dot_array_f32+0x108>
 800f118:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800f11c:	f10c 0c01 	add.w	ip, ip, #1
 800f120:	4461      	add	r1, ip
 800f122:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800f126:	07fc      	lsls	r4, r7, #31
 800f128:	d509      	bpl.n	800f13e <ai_dict4_dot_array_f32+0x162>
 800f12a:	7809      	ldrb	r1, [r1, #0]
 800f12c:	edd3 7a00 	vldr	s15, [r3]
 800f130:	090b      	lsrs	r3, r1, #4
 800f132:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800f136:	edd2 6a00 	vldr	s13, [r2]
 800f13a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800f13e:	edd0 7a00 	vldr	s15, [r0]
 800f142:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f146:	ed80 7a00 	vstr	s14, [r0]
 800f14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f14e:	ed9f 7a01 	vldr	s14, [pc, #4]	; 800f154 <ai_dict4_dot_array_f32+0x178>
 800f152:	e7b8      	b.n	800f0c6 <ai_dict4_dot_array_f32+0xea>
 800f154:	00000000 	.word	0x00000000

0800f158 <ai_dict_decompress_f32>:
 800f158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f15c:	9f08      	ldr	r7, [sp, #32]
 800f15e:	2b04      	cmp	r3, #4
 800f160:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 800f164:	d00e      	beq.n	800f184 <ai_dict_decompress_f32+0x2c>
 800f166:	2b08      	cmp	r3, #8
 800f168:	d10a      	bne.n	800f180 <ai_dict_decompress_f32+0x28>
 800f16a:	42b8      	cmp	r0, r7
 800f16c:	d208      	bcs.n	800f180 <ai_dict_decompress_f32+0x28>
 800f16e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f172:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	f840 3b04 	str.w	r3, [r0], #4
 800f17c:	4287      	cmp	r7, r0
 800f17e:	d8f6      	bhi.n	800f16e <ai_dict_decompress_f32+0x16>
 800f180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f184:	9b07      	ldr	r3, [sp, #28]
 800f186:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 800f18a:	ea4f 09cc 	mov.w	r9, ip, lsl #3
 800f18e:	f10c 38ff 	add.w	r8, ip, #4294967295
 800f192:	f003 0e01 	and.w	lr, r3, #1
 800f196:	42b8      	cmp	r0, r7
 800f198:	d2f2      	bcs.n	800f180 <ai_dict_decompress_f32+0x28>
 800f19a:	f1bc 0f00 	cmp.w	ip, #0
 800f19e:	d01a      	beq.n	800f1d6 <ai_dict_decompress_f32+0x7e>
 800f1a0:	f100 0508 	add.w	r5, r0, #8
 800f1a4:	1e4c      	subs	r4, r1, #1
 800f1a6:	eb01 0608 	add.w	r6, r1, r8
 800f1aa:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f1ae:	091b      	lsrs	r3, r3, #4
 800f1b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f1b4:	42a6      	cmp	r6, r4
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	f845 3c08 	str.w	r3, [r5, #-8]
 800f1bc:	7823      	ldrb	r3, [r4, #0]
 800f1be:	f003 030f 	and.w	r3, r3, #15
 800f1c2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f1c6:	f105 0508 	add.w	r5, r5, #8
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	f845 3c0c 	str.w	r3, [r5, #-12]
 800f1d0:	d1eb      	bne.n	800f1aa <ai_dict_decompress_f32+0x52>
 800f1d2:	4461      	add	r1, ip
 800f1d4:	4448      	add	r0, r9
 800f1d6:	f1be 0f00 	cmp.w	lr, #0
 800f1da:	d103      	bne.n	800f1e4 <ai_dict_decompress_f32+0x8c>
 800f1dc:	4287      	cmp	r7, r0
 800f1de:	d8dc      	bhi.n	800f19a <ai_dict_decompress_f32+0x42>
 800f1e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1e4:	780b      	ldrb	r3, [r1, #0]
 800f1e6:	091b      	lsrs	r3, r3, #4
 800f1e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f1ec:	3101      	adds	r1, #1
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	6003      	str	r3, [r0, #0]
 800f1f2:	3004      	adds	r0, #4
 800f1f4:	e7cf      	b.n	800f196 <ai_dict_decompress_f32+0x3e>
 800f1f6:	bf00      	nop

0800f1f8 <forward_conv2d>:
 800f1f8:	6983      	ldr	r3, [r0, #24]
 800f1fa:	881a      	ldrh	r2, [r3, #0]
 800f1fc:	2a00      	cmp	r2, #0
 800f1fe:	f000 87c7 	beq.w	8010190 <forward_conv2d+0xf98>
 800f202:	685b      	ldr	r3, [r3, #4]
 800f204:	6859      	ldr	r1, [r3, #4]
 800f206:	b101      	cbz	r1, 800f20a <forward_conv2d+0x12>
 800f208:	6809      	ldr	r1, [r1, #0]
 800f20a:	2a01      	cmp	r2, #1
 800f20c:	f240 87bd 	bls.w	801018a <forward_conv2d+0xf92>
 800f210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f214:	ed2d 8b10 	vpush	{d8-d15}
 800f218:	b0cb      	sub	sp, #300	; 0x12c
 800f21a:	691c      	ldr	r4, [r3, #16]
 800f21c:	af02      	add	r7, sp, #8
 800f21e:	2c00      	cmp	r4, #0
 800f220:	f000 87af 	beq.w	8010182 <forward_conv2d+0xf8a>
 800f224:	6824      	ldr	r4, [r4, #0]
 800f226:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 800f22a:	2a02      	cmp	r2, #2
 800f22c:	f000 87a4 	beq.w	8010178 <forward_conv2d+0xf80>
 800f230:	69dd      	ldr	r5, [r3, #28]
 800f232:	2d00      	cmp	r5, #0
 800f234:	f000 8799 	beq.w	801016a <forward_conv2d+0xf72>
 800f238:	f113 0218 	adds.w	r2, r3, #24
 800f23c:	682c      	ldr	r4, [r5, #0]
 800f23e:	d004      	beq.n	800f24a <forward_conv2d+0x52>
 800f240:	8b1b      	ldrh	r3, [r3, #24]
 800f242:	2b01      	cmp	r3, #1
 800f244:	f240 87a6 	bls.w	8010194 <forward_conv2d+0xf9c>
 800f248:	686a      	ldr	r2, [r5, #4]
 800f24a:	68ab      	ldr	r3, [r5, #8]
 800f24c:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 800f250:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800f254:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800f258:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800f25c:	68ce      	ldr	r6, [r1, #12]
 800f25e:	69a1      	ldr	r1, [r4, #24]
 800f260:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 800f264:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800f268:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800f26c:	f8de 1004 	ldr.w	r1, [lr, #4]
 800f270:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 800f274:	f8de 100c 	ldr.w	r1, [lr, #12]
 800f278:	6479      	str	r1, [r7, #68]	; 0x44
 800f27a:	f8de 1008 	ldr.w	r1, [lr, #8]
 800f27e:	f8c7 1114 	str.w	r1, [r7, #276]	; 0x114
 800f282:	6871      	ldr	r1, [r6, #4]
 800f284:	f8c7 1104 	str.w	r1, [r7, #260]	; 0x104
 800f288:	68f1      	ldr	r1, [r6, #12]
 800f28a:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 800f28e:	68b1      	ldr	r1, [r6, #8]
 800f290:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 800f294:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800f298:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800f29c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f2a0:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
 800f2a4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800f2a8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800f2aa:	6889      	ldr	r1, [r1, #8]
 800f2ac:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 800f2b0:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800f2b2:	e9d5 ba00 	ldrd	fp, sl, [r5]
 800f2b6:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800f2ba:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800f2bc:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 800f2c0:	69c1      	ldr	r1, [r0, #28]
 800f2c2:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 800f2c6:	e9d0 980c 	ldrd	r9, r8, [r0, #48]	; 0x30
 800f2ca:	2a00      	cmp	r2, #0
 800f2cc:	f000 8749 	beq.w	8010162 <forward_conv2d+0xf6a>
 800f2d0:	6992      	ldr	r2, [r2, #24]
 800f2d2:	6892      	ldr	r2, [r2, #8]
 800f2d4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800f2d8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800f2dc:	6992      	ldr	r2, [r2, #24]
 800f2de:	6892      	ldr	r2, [r2, #8]
 800f2e0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800f2e4:	4606      	mov	r6, r0
 800f2e6:	6a00      	ldr	r0, [r0, #32]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	f000 872c 	beq.w	8010146 <forward_conv2d+0xf4e>
 800f2ee:	699a      	ldr	r2, [r3, #24]
 800f2f0:	2a00      	cmp	r2, #0
 800f2f2:	f000 8594 	beq.w	800fe1e <forward_conv2d+0xc26>
 800f2f6:	695b      	ldr	r3, [r3, #20]
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800f2fe:	e9d2 0100 	ldrd	r0, r1, [r2]
 800f302:	6893      	ldr	r3, [r2, #8]
 800f304:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800f308:	f002 fefa 	bl	8012100 <ai_array_get_byte_size>
 800f30c:	69a3      	ldr	r3, [r4, #24]
 800f30e:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
 800f312:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800f31c:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f31e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800f322:	f3c3 5441 	ubfx	r4, r3, #21, #2
 800f326:	f3c3 15c6 	ubfx	r5, r3, #7, #7
 800f32a:	fa1f f088 	uxth.w	r0, r8
 800f32e:	4125      	asrs	r5, r4
 800f330:	3801      	subs	r0, #1
 800f332:	1e4c      	subs	r4, r1, #1
 800f334:	fb04 1100 	mla	r1, r4, r0, r1
 800f338:	6439      	str	r1, [r7, #64]	; 0x40
 800f33a:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 800f33e:	f8df c3a0 	ldr.w	ip, [pc, #928]	; 800f6e0 <forward_conv2d+0x4e8>
 800f342:	fa1f f289 	uxth.w	r2, r9
 800f346:	3a01      	subs	r2, #1
 800f348:	1e48      	subs	r0, r1, #1
 800f34a:	fb00 1102 	mla	r1, r0, r2, r1
 800f34e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f352:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800f356:	f3c3 4343 	ubfx	r3, r3, #17, #4
 800f35a:	4610      	mov	r0, r2
 800f35c:	2a00      	cmp	r2, #0
 800f35e:	bf08      	it	eq
 800f360:	4660      	moveq	r0, ip
 800f362:	2b04      	cmp	r3, #4
 800f364:	b2ad      	uxth	r5, r5
 800f366:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 800f36a:	f000 8533 	beq.w	800fdd4 <forward_conv2d+0xbdc>
 800f36e:	2b08      	cmp	r3, #8
 800f370:	f000 8530 	beq.w	800fdd4 <forward_conv2d+0xbdc>
 800f374:	fa1f f38b 	uxth.w	r3, fp
 800f378:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800f37c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f380:	425b      	negs	r3, r3
 800f382:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f386:	2900      	cmp	r1, #0
 800f388:	f000 8242 	beq.w	800f810 <forward_conv2d+0x618>
 800f38c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f390:	f8d7 50c8 	ldr.w	r5, [r7, #200]	; 0xc8
 800f394:	ed9f 8ad1 	vldr	s16, [pc, #836]	; 800f6dc <forward_conv2d+0x4e4>
 800f398:	fb00 f305 	mul.w	r3, r0, r5
 800f39c:	f8b7 0100 	ldrh.w	r0, [r7, #256]	; 0x100
 800f3a0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 800f3a4:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800f3a8:	f8b7 50f0 	ldrh.w	r5, [r7, #240]	; 0xf0
 800f3ac:	663d      	str	r5, [r7, #96]	; 0x60
 800f3ae:	fa0f f288 	sxth.w	r2, r8
 800f3b2:	fb03 f400 	mul.w	r4, r3, r0
 800f3b6:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 800f3ba:	fa1f f18a 	uxth.w	r1, sl
 800f3be:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f3c2:	67bc      	str	r4, [r7, #120]	; 0x78
 800f3c4:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 800f3c8:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800f3cc:	4249      	negs	r1, r1
 800f3ce:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800f3d2:	0092      	lsls	r2, r2, #2
 800f3d4:	0081      	lsls	r1, r0, #2
 800f3d6:	4605      	mov	r5, r0
 800f3d8:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 800f3dc:	fb04 f200 	mul.w	r2, r4, r0
 800f3e0:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 800f3e4:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800f3e8:	fb01 fc00 	mul.w	ip, r1, r0
 800f3ec:	f8c7 c05c 	str.w	ip, [r7, #92]	; 0x5c
 800f3f0:	fb01 fc03 	mul.w	ip, r1, r3
 800f3f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3f6:	f8c7 c038 	str.w	ip, [r7, #56]	; 0x38
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800f400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f404:	fa0f f689 	sxth.w	r6, r9
 800f408:	469c      	mov	ip, r3
 800f40a:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 800f40e:	4633      	mov	r3, r6
 800f410:	fb0c f606 	mul.w	r6, ip, r6
 800f414:	677e      	str	r6, [r7, #116]	; 0x74
 800f416:	4666      	mov	r6, ip
 800f418:	fb04 f606 	mul.w	r6, r4, r6
 800f41c:	4686      	mov	lr, r0
 800f41e:	4620      	mov	r0, r4
 800f420:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 800f424:	62be      	str	r6, [r7, #40]	; 0x28
 800f426:	fb01 f404 	mul.w	r4, r1, r4
 800f42a:	fb03 f605 	mul.w	r6, r3, r5
 800f42e:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 800f430:	66bc      	str	r4, [r7, #104]	; 0x68
 800f432:	460b      	mov	r3, r1
 800f434:	4604      	mov	r4, r0
 800f436:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800f43a:	627e      	str	r6, [r7, #36]	; 0x24
 800f43c:	fb05 f404 	mul.w	r4, r5, r4
 800f440:	617c      	str	r4, [r7, #20]
 800f442:	460c      	mov	r4, r1
 800f444:	fb04 f403 	mul.w	r4, r4, r3
 800f448:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800f44c:	65bc      	str	r4, [r7, #88]	; 0x58
 800f44e:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 800f452:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800f456:	fb01 f104 	mul.w	r1, r1, r4
 800f45a:	61b9      	str	r1, [r7, #24]
 800f45c:	0091      	lsls	r1, r2, #2
 800f45e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f462:	64b9      	str	r1, [r7, #72]	; 0x48
 800f464:	fb00 f202 	mul.w	r2, r0, r2
 800f468:	0081      	lsls	r1, r0, #2
 800f46a:	61f9      	str	r1, [r7, #28]
 800f46c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800f470:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 800f474:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 800f478:	011a      	lsls	r2, r3, #4
 800f47a:	00db      	lsls	r3, r3, #3
 800f47c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800f480:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800f484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f488:	f101 4178 	add.w	r1, r1, #4160749568	; 0xf8000000
 800f48c:	2300      	movs	r3, #0
 800f48e:	63f9      	str	r1, [r7, #60]	; 0x3c
 800f490:	607a      	str	r2, [r7, #4]
 800f492:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f494:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800f498:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f49c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f49e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800f4a0:	2900      	cmp	r1, #0
 800f4a2:	441a      	add	r2, r3
 800f4a4:	bfb4      	ite	lt
 800f4a6:	2100      	movlt	r1, #0
 800f4a8:	2300      	movge	r3, #0
 800f4aa:	4282      	cmp	r2, r0
 800f4ac:	bf28      	it	cs
 800f4ae:	4602      	movcs	r2, r0
 800f4b0:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800f4b4:	2801      	cmp	r0, #1
 800f4b6:	f000 8320 	beq.w	800fafa <forward_conv2d+0x902>
 800f4ba:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800f4be:	4281      	cmp	r1, r0
 800f4c0:	f000 81c3 	beq.w	800f84a <forward_conv2d+0x652>
 800f4c4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800f4c8:	2900      	cmp	r1, #0
 800f4ca:	f000 8182 	beq.w	800f7d2 <forward_conv2d+0x5da>
 800f4ce:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 800f4d2:	fb93 f1f0 	sdiv	r1, r3, r0
 800f4d6:	fb00 3111 	mls	r1, r0, r1, r3
 800f4da:	1a41      	subs	r1, r0, r1
 800f4dc:	1ad2      	subs	r2, r2, r3
 800f4de:	fb91 f5f0 	sdiv	r5, r1, r0
 800f4e2:	fb00 1515 	mls	r5, r0, r5, r1
 800f4e6:	1b52      	subs	r2, r2, r5
 800f4e8:	4601      	mov	r1, r0
 800f4ea:	4402      	add	r2, r0
 800f4ec:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800f4f0:	f8d7 60c8 	ldr.w	r6, [r7, #200]	; 0xc8
 800f4f4:	f8c7 b020 	str.w	fp, [r7, #32]
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800f4fe:	fbb4 f4f0 	udiv	r4, r4, r0
 800f502:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f504:	3a01      	subs	r2, #1
 800f506:	fb92 f8f1 	sdiv	r8, r2, r1
 800f50a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f50e:	eba0 0c04 	sub.w	ip, r0, r4
 800f512:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f516:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800f51a:	4614      	mov	r4, r2
 800f51c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800f520:	fbb4 f2f2 	udiv	r2, r4, r2
 800f524:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 800f528:	657a      	str	r2, [r7, #84]	; 0x54
 800f52a:	441d      	add	r5, r3
 800f52c:	fb0e f000 	mul.w	r0, lr, r0
 800f530:	440b      	add	r3, r1
 800f532:	eba6 0608 	sub.w	r6, r6, r8
 800f536:	fb04 f505 	mul.w	r5, r4, r5
 800f53a:	3b01      	subs	r3, #1
 800f53c:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 800f540:	fb93 f3f4 	sdiv	r3, r3, r4
 800f544:	fb00 f406 	mul.w	r4, r0, r6
 800f548:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800f54c:	66fd      	str	r5, [r7, #108]	; 0x6c
 800f54e:	0091      	lsls	r1, r2, #2
 800f550:	fb00 f003 	mul.w	r0, r0, r3
 800f554:	f8c7 108c 	str.w	r1, [r7, #140]	; 0x8c
 800f558:	6538      	str	r0, [r7, #80]	; 0x50
 800f55a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f55e:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 800f562:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 800f566:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 800f56a:	1ac3      	subs	r3, r0, r3
 800f56c:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 800f570:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f574:	008b      	lsls	r3, r1, #2
 800f576:	637b      	str	r3, [r7, #52]	; 0x34
 800f578:	00d3      	lsls	r3, r2, #3
 800f57a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f57c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f580:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f584:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f588:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f58c:	2300      	movs	r3, #0
 800f58e:	ea4f 098c 	mov.w	r9, ip, lsl #2
 800f592:	673b      	str	r3, [r7, #112]	; 0x70
 800f594:	46c2      	mov	sl, r8
 800f596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f59a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f59e:	eb03 0c02 	add.w	ip, r3, r2
 800f5a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	f2c0 813b 	blt.w	800f822 <forward_conv2d+0x62a>
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	6efc      	ldr	r4, [r7, #108]	; 0x6c
 800f5b0:	f8d7 80a4 	ldr.w	r8, [r7, #164]	; 0xa4
 800f5b4:	4605      	mov	r5, r0
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f5bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800f5c0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f5c4:	4413      	add	r3, r2
 800f5c6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800f5ca:	440a      	add	r2, r1
 800f5cc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800f5d0:	428b      	cmp	r3, r1
 800f5d2:	bf94      	ite	ls
 800f5d4:	ebc6 0303 	rsbls	r3, r6, r3
 800f5d8:	ebc6 0301 	rsbhi	r3, r6, r1
 800f5dc:	4415      	add	r5, r2
 800f5de:	1a1b      	subs	r3, r3, r0
 800f5e0:	00a4      	lsls	r4, r4, #2
 800f5e2:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 800f5e6:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800f5ea:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 800f5ee:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 800f5f0:	4602      	mov	r2, r0
 800f5f2:	2800      	cmp	r0, #0
 800f5f4:	bf08      	it	eq
 800f5f6:	4662      	moveq	r2, ip
 800f5f8:	f108 31ff 	add.w	r1, r8, #4294967295
 800f5fc:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800f600:	fb91 f1f0 	sdiv	r1, r1, r0
 800f604:	4429      	add	r1, r5
 800f606:	f8d7 5108 	ldr.w	r5, [r7, #264]	; 0x108
 800f60a:	fb0e 5501 	mla	r5, lr, r1, r5
 800f60e:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 800f612:	4403      	add	r3, r0
 800f614:	fb01 6104 	mla	r1, r1, r4, r6
 800f618:	3b01      	subs	r3, #1
 800f61a:	fb93 f6f0 	sdiv	r6, r3, r0
 800f61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f620:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800f624:	fb06 3110 	mls	r1, r6, r0, r3
 800f628:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f62c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800f630:	4562      	cmp	r2, ip
 800f632:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800f636:	bf08      	it	eq
 800f638:	eeb0 6a48 	vmoveq.f32	s12, s16
 800f63c:	1b9b      	subs	r3, r3, r6
 800f63e:	2800      	cmp	r0, #0
 800f640:	d076      	beq.n	800f730 <forward_conv2d+0x538>
 800f642:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800f646:	fb0e f803 	mul.w	r8, lr, r3
 800f64a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f64c:	fb00 fb01 	mul.w	fp, r0, r1
 800f650:	2b00      	cmp	r3, #0
 800f652:	d06d      	beq.n	800f730 <forward_conv2d+0x538>
 800f654:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f658:	18d3      	adds	r3, r2, r3
 800f65a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f65e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f662:	1a9b      	subs	r3, r3, r2
 800f664:	633b      	str	r3, [r7, #48]	; 0x30
 800f666:	2300      	movs	r3, #0
 800f668:	667b      	str	r3, [r7, #100]	; 0x64
 800f66a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f670:	4413      	add	r3, r2
 800f672:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f674:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800f678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f67a:	4413      	add	r3, r2
 800f67c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f680:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f684:	ecf3 7a01 	vldmia	r3!, {s15}
 800f688:	f1ba 0f00 	cmp.w	sl, #0
 800f68c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800f690:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f694:	f340 80c3 	ble.w	800f81e <forward_conv2d+0x626>
 800f698:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800f69c:	f04f 0c00 	mov.w	ip, #0
 800f6a0:	2e00      	cmp	r6, #0
 800f6a2:	dd1f      	ble.n	800f6e4 <forward_conv2d+0x4ec>
 800f6a4:	2100      	movs	r1, #0
 800f6a6:	eb00 040e 	add.w	r4, r0, lr
 800f6aa:	4284      	cmp	r4, r0
 800f6ac:	d910      	bls.n	800f6d0 <forward_conv2d+0x4d8>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	462a      	mov	r2, r5
 800f6b2:	ecb3 7a01 	vldmia	r3!, {s14}
 800f6b6:	ecf2 6a01 	vldmia	r2!, {s13}
 800f6ba:	429c      	cmp	r4, r3
 800f6bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800f6c0:	d8f7      	bhi.n	800f6b2 <forward_conv2d+0x4ba>
 800f6c2:	43c3      	mvns	r3, r0
 800f6c4:	441c      	add	r4, r3
 800f6c6:	f024 0403 	bic.w	r4, r4, #3
 800f6ca:	3404      	adds	r4, #4
 800f6cc:	4425      	add	r5, r4
 800f6ce:	4420      	add	r0, r4
 800f6d0:	3101      	adds	r1, #1
 800f6d2:	428e      	cmp	r6, r1
 800f6d4:	4448      	add	r0, r9
 800f6d6:	d1e6      	bne.n	800f6a6 <forward_conv2d+0x4ae>
 800f6d8:	e004      	b.n	800f6e4 <forward_conv2d+0x4ec>
 800f6da:	bf00      	nop
 800f6dc:	00000000 	.word	0x00000000
 800f6e0:	0800ee3d 	.word	0x0800ee3d
 800f6e4:	f10c 0c01 	add.w	ip, ip, #1
 800f6e8:	45e2      	cmp	sl, ip
 800f6ea:	4458      	add	r0, fp
 800f6ec:	4445      	add	r5, r8
 800f6ee:	d1d7      	bne.n	800f6a0 <forward_conv2d+0x4a8>
 800f6f0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800f6f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f6f8:	441d      	add	r5, r3
 800f6fa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f6fe:	ece3 7a01 	vstmia	r3!, {s15}
 800f702:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f70a:	4293      	cmp	r3, r2
 800f70c:	d1b8      	bne.n	800f680 <forward_conv2d+0x488>
 800f70e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800f712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f714:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f716:	4472      	add	r2, lr
 800f718:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800f71c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f71e:	1a52      	subs	r2, r2, r1
 800f720:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800f724:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 800f728:	3301      	adds	r3, #1
 800f72a:	429a      	cmp	r2, r3
 800f72c:	667b      	str	r3, [r7, #100]	; 0x64
 800f72e:	d19c      	bne.n	800f66a <forward_conv2d+0x472>
 800f730:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800f734:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800f738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f73a:	4608      	mov	r0, r1
 800f73c:	4410      	add	r0, r2
 800f73e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800f742:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800f746:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 800f74a:	4401      	add	r1, r0
 800f74c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 800f750:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800f754:	1a8a      	subs	r2, r1, r2
 800f756:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 800f75a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f75e:	3301      	adds	r3, #1
 800f760:	429a      	cmp	r2, r3
 800f762:	673b      	str	r3, [r7, #112]	; 0x70
 800f764:	f47f af17 	bne.w	800f596 <forward_conv2d+0x39e>
 800f768:	f8d7 b020 	ldr.w	fp, [r7, #32]
 800f76c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f770:	b37b      	cbz	r3, 800f7d2 <forward_conv2d+0x5da>
 800f772:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 800f776:	f8d7 6088 	ldr.w	r6, [r7, #136]	; 0x88
 800f77a:	f8d7 80dc 	ldr.w	r8, [r7, #220]	; 0xdc
 800f77e:	f8d7 90e8 	ldr.w	r9, [r7, #232]	; 0xe8
 800f782:	2500      	movs	r5, #0
 800f784:	46a2      	mov	sl, r4
 800f786:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800f78a:	f8d7 40a8 	ldr.w	r4, [r7, #168]	; 0xa8
 800f78e:	f8c2 a008 	str.w	sl, [r2, #8]
 800f792:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800f796:	4633      	mov	r3, r6
 800f798:	4641      	mov	r1, r8
 800f79a:	4416      	add	r6, r2
 800f79c:	4640      	mov	r0, r8
 800f79e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800f7a2:	47a0      	blx	r4
 800f7a4:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800f7a8:	4492      	add	sl, r2
 800f7aa:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800f7ae:	eba6 0309 	sub.w	r3, r6, r9
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	bfa8      	it	ge
 800f7b6:	464e      	movge	r6, r9
 800f7b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800f7bc:	3501      	adds	r5, #1
 800f7be:	42ab      	cmp	r3, r5
 800f7c0:	d1e1      	bne.n	800f786 <forward_conv2d+0x58e>
 800f7c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f7c6:	69ba      	ldr	r2, [r7, #24]
 800f7c8:	f8c7 6088 	str.w	r6, [r7, #136]	; 0x88
 800f7cc:	4413      	add	r3, r2
 800f7ce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800f7d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f7d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f7d8:	699b      	ldr	r3, [r3, #24]
 800f7da:	68da      	ldr	r2, [r3, #12]
 800f7dc:	609a      	str	r2, [r3, #8]
 800f7de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f7e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7e4:	4610      	mov	r0, r2
 800f7e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f7ea:	4418      	add	r0, r3
 800f7ec:	1ad3      	subs	r3, r2, r3
 800f7ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f7f2:	697a      	ldr	r2, [r7, #20]
 800f7f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f7f8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800f7fc:	4413      	add	r3, r2
 800f7fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f802:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f806:	3101      	adds	r1, #1
 800f808:	428b      	cmp	r3, r1
 800f80a:	67f9      	str	r1, [r7, #124]	; 0x7c
 800f80c:	f47f ae42 	bne.w	800f494 <forward_conv2d+0x29c>
 800f810:	f507 7792 	add.w	r7, r7, #292	; 0x124
 800f814:	46bd      	mov	sp, r7
 800f816:	ecbd 8b10 	vpop	{d8-d15}
 800f81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f81e:	461a      	mov	r2, r3
 800f820:	e768      	b.n	800f6f4 <forward_conv2d+0x4fc>
 800f822:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800f826:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800f82a:	fb90 f3f2 	sdiv	r3, r0, r2
 800f82e:	fb02 0313 	mls	r3, r2, r3, r0
 800f832:	1ad3      	subs	r3, r2, r3
 800f834:	4605      	mov	r5, r0
 800f836:	fb93 f0f2 	sdiv	r0, r3, r2
 800f83a:	fb02 3010 	mls	r0, r2, r0, r3
 800f83e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f840:	462e      	mov	r6, r5
 800f842:	18c4      	adds	r4, r0, r3
 800f844:	eb02 0805 	add.w	r8, r2, r5
 800f848:	e6b6      	b.n	800f5b8 <forward_conv2d+0x3c0>
 800f84a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800f84c:	2901      	cmp	r1, #1
 800f84e:	f47f ae39 	bne.w	800f4c4 <forward_conv2d+0x2cc>
 800f852:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 800f856:	2900      	cmp	r1, #0
 800f858:	d0bb      	beq.n	800f7d2 <forward_conv2d+0x5da>
 800f85a:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 800f85e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800f862:	f8d7 6110 	ldr.w	r6, [r7, #272]	; 0x110
 800f866:	fbb1 f5f0 	udiv	r5, r1, r0
 800f86a:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800f86e:	f8d7 a004 	ldr.w	sl, [r7, #4]
 800f872:	633d      	str	r5, [r7, #48]	; 0x30
 800f874:	1ad2      	subs	r2, r2, r3
 800f876:	1a8c      	subs	r4, r1, r2
 800f878:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800f87c:	00b2      	lsls	r2, r6, #2
 800f87e:	fb02 f204 	mul.w	r2, r2, r4
 800f882:	ebc5 7085 	rsb	r0, r5, r5, lsl #30
 800f886:	ebc5 7145 	rsb	r1, r5, r5, lsl #29
 800f88a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f88c:	0082      	lsls	r2, r0, #2
 800f88e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f890:	00ca      	lsls	r2, r1, #3
 800f892:	603a      	str	r2, [r7, #0]
 800f894:	00aa      	lsls	r2, r5, #2
 800f896:	60ba      	str	r2, [r7, #8]
 800f898:	fb03 f206 	mul.w	r2, r3, r6
 800f89c:	673a      	str	r2, [r7, #112]	; 0x70
 800f89e:	69fa      	ldr	r2, [r7, #28]
 800f8a0:	fb02 f303 	mul.w	r3, r2, r3
 800f8a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f8a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f8aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800f8ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800f8b2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800f8b6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800f8ba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800f8be:	2300      	movs	r3, #0
 800f8c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800f8c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	f2c0 8110 	blt.w	800faee <forward_conv2d+0x8f6>
 800f8ce:	2100      	movs	r1, #0
 800f8d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f8d2:	460a      	mov	r2, r1
 800f8d4:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 800f8d8:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800f8dc:	f8d7 5080 	ldr.w	r5, [r7, #128]	; 0x80
 800f8e0:	4420      	add	r0, r4
 800f8e2:	4408      	add	r0, r1
 800f8e4:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 800f8e8:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 800f8ec:	190c      	adds	r4, r1, r4
 800f8ee:	42ac      	cmp	r4, r5
 800f8f0:	bf28      	it	cs
 800f8f2:	462c      	movcs	r4, r5
 800f8f4:	f8d7 50fc 	ldr.w	r5, [r7, #252]	; 0xfc
 800f8f8:	0080      	lsls	r0, r0, #2
 800f8fa:	1aa4      	subs	r4, r4, r2
 800f8fc:	2d00      	cmp	r5, #0
 800f8fe:	f000 80e7 	beq.w	800fad0 <forward_conv2d+0x8d8>
 800f902:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800f906:	f8d7 611c 	ldr.w	r6, [r7, #284]	; 0x11c
 800f90a:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800f90e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800f912:	42b5      	cmp	r5, r6
 800f914:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 800f918:	eba3 0204 	sub.w	r2, r3, r4
 800f91c:	eba1 0104 	sub.w	r1, r1, r4
 800f920:	bf08      	it	eq
 800f922:	eef0 3a48 	vmoveq.f32	s7, s16
 800f926:	462b      	mov	r3, r5
 800f928:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 800f92a:	f8d7 60a0 	ldr.w	r6, [r7, #160]	; 0xa0
 800f92e:	4428      	add	r0, r5
 800f930:	f8d7 510c 	ldr.w	r5, [r7, #268]	; 0x10c
 800f934:	fb05 6e00 	mla	lr, r5, r0, r6
 800f938:	eb0e 000b 	add.w	r0, lr, fp
 800f93c:	4586      	cmp	lr, r0
 800f93e:	6238      	str	r0, [r7, #32]
 800f940:	f080 80a5 	bcs.w	800fa8e <forward_conv2d+0x896>
 800f944:	0092      	lsls	r2, r2, #2
 800f946:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800f94a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f94c:	fb0b f101 	mul.w	r1, fp, r1
 800f950:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800f954:	f024 0803 	bic.w	r8, r4, #3
 800f958:	2a00      	cmp	r2, #0
 800f95a:	f000 8098 	beq.w	800fa8e <forward_conv2d+0x896>
 800f95e:	f108 32ff 	add.w	r2, r8, #4294967295
 800f962:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f964:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800f968:	0892      	lsrs	r2, r2, #2
 800f96a:	3201      	adds	r2, #1
 800f96c:	4401      	add	r1, r0
 800f96e:	fb02 f00a 	mul.w	r0, r2, sl
 800f972:	6578      	str	r0, [r7, #84]	; 0x54
 800f974:	0110      	lsls	r0, r2, #4
 800f976:	0092      	lsls	r2, r2, #2
 800f978:	653a      	str	r2, [r7, #80]	; 0x50
 800f97a:	1aca      	subs	r2, r1, r3
 800f97c:	613a      	str	r2, [r7, #16]
 800f97e:	68ba      	ldr	r2, [r7, #8]
 800f980:	6678      	str	r0, [r7, #100]	; 0x64
 800f982:	4413      	add	r3, r2
 800f984:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f988:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f98e:	4413      	add	r3, r2
 800f990:	60fb      	str	r3, [r7, #12]
 800f992:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f996:	693b      	ldr	r3, [r7, #16]
 800f998:	4413      	add	r3, r2
 800f99a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f99c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f9a0:	ecf3 6a01 	vldmia	r3!, {s13}
 800f9a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f9a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800f9b2:	dd57      	ble.n	800fa64 <forward_conv2d+0x86c>
 800f9b4:	4676      	mov	r6, lr
 800f9b6:	f04f 0c00 	mov.w	ip, #0
 800f9ba:	f1b8 0f00 	cmp.w	r8, #0
 800f9be:	f340 8085 	ble.w	800facc <forward_conv2d+0x8d4>
 800f9c2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800f9c6:	f109 0310 	add.w	r3, r9, #16
 800f9ca:	18b1      	adds	r1, r6, r2
 800f9cc:	2000      	movs	r0, #0
 800f9ce:	4632      	mov	r2, r6
 800f9d0:	eb02 050b 	add.w	r5, r2, fp
 800f9d4:	ed95 7a00 	vldr	s14, [r5]
 800f9d8:	ed53 7a03 	vldr	s15, [r3, #-12]
 800f9dc:	ed92 4a00 	vldr	s8, [r2]
 800f9e0:	ed53 4a04 	vldr	s9, [r3, #-16]
 800f9e4:	ed91 5a00 	vldr	s10, [r1]
 800f9e8:	ed53 5a02 	vldr	s11, [r3, #-8]
 800f9ec:	ed13 6a01 	vldr	s12, [r3, #-4]
 800f9f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f9f4:	eb01 050b 	add.w	r5, r1, fp
 800f9f8:	eee4 7a24 	vfma.f32	s15, s8, s9
 800f9fc:	3004      	adds	r0, #4
 800f9fe:	4540      	cmp	r0, r8
 800fa00:	ed95 7a00 	vldr	s14, [r5]
 800fa04:	eee5 7a25 	vfma.f32	s15, s10, s11
 800fa08:	4452      	add	r2, sl
 800fa0a:	4451      	add	r1, sl
 800fa0c:	f103 0310 	add.w	r3, r3, #16
 800fa10:	eee7 7a06 	vfma.f32	s15, s14, s12
 800fa14:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fa18:	dbda      	blt.n	800f9d0 <forward_conv2d+0x7d8>
 800fa1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa1c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fa1e:	441e      	add	r6, r3
 800fa20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fa22:	4499      	add	r9, r3
 800fa24:	42a0      	cmp	r0, r4
 800fa26:	da11      	bge.n	800fa4c <forward_conv2d+0x854>
 800fa28:	4602      	mov	r2, r0
 800fa2a:	4633      	mov	r3, r6
 800fa2c:	4649      	mov	r1, r9
 800fa2e:	edd3 7a00 	vldr	s15, [r3]
 800fa32:	ecb1 7a01 	vldmia	r1!, {s14}
 800fa36:	3201      	adds	r2, #1
 800fa38:	42a2      	cmp	r2, r4
 800fa3a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fa3e:	445b      	add	r3, fp
 800fa40:	d1f5      	bne.n	800fa2e <forward_conv2d+0x836>
 800fa42:	1a20      	subs	r0, r4, r0
 800fa44:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800fa48:	fb00 660b 	mla	r6, r0, fp, r6
 800fa4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fa50:	441e      	add	r6, r3
 800fa52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fa56:	4499      	add	r9, r3
 800fa58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800fa5c:	f10c 0c01 	add.w	ip, ip, #1
 800fa60:	4563      	cmp	r3, ip
 800fa62:	d1aa      	bne.n	800f9ba <forward_conv2d+0x7c2>
 800fa64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa66:	4499      	add	r9, r3
 800fa68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fa6a:	ece3 6a01 	vstmia	r3!, {s13}
 800fa6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fa70:	e9d7 232b 	ldrd	r2, r3, [r7, #172]	; 0xac
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d191      	bne.n	800f99c <forward_conv2d+0x7a4>
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	683a      	ldr	r2, [r7, #0]
 800fa7c:	1a9b      	subs	r3, r3, r2
 800fa7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fa82:	6a3b      	ldr	r3, [r7, #32]
 800fa84:	f10e 0e04 	add.w	lr, lr, #4
 800fa88:	459e      	cmp	lr, r3
 800fa8a:	f4ff af7d 	bcc.w	800f988 <forward_conv2d+0x790>
 800fa8e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800fa92:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800fa96:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fa9a:	440a      	add	r2, r1
 800fa9c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800faa0:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800faa4:	4608      	mov	r0, r1
 800faa6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800faaa:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800faae:	4410      	add	r0, r2
 800fab0:	1a8a      	subs	r2, r1, r2
 800fab2:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800fab6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800faba:	f8c7 0100 	str.w	r0, [r7, #256]	; 0x100
 800fabe:	3301      	adds	r3, #1
 800fac0:	429a      	cmp	r2, r3
 800fac2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fac6:	f47f aefd 	bne.w	800f8c4 <forward_conv2d+0x6cc>
 800faca:	e64f      	b.n	800f76c <forward_conv2d+0x574>
 800facc:	2000      	movs	r0, #0
 800face:	e7a9      	b.n	800fa24 <forward_conv2d+0x82c>
 800fad0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 800fad4:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800fad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fadc:	1b19      	subs	r1, r3, r4
 800fade:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800fae2:	eef0 3a48 	vmov.f32	s7, s16
 800fae6:	1b1a      	subs	r2, r3, r4
 800fae8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800faec:	e71c      	b.n	800f928 <forward_conv2d+0x730>
 800faee:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800faf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800faf4:	460a      	mov	r2, r1
 800faf6:	440b      	add	r3, r1
 800faf8:	e6ec      	b.n	800f8d4 <forward_conv2d+0x6dc>
 800fafa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800fafc:	2801      	cmp	r0, #1
 800fafe:	f47f ace1 	bne.w	800f4c4 <forward_conv2d+0x2cc>
 800fb02:	1ad2      	subs	r2, r2, r3
 800fb04:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800fb06:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 800fb0a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800fb0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fb10:	fb00 4101 	mla	r1, r0, r1, r4
 800fb14:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 800fb18:	f8c7 1100 	str.w	r1, [r7, #256]	; 0x100
 800fb1c:	f080 8191 	bcs.w	800fe42 <forward_conv2d+0xc4a>
 800fb20:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800fb24:	2a00      	cmp	r2, #0
 800fb26:	f43f ae21 	beq.w	800f76c <forward_conv2d+0x574>
 800fb2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fb2c:	f8c7 b034 	str.w	fp, [r7, #52]	; 0x34
 800fb30:	fb02 f303 	mul.w	r3, r2, r3
 800fb34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fb36:	667b      	str	r3, [r7, #100]	; 0x64
 800fb38:	1a9b      	subs	r3, r3, r2
 800fb3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fb3c:	188b      	adds	r3, r1, r2
 800fb3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fb40:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fb44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fb48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fb4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800fb50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fb54:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fb58:	2300      	movs	r3, #0
 800fb5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fb5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	f000 8133 	beq.w	800fdce <forward_conv2d+0xbd6>
 800fb68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fb6c:	ed93 6a00 	vldr	s12, [r3]
 800fb70:	3304      	adds	r3, #4
 800fb72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fb76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	f000 8101 	beq.w	800fd82 <forward_conv2d+0xb8a>
 800fb80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fb84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fb88:	eb03 0802 	add.w	r8, r3, r2
 800fb8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fb8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fb92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fb94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fb98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fb9c:	673b      	str	r3, [r7, #112]	; 0x70
 800fb9e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800fba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fba6:	f04f 0b00 	mov.w	fp, #0
 800fbaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	f2c0 8104 	blt.w	800fdbc <forward_conv2d+0xbc4>
 800fbb4:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800fbb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800fbba:	2300      	movs	r3, #0
 800fbbc:	f8d7 40ec 	ldr.w	r4, [r7, #236]	; 0xec
 800fbc0:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800fbc4:	eb02 0c04 	add.w	ip, r2, r4
 800fbc8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800fbcc:	4540      	cmp	r0, r8
 800fbce:	bf94      	ite	ls
 800fbd0:	ebc3 0300 	rsbls	r3, r3, r0
 800fbd4:	ebc3 0308 	rsbhi	r3, r3, r8
 800fbd8:	eba2 0903 	sub.w	r9, r2, r3
 800fbdc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800fbe0:	1ac4      	subs	r4, r0, r3
 800fbe2:	fb03 f302 	mul.w	r3, r3, r2
 800fbe6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800fbea:	2a00      	cmp	r2, #0
 800fbec:	f340 80e3 	ble.w	800fdb6 <forward_conv2d+0xbbe>
 800fbf0:	f023 050f 	bic.w	r5, r3, #15
 800fbf4:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800fbf8:	1e68      	subs	r0, r5, #1
 800fbfa:	0900      	lsrs	r0, r0, #4
 800fbfc:	3001      	adds	r0, #1
 800fbfe:	fb06 f204 	mul.w	r2, r6, r4
 800fc02:	657a      	str	r2, [r7, #84]	; 0x54
 800fc04:	0102      	lsls	r2, r0, #4
 800fc06:	653a      	str	r2, [r7, #80]	; 0x50
 800fc08:	fb06 f909 	mul.w	r9, r6, r9
 800fc0c:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800fc10:	eef0 6a46 	vmov.f32	s13, s12
 800fc14:	f04f 0e00 	mov.w	lr, #0
 800fc18:	4662      	mov	r2, ip
 800fc1a:	2d00      	cmp	r5, #0
 800fc1c:	f340 80c9 	ble.w	800fdb2 <forward_conv2d+0xbba>
 800fc20:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800fc24:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800fc28:	2600      	movs	r6, #0
 800fc2a:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 800fc2e:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 800fc32:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800fc36:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800fc3a:	ed10 ea0e 	vldr	s28, [r0, #-56]	; 0xffffffc8
 800fc3e:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800fc42:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800fc46:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 800fc4a:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 800fc4e:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 800fc52:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 800fc56:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800fc5a:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800fc5e:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800fc62:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800fc66:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 800fc6a:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 800fc6e:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800fc72:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800fc76:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 800fc7a:	ed10 2a06 	vldr	s4, [r0, #-24]	; 0xffffffe8
 800fc7e:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800fc82:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 800fc86:	ed50 3a04 	vldr	s7, [r0, #-16]
 800fc8a:	ed14 4a04 	vldr	s8, [r4, #-16]
 800fc8e:	ed50 4a03 	vldr	s9, [r0, #-12]
 800fc92:	ed14 5a03 	vldr	s10, [r4, #-12]
 800fc96:	ed50 5a02 	vldr	s11, [r0, #-8]
 800fc9a:	ed14 7a02 	vldr	s14, [r4, #-8]
 800fc9e:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800fca2:	ed54 fa0e 	vldr	s31, [r4, #-56]	; 0xffffffc8
 800fca6:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800fcaa:	3610      	adds	r6, #16
 800fcac:	42ae      	cmp	r6, r5
 800fcae:	ed14 fa01 	vldr	s30, [r4, #-4]
 800fcb2:	ed50 ea01 	vldr	s29, [r0, #-4]
 800fcb6:	eeee 7a2f 	vfma.f32	s15, s28, s31
 800fcba:	f104 0440 	add.w	r4, r4, #64	; 0x40
 800fcbe:	f100 0040 	add.w	r0, r0, #64	; 0x40
 800fcc2:	eeed 7a8d 	vfma.f32	s15, s27, s26
 800fcc6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800fcca:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800fcce:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800fcd2:	eee9 7a89 	vfma.f32	s15, s19, s18
 800fcd6:	eee8 7a80 	vfma.f32	s15, s17, s0
 800fcda:	eee0 7a81 	vfma.f32	s15, s1, s2
 800fcde:	eee1 7a82 	vfma.f32	s15, s3, s4
 800fce2:	eee2 7a83 	vfma.f32	s15, s5, s6
 800fce6:	eee3 7a84 	vfma.f32	s15, s7, s8
 800fcea:	eee4 7a85 	vfma.f32	s15, s9, s10
 800fcee:	eee5 7a87 	vfma.f32	s15, s11, s14
 800fcf2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800fcf6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800fcfa:	db96      	blt.n	800fc2a <forward_conv2d+0xa32>
 800fcfc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fcfe:	4451      	add	r1, sl
 800fd00:	4452      	add	r2, sl
 800fd02:	4283      	cmp	r3, r0
 800fd04:	dd0f      	ble.n	800fd26 <forward_conv2d+0xb2e>
 800fd06:	4604      	mov	r4, r0
 800fd08:	468c      	mov	ip, r1
 800fd0a:	4616      	mov	r6, r2
 800fd0c:	ecb6 7a01 	vldmia	r6!, {s14}
 800fd10:	ecfc 7a01 	vldmia	ip!, {s15}
 800fd14:	3401      	adds	r4, #1
 800fd16:	42a3      	cmp	r3, r4
 800fd18:	eee7 6a27 	vfma.f32	s13, s14, s15
 800fd1c:	d1f6      	bne.n	800fd0c <forward_conv2d+0xb14>
 800fd1e:	1a18      	subs	r0, r3, r0
 800fd20:	0080      	lsls	r0, r0, #2
 800fd22:	4402      	add	r2, r0
 800fd24:	4401      	add	r1, r0
 800fd26:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fd28:	4402      	add	r2, r0
 800fd2a:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 800fd2e:	f10e 0e01 	add.w	lr, lr, #1
 800fd32:	4570      	cmp	r0, lr
 800fd34:	4449      	add	r1, r9
 800fd36:	f47f af70 	bne.w	800fc1a <forward_conv2d+0xa22>
 800fd3a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800fd3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd40:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800fd44:	edc3 6a00 	vstr	s13, [r3]
 800fd48:	4608      	mov	r0, r1
 800fd4a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800fd4e:	440b      	add	r3, r1
 800fd50:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800fd54:	673b      	str	r3, [r7, #112]	; 0x70
 800fd56:	4410      	add	r0, r2
 800fd58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fd5a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 800fd5e:	4608      	mov	r0, r1
 800fd60:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800fd64:	4418      	add	r0, r3
 800fd66:	1acb      	subs	r3, r1, r3
 800fd68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fd6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fd70:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 800fd74:	f10b 0b01 	add.w	fp, fp, #1
 800fd78:	455b      	cmp	r3, fp
 800fd7a:	eba8 0802 	sub.w	r8, r8, r2
 800fd7e:	f47f af14 	bne.w	800fbaa <forward_conv2d+0x9b2>
 800fd82:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800fd86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fd88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fd8c:	440a      	add	r2, r1
 800fd8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800fd92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800fd96:	3204      	adds	r2, #4
 800fd98:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800fd9c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800fda0:	3301      	adds	r3, #1
 800fda2:	429a      	cmp	r2, r3
 800fda4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fda8:	f47f aed9 	bne.w	800fb5e <forward_conv2d+0x966>
 800fdac:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
 800fdb0:	e4dc      	b.n	800f76c <forward_conv2d+0x574>
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	e7a5      	b.n	800fd02 <forward_conv2d+0xb0a>
 800fdb6:	eef0 6a46 	vmov.f32	s13, s12
 800fdba:	e7be      	b.n	800fd3a <forward_conv2d+0xb42>
 800fdbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fdc0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800fdc4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800fdc8:	eba8 0303 	sub.w	r3, r8, r3
 800fdcc:	e6f6      	b.n	800fbbc <forward_conv2d+0x9c4>
 800fdce:	eeb0 6a48 	vmov.f32	s12, s16
 800fdd2:	e6d0      	b.n	800fb76 <forward_conv2d+0x97e>
 800fdd4:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 800fdd8:	68ca      	ldr	r2, [r1, #12]
 800fdda:	2a00      	cmp	r2, #0
 800fddc:	f43f aaca 	beq.w	800f374 <forward_conv2d+0x17c>
 800fde0:	69b3      	ldr	r3, [r6, #24]
 800fde2:	8818      	ldrh	r0, [r3, #0]
 800fde4:	2803      	cmp	r0, #3
 800fde6:	f240 819f 	bls.w	8010128 <forward_conv2d+0xf30>
 800fdea:	685b      	ldr	r3, [r3, #4]
 800fdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdee:	b32b      	cbz	r3, 800fe3c <forward_conv2d+0xc44>
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	b31b      	cbz	r3, 800fe3c <forward_conv2d+0xc44>
 800fdf4:	699b      	ldr	r3, [r3, #24]
 800fdf6:	6889      	ldr	r1, [r1, #8]
 800fdf8:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 800fdfc:	9301      	str	r3, [sp, #4]
 800fdfe:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 800fe02:	9000      	str	r0, [sp, #0]
 800fe04:	462b      	mov	r3, r5
 800fe06:	4620      	mov	r0, r4
 800fe08:	f7ff f9a6 	bl	800f158 <ai_dict_decompress_f32>
 800fe0c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fe10:	2c00      	cmp	r4, #0
 800fe12:	bf18      	it	ne
 800fe14:	4623      	movne	r3, r4
 800fe16:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800fe1a:	f7ff baab 	b.w	800f374 <forward_conv2d+0x17c>
 800fe1e:	2800      	cmp	r0, #0
 800fe20:	f000 8185 	beq.w	801012e <forward_conv2d+0xf36>
 800fe24:	6883      	ldr	r3, [r0, #8]
 800fe26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800fe30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800fe34:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fe38:	f7ff ba6d 	b.w	800f316 <forward_conv2d+0x11e>
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	699b      	ldr	r3, [r3, #24]
 800fe40:	deff      	udf	#255	; 0xff
 800fe42:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800fe46:	f8c7 d064 	str.w	sp, [r7, #100]	; 0x64
 800fe4a:	320a      	adds	r2, #10
 800fe4c:	f022 0207 	bic.w	r2, r2, #7
 800fe50:	ebad 0d02 	sub.w	sp, sp, r2
 800fe54:	aa02      	add	r2, sp, #8
 800fe56:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800fe5a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 800fe5e:	2a00      	cmp	r2, #0
 800fe60:	f000 814d 	beq.w	80100fe <forward_conv2d+0xf06>
 800fe64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fe66:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 800fe6a:	fb02 f303 	mul.w	r3, r2, r3
 800fe6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fe70:	657b      	str	r3, [r7, #84]	; 0x54
 800fe72:	1a9b      	subs	r3, r3, r2
 800fe74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800fe7a:	4413      	add	r3, r2
 800fe7c:	637b      	str	r3, [r7, #52]	; 0x34
 800fe7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800fe82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800fe86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800fe8a:	673b      	str	r3, [r7, #112]	; 0x70
 800fe8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800fe90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800fe94:	2300      	movs	r3, #0
 800fe96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800fe9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fe9c:	b13b      	cbz	r3, 800feae <forward_conv2d+0xcb6>
 800fe9e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800fea2:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800fea6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 800feaa:	f002 f9ad 	bl	8012208 <memcpy>
 800feae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	f000 8135 	beq.w	8010122 <forward_conv2d+0xf2a>
 800feb8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800feba:	ed93 6a00 	vldr	s12, [r3]
 800febe:	3304      	adds	r3, #4
 800fec0:	673b      	str	r3, [r7, #112]	; 0x70
 800fec2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f000 8101 	beq.w	80100ce <forward_conv2d+0xed6>
 800fecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800fed0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fed4:	eb03 0802 	add.w	r8, r3, r2
 800fed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800feda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800fede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fee0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fee8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800feea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800feee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fef2:	f04f 0b00 	mov.w	fp, #0
 800fef6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	f2c0 8108 	blt.w	8010110 <forward_conv2d+0xf18>
 800ff00:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800ff04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff06:	2300      	movs	r3, #0
 800ff08:	f8d7 40ac 	ldr.w	r4, [r7, #172]	; 0xac
 800ff0c:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 800ff10:	eb02 0c04 	add.w	ip, r2, r4
 800ff14:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800ff18:	4540      	cmp	r0, r8
 800ff1a:	bf94      	ite	ls
 800ff1c:	ebc3 0300 	rsbls	r3, r3, r0
 800ff20:	ebc3 0308 	rsbhi	r3, r3, r8
 800ff24:	eba2 0903 	sub.w	r9, r2, r3
 800ff28:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800ff2c:	1ac4      	subs	r4, r0, r3
 800ff2e:	fb03 f302 	mul.w	r3, r3, r2
 800ff32:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800ff36:	2a00      	cmp	r2, #0
 800ff38:	f340 80e7 	ble.w	801010a <forward_conv2d+0xf12>
 800ff3c:	f023 050f 	bic.w	r5, r3, #15
 800ff40:	f8d7 6098 	ldr.w	r6, [r7, #152]	; 0x98
 800ff44:	1e68      	subs	r0, r5, #1
 800ff46:	0900      	lsrs	r0, r0, #4
 800ff48:	3001      	adds	r0, #1
 800ff4a:	fb06 f204 	mul.w	r2, r6, r4
 800ff4e:	653a      	str	r2, [r7, #80]	; 0x50
 800ff50:	0102      	lsls	r2, r0, #4
 800ff52:	633a      	str	r2, [r7, #48]	; 0x30
 800ff54:	fb06 f909 	mul.w	r9, r6, r9
 800ff58:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 800ff5c:	eef0 6a46 	vmov.f32	s13, s12
 800ff60:	f04f 0e00 	mov.w	lr, #0
 800ff64:	4662      	mov	r2, ip
 800ff66:	2d00      	cmp	r5, #0
 800ff68:	f340 80cd 	ble.w	8010106 <forward_conv2d+0xf0e>
 800ff6c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 800ff70:	f102 0040 	add.w	r0, r2, #64	; 0x40
 800ff74:	2600      	movs	r6, #0
 800ff76:	ed50 fa0f 	vldr	s31, [r0, #-60]	; 0xffffffc4
 800ff7a:	ed54 7a0f 	vldr	s15, [r4, #-60]	; 0xffffffc4
 800ff7e:	ed10 fa10 	vldr	s30, [r0, #-64]	; 0xffffffc0
 800ff82:	ed54 ea10 	vldr	s29, [r4, #-64]	; 0xffffffc0
 800ff86:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 800ff8a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 800ff8e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 800ff92:	ed54 ca0c 	vldr	s25, [r4, #-48]	; 0xffffffd0
 800ff96:	ed10 ca0c 	vldr	s24, [r0, #-48]	; 0xffffffd0
 800ff9a:	ed54 ba0b 	vldr	s23, [r4, #-44]	; 0xffffffd4
 800ff9e:	ed10 ba0b 	vldr	s22, [r0, #-44]	; 0xffffffd4
 800ffa2:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 800ffa6:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 800ffaa:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 800ffae:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 800ffb2:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 800ffb6:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 800ffba:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 800ffbe:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 800ffc2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 800ffc6:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 800ffca:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 800ffce:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 800ffd2:	ed54 3a04 	vldr	s7, [r4, #-16]
 800ffd6:	ed10 4a04 	vldr	s8, [r0, #-16]
 800ffda:	ed50 4a03 	vldr	s9, [r0, #-12]
 800ffde:	ed14 5a03 	vldr	s10, [r4, #-12]
 800ffe2:	ed54 5a02 	vldr	s11, [r4, #-8]
 800ffe6:	ed10 7a02 	vldr	s14, [r0, #-8]
 800ffea:	ee67 7aaf 	vmul.f32	s15, s15, s31
 800ffee:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 800fff2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 800fff6:	3610      	adds	r6, #16
 800fff8:	42b5      	cmp	r5, r6
 800fffa:	ed14 fa01 	vldr	s30, [r4, #-4]
 800fffe:	ed50 ea01 	vldr	s29, [r0, #-4]
 8010002:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8010006:	f104 0440 	add.w	r4, r4, #64	; 0x40
 801000a:	f100 0040 	add.w	r0, r0, #64	; 0x40
 801000e:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8010012:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8010016:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 801001a:	eeea 7a8a 	vfma.f32	s15, s21, s20
 801001e:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010022:	eee8 7a80 	vfma.f32	s15, s17, s0
 8010026:	eee0 7a81 	vfma.f32	s15, s1, s2
 801002a:	eee1 7a82 	vfma.f32	s15, s3, s4
 801002e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8010032:	eee3 7a84 	vfma.f32	s15, s7, s8
 8010036:	eee4 7a85 	vfma.f32	s15, s9, s10
 801003a:	eee5 7a87 	vfma.f32	s15, s11, s14
 801003e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8010042:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010046:	dc96      	bgt.n	800ff76 <forward_conv2d+0xd7e>
 8010048:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801004a:	4451      	add	r1, sl
 801004c:	4452      	add	r2, sl
 801004e:	4283      	cmp	r3, r0
 8010050:	dd0f      	ble.n	8010072 <forward_conv2d+0xe7a>
 8010052:	4604      	mov	r4, r0
 8010054:	468c      	mov	ip, r1
 8010056:	4616      	mov	r6, r2
 8010058:	ecb6 7a01 	vldmia	r6!, {s14}
 801005c:	ecfc 7a01 	vldmia	ip!, {s15}
 8010060:	3401      	adds	r4, #1
 8010062:	42a3      	cmp	r3, r4
 8010064:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010068:	d1f6      	bne.n	8010058 <forward_conv2d+0xe60>
 801006a:	1a18      	subs	r0, r3, r0
 801006c:	0080      	lsls	r0, r0, #2
 801006e:	4402      	add	r2, r0
 8010070:	4401      	add	r1, r0
 8010072:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010074:	4402      	add	r2, r0
 8010076:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 801007a:	f10e 0e01 	add.w	lr, lr, #1
 801007e:	4570      	cmp	r0, lr
 8010080:	4449      	add	r1, r9
 8010082:	f47f af70 	bne.w	800ff66 <forward_conv2d+0xd6e>
 8010086:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 801008a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801008c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8010090:	edc3 6a00 	vstr	s13, [r3]
 8010094:	4608      	mov	r0, r1
 8010096:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801009a:	440b      	add	r3, r1
 801009c:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 80100a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80100a2:	4410      	add	r0, r2
 80100a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80100a6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
 80100aa:	4608      	mov	r0, r1
 80100ac:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80100b0:	4418      	add	r0, r3
 80100b2:	1acb      	subs	r3, r1, r3
 80100b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80100b8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80100bc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
 80100c0:	f10b 0b01 	add.w	fp, fp, #1
 80100c4:	455b      	cmp	r3, fp
 80100c6:	eba8 0802 	sub.w	r8, r8, r2
 80100ca:	f47f af14 	bne.w	800fef6 <forward_conv2d+0xcfe>
 80100ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80100d2:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80100d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80100da:	440a      	add	r2, r1
 80100dc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80100e0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80100e4:	3204      	adds	r2, #4
 80100e6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80100ea:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80100ee:	3301      	adds	r3, #1
 80100f0:	429a      	cmp	r2, r3
 80100f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80100f6:	f47f aed0 	bne.w	800fe9a <forward_conv2d+0xca2>
 80100fa:	f8d7 b02c 	ldr.w	fp, [r7, #44]	; 0x2c
 80100fe:	f8d7 d064 	ldr.w	sp, [r7, #100]	; 0x64
 8010102:	f7ff bb33 	b.w	800f76c <forward_conv2d+0x574>
 8010106:	2000      	movs	r0, #0
 8010108:	e7a1      	b.n	801004e <forward_conv2d+0xe56>
 801010a:	eef0 6a46 	vmov.f32	s13, s12
 801010e:	e7ba      	b.n	8010086 <forward_conv2d+0xe8e>
 8010110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010114:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010118:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 801011c:	eba8 0303 	sub.w	r3, r8, r3
 8010120:	e6f2      	b.n	800ff08 <forward_conv2d+0xd10>
 8010122:	eeb0 6a48 	vmov.f32	s12, s16
 8010126:	e6cc      	b.n	800fec2 <forward_conv2d+0xcca>
 8010128:	2300      	movs	r3, #0
 801012a:	685b      	ldr	r3, [r3, #4]
 801012c:	deff      	udf	#255	; 0xff
 801012e:	4603      	mov	r3, r0
 8010130:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010134:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010138:	2301      	movs	r3, #1
 801013a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801013e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8010142:	f7ff b8e8 	b.w	800f316 <forward_conv2d+0x11e>
 8010146:	2800      	cmp	r0, #0
 8010148:	d0f2      	beq.n	8010130 <forward_conv2d+0xf38>
 801014a:	6882      	ldr	r2, [r0, #8]
 801014c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010150:	2301      	movs	r3, #1
 8010152:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010156:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 801015a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801015e:	f7ff b8da 	b.w	800f316 <forward_conv2d+0x11e>
 8010162:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8010166:	f7ff b8b7 	b.w	800f2d8 <forward_conv2d+0xe0>
 801016a:	3318      	adds	r3, #24
 801016c:	d007      	beq.n	801017e <forward_conv2d+0xf86>
 801016e:	462a      	mov	r2, r5
 8010170:	462c      	mov	r4, r5
 8010172:	462b      	mov	r3, r5
 8010174:	f7ff b86a 	b.w	800f24c <forward_conv2d+0x54>
 8010178:	2300      	movs	r3, #0
 801017a:	685b      	ldr	r3, [r3, #4]
 801017c:	deff      	udf	#255	; 0xff
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	deff      	udf	#255	; 0xff
 8010182:	f8c7 40dc 	str.w	r4, [r7, #220]	; 0xdc
 8010186:	f7ff b850 	b.w	800f22a <forward_conv2d+0x32>
 801018a:	2300      	movs	r3, #0
 801018c:	685b      	ldr	r3, [r3, #4]
 801018e:	deff      	udf	#255	; 0xff
 8010190:	6853      	ldr	r3, [r2, #4]
 8010192:	deff      	udf	#255	; 0xff
 8010194:	2200      	movs	r2, #0
 8010196:	f7ff b858 	b.w	800f24a <forward_conv2d+0x52>
 801019a:	bf00      	nop

0801019c <forward_conv2d_nl_pool>:
 801019c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101a0:	ed2d 8b10 	vpush	{d8-d15}
 80101a4:	b0e1      	sub	sp, #388	; 0x184
 80101a6:	6983      	ldr	r3, [r0, #24]
 80101a8:	881e      	ldrh	r6, [r3, #0]
 80101aa:	af0a      	add	r7, sp, #40	; 0x28
 80101ac:	2e00      	cmp	r6, #0
 80101ae:	f000 859b 	beq.w	8010ce8 <forward_conv2d_nl_pool+0xb4c>
 80101b2:	6859      	ldr	r1, [r3, #4]
 80101b4:	684a      	ldr	r2, [r1, #4]
 80101b6:	2a00      	cmp	r2, #0
 80101b8:	f000 8593 	beq.w	8010ce2 <forward_conv2d_nl_pool+0xb46>
 80101bc:	f8d2 c000 	ldr.w	ip, [r2]
 80101c0:	2e01      	cmp	r6, #1
 80101c2:	f240 858b 	bls.w	8010cdc <forward_conv2d_nl_pool+0xb40>
 80101c6:	690a      	ldr	r2, [r1, #16]
 80101c8:	2a00      	cmp	r2, #0
 80101ca:	f000 8582 	beq.w	8010cd2 <forward_conv2d_nl_pool+0xb36>
 80101ce:	f8d2 9000 	ldr.w	r9, [r2]
 80101d2:	2e02      	cmp	r6, #2
 80101d4:	f000 8582 	beq.w	8010cdc <forward_conv2d_nl_pool+0xb40>
 80101d8:	69cd      	ldr	r5, [r1, #28]
 80101da:	2d00      	cmp	r5, #0
 80101dc:	f000 8571 	beq.w	8010cc2 <forward_conv2d_nl_pool+0xb26>
 80101e0:	682a      	ldr	r2, [r5, #0]
 80101e2:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 80101e6:	f111 0218 	adds.w	r2, r1, #24
 80101ea:	d004      	beq.n	80101f6 <forward_conv2d_nl_pool+0x5a>
 80101ec:	8b0a      	ldrh	r2, [r1, #24]
 80101ee:	2a01      	cmp	r2, #1
 80101f0:	f240 857c 	bls.w	8010cec <forward_conv2d_nl_pool+0xb50>
 80101f4:	686a      	ldr	r2, [r5, #4]
 80101f6:	68a9      	ldr	r1, [r5, #8]
 80101f8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80101fa:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 80101fe:	f8dc b018 	ldr.w	fp, [ip, #24]
 8010202:	f8d7 4150 	ldr.w	r4, [r7, #336]	; 0x150
 8010206:	f8dc 800c 	ldr.w	r8, [ip, #12]
 801020a:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 801020e:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8010212:	f8db 4008 	ldr.w	r4, [fp, #8]
 8010216:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 801021a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801021e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8010222:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
 8010226:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801022a:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 801022e:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010232:	f8c7 4148 	str.w	r4, [r7, #328]	; 0x148
 8010236:	f8de 4004 	ldr.w	r4, [lr, #4]
 801023a:	f8c7 4138 	str.w	r4, [r7, #312]	; 0x138
 801023e:	f8de 400c 	ldr.w	r4, [lr, #12]
 8010242:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8010246:	f8de 4008 	ldr.w	r4, [lr, #8]
 801024a:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 801024e:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8010252:	6824      	ldr	r4, [r4, #0]
 8010254:	f8c7 4144 	str.w	r4, [r7, #324]	; 0x144
 8010258:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 801025c:	6864      	ldr	r4, [r4, #4]
 801025e:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8010262:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8010266:	68a5      	ldr	r5, [r4, #8]
 8010268:	f8da 4004 	ldr.w	r4, [sl, #4]
 801026c:	f8c7 4154 	str.w	r4, [r7, #340]	; 0x154
 8010270:	f8da 4008 	ldr.w	r4, [sl, #8]
 8010274:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8010278:	6d44      	ldr	r4, [r0, #84]	; 0x54
 801027a:	6824      	ldr	r4, [r4, #0]
 801027c:	f8c7 4134 	str.w	r4, [r7, #308]	; 0x134
 8010280:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8010282:	6864      	ldr	r4, [r4, #4]
 8010284:	643c      	str	r4, [r7, #64]	; 0x40
 8010286:	f8dc 4008 	ldr.w	r4, [ip, #8]
 801028a:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 801028e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8010290:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8010294:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8010296:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 801029a:	69c4      	ldr	r4, [r0, #28]
 801029c:	f8c7 4124 	str.w	r4, [r7, #292]	; 0x124
 80102a0:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80102a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80102a4:	6c84      	ldr	r4, [r0, #72]	; 0x48
 80102a6:	647c      	str	r4, [r7, #68]	; 0x44
 80102a8:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80102aa:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 80102ae:	e9d0 ba0c 	ldrd	fp, sl, [r0, #48]	; 0x30
 80102b2:	2a00      	cmp	r2, #0
 80102b4:	f000 84f8 	beq.w	8010ca8 <forward_conv2d_nl_pool+0xb0c>
 80102b8:	6992      	ldr	r2, [r2, #24]
 80102ba:	6892      	ldr	r2, [r2, #8]
 80102bc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 80102c0:	4680      	mov	r8, r0
 80102c2:	6a00      	ldr	r0, [r0, #32]
 80102c4:	2900      	cmp	r1, #0
 80102c6:	f000 84e4 	beq.w	8010c92 <forward_conv2d_nl_pool+0xaf6>
 80102ca:	698a      	ldr	r2, [r1, #24]
 80102cc:	2a00      	cmp	r2, #0
 80102ce:	f000 8533 	beq.w	8010d38 <forward_conv2d_nl_pool+0xb9c>
 80102d2:	694b      	ldr	r3, [r1, #20]
 80102d4:	689b      	ldr	r3, [r3, #8]
 80102d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80102da:	e9d2 0100 	ldrd	r0, r1, [r2]
 80102de:	6893      	ldr	r3, [r2, #8]
 80102e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80102e4:	f001 ff0c 	bl	8012100 <ai_array_get_byte_size>
 80102e8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80102ec:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80102f0:	881e      	ldrh	r6, [r3, #0]
 80102f2:	f8d2 c018 	ldr.w	ip, [r2, #24]
 80102f6:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 80102fa:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
 80102fe:	63f9      	str	r1, [r7, #60]	; 0x3c
 8010300:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8010304:	f8c7 1118 	str.w	r1, [r7, #280]	; 0x118
 8010308:	fa11 f585 	uxtah	r5, r1, r5
 801030c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8010310:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8010314:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8010318:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 801031c:	3901      	subs	r1, #1
 801031e:	f8c7 1150 	str.w	r1, [r7, #336]	; 0x150
 8010322:	eb05 0e00 	add.w	lr, r5, r0
 8010326:	fa1f f28a 	uxth.w	r2, sl
 801032a:	f8d7 5120 	ldr.w	r5, [r7, #288]	; 0x120
 801032e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8010332:	f8dc 4000 	ldr.w	r4, [ip]
 8010336:	f8dc 1000 	ldr.w	r1, [ip]
 801033a:	3a01      	subs	r2, #1
 801033c:	fb00 5002 	mla	r0, r0, r2, r5
 8010340:	fa1f f28b 	uxth.w	r2, fp
 8010344:	f3c4 14c6 	ubfx	r4, r4, #7, #7
 8010348:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 801034c:	f3c1 5141 	ubfx	r1, r1, #21, #2
 8010350:	1e50      	subs	r0, r2, #1
 8010352:	f8b7 214c 	ldrh.w	r2, [r7, #332]	; 0x14c
 8010356:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 801035a:	fa44 f101 	asr.w	r1, r4, r1
 801035e:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8010362:	f8dc 4000 	ldr.w	r4, [ip]
 8010366:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 801036a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801036e:	f3c4 4543 	ubfx	r5, r4, #17, #4
 8010372:	f8d7 4154 	ldr.w	r4, [r7, #340]	; 0x154
 8010376:	ebae 0202 	sub.w	r2, lr, r2
 801037a:	fa1f fe81 	uxth.w	lr, r1
 801037e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8010382:	fbb2 f2f1 	udiv	r2, r2, r1
 8010386:	f8d7 1154 	ldr.w	r1, [r7, #340]	; 0x154
 801038a:	3c01      	subs	r4, #1
 801038c:	fb04 1100 	mla	r1, r4, r0, r1
 8010390:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8010394:	1c51      	adds	r1, r2, #1
 8010396:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801039a:	487c      	ldr	r0, [pc, #496]	; (801058c <forward_conv2d_nl_pool+0x3f0>)
 801039c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 80103a0:	4611      	mov	r1, r2
 80103a2:	2a00      	cmp	r2, #0
 80103a4:	bf08      	it	eq
 80103a6:	4601      	moveq	r1, r0
 80103a8:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
 80103ac:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80103b0:	2d04      	cmp	r5, #4
 80103b2:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80103b6:	f000 849e 	beq.w	8010cf6 <forward_conv2d_nl_pool+0xb5a>
 80103ba:	2d08      	cmp	r5, #8
 80103bc:	f000 849b 	beq.w	8010cf6 <forward_conv2d_nl_pool+0xb5a>
 80103c0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80103c4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
 80103c8:	2e03      	cmp	r6, #3
 80103ca:	f9b7 2134 	ldrsh.w	r2, [r7, #308]	; 0x134
 80103ce:	f8c7 2140 	str.w	r2, [r7, #320]	; 0x140
 80103d2:	f240 8483 	bls.w	8010cdc <forward_conv2d_nl_pool+0xb40>
 80103d6:	685b      	ldr	r3, [r3, #4]
 80103d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103da:	2b00      	cmp	r3, #0
 80103dc:	f000 8489 	beq.w	8010cf2 <forward_conv2d_nl_pool+0xb56>
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 80103e6:	68da      	ldr	r2, [r3, #12]
 80103e8:	699b      	ldr	r3, [r3, #24]
 80103ea:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80103ee:	6899      	ldr	r1, [r3, #8]
 80103f0:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 80103f4:	f8d7 1118 	ldr.w	r1, [r7, #280]	; 0x118
 80103f8:	6896      	ldr	r6, [r2, #8]
 80103fa:	f8c7 6144 	str.w	r6, [r7, #324]	; 0x144
 80103fe:	4249      	negs	r1, r1
 8010400:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8010404:	2800      	cmp	r0, #0
 8010406:	f000 82dd 	beq.w	80109c4 <forward_conv2d_nl_pool+0x828>
 801040a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801040e:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8010412:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8010416:	f8d7 50bc 	ldr.w	r5, [r7, #188]	; 0xbc
 801041a:	ed9f 8a5d 	vldr	s16, [pc, #372]	; 8010590 <forward_conv2d_nl_pool+0x3f4>
 801041e:	fb03 f200 	mul.w	r2, r3, r0
 8010422:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8010426:	008c      	lsls	r4, r1, #2
 8010428:	fb04 f000 	mul.w	r0, r4, r0
 801042c:	f8c7 40d4 	str.w	r4, [r7, #212]	; 0xd4
 8010430:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8010434:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
 8010438:	fb01 fc02 	mul.w	ip, r1, r2
 801043c:	00a2      	lsls	r2, r4, #2
 801043e:	f8c7 2110 	str.w	r2, [r7, #272]	; 0x110
 8010442:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8010446:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 801044a:	00ab      	lsls	r3, r5, #2
 801044c:	4694      	mov	ip, r2
 801044e:	fb0c f204 	mul.w	r2, ip, r4
 8010452:	fb04 f303 	mul.w	r3, r4, r3
 8010456:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 801045a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 801045e:	00a4      	lsls	r4, r4, #2
 8010460:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8010464:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8010468:	f04f 0c00 	mov.w	ip, #0
 801046c:	fa0f f58b 	sxth.w	r5, fp
 8010470:	f8c7 c0e0 	str.w	ip, [r7, #224]	; 0xe0
 8010474:	46a4      	mov	ip, r4
 8010476:	f8d7 4120 	ldr.w	r4, [r7, #288]	; 0x120
 801047a:	f8c7 50e8 	str.w	r5, [r7, #232]	; 0xe8
 801047e:	fa0f f58a 	sxth.w	r5, sl
 8010482:	f8c7 5100 	str.w	r5, [r7, #256]	; 0x100
 8010486:	fb0c fc04 	mul.w	ip, ip, r4
 801048a:	f8c7 c034 	str.w	ip, [r7, #52]	; 0x34
 801048e:	fb06 fc03 	mul.w	ip, r6, r3
 8010492:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010496:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 801049a:	4240      	negs	r0, r0
 801049c:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 80104a0:	469c      	mov	ip, r3
 80104a2:	f8d7 0148 	ldr.w	r0, [r7, #328]	; 0x148
 80104a6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80104aa:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 80104ae:	f8b7 5130 	ldrh.w	r5, [r7, #304]	; 0x130
 80104b2:	f8c7 50ec 	str.w	r5, [r7, #236]	; 0xec
 80104b6:	fb00 f303 	mul.w	r3, r0, r3
 80104ba:	460d      	mov	r5, r1
 80104bc:	fb0c fc04 	mul.w	ip, ip, r4
 80104c0:	627b      	str	r3, [r7, #36]	; 0x24
 80104c2:	fb04 f305 	mul.w	r3, r4, r5
 80104c6:	f8c7 c07c 	str.w	ip, [r7, #124]	; 0x7c
 80104ca:	f8d7 50ec 	ldr.w	r5, [r7, #236]	; 0xec
 80104ce:	623b      	str	r3, [r7, #32]
 80104d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80104d4:	46a6      	mov	lr, r4
 80104d6:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80104da:	fb05 f503 	mul.w	r5, r5, r3
 80104de:	667d      	str	r5, [r7, #100]	; 0x64
 80104e0:	4625      	mov	r5, r4
 80104e2:	fb05 f503 	mul.w	r5, r5, r3
 80104e6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80104ea:	66bd      	str	r5, [r7, #104]	; 0x68
 80104ec:	fb00 f101 	mul.w	r1, r0, r1
 80104f0:	fb03 f306 	mul.w	r3, r3, r6
 80104f4:	657b      	str	r3, [r7, #84]	; 0x54
 80104f6:	008b      	lsls	r3, r1, #2
 80104f8:	633b      	str	r3, [r7, #48]	; 0x30
 80104fa:	0093      	lsls	r3, r2, #2
 80104fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80104fe:	0083      	lsls	r3, r0, #2
 8010500:	61bb      	str	r3, [r7, #24]
 8010502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010506:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801050a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 801050e:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8010512:	2400      	movs	r4, #0
 8010514:	63bb      	str	r3, [r7, #56]	; 0x38
 8010516:	4603      	mov	r3, r0
 8010518:	fb03 f301 	mul.w	r3, r3, r1
 801051c:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
 8010520:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8010524:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010528:	00d1      	lsls	r1, r2, #3
 801052a:	0113      	lsls	r3, r2, #4
 801052c:	ea4f 0b82 	mov.w	fp, r2, lsl #2
 8010530:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8010534:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8010538:	fb00 f004 	mul.w	r0, r0, r4
 801053c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8010540:	66f8      	str	r0, [r7, #108]	; 0x6c
 8010542:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8010546:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 801054a:	469a      	mov	sl, r3
 801054c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010550:	2b00      	cmp	r3, #0
 8010552:	f340 81d0 	ble.w	80108f6 <forward_conv2d_nl_pool+0x75a>
 8010556:	f8d7 111c 	ldr.w	r1, [r7, #284]	; 0x11c
 801055a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801055e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8010562:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8010566:	2900      	cmp	r1, #0
 8010568:	441a      	add	r2, r3
 801056a:	bfb4      	ite	lt
 801056c:	2100      	movlt	r1, #0
 801056e:	2300      	movge	r3, #0
 8010570:	4282      	cmp	r2, r0
 8010572:	bf28      	it	cs
 8010574:	4602      	movcs	r2, r0
 8010576:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801057a:	2801      	cmp	r0, #1
 801057c:	f000 83f6 	beq.w	8010d6c <forward_conv2d_nl_pool+0xbd0>
 8010580:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8010584:	4281      	cmp	r1, r0
 8010586:	f000 822a 	beq.w	80109de <forward_conv2d_nl_pool+0x842>
 801058a:	e003      	b.n	8010594 <forward_conv2d_nl_pool+0x3f8>
 801058c:	0800ee3d 	.word	0x0800ee3d
 8010590:	00000000 	.word	0x00000000
 8010594:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8010598:	2900      	cmp	r1, #0
 801059a:	f000 819f 	beq.w	80108dc <forward_conv2d_nl_pool+0x740>
 801059e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 80105a2:	fb93 f1f0 	sdiv	r1, r3, r0
 80105a6:	fb00 3111 	mls	r1, r0, r1, r3
 80105aa:	1a41      	subs	r1, r0, r1
 80105ac:	1ad2      	subs	r2, r2, r3
 80105ae:	fb91 f5f0 	sdiv	r5, r1, r0
 80105b2:	fb00 1515 	mls	r5, r0, r5, r1
 80105b6:	1b52      	subs	r2, r2, r5
 80105b8:	4601      	mov	r1, r0
 80105ba:	4402      	add	r2, r0
 80105bc:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80105c0:	f8d7 6120 	ldr.w	r6, [r7, #288]	; 0x120
 80105c4:	4604      	mov	r4, r0
 80105c6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80105ca:	fbb4 f4f0 	udiv	r4, r4, r0
 80105ce:	6a38      	ldr	r0, [r7, #32]
 80105d0:	3a01      	subs	r2, #1
 80105d2:	fb92 f8f1 	sdiv	r8, r2, r1
 80105d6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80105da:	eba0 0c04 	sub.w	ip, r0, r4
 80105de:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80105e2:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80105e6:	4614      	mov	r4, r2
 80105e8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80105ec:	fbb4 f2f2 	udiv	r2, r4, r2
 80105f0:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80105f4:	663a      	str	r2, [r7, #96]	; 0x60
 80105f6:	441d      	add	r5, r3
 80105f8:	fb0e f000 	mul.w	r0, lr, r0
 80105fc:	440b      	add	r3, r1
 80105fe:	eba6 0608 	sub.w	r6, r6, r8
 8010602:	fb04 f505 	mul.w	r5, r4, r5
 8010606:	3b01      	subs	r3, #1
 8010608:	f8d7 4100 	ldr.w	r4, [r7, #256]	; 0x100
 801060c:	fb93 f3f4 	sdiv	r3, r3, r4
 8010610:	fb00 f406 	mul.w	r4, r0, r6
 8010614:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8010618:	677d      	str	r5, [r7, #116]	; 0x74
 801061a:	0091      	lsls	r1, r2, #2
 801061c:	fb00 f003 	mul.w	r0, r0, r3
 8010620:	f8c7 109c 	str.w	r1, [r7, #156]	; 0x9c
 8010624:	65f8      	str	r0, [r7, #92]	; 0x5c
 8010626:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801062a:	f8d7 014c 	ldr.w	r0, [r7, #332]	; 0x14c
 801062e:	f8c7 40d8 	str.w	r4, [r7, #216]	; 0xd8
 8010632:	ebc2 7182 	rsb	r1, r2, r2, lsl #30
 8010636:	1ac3      	subs	r3, r0, r3
 8010638:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 801063c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010640:	008b      	lsls	r3, r1, #2
 8010642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010644:	00d3      	lsls	r3, r2, #3
 8010646:	61fb      	str	r3, [r7, #28]
 8010648:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801064c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010650:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010654:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010658:	2300      	movs	r3, #0
 801065a:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 801065e:	ea4f 098c 	mov.w	r9, ip, lsl #2
 8010662:	67bb      	str	r3, [r7, #120]	; 0x78
 8010664:	46c2      	mov	sl, r8
 8010666:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801066a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801066e:	eb03 0c02 	add.w	ip, r3, r2
 8010672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010676:	2b00      	cmp	r3, #0
 8010678:	f2c0 811c 	blt.w	80108b4 <forward_conv2d_nl_pool+0x718>
 801067c:	2000      	movs	r0, #0
 801067e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8010680:	f8d7 80e8 	ldr.w	r8, [r7, #232]	; 0xe8
 8010684:	4605      	mov	r5, r0
 8010686:	4606      	mov	r6, r0
 8010688:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801068c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010690:	f8d7 1114 	ldr.w	r1, [r7, #276]	; 0x114
 8010694:	4413      	add	r3, r2
 8010696:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801069a:	440a      	add	r2, r1
 801069c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80106a0:	428b      	cmp	r3, r1
 80106a2:	bf94      	ite	ls
 80106a4:	ebc6 0303 	rsbls	r3, r6, r3
 80106a8:	ebc6 0301 	rsbhi	r3, r6, r1
 80106ac:	4415      	add	r5, r2
 80106ae:	1a1b      	subs	r3, r3, r0
 80106b0:	00a4      	lsls	r4, r4, #2
 80106b2:	f8d7 012c 	ldr.w	r0, [r7, #300]	; 0x12c
 80106b6:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 80106ba:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 80106be:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 80106c0:	4602      	mov	r2, r0
 80106c2:	2800      	cmp	r0, #0
 80106c4:	bf08      	it	eq
 80106c6:	4662      	moveq	r2, ip
 80106c8:	f108 31ff 	add.w	r1, r8, #4294967295
 80106cc:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80106d0:	fb91 f1f0 	sdiv	r1, r1, r0
 80106d4:	4429      	add	r1, r5
 80106d6:	f8d7 5128 	ldr.w	r5, [r7, #296]	; 0x128
 80106da:	fb0e 5501 	mla	r5, lr, r1, r5
 80106de:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80106e2:	4403      	add	r3, r0
 80106e4:	fb01 6104 	mla	r1, r1, r4, r6
 80106e8:	3b01      	subs	r3, #1
 80106ea:	fb93 f6f0 	sdiv	r6, r3, r0
 80106ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106f0:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 80106f4:	fb06 3110 	mls	r1, r6, r0, r3
 80106f8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80106fc:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8010700:	4562      	cmp	r2, ip
 8010702:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8010706:	bf08      	it	eq
 8010708:	eeb0 6a48 	vmoveq.f32	s12, s16
 801070c:	1b9b      	subs	r3, r3, r6
 801070e:	2800      	cmp	r0, #0
 8010710:	d070      	beq.n	80107f4 <forward_conv2d_nl_pool+0x658>
 8010712:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8010716:	fb0e f803 	mul.w	r8, lr, r3
 801071a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801071c:	fb00 fb01 	mul.w	fp, r0, r1
 8010720:	2b00      	cmp	r3, #0
 8010722:	d067      	beq.n	80107f4 <forward_conv2d_nl_pool+0x658>
 8010724:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010728:	18d3      	adds	r3, r2, r3
 801072a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801072e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010732:	1a9b      	subs	r3, r3, r2
 8010734:	62bb      	str	r3, [r7, #40]	; 0x28
 8010736:	2300      	movs	r3, #0
 8010738:	673b      	str	r3, [r7, #112]	; 0x70
 801073a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801073e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010740:	4413      	add	r3, r2
 8010742:	65bb      	str	r3, [r7, #88]	; 0x58
 8010744:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8010748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074a:	4413      	add	r3, r2
 801074c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8010750:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8010754:	ecf3 7a01 	vldmia	r3!, {s15}
 8010758:	f1ba 0f00 	cmp.w	sl, #0
 801075c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8010760:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010764:	f340 80a4 	ble.w	80108b0 <forward_conv2d_nl_pool+0x714>
 8010768:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801076c:	f04f 0c00 	mov.w	ip, #0
 8010770:	2e00      	cmp	r6, #0
 8010772:	dd19      	ble.n	80107a8 <forward_conv2d_nl_pool+0x60c>
 8010774:	2100      	movs	r1, #0
 8010776:	eb00 040e 	add.w	r4, r0, lr
 801077a:	4284      	cmp	r4, r0
 801077c:	d910      	bls.n	80107a0 <forward_conv2d_nl_pool+0x604>
 801077e:	4603      	mov	r3, r0
 8010780:	462a      	mov	r2, r5
 8010782:	ecb3 7a01 	vldmia	r3!, {s14}
 8010786:	ecf2 6a01 	vldmia	r2!, {s13}
 801078a:	429c      	cmp	r4, r3
 801078c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010790:	d8f7      	bhi.n	8010782 <forward_conv2d_nl_pool+0x5e6>
 8010792:	43c3      	mvns	r3, r0
 8010794:	441c      	add	r4, r3
 8010796:	f024 0403 	bic.w	r4, r4, #3
 801079a:	3404      	adds	r4, #4
 801079c:	4425      	add	r5, r4
 801079e:	4420      	add	r0, r4
 80107a0:	3101      	adds	r1, #1
 80107a2:	428e      	cmp	r6, r1
 80107a4:	4448      	add	r0, r9
 80107a6:	d1e6      	bne.n	8010776 <forward_conv2d_nl_pool+0x5da>
 80107a8:	f10c 0c01 	add.w	ip, ip, #1
 80107ac:	45e2      	cmp	sl, ip
 80107ae:	4458      	add	r0, fp
 80107b0:	4445      	add	r5, r8
 80107b2:	d1dd      	bne.n	8010770 <forward_conv2d_nl_pool+0x5d4>
 80107b4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80107b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80107bc:	441d      	add	r5, r3
 80107be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80107c2:	ece3 7a01 	vstmia	r3!, {s15}
 80107c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80107ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107ce:	4293      	cmp	r3, r2
 80107d0:	d1be      	bne.n	8010750 <forward_conv2d_nl_pool+0x5b4>
 80107d2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80107d6:	69f9      	ldr	r1, [r7, #28]
 80107d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107da:	4472      	add	r2, lr
 80107dc:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80107e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107e2:	1a52      	subs	r2, r2, r1
 80107e4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80107e8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80107ec:	3301      	adds	r3, #1
 80107ee:	429a      	cmp	r2, r3
 80107f0:	673b      	str	r3, [r7, #112]	; 0x70
 80107f2:	d1a2      	bne.n	801073a <forward_conv2d_nl_pool+0x59e>
 80107f4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80107f8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80107fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107fe:	4608      	mov	r0, r1
 8010800:	4410      	add	r0, r2
 8010802:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8010806:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 801080a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801080e:	4401      	add	r1, r0
 8010810:	f8c7 10cc 	str.w	r1, [r7, #204]	; 0xcc
 8010814:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010818:	1a8a      	subs	r2, r1, r2
 801081a:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 801081e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8010822:	3301      	adds	r3, #1
 8010824:	429a      	cmp	r2, r3
 8010826:	67bb      	str	r3, [r7, #120]	; 0x78
 8010828:	f47f af1d 	bne.w	8010666 <forward_conv2d_nl_pool+0x4ca>
 801082c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010830:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010834:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8010838:	699b      	ldr	r3, [r3, #24]
 801083a:	2a00      	cmp	r2, #0
 801083c:	f000 8210 	beq.w	8010c60 <forward_conv2d_nl_pool+0xac4>
 8010840:	2400      	movs	r4, #0
 8010842:	f8d7 5098 	ldr.w	r5, [r7, #152]	; 0x98
 8010846:	f8d7 614c 	ldr.w	r6, [r7, #332]	; 0x14c
 801084a:	f8d7 8134 	ldr.w	r8, [r7, #308]	; 0x134
 801084e:	f8d7 9108 	ldr.w	r9, [r7, #264]	; 0x108
 8010852:	f8c7 4150 	str.w	r4, [r7, #336]	; 0x150
 8010856:	609e      	str	r6, [r3, #8]
 8010858:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801085c:	f8d7 40c8 	ldr.w	r4, [r7, #200]	; 0xc8
 8010860:	462b      	mov	r3, r5
 8010862:	4641      	mov	r1, r8
 8010864:	4640      	mov	r0, r8
 8010866:	47a0      	blx	r4
 8010868:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801086c:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8010870:	6859      	ldr	r1, [r3, #4]
 8010872:	68da      	ldr	r2, [r3, #12]
 8010874:	f8d7 40f4 	ldr.w	r4, [r7, #244]	; 0xf4
 8010878:	4405      	add	r5, r0
 801087a:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801087e:	0089      	lsls	r1, r1, #2
 8010880:	4406      	add	r6, r0
 8010882:	eba5 0c09 	sub.w	ip, r5, r9
 8010886:	1850      	adds	r0, r2, r1
 8010888:	45a4      	cmp	ip, r4
 801088a:	bfa8      	it	ge
 801088c:	464d      	movge	r5, r9
 801088e:	4286      	cmp	r6, r0
 8010890:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8010894:	bf28      	it	cs
 8010896:	1a76      	subcs	r6, r6, r1
 8010898:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 801089c:	3001      	adds	r0, #1
 801089e:	4281      	cmp	r1, r0
 80108a0:	f8c7 0150 	str.w	r0, [r7, #336]	; 0x150
 80108a4:	d1d7      	bne.n	8010856 <forward_conv2d_nl_pool+0x6ba>
 80108a6:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
 80108aa:	f8c7 614c 	str.w	r6, [r7, #332]	; 0x14c
 80108ae:	e019      	b.n	80108e4 <forward_conv2d_nl_pool+0x748>
 80108b0:	461a      	mov	r2, r3
 80108b2:	e781      	b.n	80107b8 <forward_conv2d_nl_pool+0x61c>
 80108b4:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80108b8:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80108bc:	fb90 f3f2 	sdiv	r3, r0, r2
 80108c0:	fb02 0313 	mls	r3, r2, r3, r0
 80108c4:	1ad3      	subs	r3, r2, r3
 80108c6:	4605      	mov	r5, r0
 80108c8:	fb93 f0f2 	sdiv	r0, r3, r2
 80108cc:	fb02 3010 	mls	r0, r2, r0, r3
 80108d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80108d2:	462e      	mov	r6, r5
 80108d4:	18c4      	adds	r4, r0, r3
 80108d6:	eb02 0805 	add.w	r8, r2, r5
 80108da:	e6d5      	b.n	8010688 <forward_conv2d_nl_pool+0x4ec>
 80108dc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80108e0:	699b      	ldr	r3, [r3, #24]
 80108e2:	68da      	ldr	r2, [r3, #12]
 80108e4:	609a      	str	r2, [r3, #8]
 80108e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80108ea:	3301      	adds	r3, #1
 80108ec:	b21b      	sxth	r3, r3
 80108ee:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80108f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80108f6:	3b01      	subs	r3, #1
 80108f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80108fc:	f100 83bf 	bmi.w	801107e <forward_conv2d_nl_pool+0xee2>
 8010900:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010904:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 8010908:	42a3      	cmp	r3, r4
 801090a:	f200 839d 	bhi.w	8011048 <forward_conv2d_nl_pool+0xeac>
 801090e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8010912:	b29b      	uxth	r3, r3
 8010914:	6990      	ldr	r0, [r2, #24]
 8010916:	9301      	str	r3, [sp, #4]
 8010918:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801091c:	f8d7 80bc 	ldr.w	r8, [r7, #188]	; 0xbc
 8010920:	f8b7 5094 	ldrh.w	r5, [r7, #148]	; 0x94
 8010924:	1a9b      	subs	r3, r3, r2
 8010926:	fa1f f188 	uxth.w	r1, r8
 801092a:	b29a      	uxth	r2, r3
 801092c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010930:	9308      	str	r3, [sp, #32]
 8010932:	9105      	str	r1, [sp, #20]
 8010934:	2601      	movs	r6, #1
 8010936:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801093a:	9607      	str	r6, [sp, #28]
 801093c:	f8d7 6084 	ldr.w	r6, [r7, #132]	; 0x84
 8010940:	9506      	str	r5, [sp, #24]
 8010942:	f8b7 5040 	ldrh.w	r5, [r7, #64]	; 0x40
 8010946:	9304      	str	r3, [sp, #16]
 8010948:	1a64      	subs	r4, r4, r1
 801094a:	b2b1      	uxth	r1, r6
 801094c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8010950:	9300      	str	r3, [sp, #0]
 8010952:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8010956:	b224      	sxth	r4, r4
 8010958:	f8b7 3138 	ldrh.w	r3, [r7, #312]	; 0x138
 801095c:	f8b7 1144 	ldrh.w	r1, [r7, #324]	; 0x144
 8010960:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8010964:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8010966:	47a0      	blx	r4
 8010968:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801096c:	f8d7 511c 	ldr.w	r5, [r7, #284]	; 0x11c
 8010970:	688a      	ldr	r2, [r1, #8]
 8010972:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8010974:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 8010978:	fa0f f388 	sxth.w	r3, r8
 801097c:	1af3      	subs	r3, r6, r3
 801097e:	4422      	add	r2, r4
 8010980:	462e      	mov	r6, r5
 8010982:	f8d7 40e4 	ldr.w	r4, [r7, #228]	; 0xe4
 8010986:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 801098a:	608a      	str	r2, [r1, #8]
 801098c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8010990:	4426      	add	r6, r4
 8010992:	b21b      	sxth	r3, r3
 8010994:	1b2c      	subs	r4, r5, r4
 8010996:	f8c7 4118 	str.w	r4, [r7, #280]	; 0x118
 801099a:	6efd      	ldr	r5, [r7, #108]	; 0x6c
 801099c:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 80109a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80109a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80109a8:	f8c7 611c 	str.w	r6, [r7, #284]	; 0x11c
 80109ac:	3001      	adds	r0, #1
 80109ae:	442c      	add	r4, r5
 80109b0:	4283      	cmp	r3, r0
 80109b2:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 80109b6:	f8c7 4114 	str.w	r4, [r7, #276]	; 0x114
 80109ba:	f63f adc7 	bhi.w	801054c <forward_conv2d_nl_pool+0x3b0>
 80109be:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80109c2:	699b      	ldr	r3, [r3, #24]
 80109c4:	68da      	ldr	r2, [r3, #12]
 80109c6:	609a      	str	r2, [r3, #8]
 80109c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80109cc:	68d3      	ldr	r3, [r2, #12]
 80109ce:	6093      	str	r3, [r2, #8]
 80109d0:	f507 77ae 	add.w	r7, r7, #348	; 0x15c
 80109d4:	46bd      	mov	sp, r7
 80109d6:	ecbd 8b10 	vpop	{d8-d15}
 80109da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80109e0:	2901      	cmp	r1, #1
 80109e2:	f47f add7 	bne.w	8010594 <forward_conv2d_nl_pool+0x3f8>
 80109e6:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80109ea:	2900      	cmp	r1, #0
 80109ec:	f43f af76 	beq.w	80108dc <forward_conv2d_nl_pool+0x740>
 80109f0:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 80109f4:	f8d7 6154 	ldr.w	r6, [r7, #340]	; 0x154
 80109f8:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 80109fc:	1ad2      	subs	r2, r2, r3
 80109fe:	1a8c      	subs	r4, r1, r2
 8010a00:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 8010a04:	00b2      	lsls	r2, r6, #2
 8010a06:	fb02 f204 	mul.w	r2, r2, r4
 8010a0a:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8010a0e:	fbb1 f1f0 	udiv	r1, r1, r0
 8010a12:	ebc1 7081 	rsb	r0, r1, r1, lsl #30
 8010a16:	460d      	mov	r5, r1
 8010a18:	62f9      	str	r1, [r7, #44]	; 0x2c
 8010a1a:	62ba      	str	r2, [r7, #40]	; 0x28
 8010a1c:	ebc1 7141 	rsb	r1, r1, r1, lsl #29
 8010a20:	0082      	lsls	r2, r0, #2
 8010a22:	65ba      	str	r2, [r7, #88]	; 0x58
 8010a24:	00ca      	lsls	r2, r1, #3
 8010a26:	607a      	str	r2, [r7, #4]
 8010a28:	00aa      	lsls	r2, r5, #2
 8010a2a:	60ba      	str	r2, [r7, #8]
 8010a2c:	fb03 f206 	mul.w	r2, r3, r6
 8010a30:	67ba      	str	r2, [r7, #120]	; 0x78
 8010a32:	69ba      	ldr	r2, [r7, #24]
 8010a34:	fb02 f303 	mul.w	r3, r2, r3
 8010a38:	617b      	str	r3, [r7, #20]
 8010a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010a3e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010a42:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8010a46:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8010a4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010a4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010a52:	2300      	movs	r3, #0
 8010a54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	f2c0 8112 	blt.w	8010c86 <forward_conv2d_nl_pool+0xaea>
 8010a62:	2100      	movs	r1, #0
 8010a64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010a66:	460a      	mov	r2, r1
 8010a68:	f8d7 4114 	ldr.w	r4, [r7, #276]	; 0x114
 8010a6c:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8010a70:	f8d7 5088 	ldr.w	r5, [r7, #136]	; 0x88
 8010a74:	4420      	add	r0, r4
 8010a76:	4408      	add	r0, r1
 8010a78:	f8d7 4104 	ldr.w	r4, [r7, #260]	; 0x104
 8010a7c:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 8010a80:	190c      	adds	r4, r1, r4
 8010a82:	42ac      	cmp	r4, r5
 8010a84:	bf28      	it	cs
 8010a86:	462c      	movcs	r4, r5
 8010a88:	f8d7 512c 	ldr.w	r5, [r7, #300]	; 0x12c
 8010a8c:	0080      	lsls	r0, r0, #2
 8010a8e:	1aa4      	subs	r4, r4, r2
 8010a90:	2d00      	cmp	r5, #0
 8010a92:	f000 80e9 	beq.w	8010c68 <forward_conv2d_nl_pool+0xacc>
 8010a96:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010a9a:	f8d7 6150 	ldr.w	r6, [r7, #336]	; 0x150
 8010a9e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8010aa2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010aa6:	42b5      	cmp	r5, r6
 8010aa8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 8010aac:	eba3 0204 	sub.w	r2, r3, r4
 8010ab0:	eba1 0104 	sub.w	r1, r1, r4
 8010ab4:	bf08      	it	eq
 8010ab6:	eef0 3a48 	vmoveq.f32	s7, s16
 8010aba:	462b      	mov	r3, r5
 8010abc:	697d      	ldr	r5, [r7, #20]
 8010abe:	f8d7 60b8 	ldr.w	r6, [r7, #184]	; 0xb8
 8010ac2:	4428      	add	r0, r5
 8010ac4:	f8d7 513c 	ldr.w	r5, [r7, #316]	; 0x13c
 8010ac8:	fb05 6e00 	mla	lr, r5, r0, r6
 8010acc:	eb0e 000b 	add.w	r0, lr, fp
 8010ad0:	4586      	cmp	lr, r0
 8010ad2:	61f8      	str	r0, [r7, #28]
 8010ad4:	f080 80a5 	bcs.w	8010c22 <forward_conv2d_nl_pool+0xa86>
 8010ad8:	0092      	lsls	r2, r2, #2
 8010ada:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8010ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ae0:	fb01 f10b 	mul.w	r1, r1, fp
 8010ae4:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8010ae8:	f024 0803 	bic.w	r8, r4, #3
 8010aec:	2a00      	cmp	r2, #0
 8010aee:	f000 8098 	beq.w	8010c22 <forward_conv2d_nl_pool+0xa86>
 8010af2:	f108 32ff 	add.w	r2, r8, #4294967295
 8010af6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010af8:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8010afc:	0892      	lsrs	r2, r2, #2
 8010afe:	3201      	adds	r2, #1
 8010b00:	4401      	add	r1, r0
 8010b02:	fb02 f00a 	mul.w	r0, r2, sl
 8010b06:	6638      	str	r0, [r7, #96]	; 0x60
 8010b08:	0110      	lsls	r0, r2, #4
 8010b0a:	0092      	lsls	r2, r2, #2
 8010b0c:	65fa      	str	r2, [r7, #92]	; 0x5c
 8010b0e:	1aca      	subs	r2, r1, r3
 8010b10:	613a      	str	r2, [r7, #16]
 8010b12:	68ba      	ldr	r2, [r7, #8]
 8010b14:	6738      	str	r0, [r7, #112]	; 0x70
 8010b16:	4413      	add	r3, r2
 8010b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010b1c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8010b20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b22:	4413      	add	r3, r2
 8010b24:	60fb      	str	r3, [r7, #12]
 8010b26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010b2a:	693b      	ldr	r3, [r7, #16]
 8010b2c:	4413      	add	r3, r2
 8010b2e:	677b      	str	r3, [r7, #116]	; 0x74
 8010b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8010b34:	ecf3 6a01 	vldmia	r3!, {s13}
 8010b38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010b3c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8010b46:	dd57      	ble.n	8010bf8 <forward_conv2d_nl_pool+0xa5c>
 8010b48:	4676      	mov	r6, lr
 8010b4a:	f04f 0c00 	mov.w	ip, #0
 8010b4e:	f1b8 0f00 	cmp.w	r8, #0
 8010b52:	f340 8087 	ble.w	8010c64 <forward_conv2d_nl_pool+0xac8>
 8010b56:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8010b5a:	f109 0310 	add.w	r3, r9, #16
 8010b5e:	18b1      	adds	r1, r6, r2
 8010b60:	2000      	movs	r0, #0
 8010b62:	4632      	mov	r2, r6
 8010b64:	eb02 050b 	add.w	r5, r2, fp
 8010b68:	ed95 7a00 	vldr	s14, [r5]
 8010b6c:	ed53 7a03 	vldr	s15, [r3, #-12]
 8010b70:	ed92 4a00 	vldr	s8, [r2]
 8010b74:	ed53 4a04 	vldr	s9, [r3, #-16]
 8010b78:	ed91 5a00 	vldr	s10, [r1]
 8010b7c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8010b80:	ed13 6a01 	vldr	s12, [r3, #-4]
 8010b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010b88:	eb01 050b 	add.w	r5, r1, fp
 8010b8c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8010b90:	3004      	adds	r0, #4
 8010b92:	4540      	cmp	r0, r8
 8010b94:	ed95 7a00 	vldr	s14, [r5]
 8010b98:	eee5 7a25 	vfma.f32	s15, s10, s11
 8010b9c:	4452      	add	r2, sl
 8010b9e:	4451      	add	r1, sl
 8010ba0:	f103 0310 	add.w	r3, r3, #16
 8010ba4:	eee7 7a06 	vfma.f32	s15, s14, s12
 8010ba8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010bac:	dbda      	blt.n	8010b64 <forward_conv2d_nl_pool+0x9c8>
 8010bae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010bb0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8010bb2:	441e      	add	r6, r3
 8010bb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010bb6:	4499      	add	r9, r3
 8010bb8:	42a0      	cmp	r0, r4
 8010bba:	da11      	bge.n	8010be0 <forward_conv2d_nl_pool+0xa44>
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	4633      	mov	r3, r6
 8010bc0:	4649      	mov	r1, r9
 8010bc2:	edd3 7a00 	vldr	s15, [r3]
 8010bc6:	ecb1 7a01 	vldmia	r1!, {s14}
 8010bca:	3201      	adds	r2, #1
 8010bcc:	42a2      	cmp	r2, r4
 8010bce:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010bd2:	445b      	add	r3, fp
 8010bd4:	d1f5      	bne.n	8010bc2 <forward_conv2d_nl_pool+0xa26>
 8010bd6:	1a20      	subs	r0, r4, r0
 8010bd8:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8010bdc:	fb00 660b 	mla	r6, r0, fp, r6
 8010be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010be4:	441e      	add	r6, r3
 8010be6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bea:	4499      	add	r9, r3
 8010bec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010bf0:	f10c 0c01 	add.w	ip, ip, #1
 8010bf4:	4563      	cmp	r3, ip
 8010bf6:	d1aa      	bne.n	8010b4e <forward_conv2d_nl_pool+0x9b2>
 8010bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bfa:	4499      	add	r9, r3
 8010bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010bfe:	ece3 6a01 	vstmia	r3!, {s13}
 8010c02:	677b      	str	r3, [r7, #116]	; 0x74
 8010c04:	e9d7 2333 	ldrd	r2, r3, [r7, #204]	; 0xcc
 8010c08:	4293      	cmp	r3, r2
 8010c0a:	d191      	bne.n	8010b30 <forward_conv2d_nl_pool+0x994>
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	687a      	ldr	r2, [r7, #4]
 8010c10:	1a9b      	subs	r3, r3, r2
 8010c12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010c16:	69fb      	ldr	r3, [r7, #28]
 8010c18:	f10e 0e04 	add.w	lr, lr, #4
 8010c1c:	459e      	cmp	lr, r3
 8010c1e:	f4ff af7d 	bcc.w	8010b1c <forward_conv2d_nl_pool+0x980>
 8010c22:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8010c26:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8010c2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010c2e:	440a      	add	r2, r1
 8010c30:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8010c34:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8010c38:	4608      	mov	r0, r1
 8010c3a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010c3e:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8010c42:	4410      	add	r0, r2
 8010c44:	1a8a      	subs	r2, r1, r2
 8010c46:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8010c4a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8010c4e:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8010c52:	3301      	adds	r3, #1
 8010c54:	429a      	cmp	r2, r3
 8010c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010c5a:	f47f aefd 	bne.w	8010a58 <forward_conv2d_nl_pool+0x8bc>
 8010c5e:	e5e7      	b.n	8010830 <forward_conv2d_nl_pool+0x694>
 8010c60:	68da      	ldr	r2, [r3, #12]
 8010c62:	e63f      	b.n	80108e4 <forward_conv2d_nl_pool+0x748>
 8010c64:	2000      	movs	r0, #0
 8010c66:	e7a7      	b.n	8010bb8 <forward_conv2d_nl_pool+0xa1c>
 8010c68:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010c6c:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8010c70:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010c74:	1b19      	subs	r1, r3, r4
 8010c76:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010c7a:	eef0 3a48 	vmov.f32	s7, s16
 8010c7e:	1b1a      	subs	r2, r3, r4
 8010c80:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8010c84:	e71a      	b.n	8010abc <forward_conv2d_nl_pool+0x920>
 8010c86:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8010c8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010c8c:	460a      	mov	r2, r1
 8010c8e:	440b      	add	r3, r1
 8010c90:	e6ea      	b.n	8010a68 <forward_conv2d_nl_pool+0x8cc>
 8010c92:	b168      	cbz	r0, 8010cb0 <forward_conv2d_nl_pool+0xb14>
 8010c94:	6882      	ldr	r2, [r0, #8]
 8010c96:	f8c7 2108 	str.w	r2, [r7, #264]	; 0x108
 8010c9a:	2201      	movs	r2, #1
 8010c9c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8010ca0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8010ca4:	f7ff bb29 	b.w	80102fa <forward_conv2d_nl_pool+0x15e>
 8010ca8:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8010cac:	f7ff bb08 	b.w	80102c0 <forward_conv2d_nl_pool+0x124>
 8010cb0:	2201      	movs	r2, #1
 8010cb2:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8010cb6:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8010cba:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8010cbe:	f7ff bb1c 	b.w	80102fa <forward_conv2d_nl_pool+0x15e>
 8010cc2:	3118      	adds	r1, #24
 8010cc4:	d008      	beq.n	8010cd8 <forward_conv2d_nl_pool+0xb3c>
 8010cc6:	462a      	mov	r2, r5
 8010cc8:	f8c7 5150 	str.w	r5, [r7, #336]	; 0x150
 8010ccc:	4629      	mov	r1, r5
 8010cce:	f7ff ba93 	b.w	80101f8 <forward_conv2d_nl_pool+0x5c>
 8010cd2:	4691      	mov	r9, r2
 8010cd4:	f7ff ba7d 	b.w	80101d2 <forward_conv2d_nl_pool+0x36>
 8010cd8:	68cb      	ldr	r3, [r1, #12]
 8010cda:	deff      	udf	#255	; 0xff
 8010cdc:	2300      	movs	r3, #0
 8010cde:	685b      	ldr	r3, [r3, #4]
 8010ce0:	deff      	udf	#255	; 0xff
 8010ce2:	4694      	mov	ip, r2
 8010ce4:	f7ff ba6c 	b.w	80101c0 <forward_conv2d_nl_pool+0x24>
 8010ce8:	6873      	ldr	r3, [r6, #4]
 8010cea:	deff      	udf	#255	; 0xff
 8010cec:	2200      	movs	r2, #0
 8010cee:	f7ff ba82 	b.w	80101f6 <forward_conv2d_nl_pool+0x5a>
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	deff      	udf	#255	; 0xff
 8010cf6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8010cfa:	2a00      	cmp	r2, #0
 8010cfc:	f43f ab60 	beq.w	80103c0 <forward_conv2d_nl_pool+0x224>
 8010d00:	2e03      	cmp	r6, #3
 8010d02:	d9eb      	bls.n	8010cdc <forward_conv2d_nl_pool+0xb40>
 8010d04:	685b      	ldr	r3, [r3, #4]
 8010d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d08:	b323      	cbz	r3, 8010d54 <forward_conv2d_nl_pool+0xbb8>
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	b313      	cbz	r3, 8010d54 <forward_conv2d_nl_pool+0xbb8>
 8010d0e:	699b      	ldr	r3, [r3, #24]
 8010d10:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8010d14:	e9d3 3401 	ldrd	r3, r4, [r3, #4]
 8010d18:	9301      	str	r3, [sp, #4]
 8010d1a:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
 8010d1e:	9000      	str	r0, [sp, #0]
 8010d20:	4673      	mov	r3, lr
 8010d22:	4620      	mov	r0, r4
 8010d24:	f7fe fa18 	bl	800f158 <ai_dict_decompress_f32>
 8010d28:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8010d2c:	b17c      	cbz	r4, 8010d4e <forward_conv2d_nl_pool+0xbb2>
 8010d2e:	f8c7 4128 	str.w	r4, [r7, #296]	; 0x128
 8010d32:	881e      	ldrh	r6, [r3, #0]
 8010d34:	f7ff bb44 	b.w	80103c0 <forward_conv2d_nl_pool+0x224>
 8010d38:	b178      	cbz	r0, 8010d5a <forward_conv2d_nl_pool+0xbbe>
 8010d3a:	6881      	ldr	r1, [r0, #8]
 8010d3c:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 8010d40:	2201      	movs	r2, #1
 8010d42:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8010d46:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8010d4a:	f7ff bad6 	b.w	80102fa <forward_conv2d_nl_pool+0x15e>
 8010d4e:	881e      	ldrh	r6, [r3, #0]
 8010d50:	f7ff bb36 	b.w	80103c0 <forward_conv2d_nl_pool+0x224>
 8010d54:	2300      	movs	r3, #0
 8010d56:	699b      	ldr	r3, [r3, #24]
 8010d58:	deff      	udf	#255	; 0xff
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
 8010d60:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8010d64:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8010d68:	f7ff bac7 	b.w	80102fa <forward_conv2d_nl_pool+0x15e>
 8010d6c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8010d6e:	2801      	cmp	r0, #1
 8010d70:	f47f ac10 	bne.w	8010594 <forward_conv2d_nl_pool+0x3f8>
 8010d74:	1ad2      	subs	r2, r2, r3
 8010d76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010d78:	f8d7 40b8 	ldr.w	r4, [r7, #184]	; 0xb8
 8010d7c:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8010d80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010d82:	fb00 4101 	mla	r1, r0, r1, r4
 8010d86:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8010d8a:	f8c7 1130 	str.w	r1, [r7, #304]	; 0x130
 8010d8e:	f080 81c4 	bcs.w	801111a <forward_conv2d_nl_pool+0xf7e>
 8010d92:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8010d96:	2a00      	cmp	r2, #0
 8010d98:	f43f ad4a 	beq.w	8010830 <forward_conv2d_nl_pool+0x694>
 8010d9c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010da0:	fb02 f303 	mul.w	r3, r2, r3
 8010da4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010da6:	677b      	str	r3, [r7, #116]	; 0x74
 8010da8:	1a9b      	subs	r3, r3, r2
 8010daa:	663b      	str	r3, [r7, #96]	; 0x60
 8010dac:	188b      	adds	r3, r1, r2
 8010dae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010db0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010db4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010db8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8010dbc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010dc0:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	; 0x28
 8010dc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010dc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010dcc:	2300      	movs	r3, #0
 8010dce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8010dd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	f000 8133 	beq.w	8011042 <forward_conv2d_nl_pool+0xea6>
 8010ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010de0:	ed93 6a00 	vldr	s12, [r3]
 8010de4:	3304      	adds	r3, #4
 8010de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010dea:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	f000 8101 	beq.w	8010ff6 <forward_conv2d_nl_pool+0xe5a>
 8010df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010df8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010dfc:	eb03 0802 	add.w	r8, r3, r2
 8010e00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8010e12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010e1a:	f04f 0b00 	mov.w	fp, #0
 8010e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	f2c0 8104 	blt.w	8011030 <forward_conv2d_nl_pool+0xe94>
 8010e28:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010e2c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010e2e:	2300      	movs	r3, #0
 8010e30:	f8d7 410c 	ldr.w	r4, [r7, #268]	; 0x10c
 8010e34:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 8010e38:	eb02 0c04 	add.w	ip, r2, r4
 8010e3c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8010e40:	4540      	cmp	r0, r8
 8010e42:	bf94      	ite	ls
 8010e44:	ebc3 0300 	rsbls	r3, r3, r0
 8010e48:	ebc3 0308 	rsbhi	r3, r3, r8
 8010e4c:	eba2 0903 	sub.w	r9, r2, r3
 8010e50:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8010e54:	1ac4      	subs	r4, r0, r3
 8010e56:	fb03 f302 	mul.w	r3, r3, r2
 8010e5a:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8010e5e:	2a00      	cmp	r2, #0
 8010e60:	f340 80e3 	ble.w	801102a <forward_conv2d_nl_pool+0xe8e>
 8010e64:	f023 050f 	bic.w	r5, r3, #15
 8010e68:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8010e6c:	1e68      	subs	r0, r5, #1
 8010e6e:	0900      	lsrs	r0, r0, #4
 8010e70:	3001      	adds	r0, #1
 8010e72:	fb06 f204 	mul.w	r2, r6, r4
 8010e76:	673a      	str	r2, [r7, #112]	; 0x70
 8010e78:	0102      	lsls	r2, r0, #4
 8010e7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8010e7c:	fb06 f909 	mul.w	r9, r6, r9
 8010e80:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 8010e84:	eef0 6a46 	vmov.f32	s13, s12
 8010e88:	f04f 0e00 	mov.w	lr, #0
 8010e8c:	4662      	mov	r2, ip
 8010e8e:	2d00      	cmp	r5, #0
 8010e90:	f340 80c9 	ble.w	8011026 <forward_conv2d_nl_pool+0xe8a>
 8010e94:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8010e98:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8010e9c:	2600      	movs	r6, #0
 8010e9e:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 8010ea2:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 8010ea6:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8010eaa:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8010eae:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 8010eb2:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 8010eb6:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8010eba:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8010ebe:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 8010ec2:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 8010ec6:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8010eca:	ed50 aa0a 	vldr	s21, [r0, #-40]	; 0xffffffd8
 8010ece:	ed14 aa0a 	vldr	s20, [r4, #-40]	; 0xffffffd8
 8010ed2:	ed50 9a09 	vldr	s19, [r0, #-36]	; 0xffffffdc
 8010ed6:	ed14 9a09 	vldr	s18, [r4, #-36]	; 0xffffffdc
 8010eda:	ed54 8a08 	vldr	s17, [r4, #-32]	; 0xffffffe0
 8010ede:	ed10 0a08 	vldr	s0, [r0, #-32]	; 0xffffffe0
 8010ee2:	ed54 0a07 	vldr	s1, [r4, #-28]	; 0xffffffe4
 8010ee6:	ed10 1a07 	vldr	s2, [r0, #-28]	; 0xffffffe4
 8010eea:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 8010eee:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8010ef2:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8010ef6:	ed10 3a05 	vldr	s6, [r0, #-20]	; 0xffffffec
 8010efa:	ed50 3a04 	vldr	s7, [r0, #-16]
 8010efe:	ed14 4a04 	vldr	s8, [r4, #-16]
 8010f02:	ed50 4a03 	vldr	s9, [r0, #-12]
 8010f06:	ed14 5a03 	vldr	s10, [r4, #-12]
 8010f0a:	ed50 5a02 	vldr	s11, [r0, #-8]
 8010f0e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8010f12:	ee67 7aaf 	vmul.f32	s15, s15, s31
 8010f16:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 8010f1a:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8010f1e:	3610      	adds	r6, #16
 8010f20:	42ae      	cmp	r6, r5
 8010f22:	ed14 fa01 	vldr	s30, [r4, #-4]
 8010f26:	ed50 ea01 	vldr	s29, [r0, #-4]
 8010f2a:	eeee 7a2f 	vfma.f32	s15, s28, s31
 8010f2e:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8010f32:	f100 0040 	add.w	r0, r0, #64	; 0x40
 8010f36:	eeed 7a8d 	vfma.f32	s15, s27, s26
 8010f3a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8010f3e:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8010f42:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8010f46:	eee9 7a89 	vfma.f32	s15, s19, s18
 8010f4a:	eee8 7a80 	vfma.f32	s15, s17, s0
 8010f4e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8010f52:	eee1 7a82 	vfma.f32	s15, s3, s4
 8010f56:	eee2 7a83 	vfma.f32	s15, s5, s6
 8010f5a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8010f5e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8010f62:	eee5 7a87 	vfma.f32	s15, s11, s14
 8010f66:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8010f6a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8010f6e:	db96      	blt.n	8010e9e <forward_conv2d_nl_pool+0xd02>
 8010f70:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010f72:	4451      	add	r1, sl
 8010f74:	4452      	add	r2, sl
 8010f76:	4283      	cmp	r3, r0
 8010f78:	dd0f      	ble.n	8010f9a <forward_conv2d_nl_pool+0xdfe>
 8010f7a:	4604      	mov	r4, r0
 8010f7c:	468c      	mov	ip, r1
 8010f7e:	4616      	mov	r6, r2
 8010f80:	ecb6 7a01 	vldmia	r6!, {s14}
 8010f84:	ecfc 7a01 	vldmia	ip!, {s15}
 8010f88:	3401      	adds	r4, #1
 8010f8a:	42a3      	cmp	r3, r4
 8010f8c:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010f90:	d1f6      	bne.n	8010f80 <forward_conv2d_nl_pool+0xde4>
 8010f92:	1a18      	subs	r0, r3, r0
 8010f94:	0080      	lsls	r0, r0, #2
 8010f96:	4402      	add	r2, r0
 8010f98:	4401      	add	r1, r0
 8010f9a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8010f9c:	4402      	add	r2, r0
 8010f9e:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 8010fa2:	f10e 0e01 	add.w	lr, lr, #1
 8010fa6:	4570      	cmp	r0, lr
 8010fa8:	4449      	add	r1, r9
 8010faa:	f47f af70 	bne.w	8010e8e <forward_conv2d_nl_pool+0xcf2>
 8010fae:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8010fb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010fb4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010fb8:	edc3 6a00 	vstr	s13, [r3]
 8010fbc:	4608      	mov	r0, r1
 8010fbe:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8010fc2:	440b      	add	r3, r1
 8010fc4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010fc8:	67bb      	str	r3, [r7, #120]	; 0x78
 8010fca:	4410      	add	r0, r2
 8010fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010fce:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 8010fd2:	4608      	mov	r0, r1
 8010fd4:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8010fd8:	4418      	add	r0, r3
 8010fda:	1acb      	subs	r3, r1, r3
 8010fdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010fe0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8010fe4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 8010fe8:	f10b 0b01 	add.w	fp, fp, #1
 8010fec:	455b      	cmp	r3, fp
 8010fee:	eba8 0802 	sub.w	r8, r8, r2
 8010ff2:	f47f af14 	bne.w	8010e1e <forward_conv2d_nl_pool+0xc82>
 8010ff6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8010ffa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010ffc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8011000:	440a      	add	r2, r1
 8011002:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8011006:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801100a:	3204      	adds	r2, #4
 801100c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8011010:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011014:	3301      	adds	r3, #1
 8011016:	429a      	cmp	r2, r3
 8011018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801101c:	f47f aed9 	bne.w	8010dd2 <forward_conv2d_nl_pool+0xc36>
 8011020:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8011024:	e404      	b.n	8010830 <forward_conv2d_nl_pool+0x694>
 8011026:	2000      	movs	r0, #0
 8011028:	e7a5      	b.n	8010f76 <forward_conv2d_nl_pool+0xdda>
 801102a:	eef0 6a46 	vmov.f32	s13, s12
 801102e:	e7be      	b.n	8010fae <forward_conv2d_nl_pool+0xe12>
 8011030:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8011034:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8011038:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 801103c:	eba8 0303 	sub.w	r3, r8, r3
 8011040:	e6f6      	b.n	8010e30 <forward_conv2d_nl_pool+0xc94>
 8011042:	eeb0 6a48 	vmov.f32	s12, s16
 8011046:	e6d0      	b.n	8010dea <forward_conv2d_nl_pool+0xc4e>
 8011048:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801104c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011050:	4611      	mov	r1, r2
 8011052:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8011056:	4419      	add	r1, r3
 8011058:	1ad3      	subs	r3, r2, r3
 801105a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801105e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011064:	f8c7 111c 	str.w	r1, [r7, #284]	; 0x11c
 8011068:	4413      	add	r3, r2
 801106a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 801106e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8011072:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011076:	4293      	cmp	r3, r2
 8011078:	f63f aa68 	bhi.w	801054c <forward_conv2d_nl_pool+0x3b0>
 801107c:	e49f      	b.n	80109be <forward_conv2d_nl_pool+0x822>
 801107e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011082:	f8d7 0140 	ldr.w	r0, [r7, #320]	; 0x140
 8011086:	699a      	ldr	r2, [r3, #24]
 8011088:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 801108c:	68d1      	ldr	r1, [r2, #12]
 801108e:	6853      	ldr	r3, [r2, #4]
 8011090:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011092:	fb00 4012 	mls	r0, r0, r2, r4
 8011096:	009b      	lsls	r3, r3, #2
 8011098:	4281      	cmp	r1, r0
 801109a:	bf88      	it	hi
 801109c:	18c0      	addhi	r0, r0, r3
 801109e:	4281      	cmp	r1, r0
 80110a0:	eb01 0203 	add.w	r2, r1, r3
 80110a4:	d216      	bcs.n	80110d4 <forward_conv2d_nl_pool+0xf38>
 80110a6:	f9b7 10b4 	ldrsh.w	r1, [r7, #180]	; 0xb4
 80110aa:	f8d7 4140 	ldr.w	r4, [r7, #320]	; 0x140
 80110ae:	42a1      	cmp	r1, r4
 80110b0:	d010      	beq.n	80110d4 <forward_conv2d_nl_pool+0xf38>
 80110b2:	4290      	cmp	r0, r2
 80110b4:	d20e      	bcs.n	80110d4 <forward_conv2d_nl_pool+0xf38>
 80110b6:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 80110ba:	f8d7 4134 	ldr.w	r4, [r7, #308]	; 0x134
 80110be:	f850 3b04 	ldr.w	r3, [r0], #4
 80110c2:	f841 3b04 	str.w	r3, [r1], #4
 80110c6:	69a2      	ldr	r2, [r4, #24]
 80110c8:	6853      	ldr	r3, [r2, #4]
 80110ca:	68d2      	ldr	r2, [r2, #12]
 80110cc:	009b      	lsls	r3, r3, #2
 80110ce:	441a      	add	r2, r3
 80110d0:	4282      	cmp	r2, r0
 80110d2:	d8f4      	bhi.n	80110be <forward_conv2d_nl_pool+0xf22>
 80110d4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80110d8:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 80110dc:	f8b7 1140 	ldrh.w	r1, [r7, #320]	; 0x140
 80110e0:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 80110e2:	4420      	add	r0, r4
 80110e4:	f8d7 40bc 	ldr.w	r4, [r7, #188]	; 0xbc
 80110e8:	1a40      	subs	r0, r0, r1
 80110ea:	4421      	add	r1, r4
 80110ec:	f8d7 414c 	ldr.w	r4, [r7, #332]	; 0x14c
 80110f0:	442c      	add	r4, r5
 80110f2:	b209      	sxth	r1, r1
 80110f4:	b200      	sxth	r0, r0
 80110f6:	4294      	cmp	r4, r2
 80110f8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
 80110fc:	f8c7 414c 	str.w	r4, [r7, #332]	; 0x14c
 8011100:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8011104:	4621      	mov	r1, r4
 8011106:	f4ff abfb 	bcc.w	8010900 <forward_conv2d_nl_pool+0x764>
 801110a:	425b      	negs	r3, r3
 801110c:	4419      	add	r1, r3
 801110e:	4291      	cmp	r1, r2
 8011110:	d2fc      	bcs.n	801110c <forward_conv2d_nl_pool+0xf70>
 8011112:	f8c7 114c 	str.w	r1, [r7, #332]	; 0x14c
 8011116:	f7ff bbf3 	b.w	8010900 <forward_conv2d_nl_pool+0x764>
 801111a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801111e:	f8c7 d070 	str.w	sp, [r7, #112]	; 0x70
 8011122:	320a      	adds	r2, #10
 8011124:	f022 0207 	bic.w	r2, r2, #7
 8011128:	ebad 0d02 	sub.w	sp, sp, r2
 801112c:	aa0a      	add	r2, sp, #40	; 0x28
 801112e:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8011132:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011136:	2a00      	cmp	r2, #0
 8011138:	f000 8153 	beq.w	80113e2 <forward_conv2d_nl_pool+0x1246>
 801113c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8011140:	f8c7 b01c 	str.w	fp, [r7, #28]
 8011144:	fb02 f303 	mul.w	r3, r2, r3
 8011148:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801114a:	663b      	str	r3, [r7, #96]	; 0x60
 801114c:	1a9b      	subs	r3, r3, r2
 801114e:	65bb      	str	r3, [r7, #88]	; 0x58
 8011150:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011154:	f8c7 a014 	str.w	sl, [r7, #20]
 8011158:	4413      	add	r3, r2
 801115a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801115c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011160:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8011164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011168:	67bb      	str	r3, [r7, #120]	; 0x78
 801116a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801116e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8011172:	2300      	movs	r3, #0
 8011174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011178:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801117c:	b13b      	cbz	r3, 801118e <forward_conv2d_nl_pool+0xff2>
 801117e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011182:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8011186:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 801118a:	f001 f83d 	bl	8012208 <memcpy>
 801118e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8011192:	2b00      	cmp	r3, #0
 8011194:	f000 8137 	beq.w	8011406 <forward_conv2d_nl_pool+0x126a>
 8011198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801119a:	ed93 6a00 	vldr	s12, [r3]
 801119e:	3304      	adds	r3, #4
 80111a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80111a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	f000 8101 	beq.w	80113ae <forward_conv2d_nl_pool+0x1212>
 80111ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80111b0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80111b4:	eb03 0802 	add.w	r8, r3, r2
 80111b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80111ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80111be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80111c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111c8:	677b      	str	r3, [r7, #116]	; 0x74
 80111ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80111ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80111d2:	f04f 0b00 	mov.w	fp, #0
 80111d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80111da:	2b00      	cmp	r3, #0
 80111dc:	f2c0 810a 	blt.w	80113f4 <forward_conv2d_nl_pool+0x1258>
 80111e0:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80111e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80111e6:	2300      	movs	r3, #0
 80111e8:	f8d7 40cc 	ldr.w	r4, [r7, #204]	; 0xcc
 80111ec:	f8d7 0154 	ldr.w	r0, [r7, #340]	; 0x154
 80111f0:	eb02 0c04 	add.w	ip, r2, r4
 80111f4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80111f8:	4540      	cmp	r0, r8
 80111fa:	bf94      	ite	ls
 80111fc:	ebc3 0300 	rsbls	r3, r3, r0
 8011200:	ebc3 0308 	rsbhi	r3, r3, r8
 8011204:	eba2 0903 	sub.w	r9, r2, r3
 8011208:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801120c:	1ac4      	subs	r4, r0, r3
 801120e:	fb03 f302 	mul.w	r3, r3, r2
 8011212:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8011216:	2a00      	cmp	r2, #0
 8011218:	f340 80e9 	ble.w	80113ee <forward_conv2d_nl_pool+0x1252>
 801121c:	f023 050f 	bic.w	r5, r3, #15
 8011220:	f8d7 60d4 	ldr.w	r6, [r7, #212]	; 0xd4
 8011224:	1e68      	subs	r0, r5, #1
 8011226:	0900      	lsrs	r0, r0, #4
 8011228:	3001      	adds	r0, #1
 801122a:	fb06 f204 	mul.w	r2, r6, r4
 801122e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8011230:	0102      	lsls	r2, r0, #4
 8011232:	62ba      	str	r2, [r7, #40]	; 0x28
 8011234:	fb06 f909 	mul.w	r9, r6, r9
 8011238:	ea4f 1a80 	mov.w	sl, r0, lsl #6
 801123c:	eef0 6a46 	vmov.f32	s13, s12
 8011240:	f04f 0e00 	mov.w	lr, #0
 8011244:	4662      	mov	r2, ip
 8011246:	2d00      	cmp	r5, #0
 8011248:	f340 80cf 	ble.w	80113ea <forward_conv2d_nl_pool+0x124e>
 801124c:	f101 0440 	add.w	r4, r1, #64	; 0x40
 8011250:	f102 0040 	add.w	r0, r2, #64	; 0x40
 8011254:	2600      	movs	r6, #0
 8011256:	ed54 fa0f 	vldr	s31, [r4, #-60]	; 0xffffffc4
 801125a:	ed50 7a0f 	vldr	s15, [r0, #-60]	; 0xffffffc4
 801125e:	ed14 fa10 	vldr	s30, [r4, #-64]	; 0xffffffc0
 8011262:	ed50 ea10 	vldr	s29, [r0, #-64]	; 0xffffffc0
 8011266:	ed14 ea0e 	vldr	s28, [r4, #-56]	; 0xffffffc8
 801126a:	ed54 da0d 	vldr	s27, [r4, #-52]	; 0xffffffcc
 801126e:	ed10 da0d 	vldr	s26, [r0, #-52]	; 0xffffffcc
 8011272:	ed50 ca0c 	vldr	s25, [r0, #-48]	; 0xffffffd0
 8011276:	ed14 ca0c 	vldr	s24, [r4, #-48]	; 0xffffffd0
 801127a:	ed50 ba0b 	vldr	s23, [r0, #-44]	; 0xffffffd4
 801127e:	ed14 ba0b 	vldr	s22, [r4, #-44]	; 0xffffffd4
 8011282:	ed54 aa0a 	vldr	s21, [r4, #-40]	; 0xffffffd8
 8011286:	ed10 aa0a 	vldr	s20, [r0, #-40]	; 0xffffffd8
 801128a:	ed54 9a09 	vldr	s19, [r4, #-36]	; 0xffffffdc
 801128e:	ed10 9a09 	vldr	s18, [r0, #-36]	; 0xffffffdc
 8011292:	ed50 8a08 	vldr	s17, [r0, #-32]	; 0xffffffe0
 8011296:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 801129a:	ed50 0a07 	vldr	s1, [r0, #-28]	; 0xffffffe4
 801129e:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 80112a2:	ed50 1a06 	vldr	s3, [r0, #-24]	; 0xffffffe8
 80112a6:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 80112aa:	ed50 2a05 	vldr	s5, [r0, #-20]	; 0xffffffec
 80112ae:	ed14 3a05 	vldr	s6, [r4, #-20]	; 0xffffffec
 80112b2:	ed50 3a04 	vldr	s7, [r0, #-16]
 80112b6:	ed14 4a04 	vldr	s8, [r4, #-16]
 80112ba:	ed54 4a03 	vldr	s9, [r4, #-12]
 80112be:	ed10 5a03 	vldr	s10, [r0, #-12]
 80112c2:	ed50 5a02 	vldr	s11, [r0, #-8]
 80112c6:	ed14 7a02 	vldr	s14, [r4, #-8]
 80112ca:	ee67 7aaf 	vmul.f32	s15, s15, s31
 80112ce:	ed50 fa0e 	vldr	s31, [r0, #-56]	; 0xffffffc8
 80112d2:	eeef 7a2e 	vfma.f32	s15, s30, s29
 80112d6:	3610      	adds	r6, #16
 80112d8:	42ae      	cmp	r6, r5
 80112da:	ed14 fa01 	vldr	s30, [r4, #-4]
 80112de:	ed50 ea01 	vldr	s29, [r0, #-4]
 80112e2:	eeee 7a2f 	vfma.f32	s15, s28, s31
 80112e6:	f104 0440 	add.w	r4, r4, #64	; 0x40
 80112ea:	f100 0040 	add.w	r0, r0, #64	; 0x40
 80112ee:	eeed 7a8d 	vfma.f32	s15, s27, s26
 80112f2:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80112f6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80112fa:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80112fe:	eee9 7a89 	vfma.f32	s15, s19, s18
 8011302:	eee8 7a80 	vfma.f32	s15, s17, s0
 8011306:	eee0 7a81 	vfma.f32	s15, s1, s2
 801130a:	eee1 7a82 	vfma.f32	s15, s3, s4
 801130e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8011312:	eee3 7a84 	vfma.f32	s15, s7, s8
 8011316:	eee4 7a85 	vfma.f32	s15, s9, s10
 801131a:	eee5 7a87 	vfma.f32	s15, s11, s14
 801131e:	eeef 7a2e 	vfma.f32	s15, s30, s29
 8011322:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8011326:	db96      	blt.n	8011256 <forward_conv2d_nl_pool+0x10ba>
 8011328:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801132a:	4451      	add	r1, sl
 801132c:	4452      	add	r2, sl
 801132e:	4283      	cmp	r3, r0
 8011330:	dd0f      	ble.n	8011352 <forward_conv2d_nl_pool+0x11b6>
 8011332:	4604      	mov	r4, r0
 8011334:	468c      	mov	ip, r1
 8011336:	4616      	mov	r6, r2
 8011338:	ecb6 7a01 	vldmia	r6!, {s14}
 801133c:	ecfc 7a01 	vldmia	ip!, {s15}
 8011340:	3401      	adds	r4, #1
 8011342:	42a3      	cmp	r3, r4
 8011344:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011348:	d1f6      	bne.n	8011338 <forward_conv2d_nl_pool+0x119c>
 801134a:	1a18      	subs	r0, r3, r0
 801134c:	0080      	lsls	r0, r0, #2
 801134e:	4402      	add	r2, r0
 8011350:	4401      	add	r1, r0
 8011352:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8011354:	4402      	add	r2, r0
 8011356:	f8d7 0150 	ldr.w	r0, [r7, #336]	; 0x150
 801135a:	f10e 0e01 	add.w	lr, lr, #1
 801135e:	4570      	cmp	r0, lr
 8011360:	4449      	add	r1, r9
 8011362:	f47f af70 	bne.w	8011246 <forward_conv2d_nl_pool+0x10aa>
 8011366:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 801136a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801136c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8011370:	edc3 6a00 	vstr	s13, [r3]
 8011374:	4608      	mov	r0, r1
 8011376:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801137a:	440b      	add	r3, r1
 801137c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8011380:	677b      	str	r3, [r7, #116]	; 0x74
 8011382:	4410      	add	r0, r2
 8011384:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011386:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
 801138a:	4608      	mov	r0, r1
 801138c:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8011390:	4418      	add	r0, r3
 8011392:	1acb      	subs	r3, r1, r3
 8011394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011398:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801139c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
 80113a0:	f10b 0b01 	add.w	fp, fp, #1
 80113a4:	455b      	cmp	r3, fp
 80113a6:	eba8 0802 	sub.w	r8, r8, r2
 80113aa:	f47f af14 	bne.w	80111d6 <forward_conv2d_nl_pool+0x103a>
 80113ae:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80113b2:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 80113b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80113ba:	440a      	add	r2, r1
 80113bc:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80113c0:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80113c4:	3204      	adds	r2, #4
 80113c6:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80113ca:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80113ce:	3301      	adds	r3, #1
 80113d0:	429a      	cmp	r2, r3
 80113d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80113d6:	f47f aecf 	bne.w	8011178 <forward_conv2d_nl_pool+0xfdc>
 80113da:	f8d7 b01c 	ldr.w	fp, [r7, #28]
 80113de:	f8d7 a014 	ldr.w	sl, [r7, #20]
 80113e2:	f8d7 d070 	ldr.w	sp, [r7, #112]	; 0x70
 80113e6:	f7ff ba23 	b.w	8010830 <forward_conv2d_nl_pool+0x694>
 80113ea:	2000      	movs	r0, #0
 80113ec:	e79f      	b.n	801132e <forward_conv2d_nl_pool+0x1192>
 80113ee:	eef0 6a46 	vmov.f32	s13, s12
 80113f2:	e7b8      	b.n	8011366 <forward_conv2d_nl_pool+0x11ca>
 80113f4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80113f8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80113fc:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 8011400:	eba8 0303 	sub.w	r3, r8, r3
 8011404:	e6f0      	b.n	80111e8 <forward_conv2d_nl_pool+0x104c>
 8011406:	eeb0 6a48 	vmov.f32	s12, s16
 801140a:	e6ca      	b.n	80111a2 <forward_conv2d_nl_pool+0x1006>

0801140c <forward_dense>:
 801140c:	6983      	ldr	r3, [r0, #24]
 801140e:	881a      	ldrh	r2, [r3, #0]
 8011410:	2a00      	cmp	r2, #0
 8011412:	f000 80b5 	beq.w	8011580 <forward_dense+0x174>
 8011416:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801141a:	ed2d 8b10 	vpush	{d8-d15}
 801141e:	685f      	ldr	r7, [r3, #4]
 8011420:	687e      	ldr	r6, [r7, #4]
 8011422:	b091      	sub	sp, #68	; 0x44
 8011424:	b106      	cbz	r6, 8011428 <forward_dense+0x1c>
 8011426:	6836      	ldr	r6, [r6, #0]
 8011428:	2a01      	cmp	r2, #1
 801142a:	f240 80a6 	bls.w	801157a <forward_dense+0x16e>
 801142e:	693d      	ldr	r5, [r7, #16]
 8011430:	b105      	cbz	r5, 8011434 <forward_dense+0x28>
 8011432:	682d      	ldr	r5, [r5, #0]
 8011434:	2a02      	cmp	r2, #2
 8011436:	f000 80a5 	beq.w	8011584 <forward_dense+0x178>
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	2b00      	cmp	r3, #0
 801143e:	f000 821b 	beq.w	8011878 <forward_dense+0x46c>
 8011442:	6819      	ldr	r1, [r3, #0]
 8011444:	9106      	str	r1, [sp, #24]
 8011446:	f117 0118 	adds.w	r1, r7, #24
 801144a:	f000 80c9 	beq.w	80115e0 <forward_dense+0x1d4>
 801144e:	8b39      	ldrh	r1, [r7, #24]
 8011450:	2901      	cmp	r1, #1
 8011452:	f240 820e 	bls.w	8011872 <forward_dense+0x466>
 8011456:	2b00      	cmp	r3, #0
 8011458:	f000 80c4 	beq.w	80115e4 <forward_dense+0x1d8>
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	9307      	str	r3, [sp, #28]
 8011460:	9b06      	ldr	r3, [sp, #24]
 8011462:	68ec      	ldr	r4, [r5, #12]
 8011464:	6998      	ldr	r0, [r3, #24]
 8011466:	68f1      	ldr	r1, [r6, #12]
 8011468:	6803      	ldr	r3, [r0, #0]
 801146a:	f8d1 8004 	ldr.w	r8, [r1, #4]
 801146e:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 8011472:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8011476:	f3c3 5141 	ubfx	r1, r3, #21, #2
 801147a:	fa49 f101 	asr.w	r1, r9, r1
 801147e:	910b      	str	r1, [sp, #44]	; 0x2c
 8011480:	2a03      	cmp	r2, #3
 8011482:	fb0e f10c 	mul.w	r1, lr, ip
 8011486:	6864      	ldr	r4, [r4, #4]
 8011488:	9108      	str	r1, [sp, #32]
 801148a:	f000 81de 	beq.w	801184a <forward_dense+0x43e>
 801148e:	6abf      	ldr	r7, [r7, #40]	; 0x28
 8011490:	b117      	cbz	r7, 8011498 <forward_dense+0x8c>
 8011492:	683f      	ldr	r7, [r7, #0]
 8011494:	b107      	cbz	r7, 8011498 <forward_dense+0x8c>
 8011496:	69bf      	ldr	r7, [r7, #24]
 8011498:	f3c3 4343 	ubfx	r3, r3, #17, #4
 801149c:	2b04      	cmp	r3, #4
 801149e:	f000 81d7 	beq.w	8011850 <forward_dense+0x444>
 80114a2:	2b08      	cmp	r3, #8
 80114a4:	f000 81d4 	beq.w	8011850 <forward_dense+0x444>
 80114a8:	f04f 0a00 	mov.w	sl, #0
 80114ac:	69ab      	ldr	r3, [r5, #24]
 80114ae:	69b2      	ldr	r2, [r6, #24]
 80114b0:	6899      	ldr	r1, [r3, #8]
 80114b2:	9b06      	ldr	r3, [sp, #24]
 80114b4:	9104      	str	r1, [sp, #16]
 80114b6:	695b      	ldr	r3, [r3, #20]
 80114b8:	6897      	ldr	r7, [r2, #8]
 80114ba:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80114be:	00a3      	lsls	r3, r4, #2
 80114c0:	9309      	str	r3, [sp, #36]	; 0x24
 80114c2:	18ce      	adds	r6, r1, r3
 80114c4:	9b08      	ldr	r3, [sp, #32]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d052      	beq.n	8011570 <forward_dense+0x164>
 80114ca:	f1a8 0310 	sub.w	r3, r8, #16
 80114ce:	091b      	lsrs	r3, r3, #4
 80114d0:	3301      	adds	r3, #1
 80114d2:	019b      	lsls	r3, r3, #6
 80114d4:	930c      	str	r3, [sp, #48]	; 0x30
 80114d6:	ea4f 0388 	mov.w	r3, r8, lsl #2
 80114da:	930a      	str	r3, [sp, #40]	; 0x28
 80114dc:	2300      	movs	r3, #0
 80114de:	9305      	str	r3, [sp, #20]
 80114e0:	eddf aace 	vldr	s21, [pc, #824]	; 801181c <forward_dense+0x410>
 80114e4:	f008 030f 	and.w	r3, r8, #15
 80114e8:	930d      	str	r3, [sp, #52]	; 0x34
 80114ea:	9b06      	ldr	r3, [sp, #24]
 80114ec:	699b      	ldr	r3, [r3, #24]
 80114ee:	689d      	ldr	r5, [r3, #8]
 80114f0:	9b07      	ldr	r3, [sp, #28]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f000 818f 	beq.w	8011816 <forward_dense+0x40a>
 80114f8:	699b      	ldr	r3, [r3, #24]
 80114fa:	689c      	ldr	r4, [r3, #8]
 80114fc:	9b04      	ldr	r3, [sp, #16]
 80114fe:	f1ba 0f00 	cmp.w	sl, #0
 8011502:	d071      	beq.n	80115e8 <forward_dense+0x1dc>
 8011504:	42b3      	cmp	r3, r6
 8011506:	d229      	bcs.n	801155c <forward_dense+0x150>
 8011508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801150a:	469b      	mov	fp, r3
 801150c:	ab0f      	add	r3, sp, #60	; 0x3c
 801150e:	9303      	str	r3, [sp, #12]
 8011510:	2a04      	cmp	r2, #4
 8011512:	4633      	mov	r3, r6
 8011514:	4646      	mov	r6, r8
 8011516:	4698      	mov	r8, r3
 8011518:	d037      	beq.n	801158a <forward_dense+0x17e>
 801151a:	2c00      	cmp	r4, #0
 801151c:	f000 8180 	beq.w	8011820 <forward_dense+0x414>
 8011520:	f8d4 c000 	ldr.w	ip, [r4]
 8011524:	9803      	ldr	r0, [sp, #12]
 8011526:	9600      	str	r6, [sp, #0]
 8011528:	463b      	mov	r3, r7
 801152a:	4629      	mov	r1, r5
 801152c:	4652      	mov	r2, sl
 801152e:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 8011532:	f7fd fc85 	bl	800ee40 <ai_dict8_dot_array_f32>
 8011536:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011538:	f84b 3b04 	str.w	r3, [fp], #4
 801153c:	45c3      	cmp	fp, r8
 801153e:	f104 0404 	add.w	r4, r4, #4
 8011542:	444d      	add	r5, r9
 8011544:	d3e9      	bcc.n	801151a <forward_dense+0x10e>
 8011546:	4643      	mov	r3, r8
 8011548:	46b0      	mov	r8, r6
 801154a:	461e      	mov	r6, r3
 801154c:	9a04      	ldr	r2, [sp, #16]
 801154e:	43d3      	mvns	r3, r2
 8011550:	4433      	add	r3, r6
 8011552:	f023 0303 	bic.w	r3, r3, #3
 8011556:	3304      	adds	r3, #4
 8011558:	18d3      	adds	r3, r2, r3
 801155a:	9304      	str	r3, [sp, #16]
 801155c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801155e:	9b05      	ldr	r3, [sp, #20]
 8011560:	4417      	add	r7, r2
 8011562:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011564:	4416      	add	r6, r2
 8011566:	9a08      	ldr	r2, [sp, #32]
 8011568:	3301      	adds	r3, #1
 801156a:	4293      	cmp	r3, r2
 801156c:	9305      	str	r3, [sp, #20]
 801156e:	d1bc      	bne.n	80114ea <forward_dense+0xde>
 8011570:	b011      	add	sp, #68	; 0x44
 8011572:	ecbd 8b10 	vpop	{d8-d15}
 8011576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801157a:	2300      	movs	r3, #0
 801157c:	685b      	ldr	r3, [r3, #4]
 801157e:	deff      	udf	#255	; 0xff
 8011580:	6853      	ldr	r3, [r2, #4]
 8011582:	deff      	udf	#255	; 0xff
 8011584:	2300      	movs	r3, #0
 8011586:	685b      	ldr	r3, [r3, #4]
 8011588:	deff      	udf	#255	; 0xff
 801158a:	b1a4      	cbz	r4, 80115b6 <forward_dense+0x1aa>
 801158c:	f8d4 c000 	ldr.w	ip, [r4]
 8011590:	9803      	ldr	r0, [sp, #12]
 8011592:	9600      	str	r6, [sp, #0]
 8011594:	463b      	mov	r3, r7
 8011596:	4629      	mov	r1, r5
 8011598:	4652      	mov	r2, sl
 801159a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
 801159e:	f7fd fd1d 	bl	800efdc <ai_dict4_dot_array_f32>
 80115a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115a4:	f84b 3b04 	str.w	r3, [fp], #4
 80115a8:	45c3      	cmp	fp, r8
 80115aa:	f104 0404 	add.w	r4, r4, #4
 80115ae:	444d      	add	r5, r9
 80115b0:	d2c9      	bcs.n	8011546 <forward_dense+0x13a>
 80115b2:	2c00      	cmp	r4, #0
 80115b4:	d1ea      	bne.n	801158c <forward_dense+0x180>
 80115b6:	4634      	mov	r4, r6
 80115b8:	4646      	mov	r6, r8
 80115ba:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80115be:	9400      	str	r4, [sp, #0]
 80115c0:	463b      	mov	r3, r7
 80115c2:	4629      	mov	r1, r5
 80115c4:	4652      	mov	r2, sl
 80115c6:	4640      	mov	r0, r8
 80115c8:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 80115cc:	f7fd fd06 	bl	800efdc <ai_dict4_dot_array_f32>
 80115d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80115d2:	f84b 3b04 	str.w	r3, [fp], #4
 80115d6:	45b3      	cmp	fp, r6
 80115d8:	444d      	add	r5, r9
 80115da:	d3f0      	bcc.n	80115be <forward_dense+0x1b2>
 80115dc:	46a0      	mov	r8, r4
 80115de:	e7b5      	b.n	801154c <forward_dense+0x140>
 80115e0:	9107      	str	r1, [sp, #28]
 80115e2:	e73d      	b.n	8011460 <forward_dense+0x54>
 80115e4:	9307      	str	r3, [sp, #28]
 80115e6:	e73b      	b.n	8011460 <forward_dense+0x54>
 80115e8:	42b3      	cmp	r3, r6
 80115ea:	d2b7      	bcs.n	801155c <forward_dense+0x150>
 80115ec:	4618      	mov	r0, r3
 80115ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80115f0:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 80115f4:	eb07 0c03 	add.w	ip, r7, r3
 80115f8:	469e      	mov	lr, r3
 80115fa:	2c00      	cmp	r4, #0
 80115fc:	f000 80ff 	beq.w	80117fe <forward_dense+0x3f2>
 8011600:	f1b8 0f0f 	cmp.w	r8, #15
 8011604:	edd4 fa00 	vldr	s31, [r4]
 8011608:	eddf 6a84 	vldr	s13, [pc, #528]	; 801181c <forward_dense+0x410>
 801160c:	f104 0404 	add.w	r4, r4, #4
 8011610:	f240 80fd 	bls.w	801180e <forward_dense+0x402>
 8011614:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8011618:	f105 0340 	add.w	r3, r5, #64	; 0x40
 801161c:	4641      	mov	r1, r8
 801161e:	ed13 fa0f 	vldr	s30, [r3, #-60]	; 0xffffffc4
 8011622:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8011626:	ed53 ea10 	vldr	s29, [r3, #-64]	; 0xffffffc0
 801162a:	ed12 ea10 	vldr	s28, [r2, #-64]	; 0xffffffc0
 801162e:	ed52 da0e 	vldr	s27, [r2, #-56]	; 0xffffffc8
 8011632:	ed12 da0d 	vldr	s26, [r2, #-52]	; 0xffffffcc
 8011636:	ed53 ca0d 	vldr	s25, [r3, #-52]	; 0xffffffcc
 801163a:	ed12 ca0c 	vldr	s24, [r2, #-48]	; 0xffffffd0
 801163e:	ed53 ba0c 	vldr	s23, [r3, #-48]	; 0xffffffd0
 8011642:	ed13 ba0b 	vldr	s22, [r3, #-44]	; 0xffffffd4
 8011646:	ed12 aa0b 	vldr	s20, [r2, #-44]	; 0xffffffd4
 801164a:	ed52 9a0a 	vldr	s19, [r2, #-40]	; 0xffffffd8
 801164e:	ed13 9a0a 	vldr	s18, [r3, #-40]	; 0xffffffd8
 8011652:	ed52 8a09 	vldr	s17, [r2, #-36]	; 0xffffffdc
 8011656:	ed13 8a09 	vldr	s16, [r3, #-36]	; 0xffffffdc
 801165a:	ed13 0a08 	vldr	s0, [r3, #-32]	; 0xffffffe0
 801165e:	ed52 0a08 	vldr	s1, [r2, #-32]	; 0xffffffe0
 8011662:	ed13 1a07 	vldr	s2, [r3, #-28]	; 0xffffffe4
 8011666:	ed52 1a07 	vldr	s3, [r2, #-28]	; 0xffffffe4
 801166a:	ed13 2a06 	vldr	s4, [r3, #-24]	; 0xffffffe8
 801166e:	ed52 2a06 	vldr	s5, [r2, #-24]	; 0xffffffe8
 8011672:	ed12 3a05 	vldr	s6, [r2, #-20]	; 0xffffffec
 8011676:	ed53 3a05 	vldr	s7, [r3, #-20]	; 0xffffffec
 801167a:	ed12 4a04 	vldr	s8, [r2, #-16]
 801167e:	ed53 4a04 	vldr	s9, [r3, #-16]
 8011682:	ed13 5a03 	vldr	s10, [r3, #-12]
 8011686:	ed52 5a03 	vldr	s11, [r2, #-12]
 801168a:	ed13 6a02 	vldr	s12, [r3, #-8]
 801168e:	ed12 7a02 	vldr	s14, [r2, #-8]
 8011692:	ee67 7a8f 	vmul.f32	s15, s15, s30
 8011696:	ed13 fa0e 	vldr	s30, [r3, #-56]	; 0xffffffc8
 801169a:	eeee 7a8e 	vfma.f32	s15, s29, s28
 801169e:	3910      	subs	r1, #16
 80116a0:	290f      	cmp	r1, #15
 80116a2:	ed52 ea01 	vldr	s29, [r2, #-4]
 80116a6:	ed13 ea01 	vldr	s28, [r3, #-4]
 80116aa:	eeed 7a8f 	vfma.f32	s15, s27, s30
 80116ae:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80116b2:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80116b6:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80116ba:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80116be:	eeeb 7a0a 	vfma.f32	s15, s22, s20
 80116c2:	eee9 7a89 	vfma.f32	s15, s19, s18
 80116c6:	eee8 7a88 	vfma.f32	s15, s17, s16
 80116ca:	eee0 7a20 	vfma.f32	s15, s0, s1
 80116ce:	eee1 7a21 	vfma.f32	s15, s2, s3
 80116d2:	eee2 7a22 	vfma.f32	s15, s4, s5
 80116d6:	eee3 7a23 	vfma.f32	s15, s6, s7
 80116da:	eee4 7a24 	vfma.f32	s15, s8, s9
 80116de:	eee5 7a25 	vfma.f32	s15, s10, s11
 80116e2:	eee6 7a07 	vfma.f32	s15, s12, s14
 80116e6:	eeee 7a8e 	vfma.f32	s15, s29, s28
 80116ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80116ee:	d896      	bhi.n	801161e <forward_dense+0x212>
 80116f0:	eb05 010e 	add.w	r1, r5, lr
 80116f4:	465b      	mov	r3, fp
 80116f6:	4662      	mov	r2, ip
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d075      	beq.n	80117e8 <forward_dense+0x3dc>
 80116fc:	ed91 7a00 	vldr	s14, [r1]
 8011700:	edd2 7a00 	vldr	s15, [r2]
 8011704:	2b01      	cmp	r3, #1
 8011706:	eee7 6a27 	vfma.f32	s13, s14, s15
 801170a:	d06d      	beq.n	80117e8 <forward_dense+0x3dc>
 801170c:	ed91 7a01 	vldr	s14, [r1, #4]
 8011710:	edd2 7a01 	vldr	s15, [r2, #4]
 8011714:	2b02      	cmp	r3, #2
 8011716:	eee7 6a27 	vfma.f32	s13, s14, s15
 801171a:	d065      	beq.n	80117e8 <forward_dense+0x3dc>
 801171c:	ed91 7a02 	vldr	s14, [r1, #8]
 8011720:	edd2 7a02 	vldr	s15, [r2, #8]
 8011724:	2b03      	cmp	r3, #3
 8011726:	eee7 6a27 	vfma.f32	s13, s14, s15
 801172a:	d05d      	beq.n	80117e8 <forward_dense+0x3dc>
 801172c:	ed91 7a03 	vldr	s14, [r1, #12]
 8011730:	edd2 7a03 	vldr	s15, [r2, #12]
 8011734:	2b04      	cmp	r3, #4
 8011736:	eee7 6a27 	vfma.f32	s13, s14, s15
 801173a:	d055      	beq.n	80117e8 <forward_dense+0x3dc>
 801173c:	ed91 7a04 	vldr	s14, [r1, #16]
 8011740:	edd2 7a04 	vldr	s15, [r2, #16]
 8011744:	2b05      	cmp	r3, #5
 8011746:	eee7 6a27 	vfma.f32	s13, s14, s15
 801174a:	d04d      	beq.n	80117e8 <forward_dense+0x3dc>
 801174c:	ed91 7a05 	vldr	s14, [r1, #20]
 8011750:	edd2 7a05 	vldr	s15, [r2, #20]
 8011754:	2b06      	cmp	r3, #6
 8011756:	eee7 6a27 	vfma.f32	s13, s14, s15
 801175a:	d045      	beq.n	80117e8 <forward_dense+0x3dc>
 801175c:	ed91 7a06 	vldr	s14, [r1, #24]
 8011760:	edd2 7a06 	vldr	s15, [r2, #24]
 8011764:	2b07      	cmp	r3, #7
 8011766:	eee7 6a27 	vfma.f32	s13, s14, s15
 801176a:	d03d      	beq.n	80117e8 <forward_dense+0x3dc>
 801176c:	ed91 7a07 	vldr	s14, [r1, #28]
 8011770:	edd2 7a07 	vldr	s15, [r2, #28]
 8011774:	2b08      	cmp	r3, #8
 8011776:	eee7 6a27 	vfma.f32	s13, s14, s15
 801177a:	d035      	beq.n	80117e8 <forward_dense+0x3dc>
 801177c:	ed91 7a08 	vldr	s14, [r1, #32]
 8011780:	edd2 7a08 	vldr	s15, [r2, #32]
 8011784:	2b09      	cmp	r3, #9
 8011786:	eee7 6a27 	vfma.f32	s13, s14, s15
 801178a:	d02d      	beq.n	80117e8 <forward_dense+0x3dc>
 801178c:	ed91 7a09 	vldr	s14, [r1, #36]	; 0x24
 8011790:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8011794:	2b0a      	cmp	r3, #10
 8011796:	eee7 6a27 	vfma.f32	s13, s14, s15
 801179a:	d025      	beq.n	80117e8 <forward_dense+0x3dc>
 801179c:	ed91 7a0a 	vldr	s14, [r1, #40]	; 0x28
 80117a0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80117a4:	2b0b      	cmp	r3, #11
 80117a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80117aa:	d01d      	beq.n	80117e8 <forward_dense+0x3dc>
 80117ac:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
 80117b0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80117b4:	2b0c      	cmp	r3, #12
 80117b6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80117ba:	d015      	beq.n	80117e8 <forward_dense+0x3dc>
 80117bc:	ed91 7a0c 	vldr	s14, [r1, #48]	; 0x30
 80117c0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80117c4:	2b0d      	cmp	r3, #13
 80117c6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80117ca:	d00d      	beq.n	80117e8 <forward_dense+0x3dc>
 80117cc:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 80117d0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80117d4:	2b0e      	cmp	r3, #14
 80117d6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80117da:	d005      	beq.n	80117e8 <forward_dense+0x3dc>
 80117dc:	ed91 7a0e 	vldr	s14, [r1, #56]	; 0x38
 80117e0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80117e4:	eee7 6a27 	vfma.f32	s13, s14, s15
 80117e8:	444d      	add	r5, r9
 80117ea:	ee7f 6aa6 	vadd.f32	s13, s31, s13
 80117ee:	ece0 6a01 	vstmia	r0!, {s13}
 80117f2:	42b0      	cmp	r0, r6
 80117f4:	f4bf aeaa 	bcs.w	801154c <forward_dense+0x140>
 80117f8:	2c00      	cmp	r4, #0
 80117fa:	f47f af01 	bne.w	8011600 <forward_dense+0x1f4>
 80117fe:	f1b8 0f0f 	cmp.w	r8, #15
 8011802:	eef0 fa6a 	vmov.f32	s31, s21
 8011806:	eddf 6a05 	vldr	s13, [pc, #20]	; 801181c <forward_dense+0x410>
 801180a:	f63f af03 	bhi.w	8011614 <forward_dense+0x208>
 801180e:	4643      	mov	r3, r8
 8011810:	4629      	mov	r1, r5
 8011812:	463a      	mov	r2, r7
 8011814:	e770      	b.n	80116f8 <forward_dense+0x2ec>
 8011816:	461c      	mov	r4, r3
 8011818:	e670      	b.n	80114fc <forward_dense+0xf0>
 801181a:	bf00      	nop
 801181c:	00000000 	.word	0x00000000
 8011820:	4634      	mov	r4, r6
 8011822:	4646      	mov	r6, r8
 8011824:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8011828:	9400      	str	r4, [sp, #0]
 801182a:	463b      	mov	r3, r7
 801182c:	4629      	mov	r1, r5
 801182e:	4652      	mov	r2, sl
 8011830:	4640      	mov	r0, r8
 8011832:	edcd aa0f 	vstr	s21, [sp, #60]	; 0x3c
 8011836:	f7fd fb03 	bl	800ee40 <ai_dict8_dot_array_f32>
 801183a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801183c:	f84b 3b04 	str.w	r3, [fp], #4
 8011840:	455e      	cmp	r6, fp
 8011842:	444d      	add	r5, r9
 8011844:	d8f0      	bhi.n	8011828 <forward_dense+0x41c>
 8011846:	46a0      	mov	r8, r4
 8011848:	e680      	b.n	801154c <forward_dense+0x140>
 801184a:	2300      	movs	r3, #0
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	deff      	udf	#255	; 0xff
 8011850:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8011854:	2f00      	cmp	r7, #0
 8011856:	f43f ae29 	beq.w	80114ac <forward_dense+0xa0>
 801185a:	e9d7 0100 	ldrd	r0, r1, [r7]
 801185e:	f000 fc4f 	bl	8012100 <ai_array_get_byte_size>
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	4602      	mov	r2, r0
 8011866:	4651      	mov	r1, sl
 8011868:	4618      	mov	r0, r3
 801186a:	f000 fccd 	bl	8012208 <memcpy>
 801186e:	4682      	mov	sl, r0
 8011870:	e61c      	b.n	80114ac <forward_dense+0xa0>
 8011872:	2300      	movs	r3, #0
 8011874:	9307      	str	r3, [sp, #28]
 8011876:	e5f3      	b.n	8011460 <forward_dense+0x54>
 8011878:	9306      	str	r3, [sp, #24]
 801187a:	e5e4      	b.n	8011446 <forward_dense+0x3a>

0801187c <nl_func_relu_array_f32>:
 801187c:	b410      	push	{r4}
 801187e:	698c      	ldr	r4, [r1, #24]
 8011880:	6981      	ldr	r1, [r0, #24]
 8011882:	68a3      	ldr	r3, [r4, #8]
 8011884:	6889      	ldr	r1, [r1, #8]
 8011886:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 801188a:	3a01      	subs	r2, #1
 801188c:	0092      	lsls	r2, r2, #2
 801188e:	189b      	adds	r3, r3, r2
 8011890:	d216      	bcs.n	80118c0 <nl_func_relu_array_f32+0x44>
 8011892:	3204      	adds	r2, #4
 8011894:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80118c8 <nl_func_relu_array_f32+0x4c>
 8011898:	4411      	add	r1, r2
 801189a:	3304      	adds	r3, #4
 801189c:	ed53 7a01 	vldr	s15, [r3, #-4]
 80118a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80118a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118a8:	bfb8      	it	lt
 80118aa:	eef0 7a47 	vmovlt.f32	s15, s14
 80118ae:	ed61 7a01 	vstmdb	r1!, {s15}
 80118b2:	68a0      	ldr	r0, [r4, #8]
 80118b4:	f1a3 0208 	sub.w	r2, r3, #8
 80118b8:	4290      	cmp	r0, r2
 80118ba:	f1a3 0304 	sub.w	r3, r3, #4
 80118be:	d9ed      	bls.n	801189c <nl_func_relu_array_f32+0x20>
 80118c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80118c4:	4770      	bx	lr
 80118c6:	bf00      	nop
 80118c8:	00000000 	.word	0x00000000

080118cc <nl_func_sm_array_f32>:
 80118cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118d0:	ed2d 8b04 	vpush	{d8-d9}
 80118d4:	b089      	sub	sp, #36	; 0x24
 80118d6:	698f      	ldr	r7, [r1, #24]
 80118d8:	6984      	ldr	r4, [r0, #24]
 80118da:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 80118de:	68bd      	ldr	r5, [r7, #8]
 80118e0:	9402      	str	r4, [sp, #8]
 80118e2:	4626      	mov	r6, r4
 80118e4:	4696      	mov	lr, r2
 80118e6:	eba2 020c 	sub.w	r2, r2, ip
 80118ea:	eb05 0582 	add.w	r5, r5, r2, lsl #2
 80118ee:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 80118f0:	68fa      	ldr	r2, [r7, #12]
 80118f2:	68b6      	ldr	r6, [r6, #8]
 80118f4:	ebae 0e04 	sub.w	lr, lr, r4
 80118f8:	4295      	cmp	r5, r2
 80118fa:	eb06 068e 	add.w	r6, r6, lr, lsl #2
 80118fe:	d354      	bcc.n	80119aa <nl_func_sm_array_f32+0xde>
 8011900:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8011904:	f1cc 0200 	rsb	r2, ip, #0
 8011908:	00a4      	lsls	r4, r4, #2
 801190a:	e9cd 1006 	strd	r1, r0, [sp, #24]
 801190e:	9303      	str	r3, [sp, #12]
 8011910:	9204      	str	r2, [sp, #16]
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	4262      	negs	r2, r4
 8011916:	9205      	str	r2, [sp, #20]
 8011918:	9301      	str	r3, [sp, #4]
 801191a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801191e:	9b02      	ldr	r3, [sp, #8]
 8011920:	9a07      	ldr	r2, [sp, #28]
 8011922:	60bd      	str	r5, [r7, #8]
 8011924:	609e      	str	r6, [r3, #8]
 8011926:	9b06      	ldr	r3, [sp, #24]
 8011928:	6992      	ldr	r2, [r2, #24]
 801192a:	699b      	ldr	r3, [r3, #24]
 801192c:	6894      	ldr	r4, [r2, #8]
 801192e:	9a03      	ldr	r2, [sp, #12]
 8011930:	689b      	ldr	r3, [r3, #8]
 8011932:	2a01      	cmp	r2, #1
 8011934:	ed93 8a00 	vldr	s16, [r3]
 8011938:	d940      	bls.n	80119bc <nl_func_sm_array_f32+0xf0>
 801193a:	9901      	ldr	r1, [sp, #4]
 801193c:	1d1a      	adds	r2, r3, #4
 801193e:	eb03 0b01 	add.w	fp, r3, r1
 8011942:	ecf2 7a01 	vldmia	r2!, {s15}
 8011946:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801194a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801194e:	bfb8      	it	lt
 8011950:	eeb0 8a67 	vmovlt.f32	s16, s15
 8011954:	4593      	cmp	fp, r2
 8011956:	d1f4      	bne.n	8011942 <nl_func_sm_array_f32+0x76>
 8011958:	eddf 8a1b 	vldr	s17, [pc, #108]	; 80119c8 <nl_func_sm_array_f32+0xfc>
 801195c:	469a      	mov	sl, r3
 801195e:	46a1      	mov	r9, r4
 8011960:	46a0      	mov	r8, r4
 8011962:	ecba 0a01 	vldmia	sl!, {s0}
 8011966:	ee30 0a48 	vsub.f32	s0, s0, s16
 801196a:	f005 fb81 	bl	8017070 <expf>
 801196e:	45d3      	cmp	fp, sl
 8011970:	eca8 0a01 	vstmia	r8!, {s0}
 8011974:	ee78 8a80 	vadd.f32	s17, s17, s0
 8011978:	d1f3      	bne.n	8011962 <nl_func_sm_array_f32+0x96>
 801197a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011982:	d00b      	beq.n	801199c <nl_func_sm_array_f32+0xd0>
 8011984:	ee89 7a28 	vdiv.f32	s14, s18, s17
 8011988:	9b01      	ldr	r3, [sp, #4]
 801198a:	441c      	add	r4, r3
 801198c:	edd9 7a00 	vldr	s15, [r9]
 8011990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011994:	ece9 7a01 	vstmia	r9!, {s15}
 8011998:	454c      	cmp	r4, r9
 801199a:	d1f7      	bne.n	801198c <nl_func_sm_array_f32+0xc0>
 801199c:	9b04      	ldr	r3, [sp, #16]
 801199e:	68fa      	ldr	r2, [r7, #12]
 80119a0:	441d      	add	r5, r3
 80119a2:	9b05      	ldr	r3, [sp, #20]
 80119a4:	42aa      	cmp	r2, r5
 80119a6:	441e      	add	r6, r3
 80119a8:	d9b9      	bls.n	801191e <nl_func_sm_array_f32+0x52>
 80119aa:	60ba      	str	r2, [r7, #8]
 80119ac:	9a02      	ldr	r2, [sp, #8]
 80119ae:	68d3      	ldr	r3, [r2, #12]
 80119b0:	6093      	str	r3, [r2, #8]
 80119b2:	b009      	add	sp, #36	; 0x24
 80119b4:	ecbd 8b04 	vpop	{d8-d9}
 80119b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119bc:	2a00      	cmp	r2, #0
 80119be:	d0ed      	beq.n	801199c <nl_func_sm_array_f32+0xd0>
 80119c0:	9a01      	ldr	r2, [sp, #4]
 80119c2:	eb03 0b02 	add.w	fp, r3, r2
 80119c6:	e7c7      	b.n	8011958 <nl_func_sm_array_f32+0x8c>
 80119c8:	00000000 	.word	0x00000000

080119cc <nl_func_relu_generic_array_f32>:
 80119cc:	b430      	push	{r4, r5}
 80119ce:	6989      	ldr	r1, [r1, #24]
 80119d0:	6980      	ldr	r0, [r0, #24]
 80119d2:	edd3 6a02 	vldr	s13, [r3, #8]
 80119d6:	688c      	ldr	r4, [r1, #8]
 80119d8:	6880      	ldr	r0, [r0, #8]
 80119da:	ed93 7a00 	vldr	s14, [r3]
 80119de:	ed93 6a01 	vldr	s12, [r3, #4]
 80119e2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80119e6:	3a01      	subs	r2, #1
 80119e8:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80119ec:	0092      	lsls	r2, r2, #2
 80119ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f2:	4410      	add	r0, r2
 80119f4:	4422      	add	r2, r4
 80119f6:	d421      	bmi.n	8011a3c <nl_func_relu_generic_array_f32+0x70>
 80119f8:	4294      	cmp	r4, r2
 80119fa:	d83d      	bhi.n	8011a78 <nl_func_relu_generic_array_f32+0xac>
 80119fc:	1d13      	adds	r3, r2, #4
 80119fe:	1d02      	adds	r2, r0, #4
 8011a00:	e010      	b.n	8011a24 <nl_func_relu_generic_array_f32+0x58>
 8011a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a0a:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8011a0e:	d501      	bpl.n	8011a14 <nl_func_relu_generic_array_f32+0x48>
 8011a10:	ee65 7a86 	vmul.f32	s15, s11, s12
 8011a14:	ed62 7a01 	vstmdb	r2!, {s15}
 8011a18:	6888      	ldr	r0, [r1, #8]
 8011a1a:	f1a3 0408 	sub.w	r4, r3, #8
 8011a1e:	4284      	cmp	r4, r0
 8011a20:	462b      	mov	r3, r5
 8011a22:	d329      	bcc.n	8011a78 <nl_func_relu_generic_array_f32+0xac>
 8011a24:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011a28:	eef4 7ae6 	vcmpe.f32	s15, s13
 8011a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a30:	f1a3 0504 	sub.w	r5, r3, #4
 8011a34:	d4e5      	bmi.n	8011a02 <nl_func_relu_generic_array_f32+0x36>
 8011a36:	eef0 7a66 	vmov.f32	s15, s13
 8011a3a:	e7eb      	b.n	8011a14 <nl_func_relu_generic_array_f32+0x48>
 8011a3c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8011a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a44:	d01a      	beq.n	8011a7c <nl_func_relu_generic_array_f32+0xb0>
 8011a46:	4294      	cmp	r4, r2
 8011a48:	d816      	bhi.n	8011a78 <nl_func_relu_generic_array_f32+0xac>
 8011a4a:	1d13      	adds	r3, r2, #4
 8011a4c:	1d02      	adds	r2, r0, #4
 8011a4e:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011a52:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8011a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a5a:	f1a3 0408 	sub.w	r4, r3, #8
 8011a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a62:	f1a3 0004 	sub.w	r0, r3, #4
 8011a66:	ee66 6a86 	vmul.f32	s13, s13, s12
 8011a6a:	4623      	mov	r3, r4
 8011a6c:	d51e      	bpl.n	8011aac <nl_func_relu_generic_array_f32+0xe0>
 8011a6e:	ed62 6a01 	vstmdb	r2!, {s13}
 8011a72:	688b      	ldr	r3, [r1, #8]
 8011a74:	42a3      	cmp	r3, r4
 8011a76:	d91e      	bls.n	8011ab6 <nl_func_relu_generic_array_f32+0xea>
 8011a78:	bc30      	pop	{r4, r5}
 8011a7a:	4770      	bx	lr
 8011a7c:	4294      	cmp	r4, r2
 8011a7e:	d8fb      	bhi.n	8011a78 <nl_func_relu_generic_array_f32+0xac>
 8011a80:	1d13      	adds	r3, r2, #4
 8011a82:	2500      	movs	r5, #0
 8011a84:	1d02      	adds	r2, r0, #4
 8011a86:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011a8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011a8e:	f1a3 0408 	sub.w	r4, r3, #8
 8011a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a96:	f1a3 0004 	sub.w	r0, r3, #4
 8011a9a:	4623      	mov	r3, r4
 8011a9c:	db0d      	blt.n	8011aba <nl_func_relu_generic_array_f32+0xee>
 8011a9e:	ed62 7a01 	vstmdb	r2!, {s15}
 8011aa2:	688b      	ldr	r3, [r1, #8]
 8011aa4:	42a3      	cmp	r3, r4
 8011aa6:	d8e7      	bhi.n	8011a78 <nl_func_relu_generic_array_f32+0xac>
 8011aa8:	4603      	mov	r3, r0
 8011aaa:	e7ec      	b.n	8011a86 <nl_func_relu_generic_array_f32+0xba>
 8011aac:	ed62 7a01 	vstmdb	r2!, {s15}
 8011ab0:	688c      	ldr	r4, [r1, #8]
 8011ab2:	429c      	cmp	r4, r3
 8011ab4:	d8e0      	bhi.n	8011a78 <nl_func_relu_generic_array_f32+0xac>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	e7c9      	b.n	8011a4e <nl_func_relu_generic_array_f32+0x82>
 8011aba:	f842 5d04 	str.w	r5, [r2, #-4]!
 8011abe:	688c      	ldr	r4, [r1, #8]
 8011ac0:	429c      	cmp	r4, r3
 8011ac2:	d8d9      	bhi.n	8011a78 <nl_func_relu_generic_array_f32+0xac>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	e7de      	b.n	8011a86 <nl_func_relu_generic_array_f32+0xba>

08011ac8 <forward_relu>:
 8011ac8:	6982      	ldr	r2, [r0, #24]
 8011aca:	8813      	ldrh	r3, [r2, #0]
 8011acc:	b333      	cbz	r3, 8011b1c <forward_relu+0x54>
 8011ace:	6852      	ldr	r2, [r2, #4]
 8011ad0:	6851      	ldr	r1, [r2, #4]
 8011ad2:	b101      	cbz	r1, 8011ad6 <forward_relu+0xe>
 8011ad4:	6809      	ldr	r1, [r1, #0]
 8011ad6:	2b01      	cmp	r3, #1
 8011ad8:	d91d      	bls.n	8011b16 <forward_relu+0x4e>
 8011ada:	b4f0      	push	{r4, r5, r6, r7}
 8011adc:	6917      	ldr	r7, [r2, #16]
 8011ade:	b107      	cbz	r7, 8011ae2 <forward_relu+0x1a>
 8011ae0:	683f      	ldr	r7, [r7, #0]
 8011ae2:	688c      	ldr	r4, [r1, #8]
 8011ae4:	69c3      	ldr	r3, [r0, #28]
 8011ae6:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d044      	beq.n	8011b78 <forward_relu+0xb0>
 8011aee:	e9d3 5301 	ldrd	r5, r3, [r3, #4]
 8011af2:	2d01      	cmp	r5, #1
 8011af4:	d014      	beq.n	8011b20 <forward_relu+0x58>
 8011af6:	2c00      	cmp	r4, #0
 8011af8:	d074      	beq.n	8011be4 <forward_relu+0x11c>
 8011afa:	68ce      	ldr	r6, [r1, #12]
 8011afc:	2201      	movs	r2, #1
 8011afe:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011b02:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011b06:	42a6      	cmp	r6, r4
 8011b08:	fb05 f202 	mul.w	r2, r5, r2
 8011b0c:	d1f9      	bne.n	8011b02 <forward_relu+0x3a>
 8011b0e:	4638      	mov	r0, r7
 8011b10:	bcf0      	pop	{r4, r5, r6, r7}
 8011b12:	f7ff bf5b 	b.w	80119cc <nl_func_relu_generic_array_f32>
 8011b16:	2300      	movs	r3, #0
 8011b18:	685b      	ldr	r3, [r3, #4]
 8011b1a:	deff      	udf	#255	; 0xff
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	deff      	udf	#255	; 0xff
 8011b20:	69ba      	ldr	r2, [r7, #24]
 8011b22:	6988      	ldr	r0, [r1, #24]
 8011b24:	6896      	ldr	r6, [r2, #8]
 8011b26:	ed93 7a00 	vldr	s14, [r3]
 8011b2a:	6882      	ldr	r2, [r0, #8]
 8011b2c:	b184      	cbz	r4, 8011b50 <forward_relu+0x88>
 8011b2e:	68cf      	ldr	r7, [r1, #12]
 8011b30:	462b      	mov	r3, r5
 8011b32:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8011b36:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8011b3a:	42a7      	cmp	r7, r4
 8011b3c:	fb01 f303 	mul.w	r3, r1, r3
 8011b40:	d1f9      	bne.n	8011b36 <forward_relu+0x6e>
 8011b42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8011b46:	3b01      	subs	r3, #1
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	18d2      	adds	r2, r2, r3
 8011b4c:	441e      	add	r6, r3
 8011b4e:	d23f      	bcs.n	8011bd0 <forward_relu+0x108>
 8011b50:	1d13      	adds	r3, r2, #4
 8011b52:	2500      	movs	r5, #0
 8011b54:	1d32      	adds	r2, r6, #4
 8011b56:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011b62:	f1a3 0104 	sub.w	r1, r3, #4
 8011b66:	d835      	bhi.n	8011bd4 <forward_relu+0x10c>
 8011b68:	ed62 7a01 	vstmdb	r2!, {s15}
 8011b6c:	6884      	ldr	r4, [r0, #8]
 8011b6e:	3b08      	subs	r3, #8
 8011b70:	429c      	cmp	r4, r3
 8011b72:	d82d      	bhi.n	8011bd0 <forward_relu+0x108>
 8011b74:	460b      	mov	r3, r1
 8011b76:	e7ee      	b.n	8011b56 <forward_relu+0x8e>
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	698d      	ldr	r5, [r1, #24]
 8011b7c:	6898      	ldr	r0, [r3, #8]
 8011b7e:	68ab      	ldr	r3, [r5, #8]
 8011b80:	b184      	cbz	r4, 8011ba4 <forward_relu+0xdc>
 8011b82:	68ce      	ldr	r6, [r1, #12]
 8011b84:	2201      	movs	r2, #1
 8011b86:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011b8a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
 8011b8e:	42a6      	cmp	r6, r4
 8011b90:	fb01 f202 	mul.w	r2, r1, r2
 8011b94:	d1f9      	bne.n	8011b8a <forward_relu+0xc2>
 8011b96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8011b9a:	3a01      	subs	r2, #1
 8011b9c:	0092      	lsls	r2, r2, #2
 8011b9e:	189b      	adds	r3, r3, r2
 8011ba0:	4410      	add	r0, r2
 8011ba2:	d215      	bcs.n	8011bd0 <forward_relu+0x108>
 8011ba4:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8011be8 <forward_relu+0x120>
 8011ba8:	3304      	adds	r3, #4
 8011baa:	1d01      	adds	r1, r0, #4
 8011bac:	ed53 7a01 	vldr	s15, [r3, #-4]
 8011bb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bb8:	bfb8      	it	lt
 8011bba:	eef0 7a47 	vmovlt.f32	s15, s14
 8011bbe:	ed61 7a01 	vstmdb	r1!, {s15}
 8011bc2:	68a8      	ldr	r0, [r5, #8]
 8011bc4:	f1a3 0208 	sub.w	r2, r3, #8
 8011bc8:	4290      	cmp	r0, r2
 8011bca:	f1a3 0304 	sub.w	r3, r3, #4
 8011bce:	d9ed      	bls.n	8011bac <forward_relu+0xe4>
 8011bd0:	bcf0      	pop	{r4, r5, r6, r7}
 8011bd2:	4770      	bx	lr
 8011bd4:	f842 5d04 	str.w	r5, [r2, #-4]!
 8011bd8:	6884      	ldr	r4, [r0, #8]
 8011bda:	3b08      	subs	r3, #8
 8011bdc:	429c      	cmp	r4, r3
 8011bde:	d8f7      	bhi.n	8011bd0 <forward_relu+0x108>
 8011be0:	460b      	mov	r3, r1
 8011be2:	e7b8      	b.n	8011b56 <forward_relu+0x8e>
 8011be4:	2201      	movs	r2, #1
 8011be6:	e792      	b.n	8011b0e <forward_relu+0x46>
 8011be8:	00000000 	.word	0x00000000

08011bec <forward_sm>:
 8011bec:	6982      	ldr	r2, [r0, #24]
 8011bee:	8813      	ldrh	r3, [r2, #0]
 8011bf0:	b32b      	cbz	r3, 8011c3e <forward_sm+0x52>
 8011bf2:	6852      	ldr	r2, [r2, #4]
 8011bf4:	6851      	ldr	r1, [r2, #4]
 8011bf6:	b101      	cbz	r1, 8011bfa <forward_sm+0xe>
 8011bf8:	6809      	ldr	r1, [r1, #0]
 8011bfa:	2b01      	cmp	r3, #1
 8011bfc:	d91c      	bls.n	8011c38 <forward_sm+0x4c>
 8011bfe:	6913      	ldr	r3, [r2, #16]
 8011c00:	b1c3      	cbz	r3, 8011c34 <forward_sm+0x48>
 8011c02:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011c04:	6818      	ldr	r0, [r3, #0]
 8011c06:	688c      	ldr	r4, [r1, #8]
 8011c08:	68c3      	ldr	r3, [r0, #12]
 8011c0a:	68ce      	ldr	r6, [r1, #12]
 8011c0c:	685f      	ldr	r7, [r3, #4]
 8011c0e:	6873      	ldr	r3, [r6, #4]
 8011c10:	0a24      	lsrs	r4, r4, #8
 8011c12:	b083      	sub	sp, #12
 8011c14:	d015      	beq.n	8011c42 <forward_sm+0x56>
 8011c16:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8011c1a:	2201      	movs	r2, #1
 8011c1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011c20:	42a6      	cmp	r6, r4
 8011c22:	fb05 f202 	mul.w	r2, r5, r2
 8011c26:	d1f9      	bne.n	8011c1c <forward_sm+0x30>
 8011c28:	e9cd 3700 	strd	r3, r7, [sp]
 8011c2c:	f7ff fe4e 	bl	80118cc <nl_func_sm_array_f32>
 8011c30:	b003      	add	sp, #12
 8011c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c34:	68db      	ldr	r3, [r3, #12]
 8011c36:	deff      	udf	#255	; 0xff
 8011c38:	2300      	movs	r3, #0
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	deff      	udf	#255	; 0xff
 8011c3e:	685b      	ldr	r3, [r3, #4]
 8011c40:	deff      	udf	#255	; 0xff
 8011c42:	2201      	movs	r2, #1
 8011c44:	e9cd 3700 	strd	r3, r7, [sp]
 8011c48:	f7ff fe40 	bl	80118cc <nl_func_sm_array_f32>
 8011c4c:	b003      	add	sp, #12
 8011c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011c50 <pool_func_mp_array_f32>:
 8011c50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c54:	b093      	sub	sp, #76	; 0x4c
 8011c56:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8011c5a:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8011c5c:	f8bd 407c 	ldrh.w	r4, [sp, #124]	; 0x7c
 8011c60:	68a8      	ldr	r0, [r5, #8]
 8011c62:	f8bd 5080 	ldrh.w	r5, [sp, #128]	; 0x80
 8011c66:	9508      	str	r5, [sp, #32]
 8011c68:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 8011c6c:	9002      	str	r0, [sp, #8]
 8011c6e:	950d      	str	r5, [sp, #52]	; 0x34
 8011c70:	f8bd 0070 	ldrh.w	r0, [sp, #112]	; 0x70
 8011c74:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 8011c78:	9004      	str	r0, [sp, #16]
 8011c7a:	9506      	str	r5, [sp, #24]
 8011c7c:	f8bd 0074 	ldrh.w	r0, [sp, #116]	; 0x74
 8011c80:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 8011c84:	9009      	str	r0, [sp, #36]	; 0x24
 8011c86:	950b      	str	r5, [sp, #44]	; 0x2c
 8011c88:	f8bd 0078 	ldrh.w	r0, [sp, #120]	; 0x78
 8011c8c:	9200      	str	r2, [sp, #0]
 8011c8e:	468a      	mov	sl, r1
 8011c90:	4699      	mov	r9, r3
 8011c92:	b95c      	cbnz	r4, 8011cac <pool_func_mp_array_f32+0x5c>
 8011c94:	b950      	cbnz	r0, 8011cac <pool_func_mp_array_f32+0x5c>
 8011c96:	9b04      	ldr	r3, [sp, #16]
 8011c98:	1a5a      	subs	r2, r3, r1
 8011c9a:	9b06      	ldr	r3, [sp, #24]
 8011c9c:	9908      	ldr	r1, [sp, #32]
 8011c9e:	3a01      	subs	r2, #1
 8011ca0:	3b01      	subs	r3, #1
 8011ca2:	fb13 2301 	smlabb	r3, r3, r1, r2
 8011ca6:	041a      	lsls	r2, r3, #16
 8011ca8:	f100 809b 	bmi.w	8011de2 <pool_func_mp_array_f32+0x192>
 8011cac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	f000 808b 	beq.w	8011dca <pool_func_mp_array_f32+0x17a>
 8011cb4:	9b06      	ldr	r3, [sp, #24]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	f000 8087 	beq.w	8011dca <pool_func_mp_array_f32+0x17a>
 8011cbc:	f1b9 0f00 	cmp.w	r9, #0
 8011cc0:	f000 8083 	beq.w	8011dca <pool_func_mp_array_f32+0x17a>
 8011cc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011cc6:	1b1c      	subs	r4, r3, r4
 8011cc8:	9b04      	ldr	r3, [sp, #16]
 8011cca:	1a1b      	subs	r3, r3, r0
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	4240      	negs	r0, r0
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	b2a1      	uxth	r1, r4
 8011cd4:	930f      	str	r3, [sp, #60]	; 0x3c
 8011cd6:	b283      	uxth	r3, r0
 8011cd8:	920e      	str	r2, [sp, #56]	; 0x38
 8011cda:	910c      	str	r1, [sp, #48]	; 0x30
 8011cdc:	9310      	str	r3, [sp, #64]	; 0x40
 8011cde:	9c06      	ldr	r4, [sp, #24]
 8011ce0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8011ce2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011ce4:	fb02 f204 	mul.w	r2, r2, r4
 8011ce8:	1acb      	subs	r3, r1, r3
 8011cea:	920a      	str	r2, [sp, #40]	; 0x28
 8011cec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8011cee:	9205      	str	r2, [sp, #20]
 8011cf0:	2000      	movs	r0, #0
 8011cf2:	b21b      	sxth	r3, r3
 8011cf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011cf6:	9303      	str	r3, [sp, #12]
 8011cf8:	9007      	str	r0, [sp, #28]
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	fa0f f881 	sxth.w	r8, r1
 8011d00:	9204      	str	r2, [sp, #16]
 8011d02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011d04:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 8011d08:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 8011d0c:	4413      	add	r3, r2
 8011d0e:	f04f 0e00 	mov.w	lr, #0
 8011d12:	fb09 f303 	mul.w	r3, r9, r3
 8011d16:	9301      	str	r3, [sp, #4]
 8011d18:	ea04 77e4 	and.w	r7, r4, r4, asr #31
 8011d1c:	4675      	mov	r5, lr
 8011d1e:	9903      	ldr	r1, [sp, #12]
 8011d20:	eddf 7a78 	vldr	s15, [pc, #480]	; 8011f04 <pool_func_mp_array_f32+0x2b4>
 8011d24:	4588      	cmp	r8, r1
 8011d26:	dd24      	ble.n	8011d72 <pool_func_mp_array_f32+0x122>
 8011d28:	4564      	cmp	r4, ip
 8011d2a:	dd1e      	ble.n	8011d6a <pool_func_mp_array_f32+0x11a>
 8011d2c:	2900      	cmp	r1, #0
 8011d2e:	fb0a f601 	mul.w	r6, sl, r1
 8011d32:	db1a      	blt.n	8011d6a <pool_func_mp_array_f32+0x11a>
 8011d34:	9b00      	ldr	r3, [sp, #0]
 8011d36:	4299      	cmp	r1, r3
 8011d38:	da17      	bge.n	8011d6a <pool_func_mp_array_f32+0x11a>
 8011d3a:	f1bc 0f00 	cmp.w	ip, #0
 8011d3e:	4663      	mov	r3, ip
 8011d40:	db46      	blt.n	8011dd0 <pool_func_mp_array_f32+0x180>
 8011d42:	18f2      	adds	r2, r6, r3
 8011d44:	fb09 5202 	mla	r2, r9, r2, r5
 8011d48:	1c58      	adds	r0, r3, #1
 8011d4a:	459a      	cmp	sl, r3
 8011d4c:	eb0b 0282 	add.w	r2, fp, r2, lsl #2
 8011d50:	b203      	sxth	r3, r0
 8011d52:	dd08      	ble.n	8011d66 <pool_func_mp_array_f32+0x116>
 8011d54:	ed92 7a00 	vldr	s14, [r2]
 8011d58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d60:	bfb8      	it	lt
 8011d62:	eef0 7a47 	vmovlt.f32	s15, s14
 8011d66:	429c      	cmp	r4, r3
 8011d68:	dceb      	bgt.n	8011d42 <pool_func_mp_array_f32+0xf2>
 8011d6a:	3101      	adds	r1, #1
 8011d6c:	b209      	sxth	r1, r1
 8011d6e:	4588      	cmp	r8, r1
 8011d70:	dcda      	bgt.n	8011d28 <pool_func_mp_array_f32+0xd8>
 8011d72:	9b01      	ldr	r3, [sp, #4]
 8011d74:	f10e 0e01 	add.w	lr, lr, #1
 8011d78:	441d      	add	r5, r3
 8011d7a:	9b02      	ldr	r3, [sp, #8]
 8011d7c:	fa0f fe8e 	sxth.w	lr, lr
 8011d80:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8011d84:	45ce      	cmp	lr, r9
 8011d86:	edc5 7a00 	vstr	s15, [r5]
 8011d8a:	4675      	mov	r5, lr
 8011d8c:	dbc7      	blt.n	8011d1e <pool_func_mp_array_f32+0xce>
 8011d8e:	9b07      	ldr	r3, [sp, #28]
 8011d90:	9808      	ldr	r0, [sp, #32]
 8011d92:	3301      	adds	r3, #1
 8011d94:	b219      	sxth	r1, r3
 8011d96:	9b05      	ldr	r3, [sp, #20]
 8011d98:	9107      	str	r1, [sp, #28]
 8011d9a:	461a      	mov	r2, r3
 8011d9c:	4402      	add	r2, r0
 8011d9e:	9b04      	ldr	r3, [sp, #16]
 8011da0:	b292      	uxth	r2, r2
 8011da2:	9205      	str	r2, [sp, #20]
 8011da4:	9a06      	ldr	r2, [sp, #24]
 8011da6:	4403      	add	r3, r0
 8011da8:	b29b      	uxth	r3, r3
 8011daa:	428a      	cmp	r2, r1
 8011dac:	9304      	str	r3, [sp, #16]
 8011dae:	460b      	mov	r3, r1
 8011db0:	dca7      	bgt.n	8011d02 <pool_func_mp_array_f32+0xb2>
 8011db2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011db4:	3301      	adds	r3, #1
 8011db6:	b21a      	sxth	r2, r3
 8011db8:	e9dd 310c 	ldrd	r3, r1, [sp, #48]	; 0x30
 8011dbc:	440b      	add	r3, r1
 8011dbe:	b29b      	uxth	r3, r3
 8011dc0:	930c      	str	r3, [sp, #48]	; 0x30
 8011dc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011dc4:	920e      	str	r2, [sp, #56]	; 0x38
 8011dc6:	4293      	cmp	r3, r2
 8011dc8:	dc89      	bgt.n	8011cde <pool_func_mp_array_f32+0x8e>
 8011dca:	b013      	add	sp, #76	; 0x4c
 8011dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	b21b      	sxth	r3, r3
 8011dd4:	42bb      	cmp	r3, r7
 8011dd6:	dac6      	bge.n	8011d66 <pool_func_mp_array_f32+0x116>
 8011dd8:	3301      	adds	r3, #1
 8011dda:	b21b      	sxth	r3, r3
 8011ddc:	42bb      	cmp	r3, r7
 8011dde:	dbf7      	blt.n	8011dd0 <pool_func_mp_array_f32+0x180>
 8011de0:	e7c1      	b.n	8011d66 <pool_func_mp_array_f32+0x116>
 8011de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011de4:	9a00      	ldr	r2, [sp, #0]
 8011de6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011de8:	1a9a      	subs	r2, r3, r2
 8011dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011dec:	3a01      	subs	r2, #1
 8011dee:	3b01      	subs	r3, #1
 8011df0:	fb13 2301 	smlabb	r3, r3, r1, r2
 8011df4:	041b      	lsls	r3, r3, #16
 8011df6:	f57f af59 	bpl.w	8011cac <pool_func_mp_array_f32+0x5c>
 8011dfa:	fb0a f309 	mul.w	r3, sl, r9
 8011dfe:	009b      	lsls	r3, r3, #2
 8011e00:	e9cd ba0f 	strd	fp, sl, [sp, #60]	; 0x3c
 8011e04:	930e      	str	r3, [sp, #56]	; 0x38
 8011e06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e08:	9001      	str	r0, [sp, #4]
 8011e0a:	ea4f 0c89 	mov.w	ip, r9, lsl #2
 8011e0e:	9300      	str	r3, [sp, #0]
 8011e10:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011e14:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011e16:	429a      	cmp	r2, r3
 8011e18:	ddd7      	ble.n	8011dca <pool_func_mp_array_f32+0x17a>
 8011e1a:	9a00      	ldr	r2, [sp, #0]
 8011e1c:	9906      	ldr	r1, [sp, #24]
 8011e1e:	fa0f f882 	sxth.w	r8, r2
 8011e22:	2900      	cmp	r1, #0
 8011e24:	d062      	beq.n	8011eec <pool_func_mp_array_f32+0x29c>
 8011e26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011e28:	fb01 f303 	mul.w	r3, r1, r3
 8011e2c:	1a12      	subs	r2, r2, r0
 8011e2e:	9305      	str	r3, [sp, #20]
 8011e30:	b213      	sxth	r3, r2
 8011e32:	9307      	str	r3, [sp, #28]
 8011e34:	f1b9 0f00 	cmp.w	r9, #0
 8011e38:	d058      	beq.n	8011eec <pool_func_mp_array_f32+0x29c>
 8011e3a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8011e3c:	fb02 f303 	mul.w	r3, r2, r3
 8011e40:	2600      	movs	r6, #0
 8011e42:	930c      	str	r3, [sp, #48]	; 0x30
 8011e44:	9b04      	ldr	r3, [sp, #16]
 8011e46:	9303      	str	r3, [sp, #12]
 8011e48:	4637      	mov	r7, r6
 8011e4a:	46b2      	mov	sl, r6
 8011e4c:	9b05      	ldr	r3, [sp, #20]
 8011e4e:	9611      	str	r6, [sp, #68]	; 0x44
 8011e50:	eb0a 0b03 	add.w	fp, sl, r3
 8011e54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e56:	f9bd 100c 	ldrsh.w	r1, [sp, #12]
 8011e5a:	b235      	sxth	r5, r6
 8011e5c:	18eb      	adds	r3, r5, r3
 8011e5e:	f04f 0a00 	mov.w	sl, #0
 8011e62:	fb09 f303 	mul.w	r3, r9, r3
 8011e66:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8011e68:	930a      	str	r3, [sp, #40]	; 0x28
 8011e6a:	fb09 fb0b 	mul.w	fp, r9, fp
 8011e6e:	46d6      	mov	lr, sl
 8011e70:	9807      	ldr	r0, [sp, #28]
 8011e72:	4580      	cmp	r8, r0
 8011e74:	dd43      	ble.n	8011efe <pool_func_mp_array_f32+0x2ae>
 8011e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011e78:	eddf 7a22 	vldr	s15, [pc, #136]	; 8011f04 <pool_func_mp_array_f32+0x2b4>
 8011e7c:	eb0e 0403 	add.w	r4, lr, r3
 8011e80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011e82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011e86:	42a9      	cmp	r1, r5
 8011e88:	dd0f      	ble.n	8011eaa <pool_func_mp_array_f32+0x25a>
 8011e8a:	4622      	mov	r2, r4
 8011e8c:	462b      	mov	r3, r5
 8011e8e:	ed92 7a00 	vldr	s14, [r2]
 8011e92:	3301      	adds	r3, #1
 8011e94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e9c:	b21b      	sxth	r3, r3
 8011e9e:	bfb8      	it	lt
 8011ea0:	eef0 7a47 	vmovlt.f32	s15, s14
 8011ea4:	4299      	cmp	r1, r3
 8011ea6:	4462      	add	r2, ip
 8011ea8:	d1f1      	bne.n	8011e8e <pool_func_mp_array_f32+0x23e>
 8011eaa:	3001      	adds	r0, #1
 8011eac:	b200      	sxth	r0, r0
 8011eae:	4580      	cmp	r8, r0
 8011eb0:	4434      	add	r4, r6
 8011eb2:	d1e8      	bne.n	8011e86 <pool_func_mp_array_f32+0x236>
 8011eb4:	f10a 0a01 	add.w	sl, sl, #1
 8011eb8:	9a02      	ldr	r2, [sp, #8]
 8011eba:	eb0b 030e 	add.w	r3, fp, lr
 8011ebe:	fa0f fa8a 	sxth.w	sl, sl
 8011ec2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011ec6:	45ca      	cmp	sl, r9
 8011ec8:	edc3 7a00 	vstr	s15, [r3]
 8011ecc:	46d6      	mov	lr, sl
 8011ece:	dbcf      	blt.n	8011e70 <pool_func_mp_array_f32+0x220>
 8011ed0:	9b03      	ldr	r3, [sp, #12]
 8011ed2:	9a08      	ldr	r2, [sp, #32]
 8011ed4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8011ed6:	4413      	add	r3, r2
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	3701      	adds	r7, #1
 8011edc:	9303      	str	r3, [sp, #12]
 8011ede:	9b06      	ldr	r3, [sp, #24]
 8011ee0:	b23f      	sxth	r7, r7
 8011ee2:	4416      	add	r6, r2
 8011ee4:	42bb      	cmp	r3, r7
 8011ee6:	b2b6      	uxth	r6, r6
 8011ee8:	46ba      	mov	sl, r7
 8011eea:	dcaf      	bgt.n	8011e4c <pool_func_mp_array_f32+0x1fc>
 8011eec:	9b00      	ldr	r3, [sp, #0]
 8011eee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011ef0:	4413      	add	r3, r2
 8011ef2:	b29b      	uxth	r3, r3
 8011ef4:	9300      	str	r3, [sp, #0]
 8011ef6:	9b01      	ldr	r3, [sp, #4]
 8011ef8:	3301      	adds	r3, #1
 8011efa:	9301      	str	r3, [sp, #4]
 8011efc:	e788      	b.n	8011e10 <pool_func_mp_array_f32+0x1c0>
 8011efe:	eddf 7a01 	vldr	s15, [pc, #4]	; 8011f04 <pool_func_mp_array_f32+0x2b4>
 8011f02:	e7d7      	b.n	8011eb4 <pool_func_mp_array_f32+0x264>
 8011f04:	cf000000 	.word	0xcf000000

08011f08 <ai_check_custom_types>:
 8011f08:	4b13      	ldr	r3, [pc, #76]	; (8011f58 <ai_check_custom_types+0x50>)
 8011f0a:	b082      	sub	sp, #8
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	9301      	str	r3, [sp, #4]
 8011f10:	b118      	cbz	r0, 8011f1a <ai_check_custom_types+0x12>
 8011f12:	7803      	ldrb	r3, [r0, #0]
 8011f14:	2b03      	cmp	r3, #3
 8011f16:	d002      	beq.n	8011f1e <ai_check_custom_types+0x16>
 8011f18:	2000      	movs	r0, #0
 8011f1a:	b002      	add	sp, #8
 8011f1c:	4770      	bx	lr
 8011f1e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011f22:	4293      	cmp	r3, r2
 8011f24:	d004      	beq.n	8011f30 <ai_check_custom_types+0x28>
 8011f26:	2001      	movs	r0, #1
 8011f28:	f080 0001 	eor.w	r0, r0, #1
 8011f2c:	b002      	add	sp, #8
 8011f2e:	4770      	bx	lr
 8011f30:	7842      	ldrb	r2, [r0, #1]
 8011f32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	f100 0001 	add.w	r0, r0, #1
 8011f3c:	d1f3      	bne.n	8011f26 <ai_check_custom_types+0x1e>
 8011f3e:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8011f42:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011f46:	429a      	cmp	r2, r3
 8011f48:	d1ed      	bne.n	8011f26 <ai_check_custom_types+0x1e>
 8011f4a:	7842      	ldrb	r2, [r0, #1]
 8011f4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d1e8      	bne.n	8011f26 <ai_check_custom_types+0x1e>
 8011f54:	2000      	movs	r0, #0
 8011f56:	e7e7      	b.n	8011f28 <ai_check_custom_types+0x20>
 8011f58:	0801a044 	.word	0x0801a044

08011f5c <ai_layers_init_all>:
 8011f5c:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8011f5e:	b17a      	cbz	r2, 8011f80 <ai_layers_init_all+0x24>
 8011f60:	6913      	ldr	r3, [r2, #16]
 8011f62:	60d0      	str	r0, [r2, #12]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	f04f 0201 	mov.w	r2, #1
 8011f6a:	d009      	beq.n	8011f80 <ai_layers_init_all+0x24>
 8011f6c:	b143      	cbz	r3, 8011f80 <ai_layers_init_all+0x24>
 8011f6e:	6919      	ldr	r1, [r3, #16]
 8011f70:	60d8      	str	r0, [r3, #12]
 8011f72:	4299      	cmp	r1, r3
 8011f74:	f102 0201 	add.w	r2, r2, #1
 8011f78:	d002      	beq.n	8011f80 <ai_layers_init_all+0x24>
 8011f7a:	460b      	mov	r3, r1
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d1f6      	bne.n	8011f6e <ai_layers_init_all+0x12>
 8011f80:	4610      	mov	r0, r2
 8011f82:	4770      	bx	lr

08011f84 <ai_layers_post_init_all>:
 8011f84:	b538      	push	{r3, r4, r5, lr}
 8011f86:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8011f88:	b18c      	cbz	r4, 8011fae <ai_layers_post_init_all+0x2a>
 8011f8a:	2500      	movs	r5, #0
 8011f8c:	6863      	ldr	r3, [r4, #4]
 8011f8e:	f013 0f01 	tst.w	r3, #1
 8011f92:	4620      	mov	r0, r4
 8011f94:	d003      	beq.n	8011f9e <ai_layers_post_init_all+0x1a>
 8011f96:	6a23      	ldr	r3, [r4, #32]
 8011f98:	b10b      	cbz	r3, 8011f9e <ai_layers_post_init_all+0x1a>
 8011f9a:	4798      	blx	r3
 8011f9c:	3501      	adds	r5, #1
 8011f9e:	6923      	ldr	r3, [r4, #16]
 8011fa0:	42a3      	cmp	r3, r4
 8011fa2:	d002      	beq.n	8011faa <ai_layers_post_init_all+0x26>
 8011fa4:	461c      	mov	r4, r3
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d1f0      	bne.n	8011f8c <ai_layers_post_init_all+0x8>
 8011faa:	4628      	mov	r0, r5
 8011fac:	bd38      	pop	{r3, r4, r5, pc}
 8011fae:	4625      	mov	r5, r4
 8011fb0:	e7fb      	b.n	8011faa <ai_layers_post_init_all+0x26>
 8011fb2:	bf00      	nop

08011fb4 <ai_layers_forward_all>:
 8011fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011fb8:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8011fba:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8011fbc:	4604      	mov	r4, r0
 8011fbe:	2f00      	cmp	r7, #0
 8011fc0:	d02c      	beq.n	801201c <ai_layers_forward_all+0x68>
 8011fc2:	2d00      	cmp	r5, #0
 8011fc4:	d03f      	beq.n	8012046 <ai_layers_forward_all+0x92>
 8011fc6:	6385      	str	r5, [r0, #56]	; 0x38
 8011fc8:	4629      	mov	r1, r5
 8011fca:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8011fcc:	2001      	movs	r0, #1
 8011fce:	47b8      	blx	r7
 8011fd0:	2600      	movs	r6, #0
 8011fd2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011fd4:	46b0      	mov	r8, r6
 8011fd6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8011fd8:	2002      	movs	r0, #2
 8011fda:	47b8      	blx	r7
 8011fdc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8011fde:	696b      	ldr	r3, [r5, #20]
 8011fe0:	4628      	mov	r0, r5
 8011fe2:	4798      	blx	r3
 8011fe4:	692b      	ldr	r3, [r5, #16]
 8011fe6:	429d      	cmp	r5, r3
 8011fe8:	f04f 0003 	mov.w	r0, #3
 8011fec:	4619      	mov	r1, r3
 8011fee:	d009      	beq.n	8012004 <ai_layers_forward_all+0x50>
 8011ff0:	63a3      	str	r3, [r4, #56]	; 0x38
 8011ff2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8011ff4:	47b8      	blx	r7
 8011ff6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011ff8:	3601      	adds	r6, #1
 8011ffa:	2900      	cmp	r1, #0
 8011ffc:	d1eb      	bne.n	8011fd6 <ai_layers_forward_all+0x22>
 8011ffe:	4630      	mov	r0, r6
 8012000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012004:	2100      	movs	r1, #0
 8012006:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
 801200a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801200c:	47b8      	blx	r7
 801200e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012010:	3601      	adds	r6, #1
 8012012:	2900      	cmp	r1, #0
 8012014:	d1df      	bne.n	8011fd6 <ai_layers_forward_all+0x22>
 8012016:	4630      	mov	r0, r6
 8012018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801201c:	b19d      	cbz	r5, 8012046 <ai_layers_forward_all+0x92>
 801201e:	6385      	str	r5, [r0, #56]	; 0x38
 8012020:	463e      	mov	r6, r7
 8012022:	696b      	ldr	r3, [r5, #20]
 8012024:	4628      	mov	r0, r5
 8012026:	4798      	blx	r3
 8012028:	692b      	ldr	r3, [r5, #16]
 801202a:	42ab      	cmp	r3, r5
 801202c:	f106 0601 	add.w	r6, r6, #1
 8012030:	d004      	beq.n	801203c <ai_layers_forward_all+0x88>
 8012032:	63a3      	str	r3, [r4, #56]	; 0x38
 8012034:	461d      	mov	r5, r3
 8012036:	2b00      	cmp	r3, #0
 8012038:	d1f3      	bne.n	8012022 <ai_layers_forward_all+0x6e>
 801203a:	e7e0      	b.n	8011ffe <ai_layers_forward_all+0x4a>
 801203c:	2300      	movs	r3, #0
 801203e:	63a3      	str	r3, [r4, #56]	; 0x38
 8012040:	4630      	mov	r0, r6
 8012042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012046:	462e      	mov	r6, r5
 8012048:	4630      	mov	r0, r6
 801204a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801204e:	bf00      	nop

08012050 <ai_array_to_buffer_fmt>:
 8012050:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8012054:	2b02      	cmp	r3, #2
 8012056:	d029      	beq.n	80120ac <ai_array_to_buffer_fmt+0x5c>
 8012058:	4a22      	ldr	r2, [pc, #136]	; (80120e4 <ai_array_to_buffer_fmt+0x94>)
 801205a:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 801205e:	4293      	cmp	r3, r2
 8012060:	d010      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 8012062:	dd13      	ble.n	801208c <ai_array_to_buffer_fmt+0x3c>
 8012064:	4a20      	ldr	r2, [pc, #128]	; (80120e8 <ai_array_to_buffer_fmt+0x98>)
 8012066:	4293      	cmp	r3, r2
 8012068:	d00c      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 801206a:	dc27      	bgt.n	80120bc <ai_array_to_buffer_fmt+0x6c>
 801206c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8012070:	4293      	cmp	r3, r2
 8012072:	d007      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 8012074:	3207      	adds	r2, #7
 8012076:	4293      	cmp	r3, r2
 8012078:	d004      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 801207a:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 801207e:	4293      	cmp	r3, r2
 8012080:	d000      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 8012082:	2340      	movs	r3, #64	; 0x40
 8012084:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8012088:	4318      	orrs	r0, r3
 801208a:	4770      	bx	lr
 801208c:	4a17      	ldr	r2, [pc, #92]	; (80120ec <ai_array_to_buffer_fmt+0x9c>)
 801208e:	4293      	cmp	r3, r2
 8012090:	d0f8      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 8012092:	dd1e      	ble.n	80120d2 <ai_array_to_buffer_fmt+0x82>
 8012094:	4a16      	ldr	r2, [pc, #88]	; (80120f0 <ai_array_to_buffer_fmt+0xa0>)
 8012096:	4293      	cmp	r3, r2
 8012098:	d0f4      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 801209a:	f202 72f1 	addw	r2, r2, #2033	; 0x7f1
 801209e:	4293      	cmp	r3, r2
 80120a0:	d0f0      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 80120a2:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80120a6:	4293      	cmp	r3, r2
 80120a8:	d1eb      	bne.n	8012082 <ai_array_to_buffer_fmt+0x32>
 80120aa:	e7eb      	b.n	8012084 <ai_array_to_buffer_fmt+0x34>
 80120ac:	4b11      	ldr	r3, [pc, #68]	; (80120f4 <ai_array_to_buffer_fmt+0xa4>)
 80120ae:	4003      	ands	r3, r0
 80120b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80120b4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80120b8:	4318      	orrs	r0, r3
 80120ba:	4770      	bx	lr
 80120bc:	4a0e      	ldr	r2, [pc, #56]	; (80120f8 <ai_array_to_buffer_fmt+0xa8>)
 80120be:	4293      	cmp	r3, r2
 80120c0:	d0e0      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 80120c2:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 80120c6:	4293      	cmp	r3, r2
 80120c8:	d0dc      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 80120ca:	4a0c      	ldr	r2, [pc, #48]	; (80120fc <ai_array_to_buffer_fmt+0xac>)
 80120cc:	4293      	cmp	r3, r2
 80120ce:	d1d8      	bne.n	8012082 <ai_array_to_buffer_fmt+0x32>
 80120d0:	e7d8      	b.n	8012084 <ai_array_to_buffer_fmt+0x34>
 80120d2:	f2a2 4207 	subw	r2, r2, #1031	; 0x407
 80120d6:	4293      	cmp	r3, r2
 80120d8:	d0d4      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 80120da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80120de:	4293      	cmp	r3, r2
 80120e0:	d0d0      	beq.n	8012084 <ai_array_to_buffer_fmt+0x34>
 80120e2:	e7ce      	b.n	8012082 <ai_array_to_buffer_fmt+0x32>
 80120e4:	00060440 	.word	0x00060440
 80120e8:	00840840 	.word	0x00840840
 80120ec:	00040447 	.word	0x00040447
 80120f0:	0004084f 	.word	0x0004084f
 80120f4:	00803fff 	.word	0x00803fff
 80120f8:	00841040 	.word	0x00841040
 80120fc:	0084084f 	.word	0x0084084f

08012100 <ai_array_get_byte_size>:
 8012100:	b1c1      	cbz	r1, 8012134 <ai_array_get_byte_size+0x34>
 8012102:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8012106:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801210a:	4413      	add	r3, r2
 801210c:	fb01 f103 	mul.w	r1, r1, r3
 8012110:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8012114:	3107      	adds	r1, #7
 8012116:	f3c0 4043 	ubfx	r0, r0, #17, #4
 801211a:	f021 0107 	bic.w	r1, r1, #7
 801211e:	2804      	cmp	r0, #4
 8012120:	fa21 f102 	lsr.w	r1, r1, r2
 8012124:	d008      	beq.n	8012138 <ai_array_get_byte_size+0x38>
 8012126:	2808      	cmp	r0, #8
 8012128:	d101      	bne.n	801212e <ai_array_get_byte_size+0x2e>
 801212a:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 801212e:	3107      	adds	r1, #7
 8012130:	08c8      	lsrs	r0, r1, #3
 8012132:	4770      	bx	lr
 8012134:	4608      	mov	r0, r1
 8012136:	4770      	bx	lr
 8012138:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 801213c:	3107      	adds	r1, #7
 801213e:	08c8      	lsrs	r0, r1, #3
 8012140:	4770      	bx	lr
 8012142:	bf00      	nop

08012144 <__assert_func>:
 8012144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012146:	4614      	mov	r4, r2
 8012148:	461a      	mov	r2, r3
 801214a:	4b09      	ldr	r3, [pc, #36]	; (8012170 <__assert_func+0x2c>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	4605      	mov	r5, r0
 8012150:	68d8      	ldr	r0, [r3, #12]
 8012152:	b14c      	cbz	r4, 8012168 <__assert_func+0x24>
 8012154:	4b07      	ldr	r3, [pc, #28]	; (8012174 <__assert_func+0x30>)
 8012156:	9100      	str	r1, [sp, #0]
 8012158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801215c:	4906      	ldr	r1, [pc, #24]	; (8012178 <__assert_func+0x34>)
 801215e:	462b      	mov	r3, r5
 8012160:	f000 f814 	bl	801218c <fiprintf>
 8012164:	f002 f8bc 	bl	80142e0 <abort>
 8012168:	4b04      	ldr	r3, [pc, #16]	; (801217c <__assert_func+0x38>)
 801216a:	461c      	mov	r4, r3
 801216c:	e7f3      	b.n	8012156 <__assert_func+0x12>
 801216e:	bf00      	nop
 8012170:	20000ee0 	.word	0x20000ee0
 8012174:	08062944 	.word	0x08062944
 8012178:	08062951 	.word	0x08062951
 801217c:	0806297f 	.word	0x0806297f

08012180 <__errno>:
 8012180:	4b01      	ldr	r3, [pc, #4]	; (8012188 <__errno+0x8>)
 8012182:	6818      	ldr	r0, [r3, #0]
 8012184:	4770      	bx	lr
 8012186:	bf00      	nop
 8012188:	20000ee0 	.word	0x20000ee0

0801218c <fiprintf>:
 801218c:	b40e      	push	{r1, r2, r3}
 801218e:	b503      	push	{r0, r1, lr}
 8012190:	4601      	mov	r1, r0
 8012192:	ab03      	add	r3, sp, #12
 8012194:	4805      	ldr	r0, [pc, #20]	; (80121ac <fiprintf+0x20>)
 8012196:	f853 2b04 	ldr.w	r2, [r3], #4
 801219a:	6800      	ldr	r0, [r0, #0]
 801219c:	9301      	str	r3, [sp, #4]
 801219e:	f000 f953 	bl	8012448 <_vfiprintf_r>
 80121a2:	b002      	add	sp, #8
 80121a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80121a8:	b003      	add	sp, #12
 80121aa:	4770      	bx	lr
 80121ac:	20000ee0 	.word	0x20000ee0

080121b0 <__libc_init_array>:
 80121b0:	b570      	push	{r4, r5, r6, lr}
 80121b2:	4d0d      	ldr	r5, [pc, #52]	; (80121e8 <__libc_init_array+0x38>)
 80121b4:	4c0d      	ldr	r4, [pc, #52]	; (80121ec <__libc_init_array+0x3c>)
 80121b6:	1b64      	subs	r4, r4, r5
 80121b8:	10a4      	asrs	r4, r4, #2
 80121ba:	2600      	movs	r6, #0
 80121bc:	42a6      	cmp	r6, r4
 80121be:	d109      	bne.n	80121d4 <__libc_init_array+0x24>
 80121c0:	4d0b      	ldr	r5, [pc, #44]	; (80121f0 <__libc_init_array+0x40>)
 80121c2:	4c0c      	ldr	r4, [pc, #48]	; (80121f4 <__libc_init_array+0x44>)
 80121c4:	f007 fe90 	bl	8019ee8 <_init>
 80121c8:	1b64      	subs	r4, r4, r5
 80121ca:	10a4      	asrs	r4, r4, #2
 80121cc:	2600      	movs	r6, #0
 80121ce:	42a6      	cmp	r6, r4
 80121d0:	d105      	bne.n	80121de <__libc_init_array+0x2e>
 80121d2:	bd70      	pop	{r4, r5, r6, pc}
 80121d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80121d8:	4798      	blx	r3
 80121da:	3601      	adds	r6, #1
 80121dc:	e7ee      	b.n	80121bc <__libc_init_array+0xc>
 80121de:	f855 3b04 	ldr.w	r3, [r5], #4
 80121e2:	4798      	blx	r3
 80121e4:	3601      	adds	r6, #1
 80121e6:	e7f2      	b.n	80121ce <__libc_init_array+0x1e>
 80121e8:	08063070 	.word	0x08063070
 80121ec:	08063070 	.word	0x08063070
 80121f0:	08063070 	.word	0x08063070
 80121f4:	08063074 	.word	0x08063074

080121f8 <malloc>:
 80121f8:	4b02      	ldr	r3, [pc, #8]	; (8012204 <malloc+0xc>)
 80121fa:	4601      	mov	r1, r0
 80121fc:	6818      	ldr	r0, [r3, #0]
 80121fe:	f000 b885 	b.w	801230c <_malloc_r>
 8012202:	bf00      	nop
 8012204:	20000ee0 	.word	0x20000ee0

08012208 <memcpy>:
 8012208:	440a      	add	r2, r1
 801220a:	4291      	cmp	r1, r2
 801220c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012210:	d100      	bne.n	8012214 <memcpy+0xc>
 8012212:	4770      	bx	lr
 8012214:	b510      	push	{r4, lr}
 8012216:	f811 4b01 	ldrb.w	r4, [r1], #1
 801221a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801221e:	4291      	cmp	r1, r2
 8012220:	d1f9      	bne.n	8012216 <memcpy+0xe>
 8012222:	bd10      	pop	{r4, pc}

08012224 <memset>:
 8012224:	4402      	add	r2, r0
 8012226:	4603      	mov	r3, r0
 8012228:	4293      	cmp	r3, r2
 801222a:	d100      	bne.n	801222e <memset+0xa>
 801222c:	4770      	bx	lr
 801222e:	f803 1b01 	strb.w	r1, [r3], #1
 8012232:	e7f9      	b.n	8012228 <memset+0x4>

08012234 <_free_r>:
 8012234:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012236:	2900      	cmp	r1, #0
 8012238:	d044      	beq.n	80122c4 <_free_r+0x90>
 801223a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801223e:	9001      	str	r0, [sp, #4]
 8012240:	2b00      	cmp	r3, #0
 8012242:	f1a1 0404 	sub.w	r4, r1, #4
 8012246:	bfb8      	it	lt
 8012248:	18e4      	addlt	r4, r4, r3
 801224a:	f003 fc89 	bl	8015b60 <__malloc_lock>
 801224e:	4a1e      	ldr	r2, [pc, #120]	; (80122c8 <_free_r+0x94>)
 8012250:	9801      	ldr	r0, [sp, #4]
 8012252:	6813      	ldr	r3, [r2, #0]
 8012254:	b933      	cbnz	r3, 8012264 <_free_r+0x30>
 8012256:	6063      	str	r3, [r4, #4]
 8012258:	6014      	str	r4, [r2, #0]
 801225a:	b003      	add	sp, #12
 801225c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012260:	f003 bc84 	b.w	8015b6c <__malloc_unlock>
 8012264:	42a3      	cmp	r3, r4
 8012266:	d908      	bls.n	801227a <_free_r+0x46>
 8012268:	6825      	ldr	r5, [r4, #0]
 801226a:	1961      	adds	r1, r4, r5
 801226c:	428b      	cmp	r3, r1
 801226e:	bf01      	itttt	eq
 8012270:	6819      	ldreq	r1, [r3, #0]
 8012272:	685b      	ldreq	r3, [r3, #4]
 8012274:	1949      	addeq	r1, r1, r5
 8012276:	6021      	streq	r1, [r4, #0]
 8012278:	e7ed      	b.n	8012256 <_free_r+0x22>
 801227a:	461a      	mov	r2, r3
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	b10b      	cbz	r3, 8012284 <_free_r+0x50>
 8012280:	42a3      	cmp	r3, r4
 8012282:	d9fa      	bls.n	801227a <_free_r+0x46>
 8012284:	6811      	ldr	r1, [r2, #0]
 8012286:	1855      	adds	r5, r2, r1
 8012288:	42a5      	cmp	r5, r4
 801228a:	d10b      	bne.n	80122a4 <_free_r+0x70>
 801228c:	6824      	ldr	r4, [r4, #0]
 801228e:	4421      	add	r1, r4
 8012290:	1854      	adds	r4, r2, r1
 8012292:	42a3      	cmp	r3, r4
 8012294:	6011      	str	r1, [r2, #0]
 8012296:	d1e0      	bne.n	801225a <_free_r+0x26>
 8012298:	681c      	ldr	r4, [r3, #0]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	6053      	str	r3, [r2, #4]
 801229e:	4421      	add	r1, r4
 80122a0:	6011      	str	r1, [r2, #0]
 80122a2:	e7da      	b.n	801225a <_free_r+0x26>
 80122a4:	d902      	bls.n	80122ac <_free_r+0x78>
 80122a6:	230c      	movs	r3, #12
 80122a8:	6003      	str	r3, [r0, #0]
 80122aa:	e7d6      	b.n	801225a <_free_r+0x26>
 80122ac:	6825      	ldr	r5, [r4, #0]
 80122ae:	1961      	adds	r1, r4, r5
 80122b0:	428b      	cmp	r3, r1
 80122b2:	bf04      	itt	eq
 80122b4:	6819      	ldreq	r1, [r3, #0]
 80122b6:	685b      	ldreq	r3, [r3, #4]
 80122b8:	6063      	str	r3, [r4, #4]
 80122ba:	bf04      	itt	eq
 80122bc:	1949      	addeq	r1, r1, r5
 80122be:	6021      	streq	r1, [r4, #0]
 80122c0:	6054      	str	r4, [r2, #4]
 80122c2:	e7ca      	b.n	801225a <_free_r+0x26>
 80122c4:	b003      	add	sp, #12
 80122c6:	bd30      	pop	{r4, r5, pc}
 80122c8:	20013da0 	.word	0x20013da0

080122cc <sbrk_aligned>:
 80122cc:	b570      	push	{r4, r5, r6, lr}
 80122ce:	4e0e      	ldr	r6, [pc, #56]	; (8012308 <sbrk_aligned+0x3c>)
 80122d0:	460c      	mov	r4, r1
 80122d2:	6831      	ldr	r1, [r6, #0]
 80122d4:	4605      	mov	r5, r0
 80122d6:	b911      	cbnz	r1, 80122de <sbrk_aligned+0x12>
 80122d8:	f001 f860 	bl	801339c <_sbrk_r>
 80122dc:	6030      	str	r0, [r6, #0]
 80122de:	4621      	mov	r1, r4
 80122e0:	4628      	mov	r0, r5
 80122e2:	f001 f85b 	bl	801339c <_sbrk_r>
 80122e6:	1c43      	adds	r3, r0, #1
 80122e8:	d00a      	beq.n	8012300 <sbrk_aligned+0x34>
 80122ea:	1cc4      	adds	r4, r0, #3
 80122ec:	f024 0403 	bic.w	r4, r4, #3
 80122f0:	42a0      	cmp	r0, r4
 80122f2:	d007      	beq.n	8012304 <sbrk_aligned+0x38>
 80122f4:	1a21      	subs	r1, r4, r0
 80122f6:	4628      	mov	r0, r5
 80122f8:	f001 f850 	bl	801339c <_sbrk_r>
 80122fc:	3001      	adds	r0, #1
 80122fe:	d101      	bne.n	8012304 <sbrk_aligned+0x38>
 8012300:	f04f 34ff 	mov.w	r4, #4294967295
 8012304:	4620      	mov	r0, r4
 8012306:	bd70      	pop	{r4, r5, r6, pc}
 8012308:	20013da4 	.word	0x20013da4

0801230c <_malloc_r>:
 801230c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012310:	1ccd      	adds	r5, r1, #3
 8012312:	f025 0503 	bic.w	r5, r5, #3
 8012316:	3508      	adds	r5, #8
 8012318:	2d0c      	cmp	r5, #12
 801231a:	bf38      	it	cc
 801231c:	250c      	movcc	r5, #12
 801231e:	2d00      	cmp	r5, #0
 8012320:	4607      	mov	r7, r0
 8012322:	db01      	blt.n	8012328 <_malloc_r+0x1c>
 8012324:	42a9      	cmp	r1, r5
 8012326:	d905      	bls.n	8012334 <_malloc_r+0x28>
 8012328:	230c      	movs	r3, #12
 801232a:	603b      	str	r3, [r7, #0]
 801232c:	2600      	movs	r6, #0
 801232e:	4630      	mov	r0, r6
 8012330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012334:	4e2e      	ldr	r6, [pc, #184]	; (80123f0 <_malloc_r+0xe4>)
 8012336:	f003 fc13 	bl	8015b60 <__malloc_lock>
 801233a:	6833      	ldr	r3, [r6, #0]
 801233c:	461c      	mov	r4, r3
 801233e:	bb34      	cbnz	r4, 801238e <_malloc_r+0x82>
 8012340:	4629      	mov	r1, r5
 8012342:	4638      	mov	r0, r7
 8012344:	f7ff ffc2 	bl	80122cc <sbrk_aligned>
 8012348:	1c43      	adds	r3, r0, #1
 801234a:	4604      	mov	r4, r0
 801234c:	d14d      	bne.n	80123ea <_malloc_r+0xde>
 801234e:	6834      	ldr	r4, [r6, #0]
 8012350:	4626      	mov	r6, r4
 8012352:	2e00      	cmp	r6, #0
 8012354:	d140      	bne.n	80123d8 <_malloc_r+0xcc>
 8012356:	6823      	ldr	r3, [r4, #0]
 8012358:	4631      	mov	r1, r6
 801235a:	4638      	mov	r0, r7
 801235c:	eb04 0803 	add.w	r8, r4, r3
 8012360:	f001 f81c 	bl	801339c <_sbrk_r>
 8012364:	4580      	cmp	r8, r0
 8012366:	d13a      	bne.n	80123de <_malloc_r+0xd2>
 8012368:	6821      	ldr	r1, [r4, #0]
 801236a:	3503      	adds	r5, #3
 801236c:	1a6d      	subs	r5, r5, r1
 801236e:	f025 0503 	bic.w	r5, r5, #3
 8012372:	3508      	adds	r5, #8
 8012374:	2d0c      	cmp	r5, #12
 8012376:	bf38      	it	cc
 8012378:	250c      	movcc	r5, #12
 801237a:	4629      	mov	r1, r5
 801237c:	4638      	mov	r0, r7
 801237e:	f7ff ffa5 	bl	80122cc <sbrk_aligned>
 8012382:	3001      	adds	r0, #1
 8012384:	d02b      	beq.n	80123de <_malloc_r+0xd2>
 8012386:	6823      	ldr	r3, [r4, #0]
 8012388:	442b      	add	r3, r5
 801238a:	6023      	str	r3, [r4, #0]
 801238c:	e00e      	b.n	80123ac <_malloc_r+0xa0>
 801238e:	6822      	ldr	r2, [r4, #0]
 8012390:	1b52      	subs	r2, r2, r5
 8012392:	d41e      	bmi.n	80123d2 <_malloc_r+0xc6>
 8012394:	2a0b      	cmp	r2, #11
 8012396:	d916      	bls.n	80123c6 <_malloc_r+0xba>
 8012398:	1961      	adds	r1, r4, r5
 801239a:	42a3      	cmp	r3, r4
 801239c:	6025      	str	r5, [r4, #0]
 801239e:	bf18      	it	ne
 80123a0:	6059      	strne	r1, [r3, #4]
 80123a2:	6863      	ldr	r3, [r4, #4]
 80123a4:	bf08      	it	eq
 80123a6:	6031      	streq	r1, [r6, #0]
 80123a8:	5162      	str	r2, [r4, r5]
 80123aa:	604b      	str	r3, [r1, #4]
 80123ac:	4638      	mov	r0, r7
 80123ae:	f104 060b 	add.w	r6, r4, #11
 80123b2:	f003 fbdb 	bl	8015b6c <__malloc_unlock>
 80123b6:	f026 0607 	bic.w	r6, r6, #7
 80123ba:	1d23      	adds	r3, r4, #4
 80123bc:	1af2      	subs	r2, r6, r3
 80123be:	d0b6      	beq.n	801232e <_malloc_r+0x22>
 80123c0:	1b9b      	subs	r3, r3, r6
 80123c2:	50a3      	str	r3, [r4, r2]
 80123c4:	e7b3      	b.n	801232e <_malloc_r+0x22>
 80123c6:	6862      	ldr	r2, [r4, #4]
 80123c8:	42a3      	cmp	r3, r4
 80123ca:	bf0c      	ite	eq
 80123cc:	6032      	streq	r2, [r6, #0]
 80123ce:	605a      	strne	r2, [r3, #4]
 80123d0:	e7ec      	b.n	80123ac <_malloc_r+0xa0>
 80123d2:	4623      	mov	r3, r4
 80123d4:	6864      	ldr	r4, [r4, #4]
 80123d6:	e7b2      	b.n	801233e <_malloc_r+0x32>
 80123d8:	4634      	mov	r4, r6
 80123da:	6876      	ldr	r6, [r6, #4]
 80123dc:	e7b9      	b.n	8012352 <_malloc_r+0x46>
 80123de:	230c      	movs	r3, #12
 80123e0:	603b      	str	r3, [r7, #0]
 80123e2:	4638      	mov	r0, r7
 80123e4:	f003 fbc2 	bl	8015b6c <__malloc_unlock>
 80123e8:	e7a1      	b.n	801232e <_malloc_r+0x22>
 80123ea:	6025      	str	r5, [r4, #0]
 80123ec:	e7de      	b.n	80123ac <_malloc_r+0xa0>
 80123ee:	bf00      	nop
 80123f0:	20013da0 	.word	0x20013da0

080123f4 <__sfputc_r>:
 80123f4:	6893      	ldr	r3, [r2, #8]
 80123f6:	3b01      	subs	r3, #1
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	b410      	push	{r4}
 80123fc:	6093      	str	r3, [r2, #8]
 80123fe:	da08      	bge.n	8012412 <__sfputc_r+0x1e>
 8012400:	6994      	ldr	r4, [r2, #24]
 8012402:	42a3      	cmp	r3, r4
 8012404:	db01      	blt.n	801240a <__sfputc_r+0x16>
 8012406:	290a      	cmp	r1, #10
 8012408:	d103      	bne.n	8012412 <__sfputc_r+0x1e>
 801240a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801240e:	f001 bea7 	b.w	8014160 <__swbuf_r>
 8012412:	6813      	ldr	r3, [r2, #0]
 8012414:	1c58      	adds	r0, r3, #1
 8012416:	6010      	str	r0, [r2, #0]
 8012418:	7019      	strb	r1, [r3, #0]
 801241a:	4608      	mov	r0, r1
 801241c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012420:	4770      	bx	lr

08012422 <__sfputs_r>:
 8012422:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012424:	4606      	mov	r6, r0
 8012426:	460f      	mov	r7, r1
 8012428:	4614      	mov	r4, r2
 801242a:	18d5      	adds	r5, r2, r3
 801242c:	42ac      	cmp	r4, r5
 801242e:	d101      	bne.n	8012434 <__sfputs_r+0x12>
 8012430:	2000      	movs	r0, #0
 8012432:	e007      	b.n	8012444 <__sfputs_r+0x22>
 8012434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012438:	463a      	mov	r2, r7
 801243a:	4630      	mov	r0, r6
 801243c:	f7ff ffda 	bl	80123f4 <__sfputc_r>
 8012440:	1c43      	adds	r3, r0, #1
 8012442:	d1f3      	bne.n	801242c <__sfputs_r+0xa>
 8012444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012448 <_vfiprintf_r>:
 8012448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801244c:	460d      	mov	r5, r1
 801244e:	b09d      	sub	sp, #116	; 0x74
 8012450:	4614      	mov	r4, r2
 8012452:	4698      	mov	r8, r3
 8012454:	4606      	mov	r6, r0
 8012456:	b118      	cbz	r0, 8012460 <_vfiprintf_r+0x18>
 8012458:	6983      	ldr	r3, [r0, #24]
 801245a:	b90b      	cbnz	r3, 8012460 <_vfiprintf_r+0x18>
 801245c:	f002 fedc 	bl	8015218 <__sinit>
 8012460:	4b89      	ldr	r3, [pc, #548]	; (8012688 <_vfiprintf_r+0x240>)
 8012462:	429d      	cmp	r5, r3
 8012464:	d11b      	bne.n	801249e <_vfiprintf_r+0x56>
 8012466:	6875      	ldr	r5, [r6, #4]
 8012468:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801246a:	07d9      	lsls	r1, r3, #31
 801246c:	d405      	bmi.n	801247a <_vfiprintf_r+0x32>
 801246e:	89ab      	ldrh	r3, [r5, #12]
 8012470:	059a      	lsls	r2, r3, #22
 8012472:	d402      	bmi.n	801247a <_vfiprintf_r+0x32>
 8012474:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012476:	f003 fae0 	bl	8015a3a <__retarget_lock_acquire_recursive>
 801247a:	89ab      	ldrh	r3, [r5, #12]
 801247c:	071b      	lsls	r3, r3, #28
 801247e:	d501      	bpl.n	8012484 <_vfiprintf_r+0x3c>
 8012480:	692b      	ldr	r3, [r5, #16]
 8012482:	b9eb      	cbnz	r3, 80124c0 <_vfiprintf_r+0x78>
 8012484:	4629      	mov	r1, r5
 8012486:	4630      	mov	r0, r6
 8012488:	f001 febc 	bl	8014204 <__swsetup_r>
 801248c:	b1c0      	cbz	r0, 80124c0 <_vfiprintf_r+0x78>
 801248e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012490:	07dc      	lsls	r4, r3, #31
 8012492:	d50e      	bpl.n	80124b2 <_vfiprintf_r+0x6a>
 8012494:	f04f 30ff 	mov.w	r0, #4294967295
 8012498:	b01d      	add	sp, #116	; 0x74
 801249a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249e:	4b7b      	ldr	r3, [pc, #492]	; (801268c <_vfiprintf_r+0x244>)
 80124a0:	429d      	cmp	r5, r3
 80124a2:	d101      	bne.n	80124a8 <_vfiprintf_r+0x60>
 80124a4:	68b5      	ldr	r5, [r6, #8]
 80124a6:	e7df      	b.n	8012468 <_vfiprintf_r+0x20>
 80124a8:	4b79      	ldr	r3, [pc, #484]	; (8012690 <_vfiprintf_r+0x248>)
 80124aa:	429d      	cmp	r5, r3
 80124ac:	bf08      	it	eq
 80124ae:	68f5      	ldreq	r5, [r6, #12]
 80124b0:	e7da      	b.n	8012468 <_vfiprintf_r+0x20>
 80124b2:	89ab      	ldrh	r3, [r5, #12]
 80124b4:	0598      	lsls	r0, r3, #22
 80124b6:	d4ed      	bmi.n	8012494 <_vfiprintf_r+0x4c>
 80124b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80124ba:	f003 fabf 	bl	8015a3c <__retarget_lock_release_recursive>
 80124be:	e7e9      	b.n	8012494 <_vfiprintf_r+0x4c>
 80124c0:	2300      	movs	r3, #0
 80124c2:	9309      	str	r3, [sp, #36]	; 0x24
 80124c4:	2320      	movs	r3, #32
 80124c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80124ca:	f8cd 800c 	str.w	r8, [sp, #12]
 80124ce:	2330      	movs	r3, #48	; 0x30
 80124d0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012694 <_vfiprintf_r+0x24c>
 80124d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80124d8:	f04f 0901 	mov.w	r9, #1
 80124dc:	4623      	mov	r3, r4
 80124de:	469a      	mov	sl, r3
 80124e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80124e4:	b10a      	cbz	r2, 80124ea <_vfiprintf_r+0xa2>
 80124e6:	2a25      	cmp	r2, #37	; 0x25
 80124e8:	d1f9      	bne.n	80124de <_vfiprintf_r+0x96>
 80124ea:	ebba 0b04 	subs.w	fp, sl, r4
 80124ee:	d00b      	beq.n	8012508 <_vfiprintf_r+0xc0>
 80124f0:	465b      	mov	r3, fp
 80124f2:	4622      	mov	r2, r4
 80124f4:	4629      	mov	r1, r5
 80124f6:	4630      	mov	r0, r6
 80124f8:	f7ff ff93 	bl	8012422 <__sfputs_r>
 80124fc:	3001      	adds	r0, #1
 80124fe:	f000 80aa 	beq.w	8012656 <_vfiprintf_r+0x20e>
 8012502:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012504:	445a      	add	r2, fp
 8012506:	9209      	str	r2, [sp, #36]	; 0x24
 8012508:	f89a 3000 	ldrb.w	r3, [sl]
 801250c:	2b00      	cmp	r3, #0
 801250e:	f000 80a2 	beq.w	8012656 <_vfiprintf_r+0x20e>
 8012512:	2300      	movs	r3, #0
 8012514:	f04f 32ff 	mov.w	r2, #4294967295
 8012518:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801251c:	f10a 0a01 	add.w	sl, sl, #1
 8012520:	9304      	str	r3, [sp, #16]
 8012522:	9307      	str	r3, [sp, #28]
 8012524:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012528:	931a      	str	r3, [sp, #104]	; 0x68
 801252a:	4654      	mov	r4, sl
 801252c:	2205      	movs	r2, #5
 801252e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012532:	4858      	ldr	r0, [pc, #352]	; (8012694 <_vfiprintf_r+0x24c>)
 8012534:	f7ed fe64 	bl	8000200 <memchr>
 8012538:	9a04      	ldr	r2, [sp, #16]
 801253a:	b9d8      	cbnz	r0, 8012574 <_vfiprintf_r+0x12c>
 801253c:	06d1      	lsls	r1, r2, #27
 801253e:	bf44      	itt	mi
 8012540:	2320      	movmi	r3, #32
 8012542:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012546:	0713      	lsls	r3, r2, #28
 8012548:	bf44      	itt	mi
 801254a:	232b      	movmi	r3, #43	; 0x2b
 801254c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012550:	f89a 3000 	ldrb.w	r3, [sl]
 8012554:	2b2a      	cmp	r3, #42	; 0x2a
 8012556:	d015      	beq.n	8012584 <_vfiprintf_r+0x13c>
 8012558:	9a07      	ldr	r2, [sp, #28]
 801255a:	4654      	mov	r4, sl
 801255c:	2000      	movs	r0, #0
 801255e:	f04f 0c0a 	mov.w	ip, #10
 8012562:	4621      	mov	r1, r4
 8012564:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012568:	3b30      	subs	r3, #48	; 0x30
 801256a:	2b09      	cmp	r3, #9
 801256c:	d94e      	bls.n	801260c <_vfiprintf_r+0x1c4>
 801256e:	b1b0      	cbz	r0, 801259e <_vfiprintf_r+0x156>
 8012570:	9207      	str	r2, [sp, #28]
 8012572:	e014      	b.n	801259e <_vfiprintf_r+0x156>
 8012574:	eba0 0308 	sub.w	r3, r0, r8
 8012578:	fa09 f303 	lsl.w	r3, r9, r3
 801257c:	4313      	orrs	r3, r2
 801257e:	9304      	str	r3, [sp, #16]
 8012580:	46a2      	mov	sl, r4
 8012582:	e7d2      	b.n	801252a <_vfiprintf_r+0xe2>
 8012584:	9b03      	ldr	r3, [sp, #12]
 8012586:	1d19      	adds	r1, r3, #4
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	9103      	str	r1, [sp, #12]
 801258c:	2b00      	cmp	r3, #0
 801258e:	bfbb      	ittet	lt
 8012590:	425b      	neglt	r3, r3
 8012592:	f042 0202 	orrlt.w	r2, r2, #2
 8012596:	9307      	strge	r3, [sp, #28]
 8012598:	9307      	strlt	r3, [sp, #28]
 801259a:	bfb8      	it	lt
 801259c:	9204      	strlt	r2, [sp, #16]
 801259e:	7823      	ldrb	r3, [r4, #0]
 80125a0:	2b2e      	cmp	r3, #46	; 0x2e
 80125a2:	d10c      	bne.n	80125be <_vfiprintf_r+0x176>
 80125a4:	7863      	ldrb	r3, [r4, #1]
 80125a6:	2b2a      	cmp	r3, #42	; 0x2a
 80125a8:	d135      	bne.n	8012616 <_vfiprintf_r+0x1ce>
 80125aa:	9b03      	ldr	r3, [sp, #12]
 80125ac:	1d1a      	adds	r2, r3, #4
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	9203      	str	r2, [sp, #12]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	bfb8      	it	lt
 80125b6:	f04f 33ff 	movlt.w	r3, #4294967295
 80125ba:	3402      	adds	r4, #2
 80125bc:	9305      	str	r3, [sp, #20]
 80125be:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80126a4 <_vfiprintf_r+0x25c>
 80125c2:	7821      	ldrb	r1, [r4, #0]
 80125c4:	2203      	movs	r2, #3
 80125c6:	4650      	mov	r0, sl
 80125c8:	f7ed fe1a 	bl	8000200 <memchr>
 80125cc:	b140      	cbz	r0, 80125e0 <_vfiprintf_r+0x198>
 80125ce:	2340      	movs	r3, #64	; 0x40
 80125d0:	eba0 000a 	sub.w	r0, r0, sl
 80125d4:	fa03 f000 	lsl.w	r0, r3, r0
 80125d8:	9b04      	ldr	r3, [sp, #16]
 80125da:	4303      	orrs	r3, r0
 80125dc:	3401      	adds	r4, #1
 80125de:	9304      	str	r3, [sp, #16]
 80125e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80125e4:	482c      	ldr	r0, [pc, #176]	; (8012698 <_vfiprintf_r+0x250>)
 80125e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80125ea:	2206      	movs	r2, #6
 80125ec:	f7ed fe08 	bl	8000200 <memchr>
 80125f0:	2800      	cmp	r0, #0
 80125f2:	d03f      	beq.n	8012674 <_vfiprintf_r+0x22c>
 80125f4:	4b29      	ldr	r3, [pc, #164]	; (801269c <_vfiprintf_r+0x254>)
 80125f6:	bb1b      	cbnz	r3, 8012640 <_vfiprintf_r+0x1f8>
 80125f8:	9b03      	ldr	r3, [sp, #12]
 80125fa:	3307      	adds	r3, #7
 80125fc:	f023 0307 	bic.w	r3, r3, #7
 8012600:	3308      	adds	r3, #8
 8012602:	9303      	str	r3, [sp, #12]
 8012604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012606:	443b      	add	r3, r7
 8012608:	9309      	str	r3, [sp, #36]	; 0x24
 801260a:	e767      	b.n	80124dc <_vfiprintf_r+0x94>
 801260c:	fb0c 3202 	mla	r2, ip, r2, r3
 8012610:	460c      	mov	r4, r1
 8012612:	2001      	movs	r0, #1
 8012614:	e7a5      	b.n	8012562 <_vfiprintf_r+0x11a>
 8012616:	2300      	movs	r3, #0
 8012618:	3401      	adds	r4, #1
 801261a:	9305      	str	r3, [sp, #20]
 801261c:	4619      	mov	r1, r3
 801261e:	f04f 0c0a 	mov.w	ip, #10
 8012622:	4620      	mov	r0, r4
 8012624:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012628:	3a30      	subs	r2, #48	; 0x30
 801262a:	2a09      	cmp	r2, #9
 801262c:	d903      	bls.n	8012636 <_vfiprintf_r+0x1ee>
 801262e:	2b00      	cmp	r3, #0
 8012630:	d0c5      	beq.n	80125be <_vfiprintf_r+0x176>
 8012632:	9105      	str	r1, [sp, #20]
 8012634:	e7c3      	b.n	80125be <_vfiprintf_r+0x176>
 8012636:	fb0c 2101 	mla	r1, ip, r1, r2
 801263a:	4604      	mov	r4, r0
 801263c:	2301      	movs	r3, #1
 801263e:	e7f0      	b.n	8012622 <_vfiprintf_r+0x1da>
 8012640:	ab03      	add	r3, sp, #12
 8012642:	9300      	str	r3, [sp, #0]
 8012644:	462a      	mov	r2, r5
 8012646:	4b16      	ldr	r3, [pc, #88]	; (80126a0 <_vfiprintf_r+0x258>)
 8012648:	a904      	add	r1, sp, #16
 801264a:	4630      	mov	r0, r6
 801264c:	f000 f8cc 	bl	80127e8 <_printf_float>
 8012650:	4607      	mov	r7, r0
 8012652:	1c78      	adds	r0, r7, #1
 8012654:	d1d6      	bne.n	8012604 <_vfiprintf_r+0x1bc>
 8012656:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012658:	07d9      	lsls	r1, r3, #31
 801265a:	d405      	bmi.n	8012668 <_vfiprintf_r+0x220>
 801265c:	89ab      	ldrh	r3, [r5, #12]
 801265e:	059a      	lsls	r2, r3, #22
 8012660:	d402      	bmi.n	8012668 <_vfiprintf_r+0x220>
 8012662:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012664:	f003 f9ea 	bl	8015a3c <__retarget_lock_release_recursive>
 8012668:	89ab      	ldrh	r3, [r5, #12]
 801266a:	065b      	lsls	r3, r3, #25
 801266c:	f53f af12 	bmi.w	8012494 <_vfiprintf_r+0x4c>
 8012670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012672:	e711      	b.n	8012498 <_vfiprintf_r+0x50>
 8012674:	ab03      	add	r3, sp, #12
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	462a      	mov	r2, r5
 801267a:	4b09      	ldr	r3, [pc, #36]	; (80126a0 <_vfiprintf_r+0x258>)
 801267c:	a904      	add	r1, sp, #16
 801267e:	4630      	mov	r0, r6
 8012680:	f000 fb56 	bl	8012d30 <_printf_i>
 8012684:	e7e4      	b.n	8012650 <_vfiprintf_r+0x208>
 8012686:	bf00      	nop
 8012688:	08062bd4 	.word	0x08062bd4
 801268c:	08062bf4 	.word	0x08062bf4
 8012690:	08062bb4 	.word	0x08062bb4
 8012694:	08062984 	.word	0x08062984
 8012698:	0806298e 	.word	0x0806298e
 801269c:	080127e9 	.word	0x080127e9
 80126a0:	08012423 	.word	0x08012423
 80126a4:	0806298a 	.word	0x0806298a

080126a8 <__cvt>:
 80126a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80126ac:	ec55 4b10 	vmov	r4, r5, d0
 80126b0:	2d00      	cmp	r5, #0
 80126b2:	460e      	mov	r6, r1
 80126b4:	4619      	mov	r1, r3
 80126b6:	462b      	mov	r3, r5
 80126b8:	bfbb      	ittet	lt
 80126ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80126be:	461d      	movlt	r5, r3
 80126c0:	2300      	movge	r3, #0
 80126c2:	232d      	movlt	r3, #45	; 0x2d
 80126c4:	700b      	strb	r3, [r1, #0]
 80126c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80126c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80126cc:	4691      	mov	r9, r2
 80126ce:	f023 0820 	bic.w	r8, r3, #32
 80126d2:	bfbc      	itt	lt
 80126d4:	4622      	movlt	r2, r4
 80126d6:	4614      	movlt	r4, r2
 80126d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80126dc:	d005      	beq.n	80126ea <__cvt+0x42>
 80126de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80126e2:	d100      	bne.n	80126e6 <__cvt+0x3e>
 80126e4:	3601      	adds	r6, #1
 80126e6:	2102      	movs	r1, #2
 80126e8:	e000      	b.n	80126ec <__cvt+0x44>
 80126ea:	2103      	movs	r1, #3
 80126ec:	ab03      	add	r3, sp, #12
 80126ee:	9301      	str	r3, [sp, #4]
 80126f0:	ab02      	add	r3, sp, #8
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	ec45 4b10 	vmov	d0, r4, r5
 80126f8:	4653      	mov	r3, sl
 80126fa:	4632      	mov	r2, r6
 80126fc:	f001 fe84 	bl	8014408 <_dtoa_r>
 8012700:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012704:	4607      	mov	r7, r0
 8012706:	d102      	bne.n	801270e <__cvt+0x66>
 8012708:	f019 0f01 	tst.w	r9, #1
 801270c:	d022      	beq.n	8012754 <__cvt+0xac>
 801270e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012712:	eb07 0906 	add.w	r9, r7, r6
 8012716:	d110      	bne.n	801273a <__cvt+0x92>
 8012718:	783b      	ldrb	r3, [r7, #0]
 801271a:	2b30      	cmp	r3, #48	; 0x30
 801271c:	d10a      	bne.n	8012734 <__cvt+0x8c>
 801271e:	2200      	movs	r2, #0
 8012720:	2300      	movs	r3, #0
 8012722:	4620      	mov	r0, r4
 8012724:	4629      	mov	r1, r5
 8012726:	f7ee f9df 	bl	8000ae8 <__aeabi_dcmpeq>
 801272a:	b918      	cbnz	r0, 8012734 <__cvt+0x8c>
 801272c:	f1c6 0601 	rsb	r6, r6, #1
 8012730:	f8ca 6000 	str.w	r6, [sl]
 8012734:	f8da 3000 	ldr.w	r3, [sl]
 8012738:	4499      	add	r9, r3
 801273a:	2200      	movs	r2, #0
 801273c:	2300      	movs	r3, #0
 801273e:	4620      	mov	r0, r4
 8012740:	4629      	mov	r1, r5
 8012742:	f7ee f9d1 	bl	8000ae8 <__aeabi_dcmpeq>
 8012746:	b108      	cbz	r0, 801274c <__cvt+0xa4>
 8012748:	f8cd 900c 	str.w	r9, [sp, #12]
 801274c:	2230      	movs	r2, #48	; 0x30
 801274e:	9b03      	ldr	r3, [sp, #12]
 8012750:	454b      	cmp	r3, r9
 8012752:	d307      	bcc.n	8012764 <__cvt+0xbc>
 8012754:	9b03      	ldr	r3, [sp, #12]
 8012756:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012758:	1bdb      	subs	r3, r3, r7
 801275a:	4638      	mov	r0, r7
 801275c:	6013      	str	r3, [r2, #0]
 801275e:	b004      	add	sp, #16
 8012760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012764:	1c59      	adds	r1, r3, #1
 8012766:	9103      	str	r1, [sp, #12]
 8012768:	701a      	strb	r2, [r3, #0]
 801276a:	e7f0      	b.n	801274e <__cvt+0xa6>

0801276c <__exponent>:
 801276c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801276e:	4603      	mov	r3, r0
 8012770:	2900      	cmp	r1, #0
 8012772:	bfb8      	it	lt
 8012774:	4249      	neglt	r1, r1
 8012776:	f803 2b02 	strb.w	r2, [r3], #2
 801277a:	bfb4      	ite	lt
 801277c:	222d      	movlt	r2, #45	; 0x2d
 801277e:	222b      	movge	r2, #43	; 0x2b
 8012780:	2909      	cmp	r1, #9
 8012782:	7042      	strb	r2, [r0, #1]
 8012784:	dd2a      	ble.n	80127dc <__exponent+0x70>
 8012786:	f10d 0407 	add.w	r4, sp, #7
 801278a:	46a4      	mov	ip, r4
 801278c:	270a      	movs	r7, #10
 801278e:	46a6      	mov	lr, r4
 8012790:	460a      	mov	r2, r1
 8012792:	fb91 f6f7 	sdiv	r6, r1, r7
 8012796:	fb07 1516 	mls	r5, r7, r6, r1
 801279a:	3530      	adds	r5, #48	; 0x30
 801279c:	2a63      	cmp	r2, #99	; 0x63
 801279e:	f104 34ff 	add.w	r4, r4, #4294967295
 80127a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80127a6:	4631      	mov	r1, r6
 80127a8:	dcf1      	bgt.n	801278e <__exponent+0x22>
 80127aa:	3130      	adds	r1, #48	; 0x30
 80127ac:	f1ae 0502 	sub.w	r5, lr, #2
 80127b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80127b4:	1c44      	adds	r4, r0, #1
 80127b6:	4629      	mov	r1, r5
 80127b8:	4561      	cmp	r1, ip
 80127ba:	d30a      	bcc.n	80127d2 <__exponent+0x66>
 80127bc:	f10d 0209 	add.w	r2, sp, #9
 80127c0:	eba2 020e 	sub.w	r2, r2, lr
 80127c4:	4565      	cmp	r5, ip
 80127c6:	bf88      	it	hi
 80127c8:	2200      	movhi	r2, #0
 80127ca:	4413      	add	r3, r2
 80127cc:	1a18      	subs	r0, r3, r0
 80127ce:	b003      	add	sp, #12
 80127d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80127d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80127da:	e7ed      	b.n	80127b8 <__exponent+0x4c>
 80127dc:	2330      	movs	r3, #48	; 0x30
 80127de:	3130      	adds	r1, #48	; 0x30
 80127e0:	7083      	strb	r3, [r0, #2]
 80127e2:	70c1      	strb	r1, [r0, #3]
 80127e4:	1d03      	adds	r3, r0, #4
 80127e6:	e7f1      	b.n	80127cc <__exponent+0x60>

080127e8 <_printf_float>:
 80127e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127ec:	ed2d 8b02 	vpush	{d8}
 80127f0:	b08d      	sub	sp, #52	; 0x34
 80127f2:	460c      	mov	r4, r1
 80127f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80127f8:	4616      	mov	r6, r2
 80127fa:	461f      	mov	r7, r3
 80127fc:	4605      	mov	r5, r0
 80127fe:	f003 f917 	bl	8015a30 <_localeconv_r>
 8012802:	f8d0 a000 	ldr.w	sl, [r0]
 8012806:	4650      	mov	r0, sl
 8012808:	f7ed fcec 	bl	80001e4 <strlen>
 801280c:	2300      	movs	r3, #0
 801280e:	930a      	str	r3, [sp, #40]	; 0x28
 8012810:	6823      	ldr	r3, [r4, #0]
 8012812:	9305      	str	r3, [sp, #20]
 8012814:	f8d8 3000 	ldr.w	r3, [r8]
 8012818:	f894 b018 	ldrb.w	fp, [r4, #24]
 801281c:	3307      	adds	r3, #7
 801281e:	f023 0307 	bic.w	r3, r3, #7
 8012822:	f103 0208 	add.w	r2, r3, #8
 8012826:	f8c8 2000 	str.w	r2, [r8]
 801282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801282e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012832:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012836:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801283a:	9307      	str	r3, [sp, #28]
 801283c:	f8cd 8018 	str.w	r8, [sp, #24]
 8012840:	ee08 0a10 	vmov	s16, r0
 8012844:	4b9f      	ldr	r3, [pc, #636]	; (8012ac4 <_printf_float+0x2dc>)
 8012846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801284a:	f04f 32ff 	mov.w	r2, #4294967295
 801284e:	f7ee f97d 	bl	8000b4c <__aeabi_dcmpun>
 8012852:	bb88      	cbnz	r0, 80128b8 <_printf_float+0xd0>
 8012854:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012858:	4b9a      	ldr	r3, [pc, #616]	; (8012ac4 <_printf_float+0x2dc>)
 801285a:	f04f 32ff 	mov.w	r2, #4294967295
 801285e:	f7ee f957 	bl	8000b10 <__aeabi_dcmple>
 8012862:	bb48      	cbnz	r0, 80128b8 <_printf_float+0xd0>
 8012864:	2200      	movs	r2, #0
 8012866:	2300      	movs	r3, #0
 8012868:	4640      	mov	r0, r8
 801286a:	4649      	mov	r1, r9
 801286c:	f7ee f946 	bl	8000afc <__aeabi_dcmplt>
 8012870:	b110      	cbz	r0, 8012878 <_printf_float+0x90>
 8012872:	232d      	movs	r3, #45	; 0x2d
 8012874:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012878:	4b93      	ldr	r3, [pc, #588]	; (8012ac8 <_printf_float+0x2e0>)
 801287a:	4894      	ldr	r0, [pc, #592]	; (8012acc <_printf_float+0x2e4>)
 801287c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012880:	bf94      	ite	ls
 8012882:	4698      	movls	r8, r3
 8012884:	4680      	movhi	r8, r0
 8012886:	2303      	movs	r3, #3
 8012888:	6123      	str	r3, [r4, #16]
 801288a:	9b05      	ldr	r3, [sp, #20]
 801288c:	f023 0204 	bic.w	r2, r3, #4
 8012890:	6022      	str	r2, [r4, #0]
 8012892:	f04f 0900 	mov.w	r9, #0
 8012896:	9700      	str	r7, [sp, #0]
 8012898:	4633      	mov	r3, r6
 801289a:	aa0b      	add	r2, sp, #44	; 0x2c
 801289c:	4621      	mov	r1, r4
 801289e:	4628      	mov	r0, r5
 80128a0:	f000 f9d8 	bl	8012c54 <_printf_common>
 80128a4:	3001      	adds	r0, #1
 80128a6:	f040 8090 	bne.w	80129ca <_printf_float+0x1e2>
 80128aa:	f04f 30ff 	mov.w	r0, #4294967295
 80128ae:	b00d      	add	sp, #52	; 0x34
 80128b0:	ecbd 8b02 	vpop	{d8}
 80128b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128b8:	4642      	mov	r2, r8
 80128ba:	464b      	mov	r3, r9
 80128bc:	4640      	mov	r0, r8
 80128be:	4649      	mov	r1, r9
 80128c0:	f7ee f944 	bl	8000b4c <__aeabi_dcmpun>
 80128c4:	b140      	cbz	r0, 80128d8 <_printf_float+0xf0>
 80128c6:	464b      	mov	r3, r9
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	bfbc      	itt	lt
 80128cc:	232d      	movlt	r3, #45	; 0x2d
 80128ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80128d2:	487f      	ldr	r0, [pc, #508]	; (8012ad0 <_printf_float+0x2e8>)
 80128d4:	4b7f      	ldr	r3, [pc, #508]	; (8012ad4 <_printf_float+0x2ec>)
 80128d6:	e7d1      	b.n	801287c <_printf_float+0x94>
 80128d8:	6863      	ldr	r3, [r4, #4]
 80128da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80128de:	9206      	str	r2, [sp, #24]
 80128e0:	1c5a      	adds	r2, r3, #1
 80128e2:	d13f      	bne.n	8012964 <_printf_float+0x17c>
 80128e4:	2306      	movs	r3, #6
 80128e6:	6063      	str	r3, [r4, #4]
 80128e8:	9b05      	ldr	r3, [sp, #20]
 80128ea:	6861      	ldr	r1, [r4, #4]
 80128ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80128f0:	2300      	movs	r3, #0
 80128f2:	9303      	str	r3, [sp, #12]
 80128f4:	ab0a      	add	r3, sp, #40	; 0x28
 80128f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80128fa:	ab09      	add	r3, sp, #36	; 0x24
 80128fc:	ec49 8b10 	vmov	d0, r8, r9
 8012900:	9300      	str	r3, [sp, #0]
 8012902:	6022      	str	r2, [r4, #0]
 8012904:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012908:	4628      	mov	r0, r5
 801290a:	f7ff fecd 	bl	80126a8 <__cvt>
 801290e:	9b06      	ldr	r3, [sp, #24]
 8012910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012912:	2b47      	cmp	r3, #71	; 0x47
 8012914:	4680      	mov	r8, r0
 8012916:	d108      	bne.n	801292a <_printf_float+0x142>
 8012918:	1cc8      	adds	r0, r1, #3
 801291a:	db02      	blt.n	8012922 <_printf_float+0x13a>
 801291c:	6863      	ldr	r3, [r4, #4]
 801291e:	4299      	cmp	r1, r3
 8012920:	dd41      	ble.n	80129a6 <_printf_float+0x1be>
 8012922:	f1ab 0b02 	sub.w	fp, fp, #2
 8012926:	fa5f fb8b 	uxtb.w	fp, fp
 801292a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801292e:	d820      	bhi.n	8012972 <_printf_float+0x18a>
 8012930:	3901      	subs	r1, #1
 8012932:	465a      	mov	r2, fp
 8012934:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012938:	9109      	str	r1, [sp, #36]	; 0x24
 801293a:	f7ff ff17 	bl	801276c <__exponent>
 801293e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012940:	1813      	adds	r3, r2, r0
 8012942:	2a01      	cmp	r2, #1
 8012944:	4681      	mov	r9, r0
 8012946:	6123      	str	r3, [r4, #16]
 8012948:	dc02      	bgt.n	8012950 <_printf_float+0x168>
 801294a:	6822      	ldr	r2, [r4, #0]
 801294c:	07d2      	lsls	r2, r2, #31
 801294e:	d501      	bpl.n	8012954 <_printf_float+0x16c>
 8012950:	3301      	adds	r3, #1
 8012952:	6123      	str	r3, [r4, #16]
 8012954:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012958:	2b00      	cmp	r3, #0
 801295a:	d09c      	beq.n	8012896 <_printf_float+0xae>
 801295c:	232d      	movs	r3, #45	; 0x2d
 801295e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012962:	e798      	b.n	8012896 <_printf_float+0xae>
 8012964:	9a06      	ldr	r2, [sp, #24]
 8012966:	2a47      	cmp	r2, #71	; 0x47
 8012968:	d1be      	bne.n	80128e8 <_printf_float+0x100>
 801296a:	2b00      	cmp	r3, #0
 801296c:	d1bc      	bne.n	80128e8 <_printf_float+0x100>
 801296e:	2301      	movs	r3, #1
 8012970:	e7b9      	b.n	80128e6 <_printf_float+0xfe>
 8012972:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012976:	d118      	bne.n	80129aa <_printf_float+0x1c2>
 8012978:	2900      	cmp	r1, #0
 801297a:	6863      	ldr	r3, [r4, #4]
 801297c:	dd0b      	ble.n	8012996 <_printf_float+0x1ae>
 801297e:	6121      	str	r1, [r4, #16]
 8012980:	b913      	cbnz	r3, 8012988 <_printf_float+0x1a0>
 8012982:	6822      	ldr	r2, [r4, #0]
 8012984:	07d0      	lsls	r0, r2, #31
 8012986:	d502      	bpl.n	801298e <_printf_float+0x1a6>
 8012988:	3301      	adds	r3, #1
 801298a:	440b      	add	r3, r1
 801298c:	6123      	str	r3, [r4, #16]
 801298e:	65a1      	str	r1, [r4, #88]	; 0x58
 8012990:	f04f 0900 	mov.w	r9, #0
 8012994:	e7de      	b.n	8012954 <_printf_float+0x16c>
 8012996:	b913      	cbnz	r3, 801299e <_printf_float+0x1b6>
 8012998:	6822      	ldr	r2, [r4, #0]
 801299a:	07d2      	lsls	r2, r2, #31
 801299c:	d501      	bpl.n	80129a2 <_printf_float+0x1ba>
 801299e:	3302      	adds	r3, #2
 80129a0:	e7f4      	b.n	801298c <_printf_float+0x1a4>
 80129a2:	2301      	movs	r3, #1
 80129a4:	e7f2      	b.n	801298c <_printf_float+0x1a4>
 80129a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80129aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129ac:	4299      	cmp	r1, r3
 80129ae:	db05      	blt.n	80129bc <_printf_float+0x1d4>
 80129b0:	6823      	ldr	r3, [r4, #0]
 80129b2:	6121      	str	r1, [r4, #16]
 80129b4:	07d8      	lsls	r0, r3, #31
 80129b6:	d5ea      	bpl.n	801298e <_printf_float+0x1a6>
 80129b8:	1c4b      	adds	r3, r1, #1
 80129ba:	e7e7      	b.n	801298c <_printf_float+0x1a4>
 80129bc:	2900      	cmp	r1, #0
 80129be:	bfd4      	ite	le
 80129c0:	f1c1 0202 	rsble	r2, r1, #2
 80129c4:	2201      	movgt	r2, #1
 80129c6:	4413      	add	r3, r2
 80129c8:	e7e0      	b.n	801298c <_printf_float+0x1a4>
 80129ca:	6823      	ldr	r3, [r4, #0]
 80129cc:	055a      	lsls	r2, r3, #21
 80129ce:	d407      	bmi.n	80129e0 <_printf_float+0x1f8>
 80129d0:	6923      	ldr	r3, [r4, #16]
 80129d2:	4642      	mov	r2, r8
 80129d4:	4631      	mov	r1, r6
 80129d6:	4628      	mov	r0, r5
 80129d8:	47b8      	blx	r7
 80129da:	3001      	adds	r0, #1
 80129dc:	d12c      	bne.n	8012a38 <_printf_float+0x250>
 80129de:	e764      	b.n	80128aa <_printf_float+0xc2>
 80129e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80129e4:	f240 80e0 	bls.w	8012ba8 <_printf_float+0x3c0>
 80129e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80129ec:	2200      	movs	r2, #0
 80129ee:	2300      	movs	r3, #0
 80129f0:	f7ee f87a 	bl	8000ae8 <__aeabi_dcmpeq>
 80129f4:	2800      	cmp	r0, #0
 80129f6:	d034      	beq.n	8012a62 <_printf_float+0x27a>
 80129f8:	4a37      	ldr	r2, [pc, #220]	; (8012ad8 <_printf_float+0x2f0>)
 80129fa:	2301      	movs	r3, #1
 80129fc:	4631      	mov	r1, r6
 80129fe:	4628      	mov	r0, r5
 8012a00:	47b8      	blx	r7
 8012a02:	3001      	adds	r0, #1
 8012a04:	f43f af51 	beq.w	80128aa <_printf_float+0xc2>
 8012a08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a0c:	429a      	cmp	r2, r3
 8012a0e:	db02      	blt.n	8012a16 <_printf_float+0x22e>
 8012a10:	6823      	ldr	r3, [r4, #0]
 8012a12:	07d8      	lsls	r0, r3, #31
 8012a14:	d510      	bpl.n	8012a38 <_printf_float+0x250>
 8012a16:	ee18 3a10 	vmov	r3, s16
 8012a1a:	4652      	mov	r2, sl
 8012a1c:	4631      	mov	r1, r6
 8012a1e:	4628      	mov	r0, r5
 8012a20:	47b8      	blx	r7
 8012a22:	3001      	adds	r0, #1
 8012a24:	f43f af41 	beq.w	80128aa <_printf_float+0xc2>
 8012a28:	f04f 0800 	mov.w	r8, #0
 8012a2c:	f104 091a 	add.w	r9, r4, #26
 8012a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a32:	3b01      	subs	r3, #1
 8012a34:	4543      	cmp	r3, r8
 8012a36:	dc09      	bgt.n	8012a4c <_printf_float+0x264>
 8012a38:	6823      	ldr	r3, [r4, #0]
 8012a3a:	079b      	lsls	r3, r3, #30
 8012a3c:	f100 8105 	bmi.w	8012c4a <_printf_float+0x462>
 8012a40:	68e0      	ldr	r0, [r4, #12]
 8012a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a44:	4298      	cmp	r0, r3
 8012a46:	bfb8      	it	lt
 8012a48:	4618      	movlt	r0, r3
 8012a4a:	e730      	b.n	80128ae <_printf_float+0xc6>
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	464a      	mov	r2, r9
 8012a50:	4631      	mov	r1, r6
 8012a52:	4628      	mov	r0, r5
 8012a54:	47b8      	blx	r7
 8012a56:	3001      	adds	r0, #1
 8012a58:	f43f af27 	beq.w	80128aa <_printf_float+0xc2>
 8012a5c:	f108 0801 	add.w	r8, r8, #1
 8012a60:	e7e6      	b.n	8012a30 <_printf_float+0x248>
 8012a62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	dc39      	bgt.n	8012adc <_printf_float+0x2f4>
 8012a68:	4a1b      	ldr	r2, [pc, #108]	; (8012ad8 <_printf_float+0x2f0>)
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	4631      	mov	r1, r6
 8012a6e:	4628      	mov	r0, r5
 8012a70:	47b8      	blx	r7
 8012a72:	3001      	adds	r0, #1
 8012a74:	f43f af19 	beq.w	80128aa <_printf_float+0xc2>
 8012a78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012a7c:	4313      	orrs	r3, r2
 8012a7e:	d102      	bne.n	8012a86 <_printf_float+0x29e>
 8012a80:	6823      	ldr	r3, [r4, #0]
 8012a82:	07d9      	lsls	r1, r3, #31
 8012a84:	d5d8      	bpl.n	8012a38 <_printf_float+0x250>
 8012a86:	ee18 3a10 	vmov	r3, s16
 8012a8a:	4652      	mov	r2, sl
 8012a8c:	4631      	mov	r1, r6
 8012a8e:	4628      	mov	r0, r5
 8012a90:	47b8      	blx	r7
 8012a92:	3001      	adds	r0, #1
 8012a94:	f43f af09 	beq.w	80128aa <_printf_float+0xc2>
 8012a98:	f04f 0900 	mov.w	r9, #0
 8012a9c:	f104 0a1a 	add.w	sl, r4, #26
 8012aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012aa2:	425b      	negs	r3, r3
 8012aa4:	454b      	cmp	r3, r9
 8012aa6:	dc01      	bgt.n	8012aac <_printf_float+0x2c4>
 8012aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012aaa:	e792      	b.n	80129d2 <_printf_float+0x1ea>
 8012aac:	2301      	movs	r3, #1
 8012aae:	4652      	mov	r2, sl
 8012ab0:	4631      	mov	r1, r6
 8012ab2:	4628      	mov	r0, r5
 8012ab4:	47b8      	blx	r7
 8012ab6:	3001      	adds	r0, #1
 8012ab8:	f43f aef7 	beq.w	80128aa <_printf_float+0xc2>
 8012abc:	f109 0901 	add.w	r9, r9, #1
 8012ac0:	e7ee      	b.n	8012aa0 <_printf_float+0x2b8>
 8012ac2:	bf00      	nop
 8012ac4:	7fefffff 	.word	0x7fefffff
 8012ac8:	08062995 	.word	0x08062995
 8012acc:	08062999 	.word	0x08062999
 8012ad0:	080629a1 	.word	0x080629a1
 8012ad4:	0806299d 	.word	0x0806299d
 8012ad8:	080629a5 	.word	0x080629a5
 8012adc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ade:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	bfa8      	it	ge
 8012ae4:	461a      	movge	r2, r3
 8012ae6:	2a00      	cmp	r2, #0
 8012ae8:	4691      	mov	r9, r2
 8012aea:	dc37      	bgt.n	8012b5c <_printf_float+0x374>
 8012aec:	f04f 0b00 	mov.w	fp, #0
 8012af0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012af4:	f104 021a 	add.w	r2, r4, #26
 8012af8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012afa:	9305      	str	r3, [sp, #20]
 8012afc:	eba3 0309 	sub.w	r3, r3, r9
 8012b00:	455b      	cmp	r3, fp
 8012b02:	dc33      	bgt.n	8012b6c <_printf_float+0x384>
 8012b04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	db3b      	blt.n	8012b84 <_printf_float+0x39c>
 8012b0c:	6823      	ldr	r3, [r4, #0]
 8012b0e:	07da      	lsls	r2, r3, #31
 8012b10:	d438      	bmi.n	8012b84 <_printf_float+0x39c>
 8012b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b14:	9a05      	ldr	r2, [sp, #20]
 8012b16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012b18:	1a9a      	subs	r2, r3, r2
 8012b1a:	eba3 0901 	sub.w	r9, r3, r1
 8012b1e:	4591      	cmp	r9, r2
 8012b20:	bfa8      	it	ge
 8012b22:	4691      	movge	r9, r2
 8012b24:	f1b9 0f00 	cmp.w	r9, #0
 8012b28:	dc35      	bgt.n	8012b96 <_printf_float+0x3ae>
 8012b2a:	f04f 0800 	mov.w	r8, #0
 8012b2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012b32:	f104 0a1a 	add.w	sl, r4, #26
 8012b36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012b3a:	1a9b      	subs	r3, r3, r2
 8012b3c:	eba3 0309 	sub.w	r3, r3, r9
 8012b40:	4543      	cmp	r3, r8
 8012b42:	f77f af79 	ble.w	8012a38 <_printf_float+0x250>
 8012b46:	2301      	movs	r3, #1
 8012b48:	4652      	mov	r2, sl
 8012b4a:	4631      	mov	r1, r6
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	47b8      	blx	r7
 8012b50:	3001      	adds	r0, #1
 8012b52:	f43f aeaa 	beq.w	80128aa <_printf_float+0xc2>
 8012b56:	f108 0801 	add.w	r8, r8, #1
 8012b5a:	e7ec      	b.n	8012b36 <_printf_float+0x34e>
 8012b5c:	4613      	mov	r3, r2
 8012b5e:	4631      	mov	r1, r6
 8012b60:	4642      	mov	r2, r8
 8012b62:	4628      	mov	r0, r5
 8012b64:	47b8      	blx	r7
 8012b66:	3001      	adds	r0, #1
 8012b68:	d1c0      	bne.n	8012aec <_printf_float+0x304>
 8012b6a:	e69e      	b.n	80128aa <_printf_float+0xc2>
 8012b6c:	2301      	movs	r3, #1
 8012b6e:	4631      	mov	r1, r6
 8012b70:	4628      	mov	r0, r5
 8012b72:	9205      	str	r2, [sp, #20]
 8012b74:	47b8      	blx	r7
 8012b76:	3001      	adds	r0, #1
 8012b78:	f43f ae97 	beq.w	80128aa <_printf_float+0xc2>
 8012b7c:	9a05      	ldr	r2, [sp, #20]
 8012b7e:	f10b 0b01 	add.w	fp, fp, #1
 8012b82:	e7b9      	b.n	8012af8 <_printf_float+0x310>
 8012b84:	ee18 3a10 	vmov	r3, s16
 8012b88:	4652      	mov	r2, sl
 8012b8a:	4631      	mov	r1, r6
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	47b8      	blx	r7
 8012b90:	3001      	adds	r0, #1
 8012b92:	d1be      	bne.n	8012b12 <_printf_float+0x32a>
 8012b94:	e689      	b.n	80128aa <_printf_float+0xc2>
 8012b96:	9a05      	ldr	r2, [sp, #20]
 8012b98:	464b      	mov	r3, r9
 8012b9a:	4442      	add	r2, r8
 8012b9c:	4631      	mov	r1, r6
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	47b8      	blx	r7
 8012ba2:	3001      	adds	r0, #1
 8012ba4:	d1c1      	bne.n	8012b2a <_printf_float+0x342>
 8012ba6:	e680      	b.n	80128aa <_printf_float+0xc2>
 8012ba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012baa:	2a01      	cmp	r2, #1
 8012bac:	dc01      	bgt.n	8012bb2 <_printf_float+0x3ca>
 8012bae:	07db      	lsls	r3, r3, #31
 8012bb0:	d538      	bpl.n	8012c24 <_printf_float+0x43c>
 8012bb2:	2301      	movs	r3, #1
 8012bb4:	4642      	mov	r2, r8
 8012bb6:	4631      	mov	r1, r6
 8012bb8:	4628      	mov	r0, r5
 8012bba:	47b8      	blx	r7
 8012bbc:	3001      	adds	r0, #1
 8012bbe:	f43f ae74 	beq.w	80128aa <_printf_float+0xc2>
 8012bc2:	ee18 3a10 	vmov	r3, s16
 8012bc6:	4652      	mov	r2, sl
 8012bc8:	4631      	mov	r1, r6
 8012bca:	4628      	mov	r0, r5
 8012bcc:	47b8      	blx	r7
 8012bce:	3001      	adds	r0, #1
 8012bd0:	f43f ae6b 	beq.w	80128aa <_printf_float+0xc2>
 8012bd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012bd8:	2200      	movs	r2, #0
 8012bda:	2300      	movs	r3, #0
 8012bdc:	f7ed ff84 	bl	8000ae8 <__aeabi_dcmpeq>
 8012be0:	b9d8      	cbnz	r0, 8012c1a <_printf_float+0x432>
 8012be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012be4:	f108 0201 	add.w	r2, r8, #1
 8012be8:	3b01      	subs	r3, #1
 8012bea:	4631      	mov	r1, r6
 8012bec:	4628      	mov	r0, r5
 8012bee:	47b8      	blx	r7
 8012bf0:	3001      	adds	r0, #1
 8012bf2:	d10e      	bne.n	8012c12 <_printf_float+0x42a>
 8012bf4:	e659      	b.n	80128aa <_printf_float+0xc2>
 8012bf6:	2301      	movs	r3, #1
 8012bf8:	4652      	mov	r2, sl
 8012bfa:	4631      	mov	r1, r6
 8012bfc:	4628      	mov	r0, r5
 8012bfe:	47b8      	blx	r7
 8012c00:	3001      	adds	r0, #1
 8012c02:	f43f ae52 	beq.w	80128aa <_printf_float+0xc2>
 8012c06:	f108 0801 	add.w	r8, r8, #1
 8012c0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012c0c:	3b01      	subs	r3, #1
 8012c0e:	4543      	cmp	r3, r8
 8012c10:	dcf1      	bgt.n	8012bf6 <_printf_float+0x40e>
 8012c12:	464b      	mov	r3, r9
 8012c14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012c18:	e6dc      	b.n	80129d4 <_printf_float+0x1ec>
 8012c1a:	f04f 0800 	mov.w	r8, #0
 8012c1e:	f104 0a1a 	add.w	sl, r4, #26
 8012c22:	e7f2      	b.n	8012c0a <_printf_float+0x422>
 8012c24:	2301      	movs	r3, #1
 8012c26:	4642      	mov	r2, r8
 8012c28:	e7df      	b.n	8012bea <_printf_float+0x402>
 8012c2a:	2301      	movs	r3, #1
 8012c2c:	464a      	mov	r2, r9
 8012c2e:	4631      	mov	r1, r6
 8012c30:	4628      	mov	r0, r5
 8012c32:	47b8      	blx	r7
 8012c34:	3001      	adds	r0, #1
 8012c36:	f43f ae38 	beq.w	80128aa <_printf_float+0xc2>
 8012c3a:	f108 0801 	add.w	r8, r8, #1
 8012c3e:	68e3      	ldr	r3, [r4, #12]
 8012c40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012c42:	1a5b      	subs	r3, r3, r1
 8012c44:	4543      	cmp	r3, r8
 8012c46:	dcf0      	bgt.n	8012c2a <_printf_float+0x442>
 8012c48:	e6fa      	b.n	8012a40 <_printf_float+0x258>
 8012c4a:	f04f 0800 	mov.w	r8, #0
 8012c4e:	f104 0919 	add.w	r9, r4, #25
 8012c52:	e7f4      	b.n	8012c3e <_printf_float+0x456>

08012c54 <_printf_common>:
 8012c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c58:	4616      	mov	r6, r2
 8012c5a:	4699      	mov	r9, r3
 8012c5c:	688a      	ldr	r2, [r1, #8]
 8012c5e:	690b      	ldr	r3, [r1, #16]
 8012c60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012c64:	4293      	cmp	r3, r2
 8012c66:	bfb8      	it	lt
 8012c68:	4613      	movlt	r3, r2
 8012c6a:	6033      	str	r3, [r6, #0]
 8012c6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012c70:	4607      	mov	r7, r0
 8012c72:	460c      	mov	r4, r1
 8012c74:	b10a      	cbz	r2, 8012c7a <_printf_common+0x26>
 8012c76:	3301      	adds	r3, #1
 8012c78:	6033      	str	r3, [r6, #0]
 8012c7a:	6823      	ldr	r3, [r4, #0]
 8012c7c:	0699      	lsls	r1, r3, #26
 8012c7e:	bf42      	ittt	mi
 8012c80:	6833      	ldrmi	r3, [r6, #0]
 8012c82:	3302      	addmi	r3, #2
 8012c84:	6033      	strmi	r3, [r6, #0]
 8012c86:	6825      	ldr	r5, [r4, #0]
 8012c88:	f015 0506 	ands.w	r5, r5, #6
 8012c8c:	d106      	bne.n	8012c9c <_printf_common+0x48>
 8012c8e:	f104 0a19 	add.w	sl, r4, #25
 8012c92:	68e3      	ldr	r3, [r4, #12]
 8012c94:	6832      	ldr	r2, [r6, #0]
 8012c96:	1a9b      	subs	r3, r3, r2
 8012c98:	42ab      	cmp	r3, r5
 8012c9a:	dc26      	bgt.n	8012cea <_printf_common+0x96>
 8012c9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012ca0:	1e13      	subs	r3, r2, #0
 8012ca2:	6822      	ldr	r2, [r4, #0]
 8012ca4:	bf18      	it	ne
 8012ca6:	2301      	movne	r3, #1
 8012ca8:	0692      	lsls	r2, r2, #26
 8012caa:	d42b      	bmi.n	8012d04 <_printf_common+0xb0>
 8012cac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012cb0:	4649      	mov	r1, r9
 8012cb2:	4638      	mov	r0, r7
 8012cb4:	47c0      	blx	r8
 8012cb6:	3001      	adds	r0, #1
 8012cb8:	d01e      	beq.n	8012cf8 <_printf_common+0xa4>
 8012cba:	6823      	ldr	r3, [r4, #0]
 8012cbc:	68e5      	ldr	r5, [r4, #12]
 8012cbe:	6832      	ldr	r2, [r6, #0]
 8012cc0:	f003 0306 	and.w	r3, r3, #6
 8012cc4:	2b04      	cmp	r3, #4
 8012cc6:	bf08      	it	eq
 8012cc8:	1aad      	subeq	r5, r5, r2
 8012cca:	68a3      	ldr	r3, [r4, #8]
 8012ccc:	6922      	ldr	r2, [r4, #16]
 8012cce:	bf0c      	ite	eq
 8012cd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012cd4:	2500      	movne	r5, #0
 8012cd6:	4293      	cmp	r3, r2
 8012cd8:	bfc4      	itt	gt
 8012cda:	1a9b      	subgt	r3, r3, r2
 8012cdc:	18ed      	addgt	r5, r5, r3
 8012cde:	2600      	movs	r6, #0
 8012ce0:	341a      	adds	r4, #26
 8012ce2:	42b5      	cmp	r5, r6
 8012ce4:	d11a      	bne.n	8012d1c <_printf_common+0xc8>
 8012ce6:	2000      	movs	r0, #0
 8012ce8:	e008      	b.n	8012cfc <_printf_common+0xa8>
 8012cea:	2301      	movs	r3, #1
 8012cec:	4652      	mov	r2, sl
 8012cee:	4649      	mov	r1, r9
 8012cf0:	4638      	mov	r0, r7
 8012cf2:	47c0      	blx	r8
 8012cf4:	3001      	adds	r0, #1
 8012cf6:	d103      	bne.n	8012d00 <_printf_common+0xac>
 8012cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8012cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d00:	3501      	adds	r5, #1
 8012d02:	e7c6      	b.n	8012c92 <_printf_common+0x3e>
 8012d04:	18e1      	adds	r1, r4, r3
 8012d06:	1c5a      	adds	r2, r3, #1
 8012d08:	2030      	movs	r0, #48	; 0x30
 8012d0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d0e:	4422      	add	r2, r4
 8012d10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d18:	3302      	adds	r3, #2
 8012d1a:	e7c7      	b.n	8012cac <_printf_common+0x58>
 8012d1c:	2301      	movs	r3, #1
 8012d1e:	4622      	mov	r2, r4
 8012d20:	4649      	mov	r1, r9
 8012d22:	4638      	mov	r0, r7
 8012d24:	47c0      	blx	r8
 8012d26:	3001      	adds	r0, #1
 8012d28:	d0e6      	beq.n	8012cf8 <_printf_common+0xa4>
 8012d2a:	3601      	adds	r6, #1
 8012d2c:	e7d9      	b.n	8012ce2 <_printf_common+0x8e>
	...

08012d30 <_printf_i>:
 8012d30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012d34:	7e0f      	ldrb	r7, [r1, #24]
 8012d36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012d38:	2f78      	cmp	r7, #120	; 0x78
 8012d3a:	4691      	mov	r9, r2
 8012d3c:	4680      	mov	r8, r0
 8012d3e:	460c      	mov	r4, r1
 8012d40:	469a      	mov	sl, r3
 8012d42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012d46:	d807      	bhi.n	8012d58 <_printf_i+0x28>
 8012d48:	2f62      	cmp	r7, #98	; 0x62
 8012d4a:	d80a      	bhi.n	8012d62 <_printf_i+0x32>
 8012d4c:	2f00      	cmp	r7, #0
 8012d4e:	f000 80d8 	beq.w	8012f02 <_printf_i+0x1d2>
 8012d52:	2f58      	cmp	r7, #88	; 0x58
 8012d54:	f000 80a3 	beq.w	8012e9e <_printf_i+0x16e>
 8012d58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012d5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012d60:	e03a      	b.n	8012dd8 <_printf_i+0xa8>
 8012d62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012d66:	2b15      	cmp	r3, #21
 8012d68:	d8f6      	bhi.n	8012d58 <_printf_i+0x28>
 8012d6a:	a101      	add	r1, pc, #4	; (adr r1, 8012d70 <_printf_i+0x40>)
 8012d6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012d70:	08012dc9 	.word	0x08012dc9
 8012d74:	08012ddd 	.word	0x08012ddd
 8012d78:	08012d59 	.word	0x08012d59
 8012d7c:	08012d59 	.word	0x08012d59
 8012d80:	08012d59 	.word	0x08012d59
 8012d84:	08012d59 	.word	0x08012d59
 8012d88:	08012ddd 	.word	0x08012ddd
 8012d8c:	08012d59 	.word	0x08012d59
 8012d90:	08012d59 	.word	0x08012d59
 8012d94:	08012d59 	.word	0x08012d59
 8012d98:	08012d59 	.word	0x08012d59
 8012d9c:	08012ee9 	.word	0x08012ee9
 8012da0:	08012e0d 	.word	0x08012e0d
 8012da4:	08012ecb 	.word	0x08012ecb
 8012da8:	08012d59 	.word	0x08012d59
 8012dac:	08012d59 	.word	0x08012d59
 8012db0:	08012f0b 	.word	0x08012f0b
 8012db4:	08012d59 	.word	0x08012d59
 8012db8:	08012e0d 	.word	0x08012e0d
 8012dbc:	08012d59 	.word	0x08012d59
 8012dc0:	08012d59 	.word	0x08012d59
 8012dc4:	08012ed3 	.word	0x08012ed3
 8012dc8:	682b      	ldr	r3, [r5, #0]
 8012dca:	1d1a      	adds	r2, r3, #4
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	602a      	str	r2, [r5, #0]
 8012dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012dd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012dd8:	2301      	movs	r3, #1
 8012dda:	e0a3      	b.n	8012f24 <_printf_i+0x1f4>
 8012ddc:	6820      	ldr	r0, [r4, #0]
 8012dde:	6829      	ldr	r1, [r5, #0]
 8012de0:	0606      	lsls	r6, r0, #24
 8012de2:	f101 0304 	add.w	r3, r1, #4
 8012de6:	d50a      	bpl.n	8012dfe <_printf_i+0xce>
 8012de8:	680e      	ldr	r6, [r1, #0]
 8012dea:	602b      	str	r3, [r5, #0]
 8012dec:	2e00      	cmp	r6, #0
 8012dee:	da03      	bge.n	8012df8 <_printf_i+0xc8>
 8012df0:	232d      	movs	r3, #45	; 0x2d
 8012df2:	4276      	negs	r6, r6
 8012df4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012df8:	485e      	ldr	r0, [pc, #376]	; (8012f74 <_printf_i+0x244>)
 8012dfa:	230a      	movs	r3, #10
 8012dfc:	e019      	b.n	8012e32 <_printf_i+0x102>
 8012dfe:	680e      	ldr	r6, [r1, #0]
 8012e00:	602b      	str	r3, [r5, #0]
 8012e02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012e06:	bf18      	it	ne
 8012e08:	b236      	sxthne	r6, r6
 8012e0a:	e7ef      	b.n	8012dec <_printf_i+0xbc>
 8012e0c:	682b      	ldr	r3, [r5, #0]
 8012e0e:	6820      	ldr	r0, [r4, #0]
 8012e10:	1d19      	adds	r1, r3, #4
 8012e12:	6029      	str	r1, [r5, #0]
 8012e14:	0601      	lsls	r1, r0, #24
 8012e16:	d501      	bpl.n	8012e1c <_printf_i+0xec>
 8012e18:	681e      	ldr	r6, [r3, #0]
 8012e1a:	e002      	b.n	8012e22 <_printf_i+0xf2>
 8012e1c:	0646      	lsls	r6, r0, #25
 8012e1e:	d5fb      	bpl.n	8012e18 <_printf_i+0xe8>
 8012e20:	881e      	ldrh	r6, [r3, #0]
 8012e22:	4854      	ldr	r0, [pc, #336]	; (8012f74 <_printf_i+0x244>)
 8012e24:	2f6f      	cmp	r7, #111	; 0x6f
 8012e26:	bf0c      	ite	eq
 8012e28:	2308      	moveq	r3, #8
 8012e2a:	230a      	movne	r3, #10
 8012e2c:	2100      	movs	r1, #0
 8012e2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012e32:	6865      	ldr	r5, [r4, #4]
 8012e34:	60a5      	str	r5, [r4, #8]
 8012e36:	2d00      	cmp	r5, #0
 8012e38:	bfa2      	ittt	ge
 8012e3a:	6821      	ldrge	r1, [r4, #0]
 8012e3c:	f021 0104 	bicge.w	r1, r1, #4
 8012e40:	6021      	strge	r1, [r4, #0]
 8012e42:	b90e      	cbnz	r6, 8012e48 <_printf_i+0x118>
 8012e44:	2d00      	cmp	r5, #0
 8012e46:	d04d      	beq.n	8012ee4 <_printf_i+0x1b4>
 8012e48:	4615      	mov	r5, r2
 8012e4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8012e4e:	fb03 6711 	mls	r7, r3, r1, r6
 8012e52:	5dc7      	ldrb	r7, [r0, r7]
 8012e54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012e58:	4637      	mov	r7, r6
 8012e5a:	42bb      	cmp	r3, r7
 8012e5c:	460e      	mov	r6, r1
 8012e5e:	d9f4      	bls.n	8012e4a <_printf_i+0x11a>
 8012e60:	2b08      	cmp	r3, #8
 8012e62:	d10b      	bne.n	8012e7c <_printf_i+0x14c>
 8012e64:	6823      	ldr	r3, [r4, #0]
 8012e66:	07de      	lsls	r6, r3, #31
 8012e68:	d508      	bpl.n	8012e7c <_printf_i+0x14c>
 8012e6a:	6923      	ldr	r3, [r4, #16]
 8012e6c:	6861      	ldr	r1, [r4, #4]
 8012e6e:	4299      	cmp	r1, r3
 8012e70:	bfde      	ittt	le
 8012e72:	2330      	movle	r3, #48	; 0x30
 8012e74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012e78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012e7c:	1b52      	subs	r2, r2, r5
 8012e7e:	6122      	str	r2, [r4, #16]
 8012e80:	f8cd a000 	str.w	sl, [sp]
 8012e84:	464b      	mov	r3, r9
 8012e86:	aa03      	add	r2, sp, #12
 8012e88:	4621      	mov	r1, r4
 8012e8a:	4640      	mov	r0, r8
 8012e8c:	f7ff fee2 	bl	8012c54 <_printf_common>
 8012e90:	3001      	adds	r0, #1
 8012e92:	d14c      	bne.n	8012f2e <_printf_i+0x1fe>
 8012e94:	f04f 30ff 	mov.w	r0, #4294967295
 8012e98:	b004      	add	sp, #16
 8012e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e9e:	4835      	ldr	r0, [pc, #212]	; (8012f74 <_printf_i+0x244>)
 8012ea0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012ea4:	6829      	ldr	r1, [r5, #0]
 8012ea6:	6823      	ldr	r3, [r4, #0]
 8012ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8012eac:	6029      	str	r1, [r5, #0]
 8012eae:	061d      	lsls	r5, r3, #24
 8012eb0:	d514      	bpl.n	8012edc <_printf_i+0x1ac>
 8012eb2:	07df      	lsls	r7, r3, #31
 8012eb4:	bf44      	itt	mi
 8012eb6:	f043 0320 	orrmi.w	r3, r3, #32
 8012eba:	6023      	strmi	r3, [r4, #0]
 8012ebc:	b91e      	cbnz	r6, 8012ec6 <_printf_i+0x196>
 8012ebe:	6823      	ldr	r3, [r4, #0]
 8012ec0:	f023 0320 	bic.w	r3, r3, #32
 8012ec4:	6023      	str	r3, [r4, #0]
 8012ec6:	2310      	movs	r3, #16
 8012ec8:	e7b0      	b.n	8012e2c <_printf_i+0xfc>
 8012eca:	6823      	ldr	r3, [r4, #0]
 8012ecc:	f043 0320 	orr.w	r3, r3, #32
 8012ed0:	6023      	str	r3, [r4, #0]
 8012ed2:	2378      	movs	r3, #120	; 0x78
 8012ed4:	4828      	ldr	r0, [pc, #160]	; (8012f78 <_printf_i+0x248>)
 8012ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012eda:	e7e3      	b.n	8012ea4 <_printf_i+0x174>
 8012edc:	0659      	lsls	r1, r3, #25
 8012ede:	bf48      	it	mi
 8012ee0:	b2b6      	uxthmi	r6, r6
 8012ee2:	e7e6      	b.n	8012eb2 <_printf_i+0x182>
 8012ee4:	4615      	mov	r5, r2
 8012ee6:	e7bb      	b.n	8012e60 <_printf_i+0x130>
 8012ee8:	682b      	ldr	r3, [r5, #0]
 8012eea:	6826      	ldr	r6, [r4, #0]
 8012eec:	6961      	ldr	r1, [r4, #20]
 8012eee:	1d18      	adds	r0, r3, #4
 8012ef0:	6028      	str	r0, [r5, #0]
 8012ef2:	0635      	lsls	r5, r6, #24
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	d501      	bpl.n	8012efc <_printf_i+0x1cc>
 8012ef8:	6019      	str	r1, [r3, #0]
 8012efa:	e002      	b.n	8012f02 <_printf_i+0x1d2>
 8012efc:	0670      	lsls	r0, r6, #25
 8012efe:	d5fb      	bpl.n	8012ef8 <_printf_i+0x1c8>
 8012f00:	8019      	strh	r1, [r3, #0]
 8012f02:	2300      	movs	r3, #0
 8012f04:	6123      	str	r3, [r4, #16]
 8012f06:	4615      	mov	r5, r2
 8012f08:	e7ba      	b.n	8012e80 <_printf_i+0x150>
 8012f0a:	682b      	ldr	r3, [r5, #0]
 8012f0c:	1d1a      	adds	r2, r3, #4
 8012f0e:	602a      	str	r2, [r5, #0]
 8012f10:	681d      	ldr	r5, [r3, #0]
 8012f12:	6862      	ldr	r2, [r4, #4]
 8012f14:	2100      	movs	r1, #0
 8012f16:	4628      	mov	r0, r5
 8012f18:	f7ed f972 	bl	8000200 <memchr>
 8012f1c:	b108      	cbz	r0, 8012f22 <_printf_i+0x1f2>
 8012f1e:	1b40      	subs	r0, r0, r5
 8012f20:	6060      	str	r0, [r4, #4]
 8012f22:	6863      	ldr	r3, [r4, #4]
 8012f24:	6123      	str	r3, [r4, #16]
 8012f26:	2300      	movs	r3, #0
 8012f28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f2c:	e7a8      	b.n	8012e80 <_printf_i+0x150>
 8012f2e:	6923      	ldr	r3, [r4, #16]
 8012f30:	462a      	mov	r2, r5
 8012f32:	4649      	mov	r1, r9
 8012f34:	4640      	mov	r0, r8
 8012f36:	47d0      	blx	sl
 8012f38:	3001      	adds	r0, #1
 8012f3a:	d0ab      	beq.n	8012e94 <_printf_i+0x164>
 8012f3c:	6823      	ldr	r3, [r4, #0]
 8012f3e:	079b      	lsls	r3, r3, #30
 8012f40:	d413      	bmi.n	8012f6a <_printf_i+0x23a>
 8012f42:	68e0      	ldr	r0, [r4, #12]
 8012f44:	9b03      	ldr	r3, [sp, #12]
 8012f46:	4298      	cmp	r0, r3
 8012f48:	bfb8      	it	lt
 8012f4a:	4618      	movlt	r0, r3
 8012f4c:	e7a4      	b.n	8012e98 <_printf_i+0x168>
 8012f4e:	2301      	movs	r3, #1
 8012f50:	4632      	mov	r2, r6
 8012f52:	4649      	mov	r1, r9
 8012f54:	4640      	mov	r0, r8
 8012f56:	47d0      	blx	sl
 8012f58:	3001      	adds	r0, #1
 8012f5a:	d09b      	beq.n	8012e94 <_printf_i+0x164>
 8012f5c:	3501      	adds	r5, #1
 8012f5e:	68e3      	ldr	r3, [r4, #12]
 8012f60:	9903      	ldr	r1, [sp, #12]
 8012f62:	1a5b      	subs	r3, r3, r1
 8012f64:	42ab      	cmp	r3, r5
 8012f66:	dcf2      	bgt.n	8012f4e <_printf_i+0x21e>
 8012f68:	e7eb      	b.n	8012f42 <_printf_i+0x212>
 8012f6a:	2500      	movs	r5, #0
 8012f6c:	f104 0619 	add.w	r6, r4, #25
 8012f70:	e7f5      	b.n	8012f5e <_printf_i+0x22e>
 8012f72:	bf00      	nop
 8012f74:	080629a7 	.word	0x080629a7
 8012f78:	080629b8 	.word	0x080629b8

08012f7c <_scanf_float>:
 8012f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f80:	b087      	sub	sp, #28
 8012f82:	4617      	mov	r7, r2
 8012f84:	9303      	str	r3, [sp, #12]
 8012f86:	688b      	ldr	r3, [r1, #8]
 8012f88:	1e5a      	subs	r2, r3, #1
 8012f8a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012f8e:	bf83      	ittte	hi
 8012f90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8012f94:	195b      	addhi	r3, r3, r5
 8012f96:	9302      	strhi	r3, [sp, #8]
 8012f98:	2300      	movls	r3, #0
 8012f9a:	bf86      	itte	hi
 8012f9c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012fa0:	608b      	strhi	r3, [r1, #8]
 8012fa2:	9302      	strls	r3, [sp, #8]
 8012fa4:	680b      	ldr	r3, [r1, #0]
 8012fa6:	468b      	mov	fp, r1
 8012fa8:	2500      	movs	r5, #0
 8012faa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012fae:	f84b 3b1c 	str.w	r3, [fp], #28
 8012fb2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8012fb6:	4680      	mov	r8, r0
 8012fb8:	460c      	mov	r4, r1
 8012fba:	465e      	mov	r6, fp
 8012fbc:	46aa      	mov	sl, r5
 8012fbe:	46a9      	mov	r9, r5
 8012fc0:	9501      	str	r5, [sp, #4]
 8012fc2:	68a2      	ldr	r2, [r4, #8]
 8012fc4:	b152      	cbz	r2, 8012fdc <_scanf_float+0x60>
 8012fc6:	683b      	ldr	r3, [r7, #0]
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	2b4e      	cmp	r3, #78	; 0x4e
 8012fcc:	d864      	bhi.n	8013098 <_scanf_float+0x11c>
 8012fce:	2b40      	cmp	r3, #64	; 0x40
 8012fd0:	d83c      	bhi.n	801304c <_scanf_float+0xd0>
 8012fd2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8012fd6:	b2c8      	uxtb	r0, r1
 8012fd8:	280e      	cmp	r0, #14
 8012fda:	d93a      	bls.n	8013052 <_scanf_float+0xd6>
 8012fdc:	f1b9 0f00 	cmp.w	r9, #0
 8012fe0:	d003      	beq.n	8012fea <_scanf_float+0x6e>
 8012fe2:	6823      	ldr	r3, [r4, #0]
 8012fe4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012fe8:	6023      	str	r3, [r4, #0]
 8012fea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8012fee:	f1ba 0f01 	cmp.w	sl, #1
 8012ff2:	f200 8113 	bhi.w	801321c <_scanf_float+0x2a0>
 8012ff6:	455e      	cmp	r6, fp
 8012ff8:	f200 8105 	bhi.w	8013206 <_scanf_float+0x28a>
 8012ffc:	2501      	movs	r5, #1
 8012ffe:	4628      	mov	r0, r5
 8013000:	b007      	add	sp, #28
 8013002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013006:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801300a:	2a0d      	cmp	r2, #13
 801300c:	d8e6      	bhi.n	8012fdc <_scanf_float+0x60>
 801300e:	a101      	add	r1, pc, #4	; (adr r1, 8013014 <_scanf_float+0x98>)
 8013010:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8013014:	08013153 	.word	0x08013153
 8013018:	08012fdd 	.word	0x08012fdd
 801301c:	08012fdd 	.word	0x08012fdd
 8013020:	08012fdd 	.word	0x08012fdd
 8013024:	080131b3 	.word	0x080131b3
 8013028:	0801318b 	.word	0x0801318b
 801302c:	08012fdd 	.word	0x08012fdd
 8013030:	08012fdd 	.word	0x08012fdd
 8013034:	08013161 	.word	0x08013161
 8013038:	08012fdd 	.word	0x08012fdd
 801303c:	08012fdd 	.word	0x08012fdd
 8013040:	08012fdd 	.word	0x08012fdd
 8013044:	08012fdd 	.word	0x08012fdd
 8013048:	08013119 	.word	0x08013119
 801304c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8013050:	e7db      	b.n	801300a <_scanf_float+0x8e>
 8013052:	290e      	cmp	r1, #14
 8013054:	d8c2      	bhi.n	8012fdc <_scanf_float+0x60>
 8013056:	a001      	add	r0, pc, #4	; (adr r0, 801305c <_scanf_float+0xe0>)
 8013058:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801305c:	0801310b 	.word	0x0801310b
 8013060:	08012fdd 	.word	0x08012fdd
 8013064:	0801310b 	.word	0x0801310b
 8013068:	0801319f 	.word	0x0801319f
 801306c:	08012fdd 	.word	0x08012fdd
 8013070:	080130b9 	.word	0x080130b9
 8013074:	080130f5 	.word	0x080130f5
 8013078:	080130f5 	.word	0x080130f5
 801307c:	080130f5 	.word	0x080130f5
 8013080:	080130f5 	.word	0x080130f5
 8013084:	080130f5 	.word	0x080130f5
 8013088:	080130f5 	.word	0x080130f5
 801308c:	080130f5 	.word	0x080130f5
 8013090:	080130f5 	.word	0x080130f5
 8013094:	080130f5 	.word	0x080130f5
 8013098:	2b6e      	cmp	r3, #110	; 0x6e
 801309a:	d809      	bhi.n	80130b0 <_scanf_float+0x134>
 801309c:	2b60      	cmp	r3, #96	; 0x60
 801309e:	d8b2      	bhi.n	8013006 <_scanf_float+0x8a>
 80130a0:	2b54      	cmp	r3, #84	; 0x54
 80130a2:	d077      	beq.n	8013194 <_scanf_float+0x218>
 80130a4:	2b59      	cmp	r3, #89	; 0x59
 80130a6:	d199      	bne.n	8012fdc <_scanf_float+0x60>
 80130a8:	2d07      	cmp	r5, #7
 80130aa:	d197      	bne.n	8012fdc <_scanf_float+0x60>
 80130ac:	2508      	movs	r5, #8
 80130ae:	e029      	b.n	8013104 <_scanf_float+0x188>
 80130b0:	2b74      	cmp	r3, #116	; 0x74
 80130b2:	d06f      	beq.n	8013194 <_scanf_float+0x218>
 80130b4:	2b79      	cmp	r3, #121	; 0x79
 80130b6:	e7f6      	b.n	80130a6 <_scanf_float+0x12a>
 80130b8:	6821      	ldr	r1, [r4, #0]
 80130ba:	05c8      	lsls	r0, r1, #23
 80130bc:	d51a      	bpl.n	80130f4 <_scanf_float+0x178>
 80130be:	9b02      	ldr	r3, [sp, #8]
 80130c0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80130c4:	6021      	str	r1, [r4, #0]
 80130c6:	f109 0901 	add.w	r9, r9, #1
 80130ca:	b11b      	cbz	r3, 80130d4 <_scanf_float+0x158>
 80130cc:	3b01      	subs	r3, #1
 80130ce:	3201      	adds	r2, #1
 80130d0:	9302      	str	r3, [sp, #8]
 80130d2:	60a2      	str	r2, [r4, #8]
 80130d4:	68a3      	ldr	r3, [r4, #8]
 80130d6:	3b01      	subs	r3, #1
 80130d8:	60a3      	str	r3, [r4, #8]
 80130da:	6923      	ldr	r3, [r4, #16]
 80130dc:	3301      	adds	r3, #1
 80130de:	6123      	str	r3, [r4, #16]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	3b01      	subs	r3, #1
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	607b      	str	r3, [r7, #4]
 80130e8:	f340 8084 	ble.w	80131f4 <_scanf_float+0x278>
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	3301      	adds	r3, #1
 80130f0:	603b      	str	r3, [r7, #0]
 80130f2:	e766      	b.n	8012fc2 <_scanf_float+0x46>
 80130f4:	eb1a 0f05 	cmn.w	sl, r5
 80130f8:	f47f af70 	bne.w	8012fdc <_scanf_float+0x60>
 80130fc:	6822      	ldr	r2, [r4, #0]
 80130fe:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8013102:	6022      	str	r2, [r4, #0]
 8013104:	f806 3b01 	strb.w	r3, [r6], #1
 8013108:	e7e4      	b.n	80130d4 <_scanf_float+0x158>
 801310a:	6822      	ldr	r2, [r4, #0]
 801310c:	0610      	lsls	r0, r2, #24
 801310e:	f57f af65 	bpl.w	8012fdc <_scanf_float+0x60>
 8013112:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8013116:	e7f4      	b.n	8013102 <_scanf_float+0x186>
 8013118:	f1ba 0f00 	cmp.w	sl, #0
 801311c:	d10e      	bne.n	801313c <_scanf_float+0x1c0>
 801311e:	f1b9 0f00 	cmp.w	r9, #0
 8013122:	d10e      	bne.n	8013142 <_scanf_float+0x1c6>
 8013124:	6822      	ldr	r2, [r4, #0]
 8013126:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801312a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801312e:	d108      	bne.n	8013142 <_scanf_float+0x1c6>
 8013130:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8013134:	6022      	str	r2, [r4, #0]
 8013136:	f04f 0a01 	mov.w	sl, #1
 801313a:	e7e3      	b.n	8013104 <_scanf_float+0x188>
 801313c:	f1ba 0f02 	cmp.w	sl, #2
 8013140:	d055      	beq.n	80131ee <_scanf_float+0x272>
 8013142:	2d01      	cmp	r5, #1
 8013144:	d002      	beq.n	801314c <_scanf_float+0x1d0>
 8013146:	2d04      	cmp	r5, #4
 8013148:	f47f af48 	bne.w	8012fdc <_scanf_float+0x60>
 801314c:	3501      	adds	r5, #1
 801314e:	b2ed      	uxtb	r5, r5
 8013150:	e7d8      	b.n	8013104 <_scanf_float+0x188>
 8013152:	f1ba 0f01 	cmp.w	sl, #1
 8013156:	f47f af41 	bne.w	8012fdc <_scanf_float+0x60>
 801315a:	f04f 0a02 	mov.w	sl, #2
 801315e:	e7d1      	b.n	8013104 <_scanf_float+0x188>
 8013160:	b97d      	cbnz	r5, 8013182 <_scanf_float+0x206>
 8013162:	f1b9 0f00 	cmp.w	r9, #0
 8013166:	f47f af3c 	bne.w	8012fe2 <_scanf_float+0x66>
 801316a:	6822      	ldr	r2, [r4, #0]
 801316c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8013170:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8013174:	f47f af39 	bne.w	8012fea <_scanf_float+0x6e>
 8013178:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801317c:	6022      	str	r2, [r4, #0]
 801317e:	2501      	movs	r5, #1
 8013180:	e7c0      	b.n	8013104 <_scanf_float+0x188>
 8013182:	2d03      	cmp	r5, #3
 8013184:	d0e2      	beq.n	801314c <_scanf_float+0x1d0>
 8013186:	2d05      	cmp	r5, #5
 8013188:	e7de      	b.n	8013148 <_scanf_float+0x1cc>
 801318a:	2d02      	cmp	r5, #2
 801318c:	f47f af26 	bne.w	8012fdc <_scanf_float+0x60>
 8013190:	2503      	movs	r5, #3
 8013192:	e7b7      	b.n	8013104 <_scanf_float+0x188>
 8013194:	2d06      	cmp	r5, #6
 8013196:	f47f af21 	bne.w	8012fdc <_scanf_float+0x60>
 801319a:	2507      	movs	r5, #7
 801319c:	e7b2      	b.n	8013104 <_scanf_float+0x188>
 801319e:	6822      	ldr	r2, [r4, #0]
 80131a0:	0591      	lsls	r1, r2, #22
 80131a2:	f57f af1b 	bpl.w	8012fdc <_scanf_float+0x60>
 80131a6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80131aa:	6022      	str	r2, [r4, #0]
 80131ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80131b0:	e7a8      	b.n	8013104 <_scanf_float+0x188>
 80131b2:	6822      	ldr	r2, [r4, #0]
 80131b4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80131b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80131bc:	d006      	beq.n	80131cc <_scanf_float+0x250>
 80131be:	0550      	lsls	r0, r2, #21
 80131c0:	f57f af0c 	bpl.w	8012fdc <_scanf_float+0x60>
 80131c4:	f1b9 0f00 	cmp.w	r9, #0
 80131c8:	f43f af0f 	beq.w	8012fea <_scanf_float+0x6e>
 80131cc:	0591      	lsls	r1, r2, #22
 80131ce:	bf58      	it	pl
 80131d0:	9901      	ldrpl	r1, [sp, #4]
 80131d2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80131d6:	bf58      	it	pl
 80131d8:	eba9 0101 	subpl.w	r1, r9, r1
 80131dc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80131e0:	bf58      	it	pl
 80131e2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80131e6:	6022      	str	r2, [r4, #0]
 80131e8:	f04f 0900 	mov.w	r9, #0
 80131ec:	e78a      	b.n	8013104 <_scanf_float+0x188>
 80131ee:	f04f 0a03 	mov.w	sl, #3
 80131f2:	e787      	b.n	8013104 <_scanf_float+0x188>
 80131f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80131f8:	4639      	mov	r1, r7
 80131fa:	4640      	mov	r0, r8
 80131fc:	4798      	blx	r3
 80131fe:	2800      	cmp	r0, #0
 8013200:	f43f aedf 	beq.w	8012fc2 <_scanf_float+0x46>
 8013204:	e6ea      	b.n	8012fdc <_scanf_float+0x60>
 8013206:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801320a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801320e:	463a      	mov	r2, r7
 8013210:	4640      	mov	r0, r8
 8013212:	4798      	blx	r3
 8013214:	6923      	ldr	r3, [r4, #16]
 8013216:	3b01      	subs	r3, #1
 8013218:	6123      	str	r3, [r4, #16]
 801321a:	e6ec      	b.n	8012ff6 <_scanf_float+0x7a>
 801321c:	1e6b      	subs	r3, r5, #1
 801321e:	2b06      	cmp	r3, #6
 8013220:	d825      	bhi.n	801326e <_scanf_float+0x2f2>
 8013222:	2d02      	cmp	r5, #2
 8013224:	d836      	bhi.n	8013294 <_scanf_float+0x318>
 8013226:	455e      	cmp	r6, fp
 8013228:	f67f aee8 	bls.w	8012ffc <_scanf_float+0x80>
 801322c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013230:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013234:	463a      	mov	r2, r7
 8013236:	4640      	mov	r0, r8
 8013238:	4798      	blx	r3
 801323a:	6923      	ldr	r3, [r4, #16]
 801323c:	3b01      	subs	r3, #1
 801323e:	6123      	str	r3, [r4, #16]
 8013240:	e7f1      	b.n	8013226 <_scanf_float+0x2aa>
 8013242:	9802      	ldr	r0, [sp, #8]
 8013244:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013248:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801324c:	9002      	str	r0, [sp, #8]
 801324e:	463a      	mov	r2, r7
 8013250:	4640      	mov	r0, r8
 8013252:	4798      	blx	r3
 8013254:	6923      	ldr	r3, [r4, #16]
 8013256:	3b01      	subs	r3, #1
 8013258:	6123      	str	r3, [r4, #16]
 801325a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801325e:	fa5f fa8a 	uxtb.w	sl, sl
 8013262:	f1ba 0f02 	cmp.w	sl, #2
 8013266:	d1ec      	bne.n	8013242 <_scanf_float+0x2c6>
 8013268:	3d03      	subs	r5, #3
 801326a:	b2ed      	uxtb	r5, r5
 801326c:	1b76      	subs	r6, r6, r5
 801326e:	6823      	ldr	r3, [r4, #0]
 8013270:	05da      	lsls	r2, r3, #23
 8013272:	d52f      	bpl.n	80132d4 <_scanf_float+0x358>
 8013274:	055b      	lsls	r3, r3, #21
 8013276:	d510      	bpl.n	801329a <_scanf_float+0x31e>
 8013278:	455e      	cmp	r6, fp
 801327a:	f67f aebf 	bls.w	8012ffc <_scanf_float+0x80>
 801327e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8013282:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8013286:	463a      	mov	r2, r7
 8013288:	4640      	mov	r0, r8
 801328a:	4798      	blx	r3
 801328c:	6923      	ldr	r3, [r4, #16]
 801328e:	3b01      	subs	r3, #1
 8013290:	6123      	str	r3, [r4, #16]
 8013292:	e7f1      	b.n	8013278 <_scanf_float+0x2fc>
 8013294:	46aa      	mov	sl, r5
 8013296:	9602      	str	r6, [sp, #8]
 8013298:	e7df      	b.n	801325a <_scanf_float+0x2de>
 801329a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801329e:	6923      	ldr	r3, [r4, #16]
 80132a0:	2965      	cmp	r1, #101	; 0x65
 80132a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80132a6:	f106 35ff 	add.w	r5, r6, #4294967295
 80132aa:	6123      	str	r3, [r4, #16]
 80132ac:	d00c      	beq.n	80132c8 <_scanf_float+0x34c>
 80132ae:	2945      	cmp	r1, #69	; 0x45
 80132b0:	d00a      	beq.n	80132c8 <_scanf_float+0x34c>
 80132b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132b6:	463a      	mov	r2, r7
 80132b8:	4640      	mov	r0, r8
 80132ba:	4798      	blx	r3
 80132bc:	6923      	ldr	r3, [r4, #16]
 80132be:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80132c2:	3b01      	subs	r3, #1
 80132c4:	1eb5      	subs	r5, r6, #2
 80132c6:	6123      	str	r3, [r4, #16]
 80132c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80132cc:	463a      	mov	r2, r7
 80132ce:	4640      	mov	r0, r8
 80132d0:	4798      	blx	r3
 80132d2:	462e      	mov	r6, r5
 80132d4:	6825      	ldr	r5, [r4, #0]
 80132d6:	f015 0510 	ands.w	r5, r5, #16
 80132da:	d159      	bne.n	8013390 <_scanf_float+0x414>
 80132dc:	7035      	strb	r5, [r6, #0]
 80132de:	6823      	ldr	r3, [r4, #0]
 80132e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80132e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80132e8:	d11b      	bne.n	8013322 <_scanf_float+0x3a6>
 80132ea:	9b01      	ldr	r3, [sp, #4]
 80132ec:	454b      	cmp	r3, r9
 80132ee:	eba3 0209 	sub.w	r2, r3, r9
 80132f2:	d123      	bne.n	801333c <_scanf_float+0x3c0>
 80132f4:	2200      	movs	r2, #0
 80132f6:	4659      	mov	r1, fp
 80132f8:	4640      	mov	r0, r8
 80132fa:	f000 fea7 	bl	801404c <_strtod_r>
 80132fe:	6822      	ldr	r2, [r4, #0]
 8013300:	9b03      	ldr	r3, [sp, #12]
 8013302:	f012 0f02 	tst.w	r2, #2
 8013306:	ec57 6b10 	vmov	r6, r7, d0
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	d021      	beq.n	8013352 <_scanf_float+0x3d6>
 801330e:	9903      	ldr	r1, [sp, #12]
 8013310:	1d1a      	adds	r2, r3, #4
 8013312:	600a      	str	r2, [r1, #0]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	e9c3 6700 	strd	r6, r7, [r3]
 801331a:	68e3      	ldr	r3, [r4, #12]
 801331c:	3301      	adds	r3, #1
 801331e:	60e3      	str	r3, [r4, #12]
 8013320:	e66d      	b.n	8012ffe <_scanf_float+0x82>
 8013322:	9b04      	ldr	r3, [sp, #16]
 8013324:	2b00      	cmp	r3, #0
 8013326:	d0e5      	beq.n	80132f4 <_scanf_float+0x378>
 8013328:	9905      	ldr	r1, [sp, #20]
 801332a:	230a      	movs	r3, #10
 801332c:	462a      	mov	r2, r5
 801332e:	3101      	adds	r1, #1
 8013330:	4640      	mov	r0, r8
 8013332:	f000 ff13 	bl	801415c <_strtol_r>
 8013336:	9b04      	ldr	r3, [sp, #16]
 8013338:	9e05      	ldr	r6, [sp, #20]
 801333a:	1ac2      	subs	r2, r0, r3
 801333c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8013340:	429e      	cmp	r6, r3
 8013342:	bf28      	it	cs
 8013344:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8013348:	4912      	ldr	r1, [pc, #72]	; (8013394 <_scanf_float+0x418>)
 801334a:	4630      	mov	r0, r6
 801334c:	f000 f83c 	bl	80133c8 <siprintf>
 8013350:	e7d0      	b.n	80132f4 <_scanf_float+0x378>
 8013352:	9903      	ldr	r1, [sp, #12]
 8013354:	f012 0f04 	tst.w	r2, #4
 8013358:	f103 0204 	add.w	r2, r3, #4
 801335c:	600a      	str	r2, [r1, #0]
 801335e:	d1d9      	bne.n	8013314 <_scanf_float+0x398>
 8013360:	f8d3 8000 	ldr.w	r8, [r3]
 8013364:	ee10 2a10 	vmov	r2, s0
 8013368:	ee10 0a10 	vmov	r0, s0
 801336c:	463b      	mov	r3, r7
 801336e:	4639      	mov	r1, r7
 8013370:	f7ed fbec 	bl	8000b4c <__aeabi_dcmpun>
 8013374:	b128      	cbz	r0, 8013382 <_scanf_float+0x406>
 8013376:	4808      	ldr	r0, [pc, #32]	; (8013398 <_scanf_float+0x41c>)
 8013378:	f000 f820 	bl	80133bc <nanf>
 801337c:	ed88 0a00 	vstr	s0, [r8]
 8013380:	e7cb      	b.n	801331a <_scanf_float+0x39e>
 8013382:	4630      	mov	r0, r6
 8013384:	4639      	mov	r1, r7
 8013386:	f7ed fc3f 	bl	8000c08 <__aeabi_d2f>
 801338a:	f8c8 0000 	str.w	r0, [r8]
 801338e:	e7c4      	b.n	801331a <_scanf_float+0x39e>
 8013390:	2500      	movs	r5, #0
 8013392:	e634      	b.n	8012ffe <_scanf_float+0x82>
 8013394:	080629c9 	.word	0x080629c9
 8013398:	0806297f 	.word	0x0806297f

0801339c <_sbrk_r>:
 801339c:	b538      	push	{r3, r4, r5, lr}
 801339e:	4d06      	ldr	r5, [pc, #24]	; (80133b8 <_sbrk_r+0x1c>)
 80133a0:	2300      	movs	r3, #0
 80133a2:	4604      	mov	r4, r0
 80133a4:	4608      	mov	r0, r1
 80133a6:	602b      	str	r3, [r5, #0]
 80133a8:	f7ef fc56 	bl	8002c58 <_sbrk>
 80133ac:	1c43      	adds	r3, r0, #1
 80133ae:	d102      	bne.n	80133b6 <_sbrk_r+0x1a>
 80133b0:	682b      	ldr	r3, [r5, #0]
 80133b2:	b103      	cbz	r3, 80133b6 <_sbrk_r+0x1a>
 80133b4:	6023      	str	r3, [r4, #0]
 80133b6:	bd38      	pop	{r3, r4, r5, pc}
 80133b8:	20013dac 	.word	0x20013dac

080133bc <nanf>:
 80133bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80133c4 <nanf+0x8>
 80133c0:	4770      	bx	lr
 80133c2:	bf00      	nop
 80133c4:	7fc00000 	.word	0x7fc00000

080133c8 <siprintf>:
 80133c8:	b40e      	push	{r1, r2, r3}
 80133ca:	b500      	push	{lr}
 80133cc:	b09c      	sub	sp, #112	; 0x70
 80133ce:	ab1d      	add	r3, sp, #116	; 0x74
 80133d0:	9002      	str	r0, [sp, #8]
 80133d2:	9006      	str	r0, [sp, #24]
 80133d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80133d8:	4809      	ldr	r0, [pc, #36]	; (8013400 <siprintf+0x38>)
 80133da:	9107      	str	r1, [sp, #28]
 80133dc:	9104      	str	r1, [sp, #16]
 80133de:	4909      	ldr	r1, [pc, #36]	; (8013404 <siprintf+0x3c>)
 80133e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80133e4:	9105      	str	r1, [sp, #20]
 80133e6:	6800      	ldr	r0, [r0, #0]
 80133e8:	9301      	str	r3, [sp, #4]
 80133ea:	a902      	add	r1, sp, #8
 80133ec:	f003 f926 	bl	801663c <_svfiprintf_r>
 80133f0:	9b02      	ldr	r3, [sp, #8]
 80133f2:	2200      	movs	r2, #0
 80133f4:	701a      	strb	r2, [r3, #0]
 80133f6:	b01c      	add	sp, #112	; 0x70
 80133f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80133fc:	b003      	add	sp, #12
 80133fe:	4770      	bx	lr
 8013400:	20000ee0 	.word	0x20000ee0
 8013404:	ffff0208 	.word	0xffff0208

08013408 <sulp>:
 8013408:	b570      	push	{r4, r5, r6, lr}
 801340a:	4604      	mov	r4, r0
 801340c:	460d      	mov	r5, r1
 801340e:	ec45 4b10 	vmov	d0, r4, r5
 8013412:	4616      	mov	r6, r2
 8013414:	f002 ff22 	bl	801625c <__ulp>
 8013418:	ec51 0b10 	vmov	r0, r1, d0
 801341c:	b17e      	cbz	r6, 801343e <sulp+0x36>
 801341e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8013422:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013426:	2b00      	cmp	r3, #0
 8013428:	dd09      	ble.n	801343e <sulp+0x36>
 801342a:	051b      	lsls	r3, r3, #20
 801342c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8013430:	2400      	movs	r4, #0
 8013432:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8013436:	4622      	mov	r2, r4
 8013438:	462b      	mov	r3, r5
 801343a:	f7ed f8ed 	bl	8000618 <__aeabi_dmul>
 801343e:	bd70      	pop	{r4, r5, r6, pc}

08013440 <_strtod_l>:
 8013440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013444:	ed2d 8b02 	vpush	{d8}
 8013448:	b09d      	sub	sp, #116	; 0x74
 801344a:	461f      	mov	r7, r3
 801344c:	2300      	movs	r3, #0
 801344e:	9318      	str	r3, [sp, #96]	; 0x60
 8013450:	4ba2      	ldr	r3, [pc, #648]	; (80136dc <_strtod_l+0x29c>)
 8013452:	9213      	str	r2, [sp, #76]	; 0x4c
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	9305      	str	r3, [sp, #20]
 8013458:	4604      	mov	r4, r0
 801345a:	4618      	mov	r0, r3
 801345c:	4688      	mov	r8, r1
 801345e:	f7ec fec1 	bl	80001e4 <strlen>
 8013462:	f04f 0a00 	mov.w	sl, #0
 8013466:	4605      	mov	r5, r0
 8013468:	f04f 0b00 	mov.w	fp, #0
 801346c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8013470:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013472:	781a      	ldrb	r2, [r3, #0]
 8013474:	2a2b      	cmp	r2, #43	; 0x2b
 8013476:	d04e      	beq.n	8013516 <_strtod_l+0xd6>
 8013478:	d83b      	bhi.n	80134f2 <_strtod_l+0xb2>
 801347a:	2a0d      	cmp	r2, #13
 801347c:	d834      	bhi.n	80134e8 <_strtod_l+0xa8>
 801347e:	2a08      	cmp	r2, #8
 8013480:	d834      	bhi.n	80134ec <_strtod_l+0xac>
 8013482:	2a00      	cmp	r2, #0
 8013484:	d03e      	beq.n	8013504 <_strtod_l+0xc4>
 8013486:	2300      	movs	r3, #0
 8013488:	930a      	str	r3, [sp, #40]	; 0x28
 801348a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801348c:	7833      	ldrb	r3, [r6, #0]
 801348e:	2b30      	cmp	r3, #48	; 0x30
 8013490:	f040 80b0 	bne.w	80135f4 <_strtod_l+0x1b4>
 8013494:	7873      	ldrb	r3, [r6, #1]
 8013496:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801349a:	2b58      	cmp	r3, #88	; 0x58
 801349c:	d168      	bne.n	8013570 <_strtod_l+0x130>
 801349e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134a0:	9301      	str	r3, [sp, #4]
 80134a2:	ab18      	add	r3, sp, #96	; 0x60
 80134a4:	9702      	str	r7, [sp, #8]
 80134a6:	9300      	str	r3, [sp, #0]
 80134a8:	4a8d      	ldr	r2, [pc, #564]	; (80136e0 <_strtod_l+0x2a0>)
 80134aa:	ab19      	add	r3, sp, #100	; 0x64
 80134ac:	a917      	add	r1, sp, #92	; 0x5c
 80134ae:	4620      	mov	r0, r4
 80134b0:	f001 ffb6 	bl	8015420 <__gethex>
 80134b4:	f010 0707 	ands.w	r7, r0, #7
 80134b8:	4605      	mov	r5, r0
 80134ba:	d005      	beq.n	80134c8 <_strtod_l+0x88>
 80134bc:	2f06      	cmp	r7, #6
 80134be:	d12c      	bne.n	801351a <_strtod_l+0xda>
 80134c0:	3601      	adds	r6, #1
 80134c2:	2300      	movs	r3, #0
 80134c4:	9617      	str	r6, [sp, #92]	; 0x5c
 80134c6:	930a      	str	r3, [sp, #40]	; 0x28
 80134c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	f040 8590 	bne.w	8013ff0 <_strtod_l+0xbb0>
 80134d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80134d2:	b1eb      	cbz	r3, 8013510 <_strtod_l+0xd0>
 80134d4:	4652      	mov	r2, sl
 80134d6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80134da:	ec43 2b10 	vmov	d0, r2, r3
 80134de:	b01d      	add	sp, #116	; 0x74
 80134e0:	ecbd 8b02 	vpop	{d8}
 80134e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e8:	2a20      	cmp	r2, #32
 80134ea:	d1cc      	bne.n	8013486 <_strtod_l+0x46>
 80134ec:	3301      	adds	r3, #1
 80134ee:	9317      	str	r3, [sp, #92]	; 0x5c
 80134f0:	e7be      	b.n	8013470 <_strtod_l+0x30>
 80134f2:	2a2d      	cmp	r2, #45	; 0x2d
 80134f4:	d1c7      	bne.n	8013486 <_strtod_l+0x46>
 80134f6:	2201      	movs	r2, #1
 80134f8:	920a      	str	r2, [sp, #40]	; 0x28
 80134fa:	1c5a      	adds	r2, r3, #1
 80134fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80134fe:	785b      	ldrb	r3, [r3, #1]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d1c2      	bne.n	801348a <_strtod_l+0x4a>
 8013504:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013506:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 801350a:	2b00      	cmp	r3, #0
 801350c:	f040 856e 	bne.w	8013fec <_strtod_l+0xbac>
 8013510:	4652      	mov	r2, sl
 8013512:	465b      	mov	r3, fp
 8013514:	e7e1      	b.n	80134da <_strtod_l+0x9a>
 8013516:	2200      	movs	r2, #0
 8013518:	e7ee      	b.n	80134f8 <_strtod_l+0xb8>
 801351a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801351c:	b13a      	cbz	r2, 801352e <_strtod_l+0xee>
 801351e:	2135      	movs	r1, #53	; 0x35
 8013520:	a81a      	add	r0, sp, #104	; 0x68
 8013522:	f002 ffa6 	bl	8016472 <__copybits>
 8013526:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013528:	4620      	mov	r0, r4
 801352a:	f002 fb65 	bl	8015bf8 <_Bfree>
 801352e:	3f01      	subs	r7, #1
 8013530:	2f04      	cmp	r7, #4
 8013532:	d806      	bhi.n	8013542 <_strtod_l+0x102>
 8013534:	e8df f007 	tbb	[pc, r7]
 8013538:	1714030a 	.word	0x1714030a
 801353c:	0a          	.byte	0x0a
 801353d:	00          	.byte	0x00
 801353e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8013542:	0728      	lsls	r0, r5, #28
 8013544:	d5c0      	bpl.n	80134c8 <_strtod_l+0x88>
 8013546:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801354a:	e7bd      	b.n	80134c8 <_strtod_l+0x88>
 801354c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8013550:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8013552:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8013556:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801355a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801355e:	e7f0      	b.n	8013542 <_strtod_l+0x102>
 8013560:	f8df b180 	ldr.w	fp, [pc, #384]	; 80136e4 <_strtod_l+0x2a4>
 8013564:	e7ed      	b.n	8013542 <_strtod_l+0x102>
 8013566:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801356a:	f04f 3aff 	mov.w	sl, #4294967295
 801356e:	e7e8      	b.n	8013542 <_strtod_l+0x102>
 8013570:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013572:	1c5a      	adds	r2, r3, #1
 8013574:	9217      	str	r2, [sp, #92]	; 0x5c
 8013576:	785b      	ldrb	r3, [r3, #1]
 8013578:	2b30      	cmp	r3, #48	; 0x30
 801357a:	d0f9      	beq.n	8013570 <_strtod_l+0x130>
 801357c:	2b00      	cmp	r3, #0
 801357e:	d0a3      	beq.n	80134c8 <_strtod_l+0x88>
 8013580:	2301      	movs	r3, #1
 8013582:	f04f 0900 	mov.w	r9, #0
 8013586:	9304      	str	r3, [sp, #16]
 8013588:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801358a:	9308      	str	r3, [sp, #32]
 801358c:	f8cd 901c 	str.w	r9, [sp, #28]
 8013590:	464f      	mov	r7, r9
 8013592:	220a      	movs	r2, #10
 8013594:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8013596:	7806      	ldrb	r6, [r0, #0]
 8013598:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801359c:	b2d9      	uxtb	r1, r3
 801359e:	2909      	cmp	r1, #9
 80135a0:	d92a      	bls.n	80135f8 <_strtod_l+0x1b8>
 80135a2:	9905      	ldr	r1, [sp, #20]
 80135a4:	462a      	mov	r2, r5
 80135a6:	f003 f9da 	bl	801695e <strncmp>
 80135aa:	b398      	cbz	r0, 8013614 <_strtod_l+0x1d4>
 80135ac:	2000      	movs	r0, #0
 80135ae:	4632      	mov	r2, r6
 80135b0:	463d      	mov	r5, r7
 80135b2:	9005      	str	r0, [sp, #20]
 80135b4:	4603      	mov	r3, r0
 80135b6:	2a65      	cmp	r2, #101	; 0x65
 80135b8:	d001      	beq.n	80135be <_strtod_l+0x17e>
 80135ba:	2a45      	cmp	r2, #69	; 0x45
 80135bc:	d118      	bne.n	80135f0 <_strtod_l+0x1b0>
 80135be:	b91d      	cbnz	r5, 80135c8 <_strtod_l+0x188>
 80135c0:	9a04      	ldr	r2, [sp, #16]
 80135c2:	4302      	orrs	r2, r0
 80135c4:	d09e      	beq.n	8013504 <_strtod_l+0xc4>
 80135c6:	2500      	movs	r5, #0
 80135c8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80135cc:	f108 0201 	add.w	r2, r8, #1
 80135d0:	9217      	str	r2, [sp, #92]	; 0x5c
 80135d2:	f898 2001 	ldrb.w	r2, [r8, #1]
 80135d6:	2a2b      	cmp	r2, #43	; 0x2b
 80135d8:	d075      	beq.n	80136c6 <_strtod_l+0x286>
 80135da:	2a2d      	cmp	r2, #45	; 0x2d
 80135dc:	d07b      	beq.n	80136d6 <_strtod_l+0x296>
 80135de:	f04f 0c00 	mov.w	ip, #0
 80135e2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80135e6:	2909      	cmp	r1, #9
 80135e8:	f240 8082 	bls.w	80136f0 <_strtod_l+0x2b0>
 80135ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80135f0:	2600      	movs	r6, #0
 80135f2:	e09d      	b.n	8013730 <_strtod_l+0x2f0>
 80135f4:	2300      	movs	r3, #0
 80135f6:	e7c4      	b.n	8013582 <_strtod_l+0x142>
 80135f8:	2f08      	cmp	r7, #8
 80135fa:	bfd8      	it	le
 80135fc:	9907      	ldrle	r1, [sp, #28]
 80135fe:	f100 0001 	add.w	r0, r0, #1
 8013602:	bfda      	itte	le
 8013604:	fb02 3301 	mlale	r3, r2, r1, r3
 8013608:	9307      	strle	r3, [sp, #28]
 801360a:	fb02 3909 	mlagt	r9, r2, r9, r3
 801360e:	3701      	adds	r7, #1
 8013610:	9017      	str	r0, [sp, #92]	; 0x5c
 8013612:	e7bf      	b.n	8013594 <_strtod_l+0x154>
 8013614:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013616:	195a      	adds	r2, r3, r5
 8013618:	9217      	str	r2, [sp, #92]	; 0x5c
 801361a:	5d5a      	ldrb	r2, [r3, r5]
 801361c:	2f00      	cmp	r7, #0
 801361e:	d037      	beq.n	8013690 <_strtod_l+0x250>
 8013620:	9005      	str	r0, [sp, #20]
 8013622:	463d      	mov	r5, r7
 8013624:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8013628:	2b09      	cmp	r3, #9
 801362a:	d912      	bls.n	8013652 <_strtod_l+0x212>
 801362c:	2301      	movs	r3, #1
 801362e:	e7c2      	b.n	80135b6 <_strtod_l+0x176>
 8013630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013632:	1c5a      	adds	r2, r3, #1
 8013634:	9217      	str	r2, [sp, #92]	; 0x5c
 8013636:	785a      	ldrb	r2, [r3, #1]
 8013638:	3001      	adds	r0, #1
 801363a:	2a30      	cmp	r2, #48	; 0x30
 801363c:	d0f8      	beq.n	8013630 <_strtod_l+0x1f0>
 801363e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8013642:	2b08      	cmp	r3, #8
 8013644:	f200 84d9 	bhi.w	8013ffa <_strtod_l+0xbba>
 8013648:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801364a:	9005      	str	r0, [sp, #20]
 801364c:	2000      	movs	r0, #0
 801364e:	9308      	str	r3, [sp, #32]
 8013650:	4605      	mov	r5, r0
 8013652:	3a30      	subs	r2, #48	; 0x30
 8013654:	f100 0301 	add.w	r3, r0, #1
 8013658:	d014      	beq.n	8013684 <_strtod_l+0x244>
 801365a:	9905      	ldr	r1, [sp, #20]
 801365c:	4419      	add	r1, r3
 801365e:	9105      	str	r1, [sp, #20]
 8013660:	462b      	mov	r3, r5
 8013662:	eb00 0e05 	add.w	lr, r0, r5
 8013666:	210a      	movs	r1, #10
 8013668:	4573      	cmp	r3, lr
 801366a:	d113      	bne.n	8013694 <_strtod_l+0x254>
 801366c:	182b      	adds	r3, r5, r0
 801366e:	2b08      	cmp	r3, #8
 8013670:	f105 0501 	add.w	r5, r5, #1
 8013674:	4405      	add	r5, r0
 8013676:	dc1c      	bgt.n	80136b2 <_strtod_l+0x272>
 8013678:	9907      	ldr	r1, [sp, #28]
 801367a:	230a      	movs	r3, #10
 801367c:	fb03 2301 	mla	r3, r3, r1, r2
 8013680:	9307      	str	r3, [sp, #28]
 8013682:	2300      	movs	r3, #0
 8013684:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013686:	1c51      	adds	r1, r2, #1
 8013688:	9117      	str	r1, [sp, #92]	; 0x5c
 801368a:	7852      	ldrb	r2, [r2, #1]
 801368c:	4618      	mov	r0, r3
 801368e:	e7c9      	b.n	8013624 <_strtod_l+0x1e4>
 8013690:	4638      	mov	r0, r7
 8013692:	e7d2      	b.n	801363a <_strtod_l+0x1fa>
 8013694:	2b08      	cmp	r3, #8
 8013696:	dc04      	bgt.n	80136a2 <_strtod_l+0x262>
 8013698:	9e07      	ldr	r6, [sp, #28]
 801369a:	434e      	muls	r6, r1
 801369c:	9607      	str	r6, [sp, #28]
 801369e:	3301      	adds	r3, #1
 80136a0:	e7e2      	b.n	8013668 <_strtod_l+0x228>
 80136a2:	f103 0c01 	add.w	ip, r3, #1
 80136a6:	f1bc 0f10 	cmp.w	ip, #16
 80136aa:	bfd8      	it	le
 80136ac:	fb01 f909 	mulle.w	r9, r1, r9
 80136b0:	e7f5      	b.n	801369e <_strtod_l+0x25e>
 80136b2:	2d10      	cmp	r5, #16
 80136b4:	bfdc      	itt	le
 80136b6:	230a      	movle	r3, #10
 80136b8:	fb03 2909 	mlale	r9, r3, r9, r2
 80136bc:	e7e1      	b.n	8013682 <_strtod_l+0x242>
 80136be:	2300      	movs	r3, #0
 80136c0:	9305      	str	r3, [sp, #20]
 80136c2:	2301      	movs	r3, #1
 80136c4:	e77c      	b.n	80135c0 <_strtod_l+0x180>
 80136c6:	f04f 0c00 	mov.w	ip, #0
 80136ca:	f108 0202 	add.w	r2, r8, #2
 80136ce:	9217      	str	r2, [sp, #92]	; 0x5c
 80136d0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80136d4:	e785      	b.n	80135e2 <_strtod_l+0x1a2>
 80136d6:	f04f 0c01 	mov.w	ip, #1
 80136da:	e7f6      	b.n	80136ca <_strtod_l+0x28a>
 80136dc:	08062c7c 	.word	0x08062c7c
 80136e0:	080629d0 	.word	0x080629d0
 80136e4:	7ff00000 	.word	0x7ff00000
 80136e8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80136ea:	1c51      	adds	r1, r2, #1
 80136ec:	9117      	str	r1, [sp, #92]	; 0x5c
 80136ee:	7852      	ldrb	r2, [r2, #1]
 80136f0:	2a30      	cmp	r2, #48	; 0x30
 80136f2:	d0f9      	beq.n	80136e8 <_strtod_l+0x2a8>
 80136f4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80136f8:	2908      	cmp	r1, #8
 80136fa:	f63f af79 	bhi.w	80135f0 <_strtod_l+0x1b0>
 80136fe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8013702:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013704:	9206      	str	r2, [sp, #24]
 8013706:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013708:	1c51      	adds	r1, r2, #1
 801370a:	9117      	str	r1, [sp, #92]	; 0x5c
 801370c:	7852      	ldrb	r2, [r2, #1]
 801370e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8013712:	2e09      	cmp	r6, #9
 8013714:	d937      	bls.n	8013786 <_strtod_l+0x346>
 8013716:	9e06      	ldr	r6, [sp, #24]
 8013718:	1b89      	subs	r1, r1, r6
 801371a:	2908      	cmp	r1, #8
 801371c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8013720:	dc02      	bgt.n	8013728 <_strtod_l+0x2e8>
 8013722:	4576      	cmp	r6, lr
 8013724:	bfa8      	it	ge
 8013726:	4676      	movge	r6, lr
 8013728:	f1bc 0f00 	cmp.w	ip, #0
 801372c:	d000      	beq.n	8013730 <_strtod_l+0x2f0>
 801372e:	4276      	negs	r6, r6
 8013730:	2d00      	cmp	r5, #0
 8013732:	d14d      	bne.n	80137d0 <_strtod_l+0x390>
 8013734:	9904      	ldr	r1, [sp, #16]
 8013736:	4301      	orrs	r1, r0
 8013738:	f47f aec6 	bne.w	80134c8 <_strtod_l+0x88>
 801373c:	2b00      	cmp	r3, #0
 801373e:	f47f aee1 	bne.w	8013504 <_strtod_l+0xc4>
 8013742:	2a69      	cmp	r2, #105	; 0x69
 8013744:	d027      	beq.n	8013796 <_strtod_l+0x356>
 8013746:	dc24      	bgt.n	8013792 <_strtod_l+0x352>
 8013748:	2a49      	cmp	r2, #73	; 0x49
 801374a:	d024      	beq.n	8013796 <_strtod_l+0x356>
 801374c:	2a4e      	cmp	r2, #78	; 0x4e
 801374e:	f47f aed9 	bne.w	8013504 <_strtod_l+0xc4>
 8013752:	499f      	ldr	r1, [pc, #636]	; (80139d0 <_strtod_l+0x590>)
 8013754:	a817      	add	r0, sp, #92	; 0x5c
 8013756:	f002 f8bb 	bl	80158d0 <__match>
 801375a:	2800      	cmp	r0, #0
 801375c:	f43f aed2 	beq.w	8013504 <_strtod_l+0xc4>
 8013760:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013762:	781b      	ldrb	r3, [r3, #0]
 8013764:	2b28      	cmp	r3, #40	; 0x28
 8013766:	d12d      	bne.n	80137c4 <_strtod_l+0x384>
 8013768:	499a      	ldr	r1, [pc, #616]	; (80139d4 <_strtod_l+0x594>)
 801376a:	aa1a      	add	r2, sp, #104	; 0x68
 801376c:	a817      	add	r0, sp, #92	; 0x5c
 801376e:	f002 f8c3 	bl	80158f8 <__hexnan>
 8013772:	2805      	cmp	r0, #5
 8013774:	d126      	bne.n	80137c4 <_strtod_l+0x384>
 8013776:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013778:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801377c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013780:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013784:	e6a0      	b.n	80134c8 <_strtod_l+0x88>
 8013786:	210a      	movs	r1, #10
 8013788:	fb01 2e0e 	mla	lr, r1, lr, r2
 801378c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013790:	e7b9      	b.n	8013706 <_strtod_l+0x2c6>
 8013792:	2a6e      	cmp	r2, #110	; 0x6e
 8013794:	e7db      	b.n	801374e <_strtod_l+0x30e>
 8013796:	4990      	ldr	r1, [pc, #576]	; (80139d8 <_strtod_l+0x598>)
 8013798:	a817      	add	r0, sp, #92	; 0x5c
 801379a:	f002 f899 	bl	80158d0 <__match>
 801379e:	2800      	cmp	r0, #0
 80137a0:	f43f aeb0 	beq.w	8013504 <_strtod_l+0xc4>
 80137a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137a6:	498d      	ldr	r1, [pc, #564]	; (80139dc <_strtod_l+0x59c>)
 80137a8:	3b01      	subs	r3, #1
 80137aa:	a817      	add	r0, sp, #92	; 0x5c
 80137ac:	9317      	str	r3, [sp, #92]	; 0x5c
 80137ae:	f002 f88f 	bl	80158d0 <__match>
 80137b2:	b910      	cbnz	r0, 80137ba <_strtod_l+0x37a>
 80137b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80137b6:	3301      	adds	r3, #1
 80137b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80137ba:	f8df b230 	ldr.w	fp, [pc, #560]	; 80139ec <_strtod_l+0x5ac>
 80137be:	f04f 0a00 	mov.w	sl, #0
 80137c2:	e681      	b.n	80134c8 <_strtod_l+0x88>
 80137c4:	4886      	ldr	r0, [pc, #536]	; (80139e0 <_strtod_l+0x5a0>)
 80137c6:	f003 f83b 	bl	8016840 <nan>
 80137ca:	ec5b ab10 	vmov	sl, fp, d0
 80137ce:	e67b      	b.n	80134c8 <_strtod_l+0x88>
 80137d0:	9b05      	ldr	r3, [sp, #20]
 80137d2:	9807      	ldr	r0, [sp, #28]
 80137d4:	1af3      	subs	r3, r6, r3
 80137d6:	2f00      	cmp	r7, #0
 80137d8:	bf08      	it	eq
 80137da:	462f      	moveq	r7, r5
 80137dc:	2d10      	cmp	r5, #16
 80137de:	9306      	str	r3, [sp, #24]
 80137e0:	46a8      	mov	r8, r5
 80137e2:	bfa8      	it	ge
 80137e4:	f04f 0810 	movge.w	r8, #16
 80137e8:	f7ec fe9c 	bl	8000524 <__aeabi_ui2d>
 80137ec:	2d09      	cmp	r5, #9
 80137ee:	4682      	mov	sl, r0
 80137f0:	468b      	mov	fp, r1
 80137f2:	dd13      	ble.n	801381c <_strtod_l+0x3dc>
 80137f4:	4b7b      	ldr	r3, [pc, #492]	; (80139e4 <_strtod_l+0x5a4>)
 80137f6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80137fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80137fe:	f7ec ff0b 	bl	8000618 <__aeabi_dmul>
 8013802:	4682      	mov	sl, r0
 8013804:	4648      	mov	r0, r9
 8013806:	468b      	mov	fp, r1
 8013808:	f7ec fe8c 	bl	8000524 <__aeabi_ui2d>
 801380c:	4602      	mov	r2, r0
 801380e:	460b      	mov	r3, r1
 8013810:	4650      	mov	r0, sl
 8013812:	4659      	mov	r1, fp
 8013814:	f7ec fd4a 	bl	80002ac <__adddf3>
 8013818:	4682      	mov	sl, r0
 801381a:	468b      	mov	fp, r1
 801381c:	2d0f      	cmp	r5, #15
 801381e:	dc38      	bgt.n	8013892 <_strtod_l+0x452>
 8013820:	9b06      	ldr	r3, [sp, #24]
 8013822:	2b00      	cmp	r3, #0
 8013824:	f43f ae50 	beq.w	80134c8 <_strtod_l+0x88>
 8013828:	dd24      	ble.n	8013874 <_strtod_l+0x434>
 801382a:	2b16      	cmp	r3, #22
 801382c:	dc0b      	bgt.n	8013846 <_strtod_l+0x406>
 801382e:	496d      	ldr	r1, [pc, #436]	; (80139e4 <_strtod_l+0x5a4>)
 8013830:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013838:	4652      	mov	r2, sl
 801383a:	465b      	mov	r3, fp
 801383c:	f7ec feec 	bl	8000618 <__aeabi_dmul>
 8013840:	4682      	mov	sl, r0
 8013842:	468b      	mov	fp, r1
 8013844:	e640      	b.n	80134c8 <_strtod_l+0x88>
 8013846:	9a06      	ldr	r2, [sp, #24]
 8013848:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801384c:	4293      	cmp	r3, r2
 801384e:	db20      	blt.n	8013892 <_strtod_l+0x452>
 8013850:	4c64      	ldr	r4, [pc, #400]	; (80139e4 <_strtod_l+0x5a4>)
 8013852:	f1c5 050f 	rsb	r5, r5, #15
 8013856:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801385a:	4652      	mov	r2, sl
 801385c:	465b      	mov	r3, fp
 801385e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013862:	f7ec fed9 	bl	8000618 <__aeabi_dmul>
 8013866:	9b06      	ldr	r3, [sp, #24]
 8013868:	1b5d      	subs	r5, r3, r5
 801386a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801386e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8013872:	e7e3      	b.n	801383c <_strtod_l+0x3fc>
 8013874:	9b06      	ldr	r3, [sp, #24]
 8013876:	3316      	adds	r3, #22
 8013878:	db0b      	blt.n	8013892 <_strtod_l+0x452>
 801387a:	9b05      	ldr	r3, [sp, #20]
 801387c:	1b9e      	subs	r6, r3, r6
 801387e:	4b59      	ldr	r3, [pc, #356]	; (80139e4 <_strtod_l+0x5a4>)
 8013880:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8013884:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013888:	4650      	mov	r0, sl
 801388a:	4659      	mov	r1, fp
 801388c:	f7ec ffee 	bl	800086c <__aeabi_ddiv>
 8013890:	e7d6      	b.n	8013840 <_strtod_l+0x400>
 8013892:	9b06      	ldr	r3, [sp, #24]
 8013894:	eba5 0808 	sub.w	r8, r5, r8
 8013898:	4498      	add	r8, r3
 801389a:	f1b8 0f00 	cmp.w	r8, #0
 801389e:	dd74      	ble.n	801398a <_strtod_l+0x54a>
 80138a0:	f018 030f 	ands.w	r3, r8, #15
 80138a4:	d00a      	beq.n	80138bc <_strtod_l+0x47c>
 80138a6:	494f      	ldr	r1, [pc, #316]	; (80139e4 <_strtod_l+0x5a4>)
 80138a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80138ac:	4652      	mov	r2, sl
 80138ae:	465b      	mov	r3, fp
 80138b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80138b4:	f7ec feb0 	bl	8000618 <__aeabi_dmul>
 80138b8:	4682      	mov	sl, r0
 80138ba:	468b      	mov	fp, r1
 80138bc:	f038 080f 	bics.w	r8, r8, #15
 80138c0:	d04f      	beq.n	8013962 <_strtod_l+0x522>
 80138c2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80138c6:	dd22      	ble.n	801390e <_strtod_l+0x4ce>
 80138c8:	2500      	movs	r5, #0
 80138ca:	462e      	mov	r6, r5
 80138cc:	9507      	str	r5, [sp, #28]
 80138ce:	9505      	str	r5, [sp, #20]
 80138d0:	2322      	movs	r3, #34	; 0x22
 80138d2:	f8df b118 	ldr.w	fp, [pc, #280]	; 80139ec <_strtod_l+0x5ac>
 80138d6:	6023      	str	r3, [r4, #0]
 80138d8:	f04f 0a00 	mov.w	sl, #0
 80138dc:	9b07      	ldr	r3, [sp, #28]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	f43f adf2 	beq.w	80134c8 <_strtod_l+0x88>
 80138e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80138e6:	4620      	mov	r0, r4
 80138e8:	f002 f986 	bl	8015bf8 <_Bfree>
 80138ec:	9905      	ldr	r1, [sp, #20]
 80138ee:	4620      	mov	r0, r4
 80138f0:	f002 f982 	bl	8015bf8 <_Bfree>
 80138f4:	4631      	mov	r1, r6
 80138f6:	4620      	mov	r0, r4
 80138f8:	f002 f97e 	bl	8015bf8 <_Bfree>
 80138fc:	9907      	ldr	r1, [sp, #28]
 80138fe:	4620      	mov	r0, r4
 8013900:	f002 f97a 	bl	8015bf8 <_Bfree>
 8013904:	4629      	mov	r1, r5
 8013906:	4620      	mov	r0, r4
 8013908:	f002 f976 	bl	8015bf8 <_Bfree>
 801390c:	e5dc      	b.n	80134c8 <_strtod_l+0x88>
 801390e:	4b36      	ldr	r3, [pc, #216]	; (80139e8 <_strtod_l+0x5a8>)
 8013910:	9304      	str	r3, [sp, #16]
 8013912:	2300      	movs	r3, #0
 8013914:	ea4f 1828 	mov.w	r8, r8, asr #4
 8013918:	4650      	mov	r0, sl
 801391a:	4659      	mov	r1, fp
 801391c:	4699      	mov	r9, r3
 801391e:	f1b8 0f01 	cmp.w	r8, #1
 8013922:	dc21      	bgt.n	8013968 <_strtod_l+0x528>
 8013924:	b10b      	cbz	r3, 801392a <_strtod_l+0x4ea>
 8013926:	4682      	mov	sl, r0
 8013928:	468b      	mov	fp, r1
 801392a:	4b2f      	ldr	r3, [pc, #188]	; (80139e8 <_strtod_l+0x5a8>)
 801392c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8013930:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8013934:	4652      	mov	r2, sl
 8013936:	465b      	mov	r3, fp
 8013938:	e9d9 0100 	ldrd	r0, r1, [r9]
 801393c:	f7ec fe6c 	bl	8000618 <__aeabi_dmul>
 8013940:	4b2a      	ldr	r3, [pc, #168]	; (80139ec <_strtod_l+0x5ac>)
 8013942:	460a      	mov	r2, r1
 8013944:	400b      	ands	r3, r1
 8013946:	492a      	ldr	r1, [pc, #168]	; (80139f0 <_strtod_l+0x5b0>)
 8013948:	428b      	cmp	r3, r1
 801394a:	4682      	mov	sl, r0
 801394c:	d8bc      	bhi.n	80138c8 <_strtod_l+0x488>
 801394e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013952:	428b      	cmp	r3, r1
 8013954:	bf86      	itte	hi
 8013956:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80139f4 <_strtod_l+0x5b4>
 801395a:	f04f 3aff 	movhi.w	sl, #4294967295
 801395e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013962:	2300      	movs	r3, #0
 8013964:	9304      	str	r3, [sp, #16]
 8013966:	e084      	b.n	8013a72 <_strtod_l+0x632>
 8013968:	f018 0f01 	tst.w	r8, #1
 801396c:	d005      	beq.n	801397a <_strtod_l+0x53a>
 801396e:	9b04      	ldr	r3, [sp, #16]
 8013970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013974:	f7ec fe50 	bl	8000618 <__aeabi_dmul>
 8013978:	2301      	movs	r3, #1
 801397a:	9a04      	ldr	r2, [sp, #16]
 801397c:	3208      	adds	r2, #8
 801397e:	f109 0901 	add.w	r9, r9, #1
 8013982:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013986:	9204      	str	r2, [sp, #16]
 8013988:	e7c9      	b.n	801391e <_strtod_l+0x4de>
 801398a:	d0ea      	beq.n	8013962 <_strtod_l+0x522>
 801398c:	f1c8 0800 	rsb	r8, r8, #0
 8013990:	f018 020f 	ands.w	r2, r8, #15
 8013994:	d00a      	beq.n	80139ac <_strtod_l+0x56c>
 8013996:	4b13      	ldr	r3, [pc, #76]	; (80139e4 <_strtod_l+0x5a4>)
 8013998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801399c:	4650      	mov	r0, sl
 801399e:	4659      	mov	r1, fp
 80139a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139a4:	f7ec ff62 	bl	800086c <__aeabi_ddiv>
 80139a8:	4682      	mov	sl, r0
 80139aa:	468b      	mov	fp, r1
 80139ac:	ea5f 1828 	movs.w	r8, r8, asr #4
 80139b0:	d0d7      	beq.n	8013962 <_strtod_l+0x522>
 80139b2:	f1b8 0f1f 	cmp.w	r8, #31
 80139b6:	dd1f      	ble.n	80139f8 <_strtod_l+0x5b8>
 80139b8:	2500      	movs	r5, #0
 80139ba:	462e      	mov	r6, r5
 80139bc:	9507      	str	r5, [sp, #28]
 80139be:	9505      	str	r5, [sp, #20]
 80139c0:	2322      	movs	r3, #34	; 0x22
 80139c2:	f04f 0a00 	mov.w	sl, #0
 80139c6:	f04f 0b00 	mov.w	fp, #0
 80139ca:	6023      	str	r3, [r4, #0]
 80139cc:	e786      	b.n	80138dc <_strtod_l+0x49c>
 80139ce:	bf00      	nop
 80139d0:	080629a2 	.word	0x080629a2
 80139d4:	080629e4 	.word	0x080629e4
 80139d8:	0806299a 	.word	0x0806299a
 80139dc:	08062b24 	.word	0x08062b24
 80139e0:	0806297f 	.word	0x0806297f
 80139e4:	08062d18 	.word	0x08062d18
 80139e8:	08062cf0 	.word	0x08062cf0
 80139ec:	7ff00000 	.word	0x7ff00000
 80139f0:	7ca00000 	.word	0x7ca00000
 80139f4:	7fefffff 	.word	0x7fefffff
 80139f8:	f018 0310 	ands.w	r3, r8, #16
 80139fc:	bf18      	it	ne
 80139fe:	236a      	movne	r3, #106	; 0x6a
 8013a00:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8013db0 <_strtod_l+0x970>
 8013a04:	9304      	str	r3, [sp, #16]
 8013a06:	4650      	mov	r0, sl
 8013a08:	4659      	mov	r1, fp
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	f018 0f01 	tst.w	r8, #1
 8013a10:	d004      	beq.n	8013a1c <_strtod_l+0x5dc>
 8013a12:	e9d9 2300 	ldrd	r2, r3, [r9]
 8013a16:	f7ec fdff 	bl	8000618 <__aeabi_dmul>
 8013a1a:	2301      	movs	r3, #1
 8013a1c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8013a20:	f109 0908 	add.w	r9, r9, #8
 8013a24:	d1f2      	bne.n	8013a0c <_strtod_l+0x5cc>
 8013a26:	b10b      	cbz	r3, 8013a2c <_strtod_l+0x5ec>
 8013a28:	4682      	mov	sl, r0
 8013a2a:	468b      	mov	fp, r1
 8013a2c:	9b04      	ldr	r3, [sp, #16]
 8013a2e:	b1c3      	cbz	r3, 8013a62 <_strtod_l+0x622>
 8013a30:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8013a34:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	4659      	mov	r1, fp
 8013a3c:	dd11      	ble.n	8013a62 <_strtod_l+0x622>
 8013a3e:	2b1f      	cmp	r3, #31
 8013a40:	f340 8124 	ble.w	8013c8c <_strtod_l+0x84c>
 8013a44:	2b34      	cmp	r3, #52	; 0x34
 8013a46:	bfde      	ittt	le
 8013a48:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8013a4c:	f04f 33ff 	movle.w	r3, #4294967295
 8013a50:	fa03 f202 	lslle.w	r2, r3, r2
 8013a54:	f04f 0a00 	mov.w	sl, #0
 8013a58:	bfcc      	ite	gt
 8013a5a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8013a5e:	ea02 0b01 	andle.w	fp, r2, r1
 8013a62:	2200      	movs	r2, #0
 8013a64:	2300      	movs	r3, #0
 8013a66:	4650      	mov	r0, sl
 8013a68:	4659      	mov	r1, fp
 8013a6a:	f7ed f83d 	bl	8000ae8 <__aeabi_dcmpeq>
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d1a2      	bne.n	80139b8 <_strtod_l+0x578>
 8013a72:	9b07      	ldr	r3, [sp, #28]
 8013a74:	9300      	str	r3, [sp, #0]
 8013a76:	9908      	ldr	r1, [sp, #32]
 8013a78:	462b      	mov	r3, r5
 8013a7a:	463a      	mov	r2, r7
 8013a7c:	4620      	mov	r0, r4
 8013a7e:	f002 f923 	bl	8015cc8 <__s2b>
 8013a82:	9007      	str	r0, [sp, #28]
 8013a84:	2800      	cmp	r0, #0
 8013a86:	f43f af1f 	beq.w	80138c8 <_strtod_l+0x488>
 8013a8a:	9b05      	ldr	r3, [sp, #20]
 8013a8c:	1b9e      	subs	r6, r3, r6
 8013a8e:	9b06      	ldr	r3, [sp, #24]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	bfb4      	ite	lt
 8013a94:	4633      	movlt	r3, r6
 8013a96:	2300      	movge	r3, #0
 8013a98:	930c      	str	r3, [sp, #48]	; 0x30
 8013a9a:	9b06      	ldr	r3, [sp, #24]
 8013a9c:	2500      	movs	r5, #0
 8013a9e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013aa2:	9312      	str	r3, [sp, #72]	; 0x48
 8013aa4:	462e      	mov	r6, r5
 8013aa6:	9b07      	ldr	r3, [sp, #28]
 8013aa8:	4620      	mov	r0, r4
 8013aaa:	6859      	ldr	r1, [r3, #4]
 8013aac:	f002 f864 	bl	8015b78 <_Balloc>
 8013ab0:	9005      	str	r0, [sp, #20]
 8013ab2:	2800      	cmp	r0, #0
 8013ab4:	f43f af0c 	beq.w	80138d0 <_strtod_l+0x490>
 8013ab8:	9b07      	ldr	r3, [sp, #28]
 8013aba:	691a      	ldr	r2, [r3, #16]
 8013abc:	3202      	adds	r2, #2
 8013abe:	f103 010c 	add.w	r1, r3, #12
 8013ac2:	0092      	lsls	r2, r2, #2
 8013ac4:	300c      	adds	r0, #12
 8013ac6:	f7fe fb9f 	bl	8012208 <memcpy>
 8013aca:	ec4b ab10 	vmov	d0, sl, fp
 8013ace:	aa1a      	add	r2, sp, #104	; 0x68
 8013ad0:	a919      	add	r1, sp, #100	; 0x64
 8013ad2:	4620      	mov	r0, r4
 8013ad4:	f002 fc3e 	bl	8016354 <__d2b>
 8013ad8:	ec4b ab18 	vmov	d8, sl, fp
 8013adc:	9018      	str	r0, [sp, #96]	; 0x60
 8013ade:	2800      	cmp	r0, #0
 8013ae0:	f43f aef6 	beq.w	80138d0 <_strtod_l+0x490>
 8013ae4:	2101      	movs	r1, #1
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	f002 f988 	bl	8015dfc <__i2b>
 8013aec:	4606      	mov	r6, r0
 8013aee:	2800      	cmp	r0, #0
 8013af0:	f43f aeee 	beq.w	80138d0 <_strtod_l+0x490>
 8013af4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8013af6:	9904      	ldr	r1, [sp, #16]
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	bfab      	itete	ge
 8013afc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8013afe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8013b00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8013b02:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8013b06:	bfac      	ite	ge
 8013b08:	eb03 0902 	addge.w	r9, r3, r2
 8013b0c:	1ad7      	sublt	r7, r2, r3
 8013b0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8013b10:	eba3 0801 	sub.w	r8, r3, r1
 8013b14:	4490      	add	r8, r2
 8013b16:	4ba1      	ldr	r3, [pc, #644]	; (8013d9c <_strtod_l+0x95c>)
 8013b18:	f108 38ff 	add.w	r8, r8, #4294967295
 8013b1c:	4598      	cmp	r8, r3
 8013b1e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013b22:	f280 80c7 	bge.w	8013cb4 <_strtod_l+0x874>
 8013b26:	eba3 0308 	sub.w	r3, r3, r8
 8013b2a:	2b1f      	cmp	r3, #31
 8013b2c:	eba2 0203 	sub.w	r2, r2, r3
 8013b30:	f04f 0101 	mov.w	r1, #1
 8013b34:	f300 80b1 	bgt.w	8013c9a <_strtod_l+0x85a>
 8013b38:	fa01 f303 	lsl.w	r3, r1, r3
 8013b3c:	930d      	str	r3, [sp, #52]	; 0x34
 8013b3e:	2300      	movs	r3, #0
 8013b40:	9308      	str	r3, [sp, #32]
 8013b42:	eb09 0802 	add.w	r8, r9, r2
 8013b46:	9b04      	ldr	r3, [sp, #16]
 8013b48:	45c1      	cmp	r9, r8
 8013b4a:	4417      	add	r7, r2
 8013b4c:	441f      	add	r7, r3
 8013b4e:	464b      	mov	r3, r9
 8013b50:	bfa8      	it	ge
 8013b52:	4643      	movge	r3, r8
 8013b54:	42bb      	cmp	r3, r7
 8013b56:	bfa8      	it	ge
 8013b58:	463b      	movge	r3, r7
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	bfc2      	ittt	gt
 8013b5e:	eba8 0803 	subgt.w	r8, r8, r3
 8013b62:	1aff      	subgt	r7, r7, r3
 8013b64:	eba9 0903 	subgt.w	r9, r9, r3
 8013b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	dd17      	ble.n	8013b9e <_strtod_l+0x75e>
 8013b6e:	4631      	mov	r1, r6
 8013b70:	461a      	mov	r2, r3
 8013b72:	4620      	mov	r0, r4
 8013b74:	f002 fa02 	bl	8015f7c <__pow5mult>
 8013b78:	4606      	mov	r6, r0
 8013b7a:	2800      	cmp	r0, #0
 8013b7c:	f43f aea8 	beq.w	80138d0 <_strtod_l+0x490>
 8013b80:	4601      	mov	r1, r0
 8013b82:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013b84:	4620      	mov	r0, r4
 8013b86:	f002 f94f 	bl	8015e28 <__multiply>
 8013b8a:	900b      	str	r0, [sp, #44]	; 0x2c
 8013b8c:	2800      	cmp	r0, #0
 8013b8e:	f43f ae9f 	beq.w	80138d0 <_strtod_l+0x490>
 8013b92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013b94:	4620      	mov	r0, r4
 8013b96:	f002 f82f 	bl	8015bf8 <_Bfree>
 8013b9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013b9c:	9318      	str	r3, [sp, #96]	; 0x60
 8013b9e:	f1b8 0f00 	cmp.w	r8, #0
 8013ba2:	f300 808c 	bgt.w	8013cbe <_strtod_l+0x87e>
 8013ba6:	9b06      	ldr	r3, [sp, #24]
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	dd08      	ble.n	8013bbe <_strtod_l+0x77e>
 8013bac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013bae:	9905      	ldr	r1, [sp, #20]
 8013bb0:	4620      	mov	r0, r4
 8013bb2:	f002 f9e3 	bl	8015f7c <__pow5mult>
 8013bb6:	9005      	str	r0, [sp, #20]
 8013bb8:	2800      	cmp	r0, #0
 8013bba:	f43f ae89 	beq.w	80138d0 <_strtod_l+0x490>
 8013bbe:	2f00      	cmp	r7, #0
 8013bc0:	dd08      	ble.n	8013bd4 <_strtod_l+0x794>
 8013bc2:	9905      	ldr	r1, [sp, #20]
 8013bc4:	463a      	mov	r2, r7
 8013bc6:	4620      	mov	r0, r4
 8013bc8:	f002 fa32 	bl	8016030 <__lshift>
 8013bcc:	9005      	str	r0, [sp, #20]
 8013bce:	2800      	cmp	r0, #0
 8013bd0:	f43f ae7e 	beq.w	80138d0 <_strtod_l+0x490>
 8013bd4:	f1b9 0f00 	cmp.w	r9, #0
 8013bd8:	dd08      	ble.n	8013bec <_strtod_l+0x7ac>
 8013bda:	4631      	mov	r1, r6
 8013bdc:	464a      	mov	r2, r9
 8013bde:	4620      	mov	r0, r4
 8013be0:	f002 fa26 	bl	8016030 <__lshift>
 8013be4:	4606      	mov	r6, r0
 8013be6:	2800      	cmp	r0, #0
 8013be8:	f43f ae72 	beq.w	80138d0 <_strtod_l+0x490>
 8013bec:	9a05      	ldr	r2, [sp, #20]
 8013bee:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013bf0:	4620      	mov	r0, r4
 8013bf2:	f002 faa9 	bl	8016148 <__mdiff>
 8013bf6:	4605      	mov	r5, r0
 8013bf8:	2800      	cmp	r0, #0
 8013bfa:	f43f ae69 	beq.w	80138d0 <_strtod_l+0x490>
 8013bfe:	68c3      	ldr	r3, [r0, #12]
 8013c00:	930b      	str	r3, [sp, #44]	; 0x2c
 8013c02:	2300      	movs	r3, #0
 8013c04:	60c3      	str	r3, [r0, #12]
 8013c06:	4631      	mov	r1, r6
 8013c08:	f002 fa82 	bl	8016110 <__mcmp>
 8013c0c:	2800      	cmp	r0, #0
 8013c0e:	da60      	bge.n	8013cd2 <_strtod_l+0x892>
 8013c10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c12:	ea53 030a 	orrs.w	r3, r3, sl
 8013c16:	f040 8082 	bne.w	8013d1e <_strtod_l+0x8de>
 8013c1a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d17d      	bne.n	8013d1e <_strtod_l+0x8de>
 8013c22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013c26:	0d1b      	lsrs	r3, r3, #20
 8013c28:	051b      	lsls	r3, r3, #20
 8013c2a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8013c2e:	d976      	bls.n	8013d1e <_strtod_l+0x8de>
 8013c30:	696b      	ldr	r3, [r5, #20]
 8013c32:	b913      	cbnz	r3, 8013c3a <_strtod_l+0x7fa>
 8013c34:	692b      	ldr	r3, [r5, #16]
 8013c36:	2b01      	cmp	r3, #1
 8013c38:	dd71      	ble.n	8013d1e <_strtod_l+0x8de>
 8013c3a:	4629      	mov	r1, r5
 8013c3c:	2201      	movs	r2, #1
 8013c3e:	4620      	mov	r0, r4
 8013c40:	f002 f9f6 	bl	8016030 <__lshift>
 8013c44:	4631      	mov	r1, r6
 8013c46:	4605      	mov	r5, r0
 8013c48:	f002 fa62 	bl	8016110 <__mcmp>
 8013c4c:	2800      	cmp	r0, #0
 8013c4e:	dd66      	ble.n	8013d1e <_strtod_l+0x8de>
 8013c50:	9904      	ldr	r1, [sp, #16]
 8013c52:	4a53      	ldr	r2, [pc, #332]	; (8013da0 <_strtod_l+0x960>)
 8013c54:	465b      	mov	r3, fp
 8013c56:	2900      	cmp	r1, #0
 8013c58:	f000 8081 	beq.w	8013d5e <_strtod_l+0x91e>
 8013c5c:	ea02 010b 	and.w	r1, r2, fp
 8013c60:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8013c64:	dc7b      	bgt.n	8013d5e <_strtod_l+0x91e>
 8013c66:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8013c6a:	f77f aea9 	ble.w	80139c0 <_strtod_l+0x580>
 8013c6e:	4b4d      	ldr	r3, [pc, #308]	; (8013da4 <_strtod_l+0x964>)
 8013c70:	4650      	mov	r0, sl
 8013c72:	4659      	mov	r1, fp
 8013c74:	2200      	movs	r2, #0
 8013c76:	f7ec fccf 	bl	8000618 <__aeabi_dmul>
 8013c7a:	460b      	mov	r3, r1
 8013c7c:	4303      	orrs	r3, r0
 8013c7e:	bf08      	it	eq
 8013c80:	2322      	moveq	r3, #34	; 0x22
 8013c82:	4682      	mov	sl, r0
 8013c84:	468b      	mov	fp, r1
 8013c86:	bf08      	it	eq
 8013c88:	6023      	streq	r3, [r4, #0]
 8013c8a:	e62b      	b.n	80138e4 <_strtod_l+0x4a4>
 8013c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8013c90:	fa02 f303 	lsl.w	r3, r2, r3
 8013c94:	ea03 0a0a 	and.w	sl, r3, sl
 8013c98:	e6e3      	b.n	8013a62 <_strtod_l+0x622>
 8013c9a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8013c9e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8013ca2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8013ca6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8013caa:	fa01 f308 	lsl.w	r3, r1, r8
 8013cae:	9308      	str	r3, [sp, #32]
 8013cb0:	910d      	str	r1, [sp, #52]	; 0x34
 8013cb2:	e746      	b.n	8013b42 <_strtod_l+0x702>
 8013cb4:	2300      	movs	r3, #0
 8013cb6:	9308      	str	r3, [sp, #32]
 8013cb8:	2301      	movs	r3, #1
 8013cba:	930d      	str	r3, [sp, #52]	; 0x34
 8013cbc:	e741      	b.n	8013b42 <_strtod_l+0x702>
 8013cbe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013cc0:	4642      	mov	r2, r8
 8013cc2:	4620      	mov	r0, r4
 8013cc4:	f002 f9b4 	bl	8016030 <__lshift>
 8013cc8:	9018      	str	r0, [sp, #96]	; 0x60
 8013cca:	2800      	cmp	r0, #0
 8013ccc:	f47f af6b 	bne.w	8013ba6 <_strtod_l+0x766>
 8013cd0:	e5fe      	b.n	80138d0 <_strtod_l+0x490>
 8013cd2:	465f      	mov	r7, fp
 8013cd4:	d16e      	bne.n	8013db4 <_strtod_l+0x974>
 8013cd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013cd8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013cdc:	b342      	cbz	r2, 8013d30 <_strtod_l+0x8f0>
 8013cde:	4a32      	ldr	r2, [pc, #200]	; (8013da8 <_strtod_l+0x968>)
 8013ce0:	4293      	cmp	r3, r2
 8013ce2:	d128      	bne.n	8013d36 <_strtod_l+0x8f6>
 8013ce4:	9b04      	ldr	r3, [sp, #16]
 8013ce6:	4651      	mov	r1, sl
 8013ce8:	b1eb      	cbz	r3, 8013d26 <_strtod_l+0x8e6>
 8013cea:	4b2d      	ldr	r3, [pc, #180]	; (8013da0 <_strtod_l+0x960>)
 8013cec:	403b      	ands	r3, r7
 8013cee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8013cf6:	d819      	bhi.n	8013d2c <_strtod_l+0x8ec>
 8013cf8:	0d1b      	lsrs	r3, r3, #20
 8013cfa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8013cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8013d02:	4299      	cmp	r1, r3
 8013d04:	d117      	bne.n	8013d36 <_strtod_l+0x8f6>
 8013d06:	4b29      	ldr	r3, [pc, #164]	; (8013dac <_strtod_l+0x96c>)
 8013d08:	429f      	cmp	r7, r3
 8013d0a:	d102      	bne.n	8013d12 <_strtod_l+0x8d2>
 8013d0c:	3101      	adds	r1, #1
 8013d0e:	f43f addf 	beq.w	80138d0 <_strtod_l+0x490>
 8013d12:	4b23      	ldr	r3, [pc, #140]	; (8013da0 <_strtod_l+0x960>)
 8013d14:	403b      	ands	r3, r7
 8013d16:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013d1a:	f04f 0a00 	mov.w	sl, #0
 8013d1e:	9b04      	ldr	r3, [sp, #16]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d1a4      	bne.n	8013c6e <_strtod_l+0x82e>
 8013d24:	e5de      	b.n	80138e4 <_strtod_l+0x4a4>
 8013d26:	f04f 33ff 	mov.w	r3, #4294967295
 8013d2a:	e7ea      	b.n	8013d02 <_strtod_l+0x8c2>
 8013d2c:	4613      	mov	r3, r2
 8013d2e:	e7e8      	b.n	8013d02 <_strtod_l+0x8c2>
 8013d30:	ea53 030a 	orrs.w	r3, r3, sl
 8013d34:	d08c      	beq.n	8013c50 <_strtod_l+0x810>
 8013d36:	9b08      	ldr	r3, [sp, #32]
 8013d38:	b1db      	cbz	r3, 8013d72 <_strtod_l+0x932>
 8013d3a:	423b      	tst	r3, r7
 8013d3c:	d0ef      	beq.n	8013d1e <_strtod_l+0x8de>
 8013d3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013d40:	9a04      	ldr	r2, [sp, #16]
 8013d42:	4650      	mov	r0, sl
 8013d44:	4659      	mov	r1, fp
 8013d46:	b1c3      	cbz	r3, 8013d7a <_strtod_l+0x93a>
 8013d48:	f7ff fb5e 	bl	8013408 <sulp>
 8013d4c:	4602      	mov	r2, r0
 8013d4e:	460b      	mov	r3, r1
 8013d50:	ec51 0b18 	vmov	r0, r1, d8
 8013d54:	f7ec faaa 	bl	80002ac <__adddf3>
 8013d58:	4682      	mov	sl, r0
 8013d5a:	468b      	mov	fp, r1
 8013d5c:	e7df      	b.n	8013d1e <_strtod_l+0x8de>
 8013d5e:	4013      	ands	r3, r2
 8013d60:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8013d64:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8013d68:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8013d6c:	f04f 3aff 	mov.w	sl, #4294967295
 8013d70:	e7d5      	b.n	8013d1e <_strtod_l+0x8de>
 8013d72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013d74:	ea13 0f0a 	tst.w	r3, sl
 8013d78:	e7e0      	b.n	8013d3c <_strtod_l+0x8fc>
 8013d7a:	f7ff fb45 	bl	8013408 <sulp>
 8013d7e:	4602      	mov	r2, r0
 8013d80:	460b      	mov	r3, r1
 8013d82:	ec51 0b18 	vmov	r0, r1, d8
 8013d86:	f7ec fa8f 	bl	80002a8 <__aeabi_dsub>
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	4682      	mov	sl, r0
 8013d90:	468b      	mov	fp, r1
 8013d92:	f7ec fea9 	bl	8000ae8 <__aeabi_dcmpeq>
 8013d96:	2800      	cmp	r0, #0
 8013d98:	d0c1      	beq.n	8013d1e <_strtod_l+0x8de>
 8013d9a:	e611      	b.n	80139c0 <_strtod_l+0x580>
 8013d9c:	fffffc02 	.word	0xfffffc02
 8013da0:	7ff00000 	.word	0x7ff00000
 8013da4:	39500000 	.word	0x39500000
 8013da8:	000fffff 	.word	0x000fffff
 8013dac:	7fefffff 	.word	0x7fefffff
 8013db0:	080629f8 	.word	0x080629f8
 8013db4:	4631      	mov	r1, r6
 8013db6:	4628      	mov	r0, r5
 8013db8:	f002 fb28 	bl	801640c <__ratio>
 8013dbc:	ec59 8b10 	vmov	r8, r9, d0
 8013dc0:	ee10 0a10 	vmov	r0, s0
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013dca:	4649      	mov	r1, r9
 8013dcc:	f7ec fea0 	bl	8000b10 <__aeabi_dcmple>
 8013dd0:	2800      	cmp	r0, #0
 8013dd2:	d07a      	beq.n	8013eca <_strtod_l+0xa8a>
 8013dd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d04a      	beq.n	8013e70 <_strtod_l+0xa30>
 8013dda:	4b95      	ldr	r3, [pc, #596]	; (8014030 <_strtod_l+0xbf0>)
 8013ddc:	2200      	movs	r2, #0
 8013dde:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013de2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8014030 <_strtod_l+0xbf0>
 8013de6:	f04f 0800 	mov.w	r8, #0
 8013dea:	4b92      	ldr	r3, [pc, #584]	; (8014034 <_strtod_l+0xbf4>)
 8013dec:	403b      	ands	r3, r7
 8013dee:	930d      	str	r3, [sp, #52]	; 0x34
 8013df0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013df2:	4b91      	ldr	r3, [pc, #580]	; (8014038 <_strtod_l+0xbf8>)
 8013df4:	429a      	cmp	r2, r3
 8013df6:	f040 80b0 	bne.w	8013f5a <_strtod_l+0xb1a>
 8013dfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013dfe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8013e02:	ec4b ab10 	vmov	d0, sl, fp
 8013e06:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e0a:	f002 fa27 	bl	801625c <__ulp>
 8013e0e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013e12:	ec53 2b10 	vmov	r2, r3, d0
 8013e16:	f7ec fbff 	bl	8000618 <__aeabi_dmul>
 8013e1a:	4652      	mov	r2, sl
 8013e1c:	465b      	mov	r3, fp
 8013e1e:	f7ec fa45 	bl	80002ac <__adddf3>
 8013e22:	460b      	mov	r3, r1
 8013e24:	4983      	ldr	r1, [pc, #524]	; (8014034 <_strtod_l+0xbf4>)
 8013e26:	4a85      	ldr	r2, [pc, #532]	; (801403c <_strtod_l+0xbfc>)
 8013e28:	4019      	ands	r1, r3
 8013e2a:	4291      	cmp	r1, r2
 8013e2c:	4682      	mov	sl, r0
 8013e2e:	d960      	bls.n	8013ef2 <_strtod_l+0xab2>
 8013e30:	ee18 3a90 	vmov	r3, s17
 8013e34:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	d104      	bne.n	8013e46 <_strtod_l+0xa06>
 8013e3c:	ee18 3a10 	vmov	r3, s16
 8013e40:	3301      	adds	r3, #1
 8013e42:	f43f ad45 	beq.w	80138d0 <_strtod_l+0x490>
 8013e46:	f8df b200 	ldr.w	fp, [pc, #512]	; 8014048 <_strtod_l+0xc08>
 8013e4a:	f04f 3aff 	mov.w	sl, #4294967295
 8013e4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8013e50:	4620      	mov	r0, r4
 8013e52:	f001 fed1 	bl	8015bf8 <_Bfree>
 8013e56:	9905      	ldr	r1, [sp, #20]
 8013e58:	4620      	mov	r0, r4
 8013e5a:	f001 fecd 	bl	8015bf8 <_Bfree>
 8013e5e:	4631      	mov	r1, r6
 8013e60:	4620      	mov	r0, r4
 8013e62:	f001 fec9 	bl	8015bf8 <_Bfree>
 8013e66:	4629      	mov	r1, r5
 8013e68:	4620      	mov	r0, r4
 8013e6a:	f001 fec5 	bl	8015bf8 <_Bfree>
 8013e6e:	e61a      	b.n	8013aa6 <_strtod_l+0x666>
 8013e70:	f1ba 0f00 	cmp.w	sl, #0
 8013e74:	d11b      	bne.n	8013eae <_strtod_l+0xa6e>
 8013e76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013e7a:	b9f3      	cbnz	r3, 8013eba <_strtod_l+0xa7a>
 8013e7c:	4b6c      	ldr	r3, [pc, #432]	; (8014030 <_strtod_l+0xbf0>)
 8013e7e:	2200      	movs	r2, #0
 8013e80:	4640      	mov	r0, r8
 8013e82:	4649      	mov	r1, r9
 8013e84:	f7ec fe3a 	bl	8000afc <__aeabi_dcmplt>
 8013e88:	b9d0      	cbnz	r0, 8013ec0 <_strtod_l+0xa80>
 8013e8a:	4640      	mov	r0, r8
 8013e8c:	4649      	mov	r1, r9
 8013e8e:	4b6c      	ldr	r3, [pc, #432]	; (8014040 <_strtod_l+0xc00>)
 8013e90:	2200      	movs	r2, #0
 8013e92:	f7ec fbc1 	bl	8000618 <__aeabi_dmul>
 8013e96:	4680      	mov	r8, r0
 8013e98:	4689      	mov	r9, r1
 8013e9a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013e9e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8013ea2:	9315      	str	r3, [sp, #84]	; 0x54
 8013ea4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8013ea8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013eac:	e79d      	b.n	8013dea <_strtod_l+0x9aa>
 8013eae:	f1ba 0f01 	cmp.w	sl, #1
 8013eb2:	d102      	bne.n	8013eba <_strtod_l+0xa7a>
 8013eb4:	2f00      	cmp	r7, #0
 8013eb6:	f43f ad83 	beq.w	80139c0 <_strtod_l+0x580>
 8013eba:	4b62      	ldr	r3, [pc, #392]	; (8014044 <_strtod_l+0xc04>)
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	e78e      	b.n	8013dde <_strtod_l+0x99e>
 8013ec0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8014040 <_strtod_l+0xc00>
 8013ec4:	f04f 0800 	mov.w	r8, #0
 8013ec8:	e7e7      	b.n	8013e9a <_strtod_l+0xa5a>
 8013eca:	4b5d      	ldr	r3, [pc, #372]	; (8014040 <_strtod_l+0xc00>)
 8013ecc:	4640      	mov	r0, r8
 8013ece:	4649      	mov	r1, r9
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	f7ec fba1 	bl	8000618 <__aeabi_dmul>
 8013ed6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ed8:	4680      	mov	r8, r0
 8013eda:	4689      	mov	r9, r1
 8013edc:	b933      	cbnz	r3, 8013eec <_strtod_l+0xaac>
 8013ede:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ee2:	900e      	str	r0, [sp, #56]	; 0x38
 8013ee4:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ee6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8013eea:	e7dd      	b.n	8013ea8 <_strtod_l+0xa68>
 8013eec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8013ef0:	e7f9      	b.n	8013ee6 <_strtod_l+0xaa6>
 8013ef2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8013ef6:	9b04      	ldr	r3, [sp, #16]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d1a8      	bne.n	8013e4e <_strtod_l+0xa0e>
 8013efc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013f00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013f02:	0d1b      	lsrs	r3, r3, #20
 8013f04:	051b      	lsls	r3, r3, #20
 8013f06:	429a      	cmp	r2, r3
 8013f08:	d1a1      	bne.n	8013e4e <_strtod_l+0xa0e>
 8013f0a:	4640      	mov	r0, r8
 8013f0c:	4649      	mov	r1, r9
 8013f0e:	f7ec fee3 	bl	8000cd8 <__aeabi_d2lz>
 8013f12:	f7ec fb53 	bl	80005bc <__aeabi_l2d>
 8013f16:	4602      	mov	r2, r0
 8013f18:	460b      	mov	r3, r1
 8013f1a:	4640      	mov	r0, r8
 8013f1c:	4649      	mov	r1, r9
 8013f1e:	f7ec f9c3 	bl	80002a8 <__aeabi_dsub>
 8013f22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013f24:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013f28:	ea43 030a 	orr.w	r3, r3, sl
 8013f2c:	4313      	orrs	r3, r2
 8013f2e:	4680      	mov	r8, r0
 8013f30:	4689      	mov	r9, r1
 8013f32:	d055      	beq.n	8013fe0 <_strtod_l+0xba0>
 8013f34:	a336      	add	r3, pc, #216	; (adr r3, 8014010 <_strtod_l+0xbd0>)
 8013f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f3a:	f7ec fddf 	bl	8000afc <__aeabi_dcmplt>
 8013f3e:	2800      	cmp	r0, #0
 8013f40:	f47f acd0 	bne.w	80138e4 <_strtod_l+0x4a4>
 8013f44:	a334      	add	r3, pc, #208	; (adr r3, 8014018 <_strtod_l+0xbd8>)
 8013f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f4a:	4640      	mov	r0, r8
 8013f4c:	4649      	mov	r1, r9
 8013f4e:	f7ec fdf3 	bl	8000b38 <__aeabi_dcmpgt>
 8013f52:	2800      	cmp	r0, #0
 8013f54:	f43f af7b 	beq.w	8013e4e <_strtod_l+0xa0e>
 8013f58:	e4c4      	b.n	80138e4 <_strtod_l+0x4a4>
 8013f5a:	9b04      	ldr	r3, [sp, #16]
 8013f5c:	b333      	cbz	r3, 8013fac <_strtod_l+0xb6c>
 8013f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013f60:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013f64:	d822      	bhi.n	8013fac <_strtod_l+0xb6c>
 8013f66:	a32e      	add	r3, pc, #184	; (adr r3, 8014020 <_strtod_l+0xbe0>)
 8013f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f6c:	4640      	mov	r0, r8
 8013f6e:	4649      	mov	r1, r9
 8013f70:	f7ec fdce 	bl	8000b10 <__aeabi_dcmple>
 8013f74:	b1a0      	cbz	r0, 8013fa0 <_strtod_l+0xb60>
 8013f76:	4649      	mov	r1, r9
 8013f78:	4640      	mov	r0, r8
 8013f7a:	f7ec fe25 	bl	8000bc8 <__aeabi_d2uiz>
 8013f7e:	2801      	cmp	r0, #1
 8013f80:	bf38      	it	cc
 8013f82:	2001      	movcc	r0, #1
 8013f84:	f7ec face 	bl	8000524 <__aeabi_ui2d>
 8013f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013f8a:	4680      	mov	r8, r0
 8013f8c:	4689      	mov	r9, r1
 8013f8e:	bb23      	cbnz	r3, 8013fda <_strtod_l+0xb9a>
 8013f90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013f94:	9010      	str	r0, [sp, #64]	; 0x40
 8013f96:	9311      	str	r3, [sp, #68]	; 0x44
 8013f98:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013f9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fa2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013fa4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013fa8:	1a9b      	subs	r3, r3, r2
 8013faa:	9309      	str	r3, [sp, #36]	; 0x24
 8013fac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013fb0:	eeb0 0a48 	vmov.f32	s0, s16
 8013fb4:	eef0 0a68 	vmov.f32	s1, s17
 8013fb8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013fbc:	f002 f94e 	bl	801625c <__ulp>
 8013fc0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013fc4:	ec53 2b10 	vmov	r2, r3, d0
 8013fc8:	f7ec fb26 	bl	8000618 <__aeabi_dmul>
 8013fcc:	ec53 2b18 	vmov	r2, r3, d8
 8013fd0:	f7ec f96c 	bl	80002ac <__adddf3>
 8013fd4:	4682      	mov	sl, r0
 8013fd6:	468b      	mov	fp, r1
 8013fd8:	e78d      	b.n	8013ef6 <_strtod_l+0xab6>
 8013fda:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8013fde:	e7db      	b.n	8013f98 <_strtod_l+0xb58>
 8013fe0:	a311      	add	r3, pc, #68	; (adr r3, 8014028 <_strtod_l+0xbe8>)
 8013fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013fe6:	f7ec fd89 	bl	8000afc <__aeabi_dcmplt>
 8013fea:	e7b2      	b.n	8013f52 <_strtod_l+0xb12>
 8013fec:	2300      	movs	r3, #0
 8013fee:	930a      	str	r3, [sp, #40]	; 0x28
 8013ff0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013ff2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8013ff4:	6013      	str	r3, [r2, #0]
 8013ff6:	f7ff ba6b 	b.w	80134d0 <_strtod_l+0x90>
 8013ffa:	2a65      	cmp	r2, #101	; 0x65
 8013ffc:	f43f ab5f 	beq.w	80136be <_strtod_l+0x27e>
 8014000:	2a45      	cmp	r2, #69	; 0x45
 8014002:	f43f ab5c 	beq.w	80136be <_strtod_l+0x27e>
 8014006:	2301      	movs	r3, #1
 8014008:	f7ff bb94 	b.w	8013734 <_strtod_l+0x2f4>
 801400c:	f3af 8000 	nop.w
 8014010:	94a03595 	.word	0x94a03595
 8014014:	3fdfffff 	.word	0x3fdfffff
 8014018:	35afe535 	.word	0x35afe535
 801401c:	3fe00000 	.word	0x3fe00000
 8014020:	ffc00000 	.word	0xffc00000
 8014024:	41dfffff 	.word	0x41dfffff
 8014028:	94a03595 	.word	0x94a03595
 801402c:	3fcfffff 	.word	0x3fcfffff
 8014030:	3ff00000 	.word	0x3ff00000
 8014034:	7ff00000 	.word	0x7ff00000
 8014038:	7fe00000 	.word	0x7fe00000
 801403c:	7c9fffff 	.word	0x7c9fffff
 8014040:	3fe00000 	.word	0x3fe00000
 8014044:	bff00000 	.word	0xbff00000
 8014048:	7fefffff 	.word	0x7fefffff

0801404c <_strtod_r>:
 801404c:	4b01      	ldr	r3, [pc, #4]	; (8014054 <_strtod_r+0x8>)
 801404e:	f7ff b9f7 	b.w	8013440 <_strtod_l>
 8014052:	bf00      	nop
 8014054:	20000f48 	.word	0x20000f48

08014058 <_strtol_l.constprop.0>:
 8014058:	2b01      	cmp	r3, #1
 801405a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801405e:	d001      	beq.n	8014064 <_strtol_l.constprop.0+0xc>
 8014060:	2b24      	cmp	r3, #36	; 0x24
 8014062:	d906      	bls.n	8014072 <_strtol_l.constprop.0+0x1a>
 8014064:	f7fe f88c 	bl	8012180 <__errno>
 8014068:	2316      	movs	r3, #22
 801406a:	6003      	str	r3, [r0, #0]
 801406c:	2000      	movs	r0, #0
 801406e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014072:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014158 <_strtol_l.constprop.0+0x100>
 8014076:	460d      	mov	r5, r1
 8014078:	462e      	mov	r6, r5
 801407a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801407e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014082:	f017 0708 	ands.w	r7, r7, #8
 8014086:	d1f7      	bne.n	8014078 <_strtol_l.constprop.0+0x20>
 8014088:	2c2d      	cmp	r4, #45	; 0x2d
 801408a:	d132      	bne.n	80140f2 <_strtol_l.constprop.0+0x9a>
 801408c:	782c      	ldrb	r4, [r5, #0]
 801408e:	2701      	movs	r7, #1
 8014090:	1cb5      	adds	r5, r6, #2
 8014092:	2b00      	cmp	r3, #0
 8014094:	d05b      	beq.n	801414e <_strtol_l.constprop.0+0xf6>
 8014096:	2b10      	cmp	r3, #16
 8014098:	d109      	bne.n	80140ae <_strtol_l.constprop.0+0x56>
 801409a:	2c30      	cmp	r4, #48	; 0x30
 801409c:	d107      	bne.n	80140ae <_strtol_l.constprop.0+0x56>
 801409e:	782c      	ldrb	r4, [r5, #0]
 80140a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80140a4:	2c58      	cmp	r4, #88	; 0x58
 80140a6:	d14d      	bne.n	8014144 <_strtol_l.constprop.0+0xec>
 80140a8:	786c      	ldrb	r4, [r5, #1]
 80140aa:	2310      	movs	r3, #16
 80140ac:	3502      	adds	r5, #2
 80140ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80140b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80140b6:	f04f 0c00 	mov.w	ip, #0
 80140ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80140be:	4666      	mov	r6, ip
 80140c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80140c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80140c8:	f1be 0f09 	cmp.w	lr, #9
 80140cc:	d816      	bhi.n	80140fc <_strtol_l.constprop.0+0xa4>
 80140ce:	4674      	mov	r4, lr
 80140d0:	42a3      	cmp	r3, r4
 80140d2:	dd24      	ble.n	801411e <_strtol_l.constprop.0+0xc6>
 80140d4:	f1bc 0f00 	cmp.w	ip, #0
 80140d8:	db1e      	blt.n	8014118 <_strtol_l.constprop.0+0xc0>
 80140da:	45b1      	cmp	r9, r6
 80140dc:	d31c      	bcc.n	8014118 <_strtol_l.constprop.0+0xc0>
 80140de:	d101      	bne.n	80140e4 <_strtol_l.constprop.0+0x8c>
 80140e0:	45a2      	cmp	sl, r4
 80140e2:	db19      	blt.n	8014118 <_strtol_l.constprop.0+0xc0>
 80140e4:	fb06 4603 	mla	r6, r6, r3, r4
 80140e8:	f04f 0c01 	mov.w	ip, #1
 80140ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80140f0:	e7e8      	b.n	80140c4 <_strtol_l.constprop.0+0x6c>
 80140f2:	2c2b      	cmp	r4, #43	; 0x2b
 80140f4:	bf04      	itt	eq
 80140f6:	782c      	ldrbeq	r4, [r5, #0]
 80140f8:	1cb5      	addeq	r5, r6, #2
 80140fa:	e7ca      	b.n	8014092 <_strtol_l.constprop.0+0x3a>
 80140fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8014100:	f1be 0f19 	cmp.w	lr, #25
 8014104:	d801      	bhi.n	801410a <_strtol_l.constprop.0+0xb2>
 8014106:	3c37      	subs	r4, #55	; 0x37
 8014108:	e7e2      	b.n	80140d0 <_strtol_l.constprop.0+0x78>
 801410a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801410e:	f1be 0f19 	cmp.w	lr, #25
 8014112:	d804      	bhi.n	801411e <_strtol_l.constprop.0+0xc6>
 8014114:	3c57      	subs	r4, #87	; 0x57
 8014116:	e7db      	b.n	80140d0 <_strtol_l.constprop.0+0x78>
 8014118:	f04f 3cff 	mov.w	ip, #4294967295
 801411c:	e7e6      	b.n	80140ec <_strtol_l.constprop.0+0x94>
 801411e:	f1bc 0f00 	cmp.w	ip, #0
 8014122:	da05      	bge.n	8014130 <_strtol_l.constprop.0+0xd8>
 8014124:	2322      	movs	r3, #34	; 0x22
 8014126:	6003      	str	r3, [r0, #0]
 8014128:	4646      	mov	r6, r8
 801412a:	b942      	cbnz	r2, 801413e <_strtol_l.constprop.0+0xe6>
 801412c:	4630      	mov	r0, r6
 801412e:	e79e      	b.n	801406e <_strtol_l.constprop.0+0x16>
 8014130:	b107      	cbz	r7, 8014134 <_strtol_l.constprop.0+0xdc>
 8014132:	4276      	negs	r6, r6
 8014134:	2a00      	cmp	r2, #0
 8014136:	d0f9      	beq.n	801412c <_strtol_l.constprop.0+0xd4>
 8014138:	f1bc 0f00 	cmp.w	ip, #0
 801413c:	d000      	beq.n	8014140 <_strtol_l.constprop.0+0xe8>
 801413e:	1e69      	subs	r1, r5, #1
 8014140:	6011      	str	r1, [r2, #0]
 8014142:	e7f3      	b.n	801412c <_strtol_l.constprop.0+0xd4>
 8014144:	2430      	movs	r4, #48	; 0x30
 8014146:	2b00      	cmp	r3, #0
 8014148:	d1b1      	bne.n	80140ae <_strtol_l.constprop.0+0x56>
 801414a:	2308      	movs	r3, #8
 801414c:	e7af      	b.n	80140ae <_strtol_l.constprop.0+0x56>
 801414e:	2c30      	cmp	r4, #48	; 0x30
 8014150:	d0a5      	beq.n	801409e <_strtol_l.constprop.0+0x46>
 8014152:	230a      	movs	r3, #10
 8014154:	e7ab      	b.n	80140ae <_strtol_l.constprop.0+0x56>
 8014156:	bf00      	nop
 8014158:	08062a21 	.word	0x08062a21

0801415c <_strtol_r>:
 801415c:	f7ff bf7c 	b.w	8014058 <_strtol_l.constprop.0>

08014160 <__swbuf_r>:
 8014160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014162:	460e      	mov	r6, r1
 8014164:	4614      	mov	r4, r2
 8014166:	4605      	mov	r5, r0
 8014168:	b118      	cbz	r0, 8014172 <__swbuf_r+0x12>
 801416a:	6983      	ldr	r3, [r0, #24]
 801416c:	b90b      	cbnz	r3, 8014172 <__swbuf_r+0x12>
 801416e:	f001 f853 	bl	8015218 <__sinit>
 8014172:	4b21      	ldr	r3, [pc, #132]	; (80141f8 <__swbuf_r+0x98>)
 8014174:	429c      	cmp	r4, r3
 8014176:	d12b      	bne.n	80141d0 <__swbuf_r+0x70>
 8014178:	686c      	ldr	r4, [r5, #4]
 801417a:	69a3      	ldr	r3, [r4, #24]
 801417c:	60a3      	str	r3, [r4, #8]
 801417e:	89a3      	ldrh	r3, [r4, #12]
 8014180:	071a      	lsls	r2, r3, #28
 8014182:	d52f      	bpl.n	80141e4 <__swbuf_r+0x84>
 8014184:	6923      	ldr	r3, [r4, #16]
 8014186:	b36b      	cbz	r3, 80141e4 <__swbuf_r+0x84>
 8014188:	6923      	ldr	r3, [r4, #16]
 801418a:	6820      	ldr	r0, [r4, #0]
 801418c:	1ac0      	subs	r0, r0, r3
 801418e:	6963      	ldr	r3, [r4, #20]
 8014190:	b2f6      	uxtb	r6, r6
 8014192:	4283      	cmp	r3, r0
 8014194:	4637      	mov	r7, r6
 8014196:	dc04      	bgt.n	80141a2 <__swbuf_r+0x42>
 8014198:	4621      	mov	r1, r4
 801419a:	4628      	mov	r0, r5
 801419c:	f000 ffa8 	bl	80150f0 <_fflush_r>
 80141a0:	bb30      	cbnz	r0, 80141f0 <__swbuf_r+0x90>
 80141a2:	68a3      	ldr	r3, [r4, #8]
 80141a4:	3b01      	subs	r3, #1
 80141a6:	60a3      	str	r3, [r4, #8]
 80141a8:	6823      	ldr	r3, [r4, #0]
 80141aa:	1c5a      	adds	r2, r3, #1
 80141ac:	6022      	str	r2, [r4, #0]
 80141ae:	701e      	strb	r6, [r3, #0]
 80141b0:	6963      	ldr	r3, [r4, #20]
 80141b2:	3001      	adds	r0, #1
 80141b4:	4283      	cmp	r3, r0
 80141b6:	d004      	beq.n	80141c2 <__swbuf_r+0x62>
 80141b8:	89a3      	ldrh	r3, [r4, #12]
 80141ba:	07db      	lsls	r3, r3, #31
 80141bc:	d506      	bpl.n	80141cc <__swbuf_r+0x6c>
 80141be:	2e0a      	cmp	r6, #10
 80141c0:	d104      	bne.n	80141cc <__swbuf_r+0x6c>
 80141c2:	4621      	mov	r1, r4
 80141c4:	4628      	mov	r0, r5
 80141c6:	f000 ff93 	bl	80150f0 <_fflush_r>
 80141ca:	b988      	cbnz	r0, 80141f0 <__swbuf_r+0x90>
 80141cc:	4638      	mov	r0, r7
 80141ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141d0:	4b0a      	ldr	r3, [pc, #40]	; (80141fc <__swbuf_r+0x9c>)
 80141d2:	429c      	cmp	r4, r3
 80141d4:	d101      	bne.n	80141da <__swbuf_r+0x7a>
 80141d6:	68ac      	ldr	r4, [r5, #8]
 80141d8:	e7cf      	b.n	801417a <__swbuf_r+0x1a>
 80141da:	4b09      	ldr	r3, [pc, #36]	; (8014200 <__swbuf_r+0xa0>)
 80141dc:	429c      	cmp	r4, r3
 80141de:	bf08      	it	eq
 80141e0:	68ec      	ldreq	r4, [r5, #12]
 80141e2:	e7ca      	b.n	801417a <__swbuf_r+0x1a>
 80141e4:	4621      	mov	r1, r4
 80141e6:	4628      	mov	r0, r5
 80141e8:	f000 f80c 	bl	8014204 <__swsetup_r>
 80141ec:	2800      	cmp	r0, #0
 80141ee:	d0cb      	beq.n	8014188 <__swbuf_r+0x28>
 80141f0:	f04f 37ff 	mov.w	r7, #4294967295
 80141f4:	e7ea      	b.n	80141cc <__swbuf_r+0x6c>
 80141f6:	bf00      	nop
 80141f8:	08062bd4 	.word	0x08062bd4
 80141fc:	08062bf4 	.word	0x08062bf4
 8014200:	08062bb4 	.word	0x08062bb4

08014204 <__swsetup_r>:
 8014204:	4b32      	ldr	r3, [pc, #200]	; (80142d0 <__swsetup_r+0xcc>)
 8014206:	b570      	push	{r4, r5, r6, lr}
 8014208:	681d      	ldr	r5, [r3, #0]
 801420a:	4606      	mov	r6, r0
 801420c:	460c      	mov	r4, r1
 801420e:	b125      	cbz	r5, 801421a <__swsetup_r+0x16>
 8014210:	69ab      	ldr	r3, [r5, #24]
 8014212:	b913      	cbnz	r3, 801421a <__swsetup_r+0x16>
 8014214:	4628      	mov	r0, r5
 8014216:	f000 ffff 	bl	8015218 <__sinit>
 801421a:	4b2e      	ldr	r3, [pc, #184]	; (80142d4 <__swsetup_r+0xd0>)
 801421c:	429c      	cmp	r4, r3
 801421e:	d10f      	bne.n	8014240 <__swsetup_r+0x3c>
 8014220:	686c      	ldr	r4, [r5, #4]
 8014222:	89a3      	ldrh	r3, [r4, #12]
 8014224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014228:	0719      	lsls	r1, r3, #28
 801422a:	d42c      	bmi.n	8014286 <__swsetup_r+0x82>
 801422c:	06dd      	lsls	r5, r3, #27
 801422e:	d411      	bmi.n	8014254 <__swsetup_r+0x50>
 8014230:	2309      	movs	r3, #9
 8014232:	6033      	str	r3, [r6, #0]
 8014234:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014238:	81a3      	strh	r3, [r4, #12]
 801423a:	f04f 30ff 	mov.w	r0, #4294967295
 801423e:	e03e      	b.n	80142be <__swsetup_r+0xba>
 8014240:	4b25      	ldr	r3, [pc, #148]	; (80142d8 <__swsetup_r+0xd4>)
 8014242:	429c      	cmp	r4, r3
 8014244:	d101      	bne.n	801424a <__swsetup_r+0x46>
 8014246:	68ac      	ldr	r4, [r5, #8]
 8014248:	e7eb      	b.n	8014222 <__swsetup_r+0x1e>
 801424a:	4b24      	ldr	r3, [pc, #144]	; (80142dc <__swsetup_r+0xd8>)
 801424c:	429c      	cmp	r4, r3
 801424e:	bf08      	it	eq
 8014250:	68ec      	ldreq	r4, [r5, #12]
 8014252:	e7e6      	b.n	8014222 <__swsetup_r+0x1e>
 8014254:	0758      	lsls	r0, r3, #29
 8014256:	d512      	bpl.n	801427e <__swsetup_r+0x7a>
 8014258:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801425a:	b141      	cbz	r1, 801426e <__swsetup_r+0x6a>
 801425c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014260:	4299      	cmp	r1, r3
 8014262:	d002      	beq.n	801426a <__swsetup_r+0x66>
 8014264:	4630      	mov	r0, r6
 8014266:	f7fd ffe5 	bl	8012234 <_free_r>
 801426a:	2300      	movs	r3, #0
 801426c:	6363      	str	r3, [r4, #52]	; 0x34
 801426e:	89a3      	ldrh	r3, [r4, #12]
 8014270:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014274:	81a3      	strh	r3, [r4, #12]
 8014276:	2300      	movs	r3, #0
 8014278:	6063      	str	r3, [r4, #4]
 801427a:	6923      	ldr	r3, [r4, #16]
 801427c:	6023      	str	r3, [r4, #0]
 801427e:	89a3      	ldrh	r3, [r4, #12]
 8014280:	f043 0308 	orr.w	r3, r3, #8
 8014284:	81a3      	strh	r3, [r4, #12]
 8014286:	6923      	ldr	r3, [r4, #16]
 8014288:	b94b      	cbnz	r3, 801429e <__swsetup_r+0x9a>
 801428a:	89a3      	ldrh	r3, [r4, #12]
 801428c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014294:	d003      	beq.n	801429e <__swsetup_r+0x9a>
 8014296:	4621      	mov	r1, r4
 8014298:	4630      	mov	r0, r6
 801429a:	f001 fbf5 	bl	8015a88 <__smakebuf_r>
 801429e:	89a0      	ldrh	r0, [r4, #12]
 80142a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80142a4:	f010 0301 	ands.w	r3, r0, #1
 80142a8:	d00a      	beq.n	80142c0 <__swsetup_r+0xbc>
 80142aa:	2300      	movs	r3, #0
 80142ac:	60a3      	str	r3, [r4, #8]
 80142ae:	6963      	ldr	r3, [r4, #20]
 80142b0:	425b      	negs	r3, r3
 80142b2:	61a3      	str	r3, [r4, #24]
 80142b4:	6923      	ldr	r3, [r4, #16]
 80142b6:	b943      	cbnz	r3, 80142ca <__swsetup_r+0xc6>
 80142b8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80142bc:	d1ba      	bne.n	8014234 <__swsetup_r+0x30>
 80142be:	bd70      	pop	{r4, r5, r6, pc}
 80142c0:	0781      	lsls	r1, r0, #30
 80142c2:	bf58      	it	pl
 80142c4:	6963      	ldrpl	r3, [r4, #20]
 80142c6:	60a3      	str	r3, [r4, #8]
 80142c8:	e7f4      	b.n	80142b4 <__swsetup_r+0xb0>
 80142ca:	2000      	movs	r0, #0
 80142cc:	e7f7      	b.n	80142be <__swsetup_r+0xba>
 80142ce:	bf00      	nop
 80142d0:	20000ee0 	.word	0x20000ee0
 80142d4:	08062bd4 	.word	0x08062bd4
 80142d8:	08062bf4 	.word	0x08062bf4
 80142dc:	08062bb4 	.word	0x08062bb4

080142e0 <abort>:
 80142e0:	b508      	push	{r3, lr}
 80142e2:	2006      	movs	r0, #6
 80142e4:	f002 fadc 	bl	80168a0 <raise>
 80142e8:	2001      	movs	r0, #1
 80142ea:	f005 fdfb 	bl	8019ee4 <_exit>

080142ee <quorem>:
 80142ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142f2:	6903      	ldr	r3, [r0, #16]
 80142f4:	690c      	ldr	r4, [r1, #16]
 80142f6:	42a3      	cmp	r3, r4
 80142f8:	4607      	mov	r7, r0
 80142fa:	f2c0 8081 	blt.w	8014400 <quorem+0x112>
 80142fe:	3c01      	subs	r4, #1
 8014300:	f101 0814 	add.w	r8, r1, #20
 8014304:	f100 0514 	add.w	r5, r0, #20
 8014308:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801430c:	9301      	str	r3, [sp, #4]
 801430e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8014312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014316:	3301      	adds	r3, #1
 8014318:	429a      	cmp	r2, r3
 801431a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801431e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8014322:	fbb2 f6f3 	udiv	r6, r2, r3
 8014326:	d331      	bcc.n	801438c <quorem+0x9e>
 8014328:	f04f 0e00 	mov.w	lr, #0
 801432c:	4640      	mov	r0, r8
 801432e:	46ac      	mov	ip, r5
 8014330:	46f2      	mov	sl, lr
 8014332:	f850 2b04 	ldr.w	r2, [r0], #4
 8014336:	b293      	uxth	r3, r2
 8014338:	fb06 e303 	mla	r3, r6, r3, lr
 801433c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8014340:	b29b      	uxth	r3, r3
 8014342:	ebaa 0303 	sub.w	r3, sl, r3
 8014346:	f8dc a000 	ldr.w	sl, [ip]
 801434a:	0c12      	lsrs	r2, r2, #16
 801434c:	fa13 f38a 	uxtah	r3, r3, sl
 8014350:	fb06 e202 	mla	r2, r6, r2, lr
 8014354:	9300      	str	r3, [sp, #0]
 8014356:	9b00      	ldr	r3, [sp, #0]
 8014358:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801435c:	b292      	uxth	r2, r2
 801435e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8014362:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014366:	f8bd 3000 	ldrh.w	r3, [sp]
 801436a:	4581      	cmp	r9, r0
 801436c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014370:	f84c 3b04 	str.w	r3, [ip], #4
 8014374:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014378:	d2db      	bcs.n	8014332 <quorem+0x44>
 801437a:	f855 300b 	ldr.w	r3, [r5, fp]
 801437e:	b92b      	cbnz	r3, 801438c <quorem+0x9e>
 8014380:	9b01      	ldr	r3, [sp, #4]
 8014382:	3b04      	subs	r3, #4
 8014384:	429d      	cmp	r5, r3
 8014386:	461a      	mov	r2, r3
 8014388:	d32e      	bcc.n	80143e8 <quorem+0xfa>
 801438a:	613c      	str	r4, [r7, #16]
 801438c:	4638      	mov	r0, r7
 801438e:	f001 febf 	bl	8016110 <__mcmp>
 8014392:	2800      	cmp	r0, #0
 8014394:	db24      	blt.n	80143e0 <quorem+0xf2>
 8014396:	3601      	adds	r6, #1
 8014398:	4628      	mov	r0, r5
 801439a:	f04f 0c00 	mov.w	ip, #0
 801439e:	f858 2b04 	ldr.w	r2, [r8], #4
 80143a2:	f8d0 e000 	ldr.w	lr, [r0]
 80143a6:	b293      	uxth	r3, r2
 80143a8:	ebac 0303 	sub.w	r3, ip, r3
 80143ac:	0c12      	lsrs	r2, r2, #16
 80143ae:	fa13 f38e 	uxtah	r3, r3, lr
 80143b2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80143b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80143ba:	b29b      	uxth	r3, r3
 80143bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80143c0:	45c1      	cmp	r9, r8
 80143c2:	f840 3b04 	str.w	r3, [r0], #4
 80143c6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80143ca:	d2e8      	bcs.n	801439e <quorem+0xb0>
 80143cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80143d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80143d4:	b922      	cbnz	r2, 80143e0 <quorem+0xf2>
 80143d6:	3b04      	subs	r3, #4
 80143d8:	429d      	cmp	r5, r3
 80143da:	461a      	mov	r2, r3
 80143dc:	d30a      	bcc.n	80143f4 <quorem+0x106>
 80143de:	613c      	str	r4, [r7, #16]
 80143e0:	4630      	mov	r0, r6
 80143e2:	b003      	add	sp, #12
 80143e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143e8:	6812      	ldr	r2, [r2, #0]
 80143ea:	3b04      	subs	r3, #4
 80143ec:	2a00      	cmp	r2, #0
 80143ee:	d1cc      	bne.n	801438a <quorem+0x9c>
 80143f0:	3c01      	subs	r4, #1
 80143f2:	e7c7      	b.n	8014384 <quorem+0x96>
 80143f4:	6812      	ldr	r2, [r2, #0]
 80143f6:	3b04      	subs	r3, #4
 80143f8:	2a00      	cmp	r2, #0
 80143fa:	d1f0      	bne.n	80143de <quorem+0xf0>
 80143fc:	3c01      	subs	r4, #1
 80143fe:	e7eb      	b.n	80143d8 <quorem+0xea>
 8014400:	2000      	movs	r0, #0
 8014402:	e7ee      	b.n	80143e2 <quorem+0xf4>
 8014404:	0000      	movs	r0, r0
	...

08014408 <_dtoa_r>:
 8014408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801440c:	ed2d 8b04 	vpush	{d8-d9}
 8014410:	ec57 6b10 	vmov	r6, r7, d0
 8014414:	b093      	sub	sp, #76	; 0x4c
 8014416:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014418:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801441c:	9106      	str	r1, [sp, #24]
 801441e:	ee10 aa10 	vmov	sl, s0
 8014422:	4604      	mov	r4, r0
 8014424:	9209      	str	r2, [sp, #36]	; 0x24
 8014426:	930c      	str	r3, [sp, #48]	; 0x30
 8014428:	46bb      	mov	fp, r7
 801442a:	b975      	cbnz	r5, 801444a <_dtoa_r+0x42>
 801442c:	2010      	movs	r0, #16
 801442e:	f7fd fee3 	bl	80121f8 <malloc>
 8014432:	4602      	mov	r2, r0
 8014434:	6260      	str	r0, [r4, #36]	; 0x24
 8014436:	b920      	cbnz	r0, 8014442 <_dtoa_r+0x3a>
 8014438:	4ba7      	ldr	r3, [pc, #668]	; (80146d8 <_dtoa_r+0x2d0>)
 801443a:	21ea      	movs	r1, #234	; 0xea
 801443c:	48a7      	ldr	r0, [pc, #668]	; (80146dc <_dtoa_r+0x2d4>)
 801443e:	f7fd fe81 	bl	8012144 <__assert_func>
 8014442:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014446:	6005      	str	r5, [r0, #0]
 8014448:	60c5      	str	r5, [r0, #12]
 801444a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801444c:	6819      	ldr	r1, [r3, #0]
 801444e:	b151      	cbz	r1, 8014466 <_dtoa_r+0x5e>
 8014450:	685a      	ldr	r2, [r3, #4]
 8014452:	604a      	str	r2, [r1, #4]
 8014454:	2301      	movs	r3, #1
 8014456:	4093      	lsls	r3, r2
 8014458:	608b      	str	r3, [r1, #8]
 801445a:	4620      	mov	r0, r4
 801445c:	f001 fbcc 	bl	8015bf8 <_Bfree>
 8014460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014462:	2200      	movs	r2, #0
 8014464:	601a      	str	r2, [r3, #0]
 8014466:	1e3b      	subs	r3, r7, #0
 8014468:	bfaa      	itet	ge
 801446a:	2300      	movge	r3, #0
 801446c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014470:	f8c8 3000 	strge.w	r3, [r8]
 8014474:	4b9a      	ldr	r3, [pc, #616]	; (80146e0 <_dtoa_r+0x2d8>)
 8014476:	bfbc      	itt	lt
 8014478:	2201      	movlt	r2, #1
 801447a:	f8c8 2000 	strlt.w	r2, [r8]
 801447e:	ea33 030b 	bics.w	r3, r3, fp
 8014482:	d11b      	bne.n	80144bc <_dtoa_r+0xb4>
 8014484:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014486:	f242 730f 	movw	r3, #9999	; 0x270f
 801448a:	6013      	str	r3, [r2, #0]
 801448c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014490:	4333      	orrs	r3, r6
 8014492:	f000 8592 	beq.w	8014fba <_dtoa_r+0xbb2>
 8014496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014498:	b963      	cbnz	r3, 80144b4 <_dtoa_r+0xac>
 801449a:	4b92      	ldr	r3, [pc, #584]	; (80146e4 <_dtoa_r+0x2dc>)
 801449c:	e022      	b.n	80144e4 <_dtoa_r+0xdc>
 801449e:	4b92      	ldr	r3, [pc, #584]	; (80146e8 <_dtoa_r+0x2e0>)
 80144a0:	9301      	str	r3, [sp, #4]
 80144a2:	3308      	adds	r3, #8
 80144a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80144a6:	6013      	str	r3, [r2, #0]
 80144a8:	9801      	ldr	r0, [sp, #4]
 80144aa:	b013      	add	sp, #76	; 0x4c
 80144ac:	ecbd 8b04 	vpop	{d8-d9}
 80144b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144b4:	4b8b      	ldr	r3, [pc, #556]	; (80146e4 <_dtoa_r+0x2dc>)
 80144b6:	9301      	str	r3, [sp, #4]
 80144b8:	3303      	adds	r3, #3
 80144ba:	e7f3      	b.n	80144a4 <_dtoa_r+0x9c>
 80144bc:	2200      	movs	r2, #0
 80144be:	2300      	movs	r3, #0
 80144c0:	4650      	mov	r0, sl
 80144c2:	4659      	mov	r1, fp
 80144c4:	f7ec fb10 	bl	8000ae8 <__aeabi_dcmpeq>
 80144c8:	ec4b ab19 	vmov	d9, sl, fp
 80144cc:	4680      	mov	r8, r0
 80144ce:	b158      	cbz	r0, 80144e8 <_dtoa_r+0xe0>
 80144d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80144d2:	2301      	movs	r3, #1
 80144d4:	6013      	str	r3, [r2, #0]
 80144d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144d8:	2b00      	cmp	r3, #0
 80144da:	f000 856b 	beq.w	8014fb4 <_dtoa_r+0xbac>
 80144de:	4883      	ldr	r0, [pc, #524]	; (80146ec <_dtoa_r+0x2e4>)
 80144e0:	6018      	str	r0, [r3, #0]
 80144e2:	1e43      	subs	r3, r0, #1
 80144e4:	9301      	str	r3, [sp, #4]
 80144e6:	e7df      	b.n	80144a8 <_dtoa_r+0xa0>
 80144e8:	ec4b ab10 	vmov	d0, sl, fp
 80144ec:	aa10      	add	r2, sp, #64	; 0x40
 80144ee:	a911      	add	r1, sp, #68	; 0x44
 80144f0:	4620      	mov	r0, r4
 80144f2:	f001 ff2f 	bl	8016354 <__d2b>
 80144f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80144fa:	ee08 0a10 	vmov	s16, r0
 80144fe:	2d00      	cmp	r5, #0
 8014500:	f000 8084 	beq.w	801460c <_dtoa_r+0x204>
 8014504:	ee19 3a90 	vmov	r3, s19
 8014508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801450c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014510:	4656      	mov	r6, sl
 8014512:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8014516:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801451a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801451e:	4b74      	ldr	r3, [pc, #464]	; (80146f0 <_dtoa_r+0x2e8>)
 8014520:	2200      	movs	r2, #0
 8014522:	4630      	mov	r0, r6
 8014524:	4639      	mov	r1, r7
 8014526:	f7eb febf 	bl	80002a8 <__aeabi_dsub>
 801452a:	a365      	add	r3, pc, #404	; (adr r3, 80146c0 <_dtoa_r+0x2b8>)
 801452c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014530:	f7ec f872 	bl	8000618 <__aeabi_dmul>
 8014534:	a364      	add	r3, pc, #400	; (adr r3, 80146c8 <_dtoa_r+0x2c0>)
 8014536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801453a:	f7eb feb7 	bl	80002ac <__adddf3>
 801453e:	4606      	mov	r6, r0
 8014540:	4628      	mov	r0, r5
 8014542:	460f      	mov	r7, r1
 8014544:	f7eb fffe 	bl	8000544 <__aeabi_i2d>
 8014548:	a361      	add	r3, pc, #388	; (adr r3, 80146d0 <_dtoa_r+0x2c8>)
 801454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801454e:	f7ec f863 	bl	8000618 <__aeabi_dmul>
 8014552:	4602      	mov	r2, r0
 8014554:	460b      	mov	r3, r1
 8014556:	4630      	mov	r0, r6
 8014558:	4639      	mov	r1, r7
 801455a:	f7eb fea7 	bl	80002ac <__adddf3>
 801455e:	4606      	mov	r6, r0
 8014560:	460f      	mov	r7, r1
 8014562:	f7ec fb09 	bl	8000b78 <__aeabi_d2iz>
 8014566:	2200      	movs	r2, #0
 8014568:	9000      	str	r0, [sp, #0]
 801456a:	2300      	movs	r3, #0
 801456c:	4630      	mov	r0, r6
 801456e:	4639      	mov	r1, r7
 8014570:	f7ec fac4 	bl	8000afc <__aeabi_dcmplt>
 8014574:	b150      	cbz	r0, 801458c <_dtoa_r+0x184>
 8014576:	9800      	ldr	r0, [sp, #0]
 8014578:	f7eb ffe4 	bl	8000544 <__aeabi_i2d>
 801457c:	4632      	mov	r2, r6
 801457e:	463b      	mov	r3, r7
 8014580:	f7ec fab2 	bl	8000ae8 <__aeabi_dcmpeq>
 8014584:	b910      	cbnz	r0, 801458c <_dtoa_r+0x184>
 8014586:	9b00      	ldr	r3, [sp, #0]
 8014588:	3b01      	subs	r3, #1
 801458a:	9300      	str	r3, [sp, #0]
 801458c:	9b00      	ldr	r3, [sp, #0]
 801458e:	2b16      	cmp	r3, #22
 8014590:	d85a      	bhi.n	8014648 <_dtoa_r+0x240>
 8014592:	9a00      	ldr	r2, [sp, #0]
 8014594:	4b57      	ldr	r3, [pc, #348]	; (80146f4 <_dtoa_r+0x2ec>)
 8014596:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801459a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801459e:	ec51 0b19 	vmov	r0, r1, d9
 80145a2:	f7ec faab 	bl	8000afc <__aeabi_dcmplt>
 80145a6:	2800      	cmp	r0, #0
 80145a8:	d050      	beq.n	801464c <_dtoa_r+0x244>
 80145aa:	9b00      	ldr	r3, [sp, #0]
 80145ac:	3b01      	subs	r3, #1
 80145ae:	9300      	str	r3, [sp, #0]
 80145b0:	2300      	movs	r3, #0
 80145b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80145b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80145b6:	1b5d      	subs	r5, r3, r5
 80145b8:	1e6b      	subs	r3, r5, #1
 80145ba:	9305      	str	r3, [sp, #20]
 80145bc:	bf45      	ittet	mi
 80145be:	f1c5 0301 	rsbmi	r3, r5, #1
 80145c2:	9304      	strmi	r3, [sp, #16]
 80145c4:	2300      	movpl	r3, #0
 80145c6:	2300      	movmi	r3, #0
 80145c8:	bf4c      	ite	mi
 80145ca:	9305      	strmi	r3, [sp, #20]
 80145cc:	9304      	strpl	r3, [sp, #16]
 80145ce:	9b00      	ldr	r3, [sp, #0]
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	db3d      	blt.n	8014650 <_dtoa_r+0x248>
 80145d4:	9b05      	ldr	r3, [sp, #20]
 80145d6:	9a00      	ldr	r2, [sp, #0]
 80145d8:	920a      	str	r2, [sp, #40]	; 0x28
 80145da:	4413      	add	r3, r2
 80145dc:	9305      	str	r3, [sp, #20]
 80145de:	2300      	movs	r3, #0
 80145e0:	9307      	str	r3, [sp, #28]
 80145e2:	9b06      	ldr	r3, [sp, #24]
 80145e4:	2b09      	cmp	r3, #9
 80145e6:	f200 8089 	bhi.w	80146fc <_dtoa_r+0x2f4>
 80145ea:	2b05      	cmp	r3, #5
 80145ec:	bfc4      	itt	gt
 80145ee:	3b04      	subgt	r3, #4
 80145f0:	9306      	strgt	r3, [sp, #24]
 80145f2:	9b06      	ldr	r3, [sp, #24]
 80145f4:	f1a3 0302 	sub.w	r3, r3, #2
 80145f8:	bfcc      	ite	gt
 80145fa:	2500      	movgt	r5, #0
 80145fc:	2501      	movle	r5, #1
 80145fe:	2b03      	cmp	r3, #3
 8014600:	f200 8087 	bhi.w	8014712 <_dtoa_r+0x30a>
 8014604:	e8df f003 	tbb	[pc, r3]
 8014608:	59383a2d 	.word	0x59383a2d
 801460c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014610:	441d      	add	r5, r3
 8014612:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8014616:	2b20      	cmp	r3, #32
 8014618:	bfc1      	itttt	gt
 801461a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801461e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8014622:	fa0b f303 	lslgt.w	r3, fp, r3
 8014626:	fa26 f000 	lsrgt.w	r0, r6, r0
 801462a:	bfda      	itte	le
 801462c:	f1c3 0320 	rsble	r3, r3, #32
 8014630:	fa06 f003 	lslle.w	r0, r6, r3
 8014634:	4318      	orrgt	r0, r3
 8014636:	f7eb ff75 	bl	8000524 <__aeabi_ui2d>
 801463a:	2301      	movs	r3, #1
 801463c:	4606      	mov	r6, r0
 801463e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8014642:	3d01      	subs	r5, #1
 8014644:	930e      	str	r3, [sp, #56]	; 0x38
 8014646:	e76a      	b.n	801451e <_dtoa_r+0x116>
 8014648:	2301      	movs	r3, #1
 801464a:	e7b2      	b.n	80145b2 <_dtoa_r+0x1aa>
 801464c:	900b      	str	r0, [sp, #44]	; 0x2c
 801464e:	e7b1      	b.n	80145b4 <_dtoa_r+0x1ac>
 8014650:	9b04      	ldr	r3, [sp, #16]
 8014652:	9a00      	ldr	r2, [sp, #0]
 8014654:	1a9b      	subs	r3, r3, r2
 8014656:	9304      	str	r3, [sp, #16]
 8014658:	4253      	negs	r3, r2
 801465a:	9307      	str	r3, [sp, #28]
 801465c:	2300      	movs	r3, #0
 801465e:	930a      	str	r3, [sp, #40]	; 0x28
 8014660:	e7bf      	b.n	80145e2 <_dtoa_r+0x1da>
 8014662:	2300      	movs	r3, #0
 8014664:	9308      	str	r3, [sp, #32]
 8014666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014668:	2b00      	cmp	r3, #0
 801466a:	dc55      	bgt.n	8014718 <_dtoa_r+0x310>
 801466c:	2301      	movs	r3, #1
 801466e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014672:	461a      	mov	r2, r3
 8014674:	9209      	str	r2, [sp, #36]	; 0x24
 8014676:	e00c      	b.n	8014692 <_dtoa_r+0x28a>
 8014678:	2301      	movs	r3, #1
 801467a:	e7f3      	b.n	8014664 <_dtoa_r+0x25c>
 801467c:	2300      	movs	r3, #0
 801467e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014680:	9308      	str	r3, [sp, #32]
 8014682:	9b00      	ldr	r3, [sp, #0]
 8014684:	4413      	add	r3, r2
 8014686:	9302      	str	r3, [sp, #8]
 8014688:	3301      	adds	r3, #1
 801468a:	2b01      	cmp	r3, #1
 801468c:	9303      	str	r3, [sp, #12]
 801468e:	bfb8      	it	lt
 8014690:	2301      	movlt	r3, #1
 8014692:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8014694:	2200      	movs	r2, #0
 8014696:	6042      	str	r2, [r0, #4]
 8014698:	2204      	movs	r2, #4
 801469a:	f102 0614 	add.w	r6, r2, #20
 801469e:	429e      	cmp	r6, r3
 80146a0:	6841      	ldr	r1, [r0, #4]
 80146a2:	d93d      	bls.n	8014720 <_dtoa_r+0x318>
 80146a4:	4620      	mov	r0, r4
 80146a6:	f001 fa67 	bl	8015b78 <_Balloc>
 80146aa:	9001      	str	r0, [sp, #4]
 80146ac:	2800      	cmp	r0, #0
 80146ae:	d13b      	bne.n	8014728 <_dtoa_r+0x320>
 80146b0:	4b11      	ldr	r3, [pc, #68]	; (80146f8 <_dtoa_r+0x2f0>)
 80146b2:	4602      	mov	r2, r0
 80146b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80146b8:	e6c0      	b.n	801443c <_dtoa_r+0x34>
 80146ba:	2301      	movs	r3, #1
 80146bc:	e7df      	b.n	801467e <_dtoa_r+0x276>
 80146be:	bf00      	nop
 80146c0:	636f4361 	.word	0x636f4361
 80146c4:	3fd287a7 	.word	0x3fd287a7
 80146c8:	8b60c8b3 	.word	0x8b60c8b3
 80146cc:	3fc68a28 	.word	0x3fc68a28
 80146d0:	509f79fb 	.word	0x509f79fb
 80146d4:	3fd34413 	.word	0x3fd34413
 80146d8:	08062b2e 	.word	0x08062b2e
 80146dc:	08062b45 	.word	0x08062b45
 80146e0:	7ff00000 	.word	0x7ff00000
 80146e4:	08062b2a 	.word	0x08062b2a
 80146e8:	08062b21 	.word	0x08062b21
 80146ec:	080629a6 	.word	0x080629a6
 80146f0:	3ff80000 	.word	0x3ff80000
 80146f4:	08062d18 	.word	0x08062d18
 80146f8:	08062ba0 	.word	0x08062ba0
 80146fc:	2501      	movs	r5, #1
 80146fe:	2300      	movs	r3, #0
 8014700:	9306      	str	r3, [sp, #24]
 8014702:	9508      	str	r5, [sp, #32]
 8014704:	f04f 33ff 	mov.w	r3, #4294967295
 8014708:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801470c:	2200      	movs	r2, #0
 801470e:	2312      	movs	r3, #18
 8014710:	e7b0      	b.n	8014674 <_dtoa_r+0x26c>
 8014712:	2301      	movs	r3, #1
 8014714:	9308      	str	r3, [sp, #32]
 8014716:	e7f5      	b.n	8014704 <_dtoa_r+0x2fc>
 8014718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801471a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801471e:	e7b8      	b.n	8014692 <_dtoa_r+0x28a>
 8014720:	3101      	adds	r1, #1
 8014722:	6041      	str	r1, [r0, #4]
 8014724:	0052      	lsls	r2, r2, #1
 8014726:	e7b8      	b.n	801469a <_dtoa_r+0x292>
 8014728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801472a:	9a01      	ldr	r2, [sp, #4]
 801472c:	601a      	str	r2, [r3, #0]
 801472e:	9b03      	ldr	r3, [sp, #12]
 8014730:	2b0e      	cmp	r3, #14
 8014732:	f200 809d 	bhi.w	8014870 <_dtoa_r+0x468>
 8014736:	2d00      	cmp	r5, #0
 8014738:	f000 809a 	beq.w	8014870 <_dtoa_r+0x468>
 801473c:	9b00      	ldr	r3, [sp, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	dd32      	ble.n	80147a8 <_dtoa_r+0x3a0>
 8014742:	4ab7      	ldr	r2, [pc, #732]	; (8014a20 <_dtoa_r+0x618>)
 8014744:	f003 030f 	and.w	r3, r3, #15
 8014748:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801474c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014750:	9b00      	ldr	r3, [sp, #0]
 8014752:	05d8      	lsls	r0, r3, #23
 8014754:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014758:	d516      	bpl.n	8014788 <_dtoa_r+0x380>
 801475a:	4bb2      	ldr	r3, [pc, #712]	; (8014a24 <_dtoa_r+0x61c>)
 801475c:	ec51 0b19 	vmov	r0, r1, d9
 8014760:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014764:	f7ec f882 	bl	800086c <__aeabi_ddiv>
 8014768:	f007 070f 	and.w	r7, r7, #15
 801476c:	4682      	mov	sl, r0
 801476e:	468b      	mov	fp, r1
 8014770:	2503      	movs	r5, #3
 8014772:	4eac      	ldr	r6, [pc, #688]	; (8014a24 <_dtoa_r+0x61c>)
 8014774:	b957      	cbnz	r7, 801478c <_dtoa_r+0x384>
 8014776:	4642      	mov	r2, r8
 8014778:	464b      	mov	r3, r9
 801477a:	4650      	mov	r0, sl
 801477c:	4659      	mov	r1, fp
 801477e:	f7ec f875 	bl	800086c <__aeabi_ddiv>
 8014782:	4682      	mov	sl, r0
 8014784:	468b      	mov	fp, r1
 8014786:	e028      	b.n	80147da <_dtoa_r+0x3d2>
 8014788:	2502      	movs	r5, #2
 801478a:	e7f2      	b.n	8014772 <_dtoa_r+0x36a>
 801478c:	07f9      	lsls	r1, r7, #31
 801478e:	d508      	bpl.n	80147a2 <_dtoa_r+0x39a>
 8014790:	4640      	mov	r0, r8
 8014792:	4649      	mov	r1, r9
 8014794:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014798:	f7eb ff3e 	bl	8000618 <__aeabi_dmul>
 801479c:	3501      	adds	r5, #1
 801479e:	4680      	mov	r8, r0
 80147a0:	4689      	mov	r9, r1
 80147a2:	107f      	asrs	r7, r7, #1
 80147a4:	3608      	adds	r6, #8
 80147a6:	e7e5      	b.n	8014774 <_dtoa_r+0x36c>
 80147a8:	f000 809b 	beq.w	80148e2 <_dtoa_r+0x4da>
 80147ac:	9b00      	ldr	r3, [sp, #0]
 80147ae:	4f9d      	ldr	r7, [pc, #628]	; (8014a24 <_dtoa_r+0x61c>)
 80147b0:	425e      	negs	r6, r3
 80147b2:	4b9b      	ldr	r3, [pc, #620]	; (8014a20 <_dtoa_r+0x618>)
 80147b4:	f006 020f 	and.w	r2, r6, #15
 80147b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80147bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147c0:	ec51 0b19 	vmov	r0, r1, d9
 80147c4:	f7eb ff28 	bl	8000618 <__aeabi_dmul>
 80147c8:	1136      	asrs	r6, r6, #4
 80147ca:	4682      	mov	sl, r0
 80147cc:	468b      	mov	fp, r1
 80147ce:	2300      	movs	r3, #0
 80147d0:	2502      	movs	r5, #2
 80147d2:	2e00      	cmp	r6, #0
 80147d4:	d17a      	bne.n	80148cc <_dtoa_r+0x4c4>
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d1d3      	bne.n	8014782 <_dtoa_r+0x37a>
 80147da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80147dc:	2b00      	cmp	r3, #0
 80147de:	f000 8082 	beq.w	80148e6 <_dtoa_r+0x4de>
 80147e2:	4b91      	ldr	r3, [pc, #580]	; (8014a28 <_dtoa_r+0x620>)
 80147e4:	2200      	movs	r2, #0
 80147e6:	4650      	mov	r0, sl
 80147e8:	4659      	mov	r1, fp
 80147ea:	f7ec f987 	bl	8000afc <__aeabi_dcmplt>
 80147ee:	2800      	cmp	r0, #0
 80147f0:	d079      	beq.n	80148e6 <_dtoa_r+0x4de>
 80147f2:	9b03      	ldr	r3, [sp, #12]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d076      	beq.n	80148e6 <_dtoa_r+0x4de>
 80147f8:	9b02      	ldr	r3, [sp, #8]
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	dd36      	ble.n	801486c <_dtoa_r+0x464>
 80147fe:	9b00      	ldr	r3, [sp, #0]
 8014800:	4650      	mov	r0, sl
 8014802:	4659      	mov	r1, fp
 8014804:	1e5f      	subs	r7, r3, #1
 8014806:	2200      	movs	r2, #0
 8014808:	4b88      	ldr	r3, [pc, #544]	; (8014a2c <_dtoa_r+0x624>)
 801480a:	f7eb ff05 	bl	8000618 <__aeabi_dmul>
 801480e:	9e02      	ldr	r6, [sp, #8]
 8014810:	4682      	mov	sl, r0
 8014812:	468b      	mov	fp, r1
 8014814:	3501      	adds	r5, #1
 8014816:	4628      	mov	r0, r5
 8014818:	f7eb fe94 	bl	8000544 <__aeabi_i2d>
 801481c:	4652      	mov	r2, sl
 801481e:	465b      	mov	r3, fp
 8014820:	f7eb fefa 	bl	8000618 <__aeabi_dmul>
 8014824:	4b82      	ldr	r3, [pc, #520]	; (8014a30 <_dtoa_r+0x628>)
 8014826:	2200      	movs	r2, #0
 8014828:	f7eb fd40 	bl	80002ac <__adddf3>
 801482c:	46d0      	mov	r8, sl
 801482e:	46d9      	mov	r9, fp
 8014830:	4682      	mov	sl, r0
 8014832:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8014836:	2e00      	cmp	r6, #0
 8014838:	d158      	bne.n	80148ec <_dtoa_r+0x4e4>
 801483a:	4b7e      	ldr	r3, [pc, #504]	; (8014a34 <_dtoa_r+0x62c>)
 801483c:	2200      	movs	r2, #0
 801483e:	4640      	mov	r0, r8
 8014840:	4649      	mov	r1, r9
 8014842:	f7eb fd31 	bl	80002a8 <__aeabi_dsub>
 8014846:	4652      	mov	r2, sl
 8014848:	465b      	mov	r3, fp
 801484a:	4680      	mov	r8, r0
 801484c:	4689      	mov	r9, r1
 801484e:	f7ec f973 	bl	8000b38 <__aeabi_dcmpgt>
 8014852:	2800      	cmp	r0, #0
 8014854:	f040 8295 	bne.w	8014d82 <_dtoa_r+0x97a>
 8014858:	4652      	mov	r2, sl
 801485a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801485e:	4640      	mov	r0, r8
 8014860:	4649      	mov	r1, r9
 8014862:	f7ec f94b 	bl	8000afc <__aeabi_dcmplt>
 8014866:	2800      	cmp	r0, #0
 8014868:	f040 8289 	bne.w	8014d7e <_dtoa_r+0x976>
 801486c:	ec5b ab19 	vmov	sl, fp, d9
 8014870:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014872:	2b00      	cmp	r3, #0
 8014874:	f2c0 8148 	blt.w	8014b08 <_dtoa_r+0x700>
 8014878:	9a00      	ldr	r2, [sp, #0]
 801487a:	2a0e      	cmp	r2, #14
 801487c:	f300 8144 	bgt.w	8014b08 <_dtoa_r+0x700>
 8014880:	4b67      	ldr	r3, [pc, #412]	; (8014a20 <_dtoa_r+0x618>)
 8014882:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014886:	e9d3 8900 	ldrd	r8, r9, [r3]
 801488a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801488c:	2b00      	cmp	r3, #0
 801488e:	f280 80d5 	bge.w	8014a3c <_dtoa_r+0x634>
 8014892:	9b03      	ldr	r3, [sp, #12]
 8014894:	2b00      	cmp	r3, #0
 8014896:	f300 80d1 	bgt.w	8014a3c <_dtoa_r+0x634>
 801489a:	f040 826f 	bne.w	8014d7c <_dtoa_r+0x974>
 801489e:	4b65      	ldr	r3, [pc, #404]	; (8014a34 <_dtoa_r+0x62c>)
 80148a0:	2200      	movs	r2, #0
 80148a2:	4640      	mov	r0, r8
 80148a4:	4649      	mov	r1, r9
 80148a6:	f7eb feb7 	bl	8000618 <__aeabi_dmul>
 80148aa:	4652      	mov	r2, sl
 80148ac:	465b      	mov	r3, fp
 80148ae:	f7ec f939 	bl	8000b24 <__aeabi_dcmpge>
 80148b2:	9e03      	ldr	r6, [sp, #12]
 80148b4:	4637      	mov	r7, r6
 80148b6:	2800      	cmp	r0, #0
 80148b8:	f040 8245 	bne.w	8014d46 <_dtoa_r+0x93e>
 80148bc:	9d01      	ldr	r5, [sp, #4]
 80148be:	2331      	movs	r3, #49	; 0x31
 80148c0:	f805 3b01 	strb.w	r3, [r5], #1
 80148c4:	9b00      	ldr	r3, [sp, #0]
 80148c6:	3301      	adds	r3, #1
 80148c8:	9300      	str	r3, [sp, #0]
 80148ca:	e240      	b.n	8014d4e <_dtoa_r+0x946>
 80148cc:	07f2      	lsls	r2, r6, #31
 80148ce:	d505      	bpl.n	80148dc <_dtoa_r+0x4d4>
 80148d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80148d4:	f7eb fea0 	bl	8000618 <__aeabi_dmul>
 80148d8:	3501      	adds	r5, #1
 80148da:	2301      	movs	r3, #1
 80148dc:	1076      	asrs	r6, r6, #1
 80148de:	3708      	adds	r7, #8
 80148e0:	e777      	b.n	80147d2 <_dtoa_r+0x3ca>
 80148e2:	2502      	movs	r5, #2
 80148e4:	e779      	b.n	80147da <_dtoa_r+0x3d2>
 80148e6:	9f00      	ldr	r7, [sp, #0]
 80148e8:	9e03      	ldr	r6, [sp, #12]
 80148ea:	e794      	b.n	8014816 <_dtoa_r+0x40e>
 80148ec:	9901      	ldr	r1, [sp, #4]
 80148ee:	4b4c      	ldr	r3, [pc, #304]	; (8014a20 <_dtoa_r+0x618>)
 80148f0:	4431      	add	r1, r6
 80148f2:	910d      	str	r1, [sp, #52]	; 0x34
 80148f4:	9908      	ldr	r1, [sp, #32]
 80148f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80148fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80148fe:	2900      	cmp	r1, #0
 8014900:	d043      	beq.n	801498a <_dtoa_r+0x582>
 8014902:	494d      	ldr	r1, [pc, #308]	; (8014a38 <_dtoa_r+0x630>)
 8014904:	2000      	movs	r0, #0
 8014906:	f7eb ffb1 	bl	800086c <__aeabi_ddiv>
 801490a:	4652      	mov	r2, sl
 801490c:	465b      	mov	r3, fp
 801490e:	f7eb fccb 	bl	80002a8 <__aeabi_dsub>
 8014912:	9d01      	ldr	r5, [sp, #4]
 8014914:	4682      	mov	sl, r0
 8014916:	468b      	mov	fp, r1
 8014918:	4649      	mov	r1, r9
 801491a:	4640      	mov	r0, r8
 801491c:	f7ec f92c 	bl	8000b78 <__aeabi_d2iz>
 8014920:	4606      	mov	r6, r0
 8014922:	f7eb fe0f 	bl	8000544 <__aeabi_i2d>
 8014926:	4602      	mov	r2, r0
 8014928:	460b      	mov	r3, r1
 801492a:	4640      	mov	r0, r8
 801492c:	4649      	mov	r1, r9
 801492e:	f7eb fcbb 	bl	80002a8 <__aeabi_dsub>
 8014932:	3630      	adds	r6, #48	; 0x30
 8014934:	f805 6b01 	strb.w	r6, [r5], #1
 8014938:	4652      	mov	r2, sl
 801493a:	465b      	mov	r3, fp
 801493c:	4680      	mov	r8, r0
 801493e:	4689      	mov	r9, r1
 8014940:	f7ec f8dc 	bl	8000afc <__aeabi_dcmplt>
 8014944:	2800      	cmp	r0, #0
 8014946:	d163      	bne.n	8014a10 <_dtoa_r+0x608>
 8014948:	4642      	mov	r2, r8
 801494a:	464b      	mov	r3, r9
 801494c:	4936      	ldr	r1, [pc, #216]	; (8014a28 <_dtoa_r+0x620>)
 801494e:	2000      	movs	r0, #0
 8014950:	f7eb fcaa 	bl	80002a8 <__aeabi_dsub>
 8014954:	4652      	mov	r2, sl
 8014956:	465b      	mov	r3, fp
 8014958:	f7ec f8d0 	bl	8000afc <__aeabi_dcmplt>
 801495c:	2800      	cmp	r0, #0
 801495e:	f040 80b5 	bne.w	8014acc <_dtoa_r+0x6c4>
 8014962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014964:	429d      	cmp	r5, r3
 8014966:	d081      	beq.n	801486c <_dtoa_r+0x464>
 8014968:	4b30      	ldr	r3, [pc, #192]	; (8014a2c <_dtoa_r+0x624>)
 801496a:	2200      	movs	r2, #0
 801496c:	4650      	mov	r0, sl
 801496e:	4659      	mov	r1, fp
 8014970:	f7eb fe52 	bl	8000618 <__aeabi_dmul>
 8014974:	4b2d      	ldr	r3, [pc, #180]	; (8014a2c <_dtoa_r+0x624>)
 8014976:	4682      	mov	sl, r0
 8014978:	468b      	mov	fp, r1
 801497a:	4640      	mov	r0, r8
 801497c:	4649      	mov	r1, r9
 801497e:	2200      	movs	r2, #0
 8014980:	f7eb fe4a 	bl	8000618 <__aeabi_dmul>
 8014984:	4680      	mov	r8, r0
 8014986:	4689      	mov	r9, r1
 8014988:	e7c6      	b.n	8014918 <_dtoa_r+0x510>
 801498a:	4650      	mov	r0, sl
 801498c:	4659      	mov	r1, fp
 801498e:	f7eb fe43 	bl	8000618 <__aeabi_dmul>
 8014992:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014994:	9d01      	ldr	r5, [sp, #4]
 8014996:	930f      	str	r3, [sp, #60]	; 0x3c
 8014998:	4682      	mov	sl, r0
 801499a:	468b      	mov	fp, r1
 801499c:	4649      	mov	r1, r9
 801499e:	4640      	mov	r0, r8
 80149a0:	f7ec f8ea 	bl	8000b78 <__aeabi_d2iz>
 80149a4:	4606      	mov	r6, r0
 80149a6:	f7eb fdcd 	bl	8000544 <__aeabi_i2d>
 80149aa:	3630      	adds	r6, #48	; 0x30
 80149ac:	4602      	mov	r2, r0
 80149ae:	460b      	mov	r3, r1
 80149b0:	4640      	mov	r0, r8
 80149b2:	4649      	mov	r1, r9
 80149b4:	f7eb fc78 	bl	80002a8 <__aeabi_dsub>
 80149b8:	f805 6b01 	strb.w	r6, [r5], #1
 80149bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149be:	429d      	cmp	r5, r3
 80149c0:	4680      	mov	r8, r0
 80149c2:	4689      	mov	r9, r1
 80149c4:	f04f 0200 	mov.w	r2, #0
 80149c8:	d124      	bne.n	8014a14 <_dtoa_r+0x60c>
 80149ca:	4b1b      	ldr	r3, [pc, #108]	; (8014a38 <_dtoa_r+0x630>)
 80149cc:	4650      	mov	r0, sl
 80149ce:	4659      	mov	r1, fp
 80149d0:	f7eb fc6c 	bl	80002ac <__adddf3>
 80149d4:	4602      	mov	r2, r0
 80149d6:	460b      	mov	r3, r1
 80149d8:	4640      	mov	r0, r8
 80149da:	4649      	mov	r1, r9
 80149dc:	f7ec f8ac 	bl	8000b38 <__aeabi_dcmpgt>
 80149e0:	2800      	cmp	r0, #0
 80149e2:	d173      	bne.n	8014acc <_dtoa_r+0x6c4>
 80149e4:	4652      	mov	r2, sl
 80149e6:	465b      	mov	r3, fp
 80149e8:	4913      	ldr	r1, [pc, #76]	; (8014a38 <_dtoa_r+0x630>)
 80149ea:	2000      	movs	r0, #0
 80149ec:	f7eb fc5c 	bl	80002a8 <__aeabi_dsub>
 80149f0:	4602      	mov	r2, r0
 80149f2:	460b      	mov	r3, r1
 80149f4:	4640      	mov	r0, r8
 80149f6:	4649      	mov	r1, r9
 80149f8:	f7ec f880 	bl	8000afc <__aeabi_dcmplt>
 80149fc:	2800      	cmp	r0, #0
 80149fe:	f43f af35 	beq.w	801486c <_dtoa_r+0x464>
 8014a02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014a04:	1e6b      	subs	r3, r5, #1
 8014a06:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014a0c:	2b30      	cmp	r3, #48	; 0x30
 8014a0e:	d0f8      	beq.n	8014a02 <_dtoa_r+0x5fa>
 8014a10:	9700      	str	r7, [sp, #0]
 8014a12:	e049      	b.n	8014aa8 <_dtoa_r+0x6a0>
 8014a14:	4b05      	ldr	r3, [pc, #20]	; (8014a2c <_dtoa_r+0x624>)
 8014a16:	f7eb fdff 	bl	8000618 <__aeabi_dmul>
 8014a1a:	4680      	mov	r8, r0
 8014a1c:	4689      	mov	r9, r1
 8014a1e:	e7bd      	b.n	801499c <_dtoa_r+0x594>
 8014a20:	08062d18 	.word	0x08062d18
 8014a24:	08062cf0 	.word	0x08062cf0
 8014a28:	3ff00000 	.word	0x3ff00000
 8014a2c:	40240000 	.word	0x40240000
 8014a30:	401c0000 	.word	0x401c0000
 8014a34:	40140000 	.word	0x40140000
 8014a38:	3fe00000 	.word	0x3fe00000
 8014a3c:	9d01      	ldr	r5, [sp, #4]
 8014a3e:	4656      	mov	r6, sl
 8014a40:	465f      	mov	r7, fp
 8014a42:	4642      	mov	r2, r8
 8014a44:	464b      	mov	r3, r9
 8014a46:	4630      	mov	r0, r6
 8014a48:	4639      	mov	r1, r7
 8014a4a:	f7eb ff0f 	bl	800086c <__aeabi_ddiv>
 8014a4e:	f7ec f893 	bl	8000b78 <__aeabi_d2iz>
 8014a52:	4682      	mov	sl, r0
 8014a54:	f7eb fd76 	bl	8000544 <__aeabi_i2d>
 8014a58:	4642      	mov	r2, r8
 8014a5a:	464b      	mov	r3, r9
 8014a5c:	f7eb fddc 	bl	8000618 <__aeabi_dmul>
 8014a60:	4602      	mov	r2, r0
 8014a62:	460b      	mov	r3, r1
 8014a64:	4630      	mov	r0, r6
 8014a66:	4639      	mov	r1, r7
 8014a68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014a6c:	f7eb fc1c 	bl	80002a8 <__aeabi_dsub>
 8014a70:	f805 6b01 	strb.w	r6, [r5], #1
 8014a74:	9e01      	ldr	r6, [sp, #4]
 8014a76:	9f03      	ldr	r7, [sp, #12]
 8014a78:	1bae      	subs	r6, r5, r6
 8014a7a:	42b7      	cmp	r7, r6
 8014a7c:	4602      	mov	r2, r0
 8014a7e:	460b      	mov	r3, r1
 8014a80:	d135      	bne.n	8014aee <_dtoa_r+0x6e6>
 8014a82:	f7eb fc13 	bl	80002ac <__adddf3>
 8014a86:	4642      	mov	r2, r8
 8014a88:	464b      	mov	r3, r9
 8014a8a:	4606      	mov	r6, r0
 8014a8c:	460f      	mov	r7, r1
 8014a8e:	f7ec f853 	bl	8000b38 <__aeabi_dcmpgt>
 8014a92:	b9d0      	cbnz	r0, 8014aca <_dtoa_r+0x6c2>
 8014a94:	4642      	mov	r2, r8
 8014a96:	464b      	mov	r3, r9
 8014a98:	4630      	mov	r0, r6
 8014a9a:	4639      	mov	r1, r7
 8014a9c:	f7ec f824 	bl	8000ae8 <__aeabi_dcmpeq>
 8014aa0:	b110      	cbz	r0, 8014aa8 <_dtoa_r+0x6a0>
 8014aa2:	f01a 0f01 	tst.w	sl, #1
 8014aa6:	d110      	bne.n	8014aca <_dtoa_r+0x6c2>
 8014aa8:	4620      	mov	r0, r4
 8014aaa:	ee18 1a10 	vmov	r1, s16
 8014aae:	f001 f8a3 	bl	8015bf8 <_Bfree>
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	9800      	ldr	r0, [sp, #0]
 8014ab6:	702b      	strb	r3, [r5, #0]
 8014ab8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014aba:	3001      	adds	r0, #1
 8014abc:	6018      	str	r0, [r3, #0]
 8014abe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014ac0:	2b00      	cmp	r3, #0
 8014ac2:	f43f acf1 	beq.w	80144a8 <_dtoa_r+0xa0>
 8014ac6:	601d      	str	r5, [r3, #0]
 8014ac8:	e4ee      	b.n	80144a8 <_dtoa_r+0xa0>
 8014aca:	9f00      	ldr	r7, [sp, #0]
 8014acc:	462b      	mov	r3, r5
 8014ace:	461d      	mov	r5, r3
 8014ad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014ad4:	2a39      	cmp	r2, #57	; 0x39
 8014ad6:	d106      	bne.n	8014ae6 <_dtoa_r+0x6de>
 8014ad8:	9a01      	ldr	r2, [sp, #4]
 8014ada:	429a      	cmp	r2, r3
 8014adc:	d1f7      	bne.n	8014ace <_dtoa_r+0x6c6>
 8014ade:	9901      	ldr	r1, [sp, #4]
 8014ae0:	2230      	movs	r2, #48	; 0x30
 8014ae2:	3701      	adds	r7, #1
 8014ae4:	700a      	strb	r2, [r1, #0]
 8014ae6:	781a      	ldrb	r2, [r3, #0]
 8014ae8:	3201      	adds	r2, #1
 8014aea:	701a      	strb	r2, [r3, #0]
 8014aec:	e790      	b.n	8014a10 <_dtoa_r+0x608>
 8014aee:	4ba6      	ldr	r3, [pc, #664]	; (8014d88 <_dtoa_r+0x980>)
 8014af0:	2200      	movs	r2, #0
 8014af2:	f7eb fd91 	bl	8000618 <__aeabi_dmul>
 8014af6:	2200      	movs	r2, #0
 8014af8:	2300      	movs	r3, #0
 8014afa:	4606      	mov	r6, r0
 8014afc:	460f      	mov	r7, r1
 8014afe:	f7eb fff3 	bl	8000ae8 <__aeabi_dcmpeq>
 8014b02:	2800      	cmp	r0, #0
 8014b04:	d09d      	beq.n	8014a42 <_dtoa_r+0x63a>
 8014b06:	e7cf      	b.n	8014aa8 <_dtoa_r+0x6a0>
 8014b08:	9a08      	ldr	r2, [sp, #32]
 8014b0a:	2a00      	cmp	r2, #0
 8014b0c:	f000 80d7 	beq.w	8014cbe <_dtoa_r+0x8b6>
 8014b10:	9a06      	ldr	r2, [sp, #24]
 8014b12:	2a01      	cmp	r2, #1
 8014b14:	f300 80ba 	bgt.w	8014c8c <_dtoa_r+0x884>
 8014b18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014b1a:	2a00      	cmp	r2, #0
 8014b1c:	f000 80b2 	beq.w	8014c84 <_dtoa_r+0x87c>
 8014b20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014b24:	9e07      	ldr	r6, [sp, #28]
 8014b26:	9d04      	ldr	r5, [sp, #16]
 8014b28:	9a04      	ldr	r2, [sp, #16]
 8014b2a:	441a      	add	r2, r3
 8014b2c:	9204      	str	r2, [sp, #16]
 8014b2e:	9a05      	ldr	r2, [sp, #20]
 8014b30:	2101      	movs	r1, #1
 8014b32:	441a      	add	r2, r3
 8014b34:	4620      	mov	r0, r4
 8014b36:	9205      	str	r2, [sp, #20]
 8014b38:	f001 f960 	bl	8015dfc <__i2b>
 8014b3c:	4607      	mov	r7, r0
 8014b3e:	2d00      	cmp	r5, #0
 8014b40:	dd0c      	ble.n	8014b5c <_dtoa_r+0x754>
 8014b42:	9b05      	ldr	r3, [sp, #20]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	dd09      	ble.n	8014b5c <_dtoa_r+0x754>
 8014b48:	42ab      	cmp	r3, r5
 8014b4a:	9a04      	ldr	r2, [sp, #16]
 8014b4c:	bfa8      	it	ge
 8014b4e:	462b      	movge	r3, r5
 8014b50:	1ad2      	subs	r2, r2, r3
 8014b52:	9204      	str	r2, [sp, #16]
 8014b54:	9a05      	ldr	r2, [sp, #20]
 8014b56:	1aed      	subs	r5, r5, r3
 8014b58:	1ad3      	subs	r3, r2, r3
 8014b5a:	9305      	str	r3, [sp, #20]
 8014b5c:	9b07      	ldr	r3, [sp, #28]
 8014b5e:	b31b      	cbz	r3, 8014ba8 <_dtoa_r+0x7a0>
 8014b60:	9b08      	ldr	r3, [sp, #32]
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	f000 80af 	beq.w	8014cc6 <_dtoa_r+0x8be>
 8014b68:	2e00      	cmp	r6, #0
 8014b6a:	dd13      	ble.n	8014b94 <_dtoa_r+0x78c>
 8014b6c:	4639      	mov	r1, r7
 8014b6e:	4632      	mov	r2, r6
 8014b70:	4620      	mov	r0, r4
 8014b72:	f001 fa03 	bl	8015f7c <__pow5mult>
 8014b76:	ee18 2a10 	vmov	r2, s16
 8014b7a:	4601      	mov	r1, r0
 8014b7c:	4607      	mov	r7, r0
 8014b7e:	4620      	mov	r0, r4
 8014b80:	f001 f952 	bl	8015e28 <__multiply>
 8014b84:	ee18 1a10 	vmov	r1, s16
 8014b88:	4680      	mov	r8, r0
 8014b8a:	4620      	mov	r0, r4
 8014b8c:	f001 f834 	bl	8015bf8 <_Bfree>
 8014b90:	ee08 8a10 	vmov	s16, r8
 8014b94:	9b07      	ldr	r3, [sp, #28]
 8014b96:	1b9a      	subs	r2, r3, r6
 8014b98:	d006      	beq.n	8014ba8 <_dtoa_r+0x7a0>
 8014b9a:	ee18 1a10 	vmov	r1, s16
 8014b9e:	4620      	mov	r0, r4
 8014ba0:	f001 f9ec 	bl	8015f7c <__pow5mult>
 8014ba4:	ee08 0a10 	vmov	s16, r0
 8014ba8:	2101      	movs	r1, #1
 8014baa:	4620      	mov	r0, r4
 8014bac:	f001 f926 	bl	8015dfc <__i2b>
 8014bb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	4606      	mov	r6, r0
 8014bb6:	f340 8088 	ble.w	8014cca <_dtoa_r+0x8c2>
 8014bba:	461a      	mov	r2, r3
 8014bbc:	4601      	mov	r1, r0
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	f001 f9dc 	bl	8015f7c <__pow5mult>
 8014bc4:	9b06      	ldr	r3, [sp, #24]
 8014bc6:	2b01      	cmp	r3, #1
 8014bc8:	4606      	mov	r6, r0
 8014bca:	f340 8081 	ble.w	8014cd0 <_dtoa_r+0x8c8>
 8014bce:	f04f 0800 	mov.w	r8, #0
 8014bd2:	6933      	ldr	r3, [r6, #16]
 8014bd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014bd8:	6918      	ldr	r0, [r3, #16]
 8014bda:	f001 f8bf 	bl	8015d5c <__hi0bits>
 8014bde:	f1c0 0020 	rsb	r0, r0, #32
 8014be2:	9b05      	ldr	r3, [sp, #20]
 8014be4:	4418      	add	r0, r3
 8014be6:	f010 001f 	ands.w	r0, r0, #31
 8014bea:	f000 8092 	beq.w	8014d12 <_dtoa_r+0x90a>
 8014bee:	f1c0 0320 	rsb	r3, r0, #32
 8014bf2:	2b04      	cmp	r3, #4
 8014bf4:	f340 808a 	ble.w	8014d0c <_dtoa_r+0x904>
 8014bf8:	f1c0 001c 	rsb	r0, r0, #28
 8014bfc:	9b04      	ldr	r3, [sp, #16]
 8014bfe:	4403      	add	r3, r0
 8014c00:	9304      	str	r3, [sp, #16]
 8014c02:	9b05      	ldr	r3, [sp, #20]
 8014c04:	4403      	add	r3, r0
 8014c06:	4405      	add	r5, r0
 8014c08:	9305      	str	r3, [sp, #20]
 8014c0a:	9b04      	ldr	r3, [sp, #16]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	dd07      	ble.n	8014c20 <_dtoa_r+0x818>
 8014c10:	ee18 1a10 	vmov	r1, s16
 8014c14:	461a      	mov	r2, r3
 8014c16:	4620      	mov	r0, r4
 8014c18:	f001 fa0a 	bl	8016030 <__lshift>
 8014c1c:	ee08 0a10 	vmov	s16, r0
 8014c20:	9b05      	ldr	r3, [sp, #20]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	dd05      	ble.n	8014c32 <_dtoa_r+0x82a>
 8014c26:	4631      	mov	r1, r6
 8014c28:	461a      	mov	r2, r3
 8014c2a:	4620      	mov	r0, r4
 8014c2c:	f001 fa00 	bl	8016030 <__lshift>
 8014c30:	4606      	mov	r6, r0
 8014c32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d06e      	beq.n	8014d16 <_dtoa_r+0x90e>
 8014c38:	ee18 0a10 	vmov	r0, s16
 8014c3c:	4631      	mov	r1, r6
 8014c3e:	f001 fa67 	bl	8016110 <__mcmp>
 8014c42:	2800      	cmp	r0, #0
 8014c44:	da67      	bge.n	8014d16 <_dtoa_r+0x90e>
 8014c46:	9b00      	ldr	r3, [sp, #0]
 8014c48:	3b01      	subs	r3, #1
 8014c4a:	ee18 1a10 	vmov	r1, s16
 8014c4e:	9300      	str	r3, [sp, #0]
 8014c50:	220a      	movs	r2, #10
 8014c52:	2300      	movs	r3, #0
 8014c54:	4620      	mov	r0, r4
 8014c56:	f000 fff1 	bl	8015c3c <__multadd>
 8014c5a:	9b08      	ldr	r3, [sp, #32]
 8014c5c:	ee08 0a10 	vmov	s16, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	f000 81b1 	beq.w	8014fc8 <_dtoa_r+0xbc0>
 8014c66:	2300      	movs	r3, #0
 8014c68:	4639      	mov	r1, r7
 8014c6a:	220a      	movs	r2, #10
 8014c6c:	4620      	mov	r0, r4
 8014c6e:	f000 ffe5 	bl	8015c3c <__multadd>
 8014c72:	9b02      	ldr	r3, [sp, #8]
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	4607      	mov	r7, r0
 8014c78:	f300 808e 	bgt.w	8014d98 <_dtoa_r+0x990>
 8014c7c:	9b06      	ldr	r3, [sp, #24]
 8014c7e:	2b02      	cmp	r3, #2
 8014c80:	dc51      	bgt.n	8014d26 <_dtoa_r+0x91e>
 8014c82:	e089      	b.n	8014d98 <_dtoa_r+0x990>
 8014c84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014c86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014c8a:	e74b      	b.n	8014b24 <_dtoa_r+0x71c>
 8014c8c:	9b03      	ldr	r3, [sp, #12]
 8014c8e:	1e5e      	subs	r6, r3, #1
 8014c90:	9b07      	ldr	r3, [sp, #28]
 8014c92:	42b3      	cmp	r3, r6
 8014c94:	bfbf      	itttt	lt
 8014c96:	9b07      	ldrlt	r3, [sp, #28]
 8014c98:	9607      	strlt	r6, [sp, #28]
 8014c9a:	1af2      	sublt	r2, r6, r3
 8014c9c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014c9e:	bfb6      	itet	lt
 8014ca0:	189b      	addlt	r3, r3, r2
 8014ca2:	1b9e      	subge	r6, r3, r6
 8014ca4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014ca6:	9b03      	ldr	r3, [sp, #12]
 8014ca8:	bfb8      	it	lt
 8014caa:	2600      	movlt	r6, #0
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	bfb7      	itett	lt
 8014cb0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014cb4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014cb8:	1a9d      	sublt	r5, r3, r2
 8014cba:	2300      	movlt	r3, #0
 8014cbc:	e734      	b.n	8014b28 <_dtoa_r+0x720>
 8014cbe:	9e07      	ldr	r6, [sp, #28]
 8014cc0:	9d04      	ldr	r5, [sp, #16]
 8014cc2:	9f08      	ldr	r7, [sp, #32]
 8014cc4:	e73b      	b.n	8014b3e <_dtoa_r+0x736>
 8014cc6:	9a07      	ldr	r2, [sp, #28]
 8014cc8:	e767      	b.n	8014b9a <_dtoa_r+0x792>
 8014cca:	9b06      	ldr	r3, [sp, #24]
 8014ccc:	2b01      	cmp	r3, #1
 8014cce:	dc18      	bgt.n	8014d02 <_dtoa_r+0x8fa>
 8014cd0:	f1ba 0f00 	cmp.w	sl, #0
 8014cd4:	d115      	bne.n	8014d02 <_dtoa_r+0x8fa>
 8014cd6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014cda:	b993      	cbnz	r3, 8014d02 <_dtoa_r+0x8fa>
 8014cdc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014ce0:	0d1b      	lsrs	r3, r3, #20
 8014ce2:	051b      	lsls	r3, r3, #20
 8014ce4:	b183      	cbz	r3, 8014d08 <_dtoa_r+0x900>
 8014ce6:	9b04      	ldr	r3, [sp, #16]
 8014ce8:	3301      	adds	r3, #1
 8014cea:	9304      	str	r3, [sp, #16]
 8014cec:	9b05      	ldr	r3, [sp, #20]
 8014cee:	3301      	adds	r3, #1
 8014cf0:	9305      	str	r3, [sp, #20]
 8014cf2:	f04f 0801 	mov.w	r8, #1
 8014cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	f47f af6a 	bne.w	8014bd2 <_dtoa_r+0x7ca>
 8014cfe:	2001      	movs	r0, #1
 8014d00:	e76f      	b.n	8014be2 <_dtoa_r+0x7da>
 8014d02:	f04f 0800 	mov.w	r8, #0
 8014d06:	e7f6      	b.n	8014cf6 <_dtoa_r+0x8ee>
 8014d08:	4698      	mov	r8, r3
 8014d0a:	e7f4      	b.n	8014cf6 <_dtoa_r+0x8ee>
 8014d0c:	f43f af7d 	beq.w	8014c0a <_dtoa_r+0x802>
 8014d10:	4618      	mov	r0, r3
 8014d12:	301c      	adds	r0, #28
 8014d14:	e772      	b.n	8014bfc <_dtoa_r+0x7f4>
 8014d16:	9b03      	ldr	r3, [sp, #12]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	dc37      	bgt.n	8014d8c <_dtoa_r+0x984>
 8014d1c:	9b06      	ldr	r3, [sp, #24]
 8014d1e:	2b02      	cmp	r3, #2
 8014d20:	dd34      	ble.n	8014d8c <_dtoa_r+0x984>
 8014d22:	9b03      	ldr	r3, [sp, #12]
 8014d24:	9302      	str	r3, [sp, #8]
 8014d26:	9b02      	ldr	r3, [sp, #8]
 8014d28:	b96b      	cbnz	r3, 8014d46 <_dtoa_r+0x93e>
 8014d2a:	4631      	mov	r1, r6
 8014d2c:	2205      	movs	r2, #5
 8014d2e:	4620      	mov	r0, r4
 8014d30:	f000 ff84 	bl	8015c3c <__multadd>
 8014d34:	4601      	mov	r1, r0
 8014d36:	4606      	mov	r6, r0
 8014d38:	ee18 0a10 	vmov	r0, s16
 8014d3c:	f001 f9e8 	bl	8016110 <__mcmp>
 8014d40:	2800      	cmp	r0, #0
 8014d42:	f73f adbb 	bgt.w	80148bc <_dtoa_r+0x4b4>
 8014d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d48:	9d01      	ldr	r5, [sp, #4]
 8014d4a:	43db      	mvns	r3, r3
 8014d4c:	9300      	str	r3, [sp, #0]
 8014d4e:	f04f 0800 	mov.w	r8, #0
 8014d52:	4631      	mov	r1, r6
 8014d54:	4620      	mov	r0, r4
 8014d56:	f000 ff4f 	bl	8015bf8 <_Bfree>
 8014d5a:	2f00      	cmp	r7, #0
 8014d5c:	f43f aea4 	beq.w	8014aa8 <_dtoa_r+0x6a0>
 8014d60:	f1b8 0f00 	cmp.w	r8, #0
 8014d64:	d005      	beq.n	8014d72 <_dtoa_r+0x96a>
 8014d66:	45b8      	cmp	r8, r7
 8014d68:	d003      	beq.n	8014d72 <_dtoa_r+0x96a>
 8014d6a:	4641      	mov	r1, r8
 8014d6c:	4620      	mov	r0, r4
 8014d6e:	f000 ff43 	bl	8015bf8 <_Bfree>
 8014d72:	4639      	mov	r1, r7
 8014d74:	4620      	mov	r0, r4
 8014d76:	f000 ff3f 	bl	8015bf8 <_Bfree>
 8014d7a:	e695      	b.n	8014aa8 <_dtoa_r+0x6a0>
 8014d7c:	2600      	movs	r6, #0
 8014d7e:	4637      	mov	r7, r6
 8014d80:	e7e1      	b.n	8014d46 <_dtoa_r+0x93e>
 8014d82:	9700      	str	r7, [sp, #0]
 8014d84:	4637      	mov	r7, r6
 8014d86:	e599      	b.n	80148bc <_dtoa_r+0x4b4>
 8014d88:	40240000 	.word	0x40240000
 8014d8c:	9b08      	ldr	r3, [sp, #32]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	f000 80ca 	beq.w	8014f28 <_dtoa_r+0xb20>
 8014d94:	9b03      	ldr	r3, [sp, #12]
 8014d96:	9302      	str	r3, [sp, #8]
 8014d98:	2d00      	cmp	r5, #0
 8014d9a:	dd05      	ble.n	8014da8 <_dtoa_r+0x9a0>
 8014d9c:	4639      	mov	r1, r7
 8014d9e:	462a      	mov	r2, r5
 8014da0:	4620      	mov	r0, r4
 8014da2:	f001 f945 	bl	8016030 <__lshift>
 8014da6:	4607      	mov	r7, r0
 8014da8:	f1b8 0f00 	cmp.w	r8, #0
 8014dac:	d05b      	beq.n	8014e66 <_dtoa_r+0xa5e>
 8014dae:	6879      	ldr	r1, [r7, #4]
 8014db0:	4620      	mov	r0, r4
 8014db2:	f000 fee1 	bl	8015b78 <_Balloc>
 8014db6:	4605      	mov	r5, r0
 8014db8:	b928      	cbnz	r0, 8014dc6 <_dtoa_r+0x9be>
 8014dba:	4b87      	ldr	r3, [pc, #540]	; (8014fd8 <_dtoa_r+0xbd0>)
 8014dbc:	4602      	mov	r2, r0
 8014dbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014dc2:	f7ff bb3b 	b.w	801443c <_dtoa_r+0x34>
 8014dc6:	693a      	ldr	r2, [r7, #16]
 8014dc8:	3202      	adds	r2, #2
 8014dca:	0092      	lsls	r2, r2, #2
 8014dcc:	f107 010c 	add.w	r1, r7, #12
 8014dd0:	300c      	adds	r0, #12
 8014dd2:	f7fd fa19 	bl	8012208 <memcpy>
 8014dd6:	2201      	movs	r2, #1
 8014dd8:	4629      	mov	r1, r5
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f001 f928 	bl	8016030 <__lshift>
 8014de0:	9b01      	ldr	r3, [sp, #4]
 8014de2:	f103 0901 	add.w	r9, r3, #1
 8014de6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014dea:	4413      	add	r3, r2
 8014dec:	9305      	str	r3, [sp, #20]
 8014dee:	f00a 0301 	and.w	r3, sl, #1
 8014df2:	46b8      	mov	r8, r7
 8014df4:	9304      	str	r3, [sp, #16]
 8014df6:	4607      	mov	r7, r0
 8014df8:	4631      	mov	r1, r6
 8014dfa:	ee18 0a10 	vmov	r0, s16
 8014dfe:	f7ff fa76 	bl	80142ee <quorem>
 8014e02:	4641      	mov	r1, r8
 8014e04:	9002      	str	r0, [sp, #8]
 8014e06:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014e0a:	ee18 0a10 	vmov	r0, s16
 8014e0e:	f001 f97f 	bl	8016110 <__mcmp>
 8014e12:	463a      	mov	r2, r7
 8014e14:	9003      	str	r0, [sp, #12]
 8014e16:	4631      	mov	r1, r6
 8014e18:	4620      	mov	r0, r4
 8014e1a:	f001 f995 	bl	8016148 <__mdiff>
 8014e1e:	68c2      	ldr	r2, [r0, #12]
 8014e20:	f109 3bff 	add.w	fp, r9, #4294967295
 8014e24:	4605      	mov	r5, r0
 8014e26:	bb02      	cbnz	r2, 8014e6a <_dtoa_r+0xa62>
 8014e28:	4601      	mov	r1, r0
 8014e2a:	ee18 0a10 	vmov	r0, s16
 8014e2e:	f001 f96f 	bl	8016110 <__mcmp>
 8014e32:	4602      	mov	r2, r0
 8014e34:	4629      	mov	r1, r5
 8014e36:	4620      	mov	r0, r4
 8014e38:	9207      	str	r2, [sp, #28]
 8014e3a:	f000 fedd 	bl	8015bf8 <_Bfree>
 8014e3e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014e42:	ea43 0102 	orr.w	r1, r3, r2
 8014e46:	9b04      	ldr	r3, [sp, #16]
 8014e48:	430b      	orrs	r3, r1
 8014e4a:	464d      	mov	r5, r9
 8014e4c:	d10f      	bne.n	8014e6e <_dtoa_r+0xa66>
 8014e4e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014e52:	d02a      	beq.n	8014eaa <_dtoa_r+0xaa2>
 8014e54:	9b03      	ldr	r3, [sp, #12]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	dd02      	ble.n	8014e60 <_dtoa_r+0xa58>
 8014e5a:	9b02      	ldr	r3, [sp, #8]
 8014e5c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014e60:	f88b a000 	strb.w	sl, [fp]
 8014e64:	e775      	b.n	8014d52 <_dtoa_r+0x94a>
 8014e66:	4638      	mov	r0, r7
 8014e68:	e7ba      	b.n	8014de0 <_dtoa_r+0x9d8>
 8014e6a:	2201      	movs	r2, #1
 8014e6c:	e7e2      	b.n	8014e34 <_dtoa_r+0xa2c>
 8014e6e:	9b03      	ldr	r3, [sp, #12]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	db04      	blt.n	8014e7e <_dtoa_r+0xa76>
 8014e74:	9906      	ldr	r1, [sp, #24]
 8014e76:	430b      	orrs	r3, r1
 8014e78:	9904      	ldr	r1, [sp, #16]
 8014e7a:	430b      	orrs	r3, r1
 8014e7c:	d122      	bne.n	8014ec4 <_dtoa_r+0xabc>
 8014e7e:	2a00      	cmp	r2, #0
 8014e80:	ddee      	ble.n	8014e60 <_dtoa_r+0xa58>
 8014e82:	ee18 1a10 	vmov	r1, s16
 8014e86:	2201      	movs	r2, #1
 8014e88:	4620      	mov	r0, r4
 8014e8a:	f001 f8d1 	bl	8016030 <__lshift>
 8014e8e:	4631      	mov	r1, r6
 8014e90:	ee08 0a10 	vmov	s16, r0
 8014e94:	f001 f93c 	bl	8016110 <__mcmp>
 8014e98:	2800      	cmp	r0, #0
 8014e9a:	dc03      	bgt.n	8014ea4 <_dtoa_r+0xa9c>
 8014e9c:	d1e0      	bne.n	8014e60 <_dtoa_r+0xa58>
 8014e9e:	f01a 0f01 	tst.w	sl, #1
 8014ea2:	d0dd      	beq.n	8014e60 <_dtoa_r+0xa58>
 8014ea4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014ea8:	d1d7      	bne.n	8014e5a <_dtoa_r+0xa52>
 8014eaa:	2339      	movs	r3, #57	; 0x39
 8014eac:	f88b 3000 	strb.w	r3, [fp]
 8014eb0:	462b      	mov	r3, r5
 8014eb2:	461d      	mov	r5, r3
 8014eb4:	3b01      	subs	r3, #1
 8014eb6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014eba:	2a39      	cmp	r2, #57	; 0x39
 8014ebc:	d071      	beq.n	8014fa2 <_dtoa_r+0xb9a>
 8014ebe:	3201      	adds	r2, #1
 8014ec0:	701a      	strb	r2, [r3, #0]
 8014ec2:	e746      	b.n	8014d52 <_dtoa_r+0x94a>
 8014ec4:	2a00      	cmp	r2, #0
 8014ec6:	dd07      	ble.n	8014ed8 <_dtoa_r+0xad0>
 8014ec8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014ecc:	d0ed      	beq.n	8014eaa <_dtoa_r+0xaa2>
 8014ece:	f10a 0301 	add.w	r3, sl, #1
 8014ed2:	f88b 3000 	strb.w	r3, [fp]
 8014ed6:	e73c      	b.n	8014d52 <_dtoa_r+0x94a>
 8014ed8:	9b05      	ldr	r3, [sp, #20]
 8014eda:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014ede:	4599      	cmp	r9, r3
 8014ee0:	d047      	beq.n	8014f72 <_dtoa_r+0xb6a>
 8014ee2:	ee18 1a10 	vmov	r1, s16
 8014ee6:	2300      	movs	r3, #0
 8014ee8:	220a      	movs	r2, #10
 8014eea:	4620      	mov	r0, r4
 8014eec:	f000 fea6 	bl	8015c3c <__multadd>
 8014ef0:	45b8      	cmp	r8, r7
 8014ef2:	ee08 0a10 	vmov	s16, r0
 8014ef6:	f04f 0300 	mov.w	r3, #0
 8014efa:	f04f 020a 	mov.w	r2, #10
 8014efe:	4641      	mov	r1, r8
 8014f00:	4620      	mov	r0, r4
 8014f02:	d106      	bne.n	8014f12 <_dtoa_r+0xb0a>
 8014f04:	f000 fe9a 	bl	8015c3c <__multadd>
 8014f08:	4680      	mov	r8, r0
 8014f0a:	4607      	mov	r7, r0
 8014f0c:	f109 0901 	add.w	r9, r9, #1
 8014f10:	e772      	b.n	8014df8 <_dtoa_r+0x9f0>
 8014f12:	f000 fe93 	bl	8015c3c <__multadd>
 8014f16:	4639      	mov	r1, r7
 8014f18:	4680      	mov	r8, r0
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	220a      	movs	r2, #10
 8014f1e:	4620      	mov	r0, r4
 8014f20:	f000 fe8c 	bl	8015c3c <__multadd>
 8014f24:	4607      	mov	r7, r0
 8014f26:	e7f1      	b.n	8014f0c <_dtoa_r+0xb04>
 8014f28:	9b03      	ldr	r3, [sp, #12]
 8014f2a:	9302      	str	r3, [sp, #8]
 8014f2c:	9d01      	ldr	r5, [sp, #4]
 8014f2e:	ee18 0a10 	vmov	r0, s16
 8014f32:	4631      	mov	r1, r6
 8014f34:	f7ff f9db 	bl	80142ee <quorem>
 8014f38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014f3c:	9b01      	ldr	r3, [sp, #4]
 8014f3e:	f805 ab01 	strb.w	sl, [r5], #1
 8014f42:	1aea      	subs	r2, r5, r3
 8014f44:	9b02      	ldr	r3, [sp, #8]
 8014f46:	4293      	cmp	r3, r2
 8014f48:	dd09      	ble.n	8014f5e <_dtoa_r+0xb56>
 8014f4a:	ee18 1a10 	vmov	r1, s16
 8014f4e:	2300      	movs	r3, #0
 8014f50:	220a      	movs	r2, #10
 8014f52:	4620      	mov	r0, r4
 8014f54:	f000 fe72 	bl	8015c3c <__multadd>
 8014f58:	ee08 0a10 	vmov	s16, r0
 8014f5c:	e7e7      	b.n	8014f2e <_dtoa_r+0xb26>
 8014f5e:	9b02      	ldr	r3, [sp, #8]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	bfc8      	it	gt
 8014f64:	461d      	movgt	r5, r3
 8014f66:	9b01      	ldr	r3, [sp, #4]
 8014f68:	bfd8      	it	le
 8014f6a:	2501      	movle	r5, #1
 8014f6c:	441d      	add	r5, r3
 8014f6e:	f04f 0800 	mov.w	r8, #0
 8014f72:	ee18 1a10 	vmov	r1, s16
 8014f76:	2201      	movs	r2, #1
 8014f78:	4620      	mov	r0, r4
 8014f7a:	f001 f859 	bl	8016030 <__lshift>
 8014f7e:	4631      	mov	r1, r6
 8014f80:	ee08 0a10 	vmov	s16, r0
 8014f84:	f001 f8c4 	bl	8016110 <__mcmp>
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	dc91      	bgt.n	8014eb0 <_dtoa_r+0xaa8>
 8014f8c:	d102      	bne.n	8014f94 <_dtoa_r+0xb8c>
 8014f8e:	f01a 0f01 	tst.w	sl, #1
 8014f92:	d18d      	bne.n	8014eb0 <_dtoa_r+0xaa8>
 8014f94:	462b      	mov	r3, r5
 8014f96:	461d      	mov	r5, r3
 8014f98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014f9c:	2a30      	cmp	r2, #48	; 0x30
 8014f9e:	d0fa      	beq.n	8014f96 <_dtoa_r+0xb8e>
 8014fa0:	e6d7      	b.n	8014d52 <_dtoa_r+0x94a>
 8014fa2:	9a01      	ldr	r2, [sp, #4]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d184      	bne.n	8014eb2 <_dtoa_r+0xaaa>
 8014fa8:	9b00      	ldr	r3, [sp, #0]
 8014faa:	3301      	adds	r3, #1
 8014fac:	9300      	str	r3, [sp, #0]
 8014fae:	2331      	movs	r3, #49	; 0x31
 8014fb0:	7013      	strb	r3, [r2, #0]
 8014fb2:	e6ce      	b.n	8014d52 <_dtoa_r+0x94a>
 8014fb4:	4b09      	ldr	r3, [pc, #36]	; (8014fdc <_dtoa_r+0xbd4>)
 8014fb6:	f7ff ba95 	b.w	80144e4 <_dtoa_r+0xdc>
 8014fba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	f47f aa6e 	bne.w	801449e <_dtoa_r+0x96>
 8014fc2:	4b07      	ldr	r3, [pc, #28]	; (8014fe0 <_dtoa_r+0xbd8>)
 8014fc4:	f7ff ba8e 	b.w	80144e4 <_dtoa_r+0xdc>
 8014fc8:	9b02      	ldr	r3, [sp, #8]
 8014fca:	2b00      	cmp	r3, #0
 8014fcc:	dcae      	bgt.n	8014f2c <_dtoa_r+0xb24>
 8014fce:	9b06      	ldr	r3, [sp, #24]
 8014fd0:	2b02      	cmp	r3, #2
 8014fd2:	f73f aea8 	bgt.w	8014d26 <_dtoa_r+0x91e>
 8014fd6:	e7a9      	b.n	8014f2c <_dtoa_r+0xb24>
 8014fd8:	08062ba0 	.word	0x08062ba0
 8014fdc:	080629a5 	.word	0x080629a5
 8014fe0:	08062b21 	.word	0x08062b21

08014fe4 <__sflush_r>:
 8014fe4:	898a      	ldrh	r2, [r1, #12]
 8014fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014fea:	4605      	mov	r5, r0
 8014fec:	0710      	lsls	r0, r2, #28
 8014fee:	460c      	mov	r4, r1
 8014ff0:	d458      	bmi.n	80150a4 <__sflush_r+0xc0>
 8014ff2:	684b      	ldr	r3, [r1, #4]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	dc05      	bgt.n	8015004 <__sflush_r+0x20>
 8014ff8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	dc02      	bgt.n	8015004 <__sflush_r+0x20>
 8014ffe:	2000      	movs	r0, #0
 8015000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015004:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015006:	2e00      	cmp	r6, #0
 8015008:	d0f9      	beq.n	8014ffe <__sflush_r+0x1a>
 801500a:	2300      	movs	r3, #0
 801500c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015010:	682f      	ldr	r7, [r5, #0]
 8015012:	602b      	str	r3, [r5, #0]
 8015014:	d032      	beq.n	801507c <__sflush_r+0x98>
 8015016:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015018:	89a3      	ldrh	r3, [r4, #12]
 801501a:	075a      	lsls	r2, r3, #29
 801501c:	d505      	bpl.n	801502a <__sflush_r+0x46>
 801501e:	6863      	ldr	r3, [r4, #4]
 8015020:	1ac0      	subs	r0, r0, r3
 8015022:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015024:	b10b      	cbz	r3, 801502a <__sflush_r+0x46>
 8015026:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015028:	1ac0      	subs	r0, r0, r3
 801502a:	2300      	movs	r3, #0
 801502c:	4602      	mov	r2, r0
 801502e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015030:	6a21      	ldr	r1, [r4, #32]
 8015032:	4628      	mov	r0, r5
 8015034:	47b0      	blx	r6
 8015036:	1c43      	adds	r3, r0, #1
 8015038:	89a3      	ldrh	r3, [r4, #12]
 801503a:	d106      	bne.n	801504a <__sflush_r+0x66>
 801503c:	6829      	ldr	r1, [r5, #0]
 801503e:	291d      	cmp	r1, #29
 8015040:	d82c      	bhi.n	801509c <__sflush_r+0xb8>
 8015042:	4a2a      	ldr	r2, [pc, #168]	; (80150ec <__sflush_r+0x108>)
 8015044:	40ca      	lsrs	r2, r1
 8015046:	07d6      	lsls	r6, r2, #31
 8015048:	d528      	bpl.n	801509c <__sflush_r+0xb8>
 801504a:	2200      	movs	r2, #0
 801504c:	6062      	str	r2, [r4, #4]
 801504e:	04d9      	lsls	r1, r3, #19
 8015050:	6922      	ldr	r2, [r4, #16]
 8015052:	6022      	str	r2, [r4, #0]
 8015054:	d504      	bpl.n	8015060 <__sflush_r+0x7c>
 8015056:	1c42      	adds	r2, r0, #1
 8015058:	d101      	bne.n	801505e <__sflush_r+0x7a>
 801505a:	682b      	ldr	r3, [r5, #0]
 801505c:	b903      	cbnz	r3, 8015060 <__sflush_r+0x7c>
 801505e:	6560      	str	r0, [r4, #84]	; 0x54
 8015060:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015062:	602f      	str	r7, [r5, #0]
 8015064:	2900      	cmp	r1, #0
 8015066:	d0ca      	beq.n	8014ffe <__sflush_r+0x1a>
 8015068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801506c:	4299      	cmp	r1, r3
 801506e:	d002      	beq.n	8015076 <__sflush_r+0x92>
 8015070:	4628      	mov	r0, r5
 8015072:	f7fd f8df 	bl	8012234 <_free_r>
 8015076:	2000      	movs	r0, #0
 8015078:	6360      	str	r0, [r4, #52]	; 0x34
 801507a:	e7c1      	b.n	8015000 <__sflush_r+0x1c>
 801507c:	6a21      	ldr	r1, [r4, #32]
 801507e:	2301      	movs	r3, #1
 8015080:	4628      	mov	r0, r5
 8015082:	47b0      	blx	r6
 8015084:	1c41      	adds	r1, r0, #1
 8015086:	d1c7      	bne.n	8015018 <__sflush_r+0x34>
 8015088:	682b      	ldr	r3, [r5, #0]
 801508a:	2b00      	cmp	r3, #0
 801508c:	d0c4      	beq.n	8015018 <__sflush_r+0x34>
 801508e:	2b1d      	cmp	r3, #29
 8015090:	d001      	beq.n	8015096 <__sflush_r+0xb2>
 8015092:	2b16      	cmp	r3, #22
 8015094:	d101      	bne.n	801509a <__sflush_r+0xb6>
 8015096:	602f      	str	r7, [r5, #0]
 8015098:	e7b1      	b.n	8014ffe <__sflush_r+0x1a>
 801509a:	89a3      	ldrh	r3, [r4, #12]
 801509c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150a0:	81a3      	strh	r3, [r4, #12]
 80150a2:	e7ad      	b.n	8015000 <__sflush_r+0x1c>
 80150a4:	690f      	ldr	r7, [r1, #16]
 80150a6:	2f00      	cmp	r7, #0
 80150a8:	d0a9      	beq.n	8014ffe <__sflush_r+0x1a>
 80150aa:	0793      	lsls	r3, r2, #30
 80150ac:	680e      	ldr	r6, [r1, #0]
 80150ae:	bf08      	it	eq
 80150b0:	694b      	ldreq	r3, [r1, #20]
 80150b2:	600f      	str	r7, [r1, #0]
 80150b4:	bf18      	it	ne
 80150b6:	2300      	movne	r3, #0
 80150b8:	eba6 0807 	sub.w	r8, r6, r7
 80150bc:	608b      	str	r3, [r1, #8]
 80150be:	f1b8 0f00 	cmp.w	r8, #0
 80150c2:	dd9c      	ble.n	8014ffe <__sflush_r+0x1a>
 80150c4:	6a21      	ldr	r1, [r4, #32]
 80150c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80150c8:	4643      	mov	r3, r8
 80150ca:	463a      	mov	r2, r7
 80150cc:	4628      	mov	r0, r5
 80150ce:	47b0      	blx	r6
 80150d0:	2800      	cmp	r0, #0
 80150d2:	dc06      	bgt.n	80150e2 <__sflush_r+0xfe>
 80150d4:	89a3      	ldrh	r3, [r4, #12]
 80150d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150da:	81a3      	strh	r3, [r4, #12]
 80150dc:	f04f 30ff 	mov.w	r0, #4294967295
 80150e0:	e78e      	b.n	8015000 <__sflush_r+0x1c>
 80150e2:	4407      	add	r7, r0
 80150e4:	eba8 0800 	sub.w	r8, r8, r0
 80150e8:	e7e9      	b.n	80150be <__sflush_r+0xda>
 80150ea:	bf00      	nop
 80150ec:	20400001 	.word	0x20400001

080150f0 <_fflush_r>:
 80150f0:	b538      	push	{r3, r4, r5, lr}
 80150f2:	690b      	ldr	r3, [r1, #16]
 80150f4:	4605      	mov	r5, r0
 80150f6:	460c      	mov	r4, r1
 80150f8:	b913      	cbnz	r3, 8015100 <_fflush_r+0x10>
 80150fa:	2500      	movs	r5, #0
 80150fc:	4628      	mov	r0, r5
 80150fe:	bd38      	pop	{r3, r4, r5, pc}
 8015100:	b118      	cbz	r0, 801510a <_fflush_r+0x1a>
 8015102:	6983      	ldr	r3, [r0, #24]
 8015104:	b90b      	cbnz	r3, 801510a <_fflush_r+0x1a>
 8015106:	f000 f887 	bl	8015218 <__sinit>
 801510a:	4b14      	ldr	r3, [pc, #80]	; (801515c <_fflush_r+0x6c>)
 801510c:	429c      	cmp	r4, r3
 801510e:	d11b      	bne.n	8015148 <_fflush_r+0x58>
 8015110:	686c      	ldr	r4, [r5, #4]
 8015112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015116:	2b00      	cmp	r3, #0
 8015118:	d0ef      	beq.n	80150fa <_fflush_r+0xa>
 801511a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801511c:	07d0      	lsls	r0, r2, #31
 801511e:	d404      	bmi.n	801512a <_fflush_r+0x3a>
 8015120:	0599      	lsls	r1, r3, #22
 8015122:	d402      	bmi.n	801512a <_fflush_r+0x3a>
 8015124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015126:	f000 fc88 	bl	8015a3a <__retarget_lock_acquire_recursive>
 801512a:	4628      	mov	r0, r5
 801512c:	4621      	mov	r1, r4
 801512e:	f7ff ff59 	bl	8014fe4 <__sflush_r>
 8015132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015134:	07da      	lsls	r2, r3, #31
 8015136:	4605      	mov	r5, r0
 8015138:	d4e0      	bmi.n	80150fc <_fflush_r+0xc>
 801513a:	89a3      	ldrh	r3, [r4, #12]
 801513c:	059b      	lsls	r3, r3, #22
 801513e:	d4dd      	bmi.n	80150fc <_fflush_r+0xc>
 8015140:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015142:	f000 fc7b 	bl	8015a3c <__retarget_lock_release_recursive>
 8015146:	e7d9      	b.n	80150fc <_fflush_r+0xc>
 8015148:	4b05      	ldr	r3, [pc, #20]	; (8015160 <_fflush_r+0x70>)
 801514a:	429c      	cmp	r4, r3
 801514c:	d101      	bne.n	8015152 <_fflush_r+0x62>
 801514e:	68ac      	ldr	r4, [r5, #8]
 8015150:	e7df      	b.n	8015112 <_fflush_r+0x22>
 8015152:	4b04      	ldr	r3, [pc, #16]	; (8015164 <_fflush_r+0x74>)
 8015154:	429c      	cmp	r4, r3
 8015156:	bf08      	it	eq
 8015158:	68ec      	ldreq	r4, [r5, #12]
 801515a:	e7da      	b.n	8015112 <_fflush_r+0x22>
 801515c:	08062bd4 	.word	0x08062bd4
 8015160:	08062bf4 	.word	0x08062bf4
 8015164:	08062bb4 	.word	0x08062bb4

08015168 <std>:
 8015168:	2300      	movs	r3, #0
 801516a:	b510      	push	{r4, lr}
 801516c:	4604      	mov	r4, r0
 801516e:	e9c0 3300 	strd	r3, r3, [r0]
 8015172:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8015176:	6083      	str	r3, [r0, #8]
 8015178:	8181      	strh	r1, [r0, #12]
 801517a:	6643      	str	r3, [r0, #100]	; 0x64
 801517c:	81c2      	strh	r2, [r0, #14]
 801517e:	6183      	str	r3, [r0, #24]
 8015180:	4619      	mov	r1, r3
 8015182:	2208      	movs	r2, #8
 8015184:	305c      	adds	r0, #92	; 0x5c
 8015186:	f7fd f84d 	bl	8012224 <memset>
 801518a:	4b05      	ldr	r3, [pc, #20]	; (80151a0 <std+0x38>)
 801518c:	6263      	str	r3, [r4, #36]	; 0x24
 801518e:	4b05      	ldr	r3, [pc, #20]	; (80151a4 <std+0x3c>)
 8015190:	62a3      	str	r3, [r4, #40]	; 0x28
 8015192:	4b05      	ldr	r3, [pc, #20]	; (80151a8 <std+0x40>)
 8015194:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015196:	4b05      	ldr	r3, [pc, #20]	; (80151ac <std+0x44>)
 8015198:	6224      	str	r4, [r4, #32]
 801519a:	6323      	str	r3, [r4, #48]	; 0x30
 801519c:	bd10      	pop	{r4, pc}
 801519e:	bf00      	nop
 80151a0:	080168d9 	.word	0x080168d9
 80151a4:	080168fb 	.word	0x080168fb
 80151a8:	08016933 	.word	0x08016933
 80151ac:	08016957 	.word	0x08016957

080151b0 <_cleanup_r>:
 80151b0:	4901      	ldr	r1, [pc, #4]	; (80151b8 <_cleanup_r+0x8>)
 80151b2:	f000 b8af 	b.w	8015314 <_fwalk_reent>
 80151b6:	bf00      	nop
 80151b8:	080150f1 	.word	0x080150f1

080151bc <__sfmoreglue>:
 80151bc:	b570      	push	{r4, r5, r6, lr}
 80151be:	2268      	movs	r2, #104	; 0x68
 80151c0:	1e4d      	subs	r5, r1, #1
 80151c2:	4355      	muls	r5, r2
 80151c4:	460e      	mov	r6, r1
 80151c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80151ca:	f7fd f89f 	bl	801230c <_malloc_r>
 80151ce:	4604      	mov	r4, r0
 80151d0:	b140      	cbz	r0, 80151e4 <__sfmoreglue+0x28>
 80151d2:	2100      	movs	r1, #0
 80151d4:	e9c0 1600 	strd	r1, r6, [r0]
 80151d8:	300c      	adds	r0, #12
 80151da:	60a0      	str	r0, [r4, #8]
 80151dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80151e0:	f7fd f820 	bl	8012224 <memset>
 80151e4:	4620      	mov	r0, r4
 80151e6:	bd70      	pop	{r4, r5, r6, pc}

080151e8 <__sfp_lock_acquire>:
 80151e8:	4801      	ldr	r0, [pc, #4]	; (80151f0 <__sfp_lock_acquire+0x8>)
 80151ea:	f000 bc26 	b.w	8015a3a <__retarget_lock_acquire_recursive>
 80151ee:	bf00      	nop
 80151f0:	20013da9 	.word	0x20013da9

080151f4 <__sfp_lock_release>:
 80151f4:	4801      	ldr	r0, [pc, #4]	; (80151fc <__sfp_lock_release+0x8>)
 80151f6:	f000 bc21 	b.w	8015a3c <__retarget_lock_release_recursive>
 80151fa:	bf00      	nop
 80151fc:	20013da9 	.word	0x20013da9

08015200 <__sinit_lock_acquire>:
 8015200:	4801      	ldr	r0, [pc, #4]	; (8015208 <__sinit_lock_acquire+0x8>)
 8015202:	f000 bc1a 	b.w	8015a3a <__retarget_lock_acquire_recursive>
 8015206:	bf00      	nop
 8015208:	20013daa 	.word	0x20013daa

0801520c <__sinit_lock_release>:
 801520c:	4801      	ldr	r0, [pc, #4]	; (8015214 <__sinit_lock_release+0x8>)
 801520e:	f000 bc15 	b.w	8015a3c <__retarget_lock_release_recursive>
 8015212:	bf00      	nop
 8015214:	20013daa 	.word	0x20013daa

08015218 <__sinit>:
 8015218:	b510      	push	{r4, lr}
 801521a:	4604      	mov	r4, r0
 801521c:	f7ff fff0 	bl	8015200 <__sinit_lock_acquire>
 8015220:	69a3      	ldr	r3, [r4, #24]
 8015222:	b11b      	cbz	r3, 801522c <__sinit+0x14>
 8015224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015228:	f7ff bff0 	b.w	801520c <__sinit_lock_release>
 801522c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015230:	6523      	str	r3, [r4, #80]	; 0x50
 8015232:	4b13      	ldr	r3, [pc, #76]	; (8015280 <__sinit+0x68>)
 8015234:	4a13      	ldr	r2, [pc, #76]	; (8015284 <__sinit+0x6c>)
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	62a2      	str	r2, [r4, #40]	; 0x28
 801523a:	42a3      	cmp	r3, r4
 801523c:	bf04      	itt	eq
 801523e:	2301      	moveq	r3, #1
 8015240:	61a3      	streq	r3, [r4, #24]
 8015242:	4620      	mov	r0, r4
 8015244:	f000 f820 	bl	8015288 <__sfp>
 8015248:	6060      	str	r0, [r4, #4]
 801524a:	4620      	mov	r0, r4
 801524c:	f000 f81c 	bl	8015288 <__sfp>
 8015250:	60a0      	str	r0, [r4, #8]
 8015252:	4620      	mov	r0, r4
 8015254:	f000 f818 	bl	8015288 <__sfp>
 8015258:	2200      	movs	r2, #0
 801525a:	60e0      	str	r0, [r4, #12]
 801525c:	2104      	movs	r1, #4
 801525e:	6860      	ldr	r0, [r4, #4]
 8015260:	f7ff ff82 	bl	8015168 <std>
 8015264:	68a0      	ldr	r0, [r4, #8]
 8015266:	2201      	movs	r2, #1
 8015268:	2109      	movs	r1, #9
 801526a:	f7ff ff7d 	bl	8015168 <std>
 801526e:	68e0      	ldr	r0, [r4, #12]
 8015270:	2202      	movs	r2, #2
 8015272:	2112      	movs	r1, #18
 8015274:	f7ff ff78 	bl	8015168 <std>
 8015278:	2301      	movs	r3, #1
 801527a:	61a3      	str	r3, [r4, #24]
 801527c:	e7d2      	b.n	8015224 <__sinit+0xc>
 801527e:	bf00      	nop
 8015280:	08062980 	.word	0x08062980
 8015284:	080151b1 	.word	0x080151b1

08015288 <__sfp>:
 8015288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801528a:	4607      	mov	r7, r0
 801528c:	f7ff ffac 	bl	80151e8 <__sfp_lock_acquire>
 8015290:	4b1e      	ldr	r3, [pc, #120]	; (801530c <__sfp+0x84>)
 8015292:	681e      	ldr	r6, [r3, #0]
 8015294:	69b3      	ldr	r3, [r6, #24]
 8015296:	b913      	cbnz	r3, 801529e <__sfp+0x16>
 8015298:	4630      	mov	r0, r6
 801529a:	f7ff ffbd 	bl	8015218 <__sinit>
 801529e:	3648      	adds	r6, #72	; 0x48
 80152a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80152a4:	3b01      	subs	r3, #1
 80152a6:	d503      	bpl.n	80152b0 <__sfp+0x28>
 80152a8:	6833      	ldr	r3, [r6, #0]
 80152aa:	b30b      	cbz	r3, 80152f0 <__sfp+0x68>
 80152ac:	6836      	ldr	r6, [r6, #0]
 80152ae:	e7f7      	b.n	80152a0 <__sfp+0x18>
 80152b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80152b4:	b9d5      	cbnz	r5, 80152ec <__sfp+0x64>
 80152b6:	4b16      	ldr	r3, [pc, #88]	; (8015310 <__sfp+0x88>)
 80152b8:	60e3      	str	r3, [r4, #12]
 80152ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80152be:	6665      	str	r5, [r4, #100]	; 0x64
 80152c0:	f000 fbba 	bl	8015a38 <__retarget_lock_init_recursive>
 80152c4:	f7ff ff96 	bl	80151f4 <__sfp_lock_release>
 80152c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80152cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80152d0:	6025      	str	r5, [r4, #0]
 80152d2:	61a5      	str	r5, [r4, #24]
 80152d4:	2208      	movs	r2, #8
 80152d6:	4629      	mov	r1, r5
 80152d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80152dc:	f7fc ffa2 	bl	8012224 <memset>
 80152e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80152e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80152e8:	4620      	mov	r0, r4
 80152ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80152ec:	3468      	adds	r4, #104	; 0x68
 80152ee:	e7d9      	b.n	80152a4 <__sfp+0x1c>
 80152f0:	2104      	movs	r1, #4
 80152f2:	4638      	mov	r0, r7
 80152f4:	f7ff ff62 	bl	80151bc <__sfmoreglue>
 80152f8:	4604      	mov	r4, r0
 80152fa:	6030      	str	r0, [r6, #0]
 80152fc:	2800      	cmp	r0, #0
 80152fe:	d1d5      	bne.n	80152ac <__sfp+0x24>
 8015300:	f7ff ff78 	bl	80151f4 <__sfp_lock_release>
 8015304:	230c      	movs	r3, #12
 8015306:	603b      	str	r3, [r7, #0]
 8015308:	e7ee      	b.n	80152e8 <__sfp+0x60>
 801530a:	bf00      	nop
 801530c:	08062980 	.word	0x08062980
 8015310:	ffff0001 	.word	0xffff0001

08015314 <_fwalk_reent>:
 8015314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015318:	4606      	mov	r6, r0
 801531a:	4688      	mov	r8, r1
 801531c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015320:	2700      	movs	r7, #0
 8015322:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015326:	f1b9 0901 	subs.w	r9, r9, #1
 801532a:	d505      	bpl.n	8015338 <_fwalk_reent+0x24>
 801532c:	6824      	ldr	r4, [r4, #0]
 801532e:	2c00      	cmp	r4, #0
 8015330:	d1f7      	bne.n	8015322 <_fwalk_reent+0xe>
 8015332:	4638      	mov	r0, r7
 8015334:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015338:	89ab      	ldrh	r3, [r5, #12]
 801533a:	2b01      	cmp	r3, #1
 801533c:	d907      	bls.n	801534e <_fwalk_reent+0x3a>
 801533e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015342:	3301      	adds	r3, #1
 8015344:	d003      	beq.n	801534e <_fwalk_reent+0x3a>
 8015346:	4629      	mov	r1, r5
 8015348:	4630      	mov	r0, r6
 801534a:	47c0      	blx	r8
 801534c:	4307      	orrs	r7, r0
 801534e:	3568      	adds	r5, #104	; 0x68
 8015350:	e7e9      	b.n	8015326 <_fwalk_reent+0x12>

08015352 <rshift>:
 8015352:	6903      	ldr	r3, [r0, #16]
 8015354:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801535c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015360:	f100 0414 	add.w	r4, r0, #20
 8015364:	dd45      	ble.n	80153f2 <rshift+0xa0>
 8015366:	f011 011f 	ands.w	r1, r1, #31
 801536a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801536e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015372:	d10c      	bne.n	801538e <rshift+0x3c>
 8015374:	f100 0710 	add.w	r7, r0, #16
 8015378:	4629      	mov	r1, r5
 801537a:	42b1      	cmp	r1, r6
 801537c:	d334      	bcc.n	80153e8 <rshift+0x96>
 801537e:	1a9b      	subs	r3, r3, r2
 8015380:	009b      	lsls	r3, r3, #2
 8015382:	1eea      	subs	r2, r5, #3
 8015384:	4296      	cmp	r6, r2
 8015386:	bf38      	it	cc
 8015388:	2300      	movcc	r3, #0
 801538a:	4423      	add	r3, r4
 801538c:	e015      	b.n	80153ba <rshift+0x68>
 801538e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015392:	f1c1 0820 	rsb	r8, r1, #32
 8015396:	40cf      	lsrs	r7, r1
 8015398:	f105 0e04 	add.w	lr, r5, #4
 801539c:	46a1      	mov	r9, r4
 801539e:	4576      	cmp	r6, lr
 80153a0:	46f4      	mov	ip, lr
 80153a2:	d815      	bhi.n	80153d0 <rshift+0x7e>
 80153a4:	1a9a      	subs	r2, r3, r2
 80153a6:	0092      	lsls	r2, r2, #2
 80153a8:	3a04      	subs	r2, #4
 80153aa:	3501      	adds	r5, #1
 80153ac:	42ae      	cmp	r6, r5
 80153ae:	bf38      	it	cc
 80153b0:	2200      	movcc	r2, #0
 80153b2:	18a3      	adds	r3, r4, r2
 80153b4:	50a7      	str	r7, [r4, r2]
 80153b6:	b107      	cbz	r7, 80153ba <rshift+0x68>
 80153b8:	3304      	adds	r3, #4
 80153ba:	1b1a      	subs	r2, r3, r4
 80153bc:	42a3      	cmp	r3, r4
 80153be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80153c2:	bf08      	it	eq
 80153c4:	2300      	moveq	r3, #0
 80153c6:	6102      	str	r2, [r0, #16]
 80153c8:	bf08      	it	eq
 80153ca:	6143      	streq	r3, [r0, #20]
 80153cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153d0:	f8dc c000 	ldr.w	ip, [ip]
 80153d4:	fa0c fc08 	lsl.w	ip, ip, r8
 80153d8:	ea4c 0707 	orr.w	r7, ip, r7
 80153dc:	f849 7b04 	str.w	r7, [r9], #4
 80153e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80153e4:	40cf      	lsrs	r7, r1
 80153e6:	e7da      	b.n	801539e <rshift+0x4c>
 80153e8:	f851 cb04 	ldr.w	ip, [r1], #4
 80153ec:	f847 cf04 	str.w	ip, [r7, #4]!
 80153f0:	e7c3      	b.n	801537a <rshift+0x28>
 80153f2:	4623      	mov	r3, r4
 80153f4:	e7e1      	b.n	80153ba <rshift+0x68>

080153f6 <__hexdig_fun>:
 80153f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80153fa:	2b09      	cmp	r3, #9
 80153fc:	d802      	bhi.n	8015404 <__hexdig_fun+0xe>
 80153fe:	3820      	subs	r0, #32
 8015400:	b2c0      	uxtb	r0, r0
 8015402:	4770      	bx	lr
 8015404:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015408:	2b05      	cmp	r3, #5
 801540a:	d801      	bhi.n	8015410 <__hexdig_fun+0x1a>
 801540c:	3847      	subs	r0, #71	; 0x47
 801540e:	e7f7      	b.n	8015400 <__hexdig_fun+0xa>
 8015410:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015414:	2b05      	cmp	r3, #5
 8015416:	d801      	bhi.n	801541c <__hexdig_fun+0x26>
 8015418:	3827      	subs	r0, #39	; 0x27
 801541a:	e7f1      	b.n	8015400 <__hexdig_fun+0xa>
 801541c:	2000      	movs	r0, #0
 801541e:	4770      	bx	lr

08015420 <__gethex>:
 8015420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015424:	ed2d 8b02 	vpush	{d8}
 8015428:	b089      	sub	sp, #36	; 0x24
 801542a:	ee08 0a10 	vmov	s16, r0
 801542e:	9304      	str	r3, [sp, #16]
 8015430:	4bb4      	ldr	r3, [pc, #720]	; (8015704 <__gethex+0x2e4>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	9301      	str	r3, [sp, #4]
 8015436:	4618      	mov	r0, r3
 8015438:	468b      	mov	fp, r1
 801543a:	4690      	mov	r8, r2
 801543c:	f7ea fed2 	bl	80001e4 <strlen>
 8015440:	9b01      	ldr	r3, [sp, #4]
 8015442:	f8db 2000 	ldr.w	r2, [fp]
 8015446:	4403      	add	r3, r0
 8015448:	4682      	mov	sl, r0
 801544a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801544e:	9305      	str	r3, [sp, #20]
 8015450:	1c93      	adds	r3, r2, #2
 8015452:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015456:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801545a:	32fe      	adds	r2, #254	; 0xfe
 801545c:	18d1      	adds	r1, r2, r3
 801545e:	461f      	mov	r7, r3
 8015460:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015464:	9100      	str	r1, [sp, #0]
 8015466:	2830      	cmp	r0, #48	; 0x30
 8015468:	d0f8      	beq.n	801545c <__gethex+0x3c>
 801546a:	f7ff ffc4 	bl	80153f6 <__hexdig_fun>
 801546e:	4604      	mov	r4, r0
 8015470:	2800      	cmp	r0, #0
 8015472:	d13a      	bne.n	80154ea <__gethex+0xca>
 8015474:	9901      	ldr	r1, [sp, #4]
 8015476:	4652      	mov	r2, sl
 8015478:	4638      	mov	r0, r7
 801547a:	f001 fa70 	bl	801695e <strncmp>
 801547e:	4605      	mov	r5, r0
 8015480:	2800      	cmp	r0, #0
 8015482:	d168      	bne.n	8015556 <__gethex+0x136>
 8015484:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015488:	eb07 060a 	add.w	r6, r7, sl
 801548c:	f7ff ffb3 	bl	80153f6 <__hexdig_fun>
 8015490:	2800      	cmp	r0, #0
 8015492:	d062      	beq.n	801555a <__gethex+0x13a>
 8015494:	4633      	mov	r3, r6
 8015496:	7818      	ldrb	r0, [r3, #0]
 8015498:	2830      	cmp	r0, #48	; 0x30
 801549a:	461f      	mov	r7, r3
 801549c:	f103 0301 	add.w	r3, r3, #1
 80154a0:	d0f9      	beq.n	8015496 <__gethex+0x76>
 80154a2:	f7ff ffa8 	bl	80153f6 <__hexdig_fun>
 80154a6:	2301      	movs	r3, #1
 80154a8:	fab0 f480 	clz	r4, r0
 80154ac:	0964      	lsrs	r4, r4, #5
 80154ae:	4635      	mov	r5, r6
 80154b0:	9300      	str	r3, [sp, #0]
 80154b2:	463a      	mov	r2, r7
 80154b4:	4616      	mov	r6, r2
 80154b6:	3201      	adds	r2, #1
 80154b8:	7830      	ldrb	r0, [r6, #0]
 80154ba:	f7ff ff9c 	bl	80153f6 <__hexdig_fun>
 80154be:	2800      	cmp	r0, #0
 80154c0:	d1f8      	bne.n	80154b4 <__gethex+0x94>
 80154c2:	9901      	ldr	r1, [sp, #4]
 80154c4:	4652      	mov	r2, sl
 80154c6:	4630      	mov	r0, r6
 80154c8:	f001 fa49 	bl	801695e <strncmp>
 80154cc:	b980      	cbnz	r0, 80154f0 <__gethex+0xd0>
 80154ce:	b94d      	cbnz	r5, 80154e4 <__gethex+0xc4>
 80154d0:	eb06 050a 	add.w	r5, r6, sl
 80154d4:	462a      	mov	r2, r5
 80154d6:	4616      	mov	r6, r2
 80154d8:	3201      	adds	r2, #1
 80154da:	7830      	ldrb	r0, [r6, #0]
 80154dc:	f7ff ff8b 	bl	80153f6 <__hexdig_fun>
 80154e0:	2800      	cmp	r0, #0
 80154e2:	d1f8      	bne.n	80154d6 <__gethex+0xb6>
 80154e4:	1bad      	subs	r5, r5, r6
 80154e6:	00ad      	lsls	r5, r5, #2
 80154e8:	e004      	b.n	80154f4 <__gethex+0xd4>
 80154ea:	2400      	movs	r4, #0
 80154ec:	4625      	mov	r5, r4
 80154ee:	e7e0      	b.n	80154b2 <__gethex+0x92>
 80154f0:	2d00      	cmp	r5, #0
 80154f2:	d1f7      	bne.n	80154e4 <__gethex+0xc4>
 80154f4:	7833      	ldrb	r3, [r6, #0]
 80154f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80154fa:	2b50      	cmp	r3, #80	; 0x50
 80154fc:	d13b      	bne.n	8015576 <__gethex+0x156>
 80154fe:	7873      	ldrb	r3, [r6, #1]
 8015500:	2b2b      	cmp	r3, #43	; 0x2b
 8015502:	d02c      	beq.n	801555e <__gethex+0x13e>
 8015504:	2b2d      	cmp	r3, #45	; 0x2d
 8015506:	d02e      	beq.n	8015566 <__gethex+0x146>
 8015508:	1c71      	adds	r1, r6, #1
 801550a:	f04f 0900 	mov.w	r9, #0
 801550e:	7808      	ldrb	r0, [r1, #0]
 8015510:	f7ff ff71 	bl	80153f6 <__hexdig_fun>
 8015514:	1e43      	subs	r3, r0, #1
 8015516:	b2db      	uxtb	r3, r3
 8015518:	2b18      	cmp	r3, #24
 801551a:	d82c      	bhi.n	8015576 <__gethex+0x156>
 801551c:	f1a0 0210 	sub.w	r2, r0, #16
 8015520:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015524:	f7ff ff67 	bl	80153f6 <__hexdig_fun>
 8015528:	1e43      	subs	r3, r0, #1
 801552a:	b2db      	uxtb	r3, r3
 801552c:	2b18      	cmp	r3, #24
 801552e:	d91d      	bls.n	801556c <__gethex+0x14c>
 8015530:	f1b9 0f00 	cmp.w	r9, #0
 8015534:	d000      	beq.n	8015538 <__gethex+0x118>
 8015536:	4252      	negs	r2, r2
 8015538:	4415      	add	r5, r2
 801553a:	f8cb 1000 	str.w	r1, [fp]
 801553e:	b1e4      	cbz	r4, 801557a <__gethex+0x15a>
 8015540:	9b00      	ldr	r3, [sp, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	bf14      	ite	ne
 8015546:	2700      	movne	r7, #0
 8015548:	2706      	moveq	r7, #6
 801554a:	4638      	mov	r0, r7
 801554c:	b009      	add	sp, #36	; 0x24
 801554e:	ecbd 8b02 	vpop	{d8}
 8015552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015556:	463e      	mov	r6, r7
 8015558:	4625      	mov	r5, r4
 801555a:	2401      	movs	r4, #1
 801555c:	e7ca      	b.n	80154f4 <__gethex+0xd4>
 801555e:	f04f 0900 	mov.w	r9, #0
 8015562:	1cb1      	adds	r1, r6, #2
 8015564:	e7d3      	b.n	801550e <__gethex+0xee>
 8015566:	f04f 0901 	mov.w	r9, #1
 801556a:	e7fa      	b.n	8015562 <__gethex+0x142>
 801556c:	230a      	movs	r3, #10
 801556e:	fb03 0202 	mla	r2, r3, r2, r0
 8015572:	3a10      	subs	r2, #16
 8015574:	e7d4      	b.n	8015520 <__gethex+0x100>
 8015576:	4631      	mov	r1, r6
 8015578:	e7df      	b.n	801553a <__gethex+0x11a>
 801557a:	1bf3      	subs	r3, r6, r7
 801557c:	3b01      	subs	r3, #1
 801557e:	4621      	mov	r1, r4
 8015580:	2b07      	cmp	r3, #7
 8015582:	dc0b      	bgt.n	801559c <__gethex+0x17c>
 8015584:	ee18 0a10 	vmov	r0, s16
 8015588:	f000 faf6 	bl	8015b78 <_Balloc>
 801558c:	4604      	mov	r4, r0
 801558e:	b940      	cbnz	r0, 80155a2 <__gethex+0x182>
 8015590:	4b5d      	ldr	r3, [pc, #372]	; (8015708 <__gethex+0x2e8>)
 8015592:	4602      	mov	r2, r0
 8015594:	21de      	movs	r1, #222	; 0xde
 8015596:	485d      	ldr	r0, [pc, #372]	; (801570c <__gethex+0x2ec>)
 8015598:	f7fc fdd4 	bl	8012144 <__assert_func>
 801559c:	3101      	adds	r1, #1
 801559e:	105b      	asrs	r3, r3, #1
 80155a0:	e7ee      	b.n	8015580 <__gethex+0x160>
 80155a2:	f100 0914 	add.w	r9, r0, #20
 80155a6:	f04f 0b00 	mov.w	fp, #0
 80155aa:	f1ca 0301 	rsb	r3, sl, #1
 80155ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80155b2:	f8cd b000 	str.w	fp, [sp]
 80155b6:	9306      	str	r3, [sp, #24]
 80155b8:	42b7      	cmp	r7, r6
 80155ba:	d340      	bcc.n	801563e <__gethex+0x21e>
 80155bc:	9802      	ldr	r0, [sp, #8]
 80155be:	9b00      	ldr	r3, [sp, #0]
 80155c0:	f840 3b04 	str.w	r3, [r0], #4
 80155c4:	eba0 0009 	sub.w	r0, r0, r9
 80155c8:	1080      	asrs	r0, r0, #2
 80155ca:	0146      	lsls	r6, r0, #5
 80155cc:	6120      	str	r0, [r4, #16]
 80155ce:	4618      	mov	r0, r3
 80155d0:	f000 fbc4 	bl	8015d5c <__hi0bits>
 80155d4:	1a30      	subs	r0, r6, r0
 80155d6:	f8d8 6000 	ldr.w	r6, [r8]
 80155da:	42b0      	cmp	r0, r6
 80155dc:	dd63      	ble.n	80156a6 <__gethex+0x286>
 80155de:	1b87      	subs	r7, r0, r6
 80155e0:	4639      	mov	r1, r7
 80155e2:	4620      	mov	r0, r4
 80155e4:	f000 ff68 	bl	80164b8 <__any_on>
 80155e8:	4682      	mov	sl, r0
 80155ea:	b1a8      	cbz	r0, 8015618 <__gethex+0x1f8>
 80155ec:	1e7b      	subs	r3, r7, #1
 80155ee:	1159      	asrs	r1, r3, #5
 80155f0:	f003 021f 	and.w	r2, r3, #31
 80155f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80155f8:	f04f 0a01 	mov.w	sl, #1
 80155fc:	fa0a f202 	lsl.w	r2, sl, r2
 8015600:	420a      	tst	r2, r1
 8015602:	d009      	beq.n	8015618 <__gethex+0x1f8>
 8015604:	4553      	cmp	r3, sl
 8015606:	dd05      	ble.n	8015614 <__gethex+0x1f4>
 8015608:	1eb9      	subs	r1, r7, #2
 801560a:	4620      	mov	r0, r4
 801560c:	f000 ff54 	bl	80164b8 <__any_on>
 8015610:	2800      	cmp	r0, #0
 8015612:	d145      	bne.n	80156a0 <__gethex+0x280>
 8015614:	f04f 0a02 	mov.w	sl, #2
 8015618:	4639      	mov	r1, r7
 801561a:	4620      	mov	r0, r4
 801561c:	f7ff fe99 	bl	8015352 <rshift>
 8015620:	443d      	add	r5, r7
 8015622:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015626:	42ab      	cmp	r3, r5
 8015628:	da4c      	bge.n	80156c4 <__gethex+0x2a4>
 801562a:	ee18 0a10 	vmov	r0, s16
 801562e:	4621      	mov	r1, r4
 8015630:	f000 fae2 	bl	8015bf8 <_Bfree>
 8015634:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015636:	2300      	movs	r3, #0
 8015638:	6013      	str	r3, [r2, #0]
 801563a:	27a3      	movs	r7, #163	; 0xa3
 801563c:	e785      	b.n	801554a <__gethex+0x12a>
 801563e:	1e73      	subs	r3, r6, #1
 8015640:	9a05      	ldr	r2, [sp, #20]
 8015642:	9303      	str	r3, [sp, #12]
 8015644:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8015648:	4293      	cmp	r3, r2
 801564a:	d019      	beq.n	8015680 <__gethex+0x260>
 801564c:	f1bb 0f20 	cmp.w	fp, #32
 8015650:	d107      	bne.n	8015662 <__gethex+0x242>
 8015652:	9b02      	ldr	r3, [sp, #8]
 8015654:	9a00      	ldr	r2, [sp, #0]
 8015656:	f843 2b04 	str.w	r2, [r3], #4
 801565a:	9302      	str	r3, [sp, #8]
 801565c:	2300      	movs	r3, #0
 801565e:	9300      	str	r3, [sp, #0]
 8015660:	469b      	mov	fp, r3
 8015662:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8015666:	f7ff fec6 	bl	80153f6 <__hexdig_fun>
 801566a:	9b00      	ldr	r3, [sp, #0]
 801566c:	f000 000f 	and.w	r0, r0, #15
 8015670:	fa00 f00b 	lsl.w	r0, r0, fp
 8015674:	4303      	orrs	r3, r0
 8015676:	9300      	str	r3, [sp, #0]
 8015678:	f10b 0b04 	add.w	fp, fp, #4
 801567c:	9b03      	ldr	r3, [sp, #12]
 801567e:	e00d      	b.n	801569c <__gethex+0x27c>
 8015680:	9b03      	ldr	r3, [sp, #12]
 8015682:	9a06      	ldr	r2, [sp, #24]
 8015684:	4413      	add	r3, r2
 8015686:	42bb      	cmp	r3, r7
 8015688:	d3e0      	bcc.n	801564c <__gethex+0x22c>
 801568a:	4618      	mov	r0, r3
 801568c:	9901      	ldr	r1, [sp, #4]
 801568e:	9307      	str	r3, [sp, #28]
 8015690:	4652      	mov	r2, sl
 8015692:	f001 f964 	bl	801695e <strncmp>
 8015696:	9b07      	ldr	r3, [sp, #28]
 8015698:	2800      	cmp	r0, #0
 801569a:	d1d7      	bne.n	801564c <__gethex+0x22c>
 801569c:	461e      	mov	r6, r3
 801569e:	e78b      	b.n	80155b8 <__gethex+0x198>
 80156a0:	f04f 0a03 	mov.w	sl, #3
 80156a4:	e7b8      	b.n	8015618 <__gethex+0x1f8>
 80156a6:	da0a      	bge.n	80156be <__gethex+0x29e>
 80156a8:	1a37      	subs	r7, r6, r0
 80156aa:	4621      	mov	r1, r4
 80156ac:	ee18 0a10 	vmov	r0, s16
 80156b0:	463a      	mov	r2, r7
 80156b2:	f000 fcbd 	bl	8016030 <__lshift>
 80156b6:	1bed      	subs	r5, r5, r7
 80156b8:	4604      	mov	r4, r0
 80156ba:	f100 0914 	add.w	r9, r0, #20
 80156be:	f04f 0a00 	mov.w	sl, #0
 80156c2:	e7ae      	b.n	8015622 <__gethex+0x202>
 80156c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80156c8:	42a8      	cmp	r0, r5
 80156ca:	dd72      	ble.n	80157b2 <__gethex+0x392>
 80156cc:	1b45      	subs	r5, r0, r5
 80156ce:	42ae      	cmp	r6, r5
 80156d0:	dc36      	bgt.n	8015740 <__gethex+0x320>
 80156d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80156d6:	2b02      	cmp	r3, #2
 80156d8:	d02a      	beq.n	8015730 <__gethex+0x310>
 80156da:	2b03      	cmp	r3, #3
 80156dc:	d02c      	beq.n	8015738 <__gethex+0x318>
 80156de:	2b01      	cmp	r3, #1
 80156e0:	d11c      	bne.n	801571c <__gethex+0x2fc>
 80156e2:	42ae      	cmp	r6, r5
 80156e4:	d11a      	bne.n	801571c <__gethex+0x2fc>
 80156e6:	2e01      	cmp	r6, #1
 80156e8:	d112      	bne.n	8015710 <__gethex+0x2f0>
 80156ea:	9a04      	ldr	r2, [sp, #16]
 80156ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80156f0:	6013      	str	r3, [r2, #0]
 80156f2:	2301      	movs	r3, #1
 80156f4:	6123      	str	r3, [r4, #16]
 80156f6:	f8c9 3000 	str.w	r3, [r9]
 80156fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80156fc:	2762      	movs	r7, #98	; 0x62
 80156fe:	601c      	str	r4, [r3, #0]
 8015700:	e723      	b.n	801554a <__gethex+0x12a>
 8015702:	bf00      	nop
 8015704:	08062c7c 	.word	0x08062c7c
 8015708:	08062ba0 	.word	0x08062ba0
 801570c:	08062c14 	.word	0x08062c14
 8015710:	1e71      	subs	r1, r6, #1
 8015712:	4620      	mov	r0, r4
 8015714:	f000 fed0 	bl	80164b8 <__any_on>
 8015718:	2800      	cmp	r0, #0
 801571a:	d1e6      	bne.n	80156ea <__gethex+0x2ca>
 801571c:	ee18 0a10 	vmov	r0, s16
 8015720:	4621      	mov	r1, r4
 8015722:	f000 fa69 	bl	8015bf8 <_Bfree>
 8015726:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015728:	2300      	movs	r3, #0
 801572a:	6013      	str	r3, [r2, #0]
 801572c:	2750      	movs	r7, #80	; 0x50
 801572e:	e70c      	b.n	801554a <__gethex+0x12a>
 8015730:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015732:	2b00      	cmp	r3, #0
 8015734:	d1f2      	bne.n	801571c <__gethex+0x2fc>
 8015736:	e7d8      	b.n	80156ea <__gethex+0x2ca>
 8015738:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801573a:	2b00      	cmp	r3, #0
 801573c:	d1d5      	bne.n	80156ea <__gethex+0x2ca>
 801573e:	e7ed      	b.n	801571c <__gethex+0x2fc>
 8015740:	1e6f      	subs	r7, r5, #1
 8015742:	f1ba 0f00 	cmp.w	sl, #0
 8015746:	d131      	bne.n	80157ac <__gethex+0x38c>
 8015748:	b127      	cbz	r7, 8015754 <__gethex+0x334>
 801574a:	4639      	mov	r1, r7
 801574c:	4620      	mov	r0, r4
 801574e:	f000 feb3 	bl	80164b8 <__any_on>
 8015752:	4682      	mov	sl, r0
 8015754:	117b      	asrs	r3, r7, #5
 8015756:	2101      	movs	r1, #1
 8015758:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801575c:	f007 071f 	and.w	r7, r7, #31
 8015760:	fa01 f707 	lsl.w	r7, r1, r7
 8015764:	421f      	tst	r7, r3
 8015766:	4629      	mov	r1, r5
 8015768:	4620      	mov	r0, r4
 801576a:	bf18      	it	ne
 801576c:	f04a 0a02 	orrne.w	sl, sl, #2
 8015770:	1b76      	subs	r6, r6, r5
 8015772:	f7ff fdee 	bl	8015352 <rshift>
 8015776:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801577a:	2702      	movs	r7, #2
 801577c:	f1ba 0f00 	cmp.w	sl, #0
 8015780:	d048      	beq.n	8015814 <__gethex+0x3f4>
 8015782:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015786:	2b02      	cmp	r3, #2
 8015788:	d015      	beq.n	80157b6 <__gethex+0x396>
 801578a:	2b03      	cmp	r3, #3
 801578c:	d017      	beq.n	80157be <__gethex+0x39e>
 801578e:	2b01      	cmp	r3, #1
 8015790:	d109      	bne.n	80157a6 <__gethex+0x386>
 8015792:	f01a 0f02 	tst.w	sl, #2
 8015796:	d006      	beq.n	80157a6 <__gethex+0x386>
 8015798:	f8d9 0000 	ldr.w	r0, [r9]
 801579c:	ea4a 0a00 	orr.w	sl, sl, r0
 80157a0:	f01a 0f01 	tst.w	sl, #1
 80157a4:	d10e      	bne.n	80157c4 <__gethex+0x3a4>
 80157a6:	f047 0710 	orr.w	r7, r7, #16
 80157aa:	e033      	b.n	8015814 <__gethex+0x3f4>
 80157ac:	f04f 0a01 	mov.w	sl, #1
 80157b0:	e7d0      	b.n	8015754 <__gethex+0x334>
 80157b2:	2701      	movs	r7, #1
 80157b4:	e7e2      	b.n	801577c <__gethex+0x35c>
 80157b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80157b8:	f1c3 0301 	rsb	r3, r3, #1
 80157bc:	9315      	str	r3, [sp, #84]	; 0x54
 80157be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d0f0      	beq.n	80157a6 <__gethex+0x386>
 80157c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80157c8:	f104 0314 	add.w	r3, r4, #20
 80157cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80157d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80157d4:	f04f 0c00 	mov.w	ip, #0
 80157d8:	4618      	mov	r0, r3
 80157da:	f853 2b04 	ldr.w	r2, [r3], #4
 80157de:	f1b2 3fff 	cmp.w	r2, #4294967295
 80157e2:	d01c      	beq.n	801581e <__gethex+0x3fe>
 80157e4:	3201      	adds	r2, #1
 80157e6:	6002      	str	r2, [r0, #0]
 80157e8:	2f02      	cmp	r7, #2
 80157ea:	f104 0314 	add.w	r3, r4, #20
 80157ee:	d13f      	bne.n	8015870 <__gethex+0x450>
 80157f0:	f8d8 2000 	ldr.w	r2, [r8]
 80157f4:	3a01      	subs	r2, #1
 80157f6:	42b2      	cmp	r2, r6
 80157f8:	d10a      	bne.n	8015810 <__gethex+0x3f0>
 80157fa:	1171      	asrs	r1, r6, #5
 80157fc:	2201      	movs	r2, #1
 80157fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015802:	f006 061f 	and.w	r6, r6, #31
 8015806:	fa02 f606 	lsl.w	r6, r2, r6
 801580a:	421e      	tst	r6, r3
 801580c:	bf18      	it	ne
 801580e:	4617      	movne	r7, r2
 8015810:	f047 0720 	orr.w	r7, r7, #32
 8015814:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015816:	601c      	str	r4, [r3, #0]
 8015818:	9b04      	ldr	r3, [sp, #16]
 801581a:	601d      	str	r5, [r3, #0]
 801581c:	e695      	b.n	801554a <__gethex+0x12a>
 801581e:	4299      	cmp	r1, r3
 8015820:	f843 cc04 	str.w	ip, [r3, #-4]
 8015824:	d8d8      	bhi.n	80157d8 <__gethex+0x3b8>
 8015826:	68a3      	ldr	r3, [r4, #8]
 8015828:	459b      	cmp	fp, r3
 801582a:	db19      	blt.n	8015860 <__gethex+0x440>
 801582c:	6861      	ldr	r1, [r4, #4]
 801582e:	ee18 0a10 	vmov	r0, s16
 8015832:	3101      	adds	r1, #1
 8015834:	f000 f9a0 	bl	8015b78 <_Balloc>
 8015838:	4681      	mov	r9, r0
 801583a:	b918      	cbnz	r0, 8015844 <__gethex+0x424>
 801583c:	4b1a      	ldr	r3, [pc, #104]	; (80158a8 <__gethex+0x488>)
 801583e:	4602      	mov	r2, r0
 8015840:	2184      	movs	r1, #132	; 0x84
 8015842:	e6a8      	b.n	8015596 <__gethex+0x176>
 8015844:	6922      	ldr	r2, [r4, #16]
 8015846:	3202      	adds	r2, #2
 8015848:	f104 010c 	add.w	r1, r4, #12
 801584c:	0092      	lsls	r2, r2, #2
 801584e:	300c      	adds	r0, #12
 8015850:	f7fc fcda 	bl	8012208 <memcpy>
 8015854:	4621      	mov	r1, r4
 8015856:	ee18 0a10 	vmov	r0, s16
 801585a:	f000 f9cd 	bl	8015bf8 <_Bfree>
 801585e:	464c      	mov	r4, r9
 8015860:	6923      	ldr	r3, [r4, #16]
 8015862:	1c5a      	adds	r2, r3, #1
 8015864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015868:	6122      	str	r2, [r4, #16]
 801586a:	2201      	movs	r2, #1
 801586c:	615a      	str	r2, [r3, #20]
 801586e:	e7bb      	b.n	80157e8 <__gethex+0x3c8>
 8015870:	6922      	ldr	r2, [r4, #16]
 8015872:	455a      	cmp	r2, fp
 8015874:	dd0b      	ble.n	801588e <__gethex+0x46e>
 8015876:	2101      	movs	r1, #1
 8015878:	4620      	mov	r0, r4
 801587a:	f7ff fd6a 	bl	8015352 <rshift>
 801587e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015882:	3501      	adds	r5, #1
 8015884:	42ab      	cmp	r3, r5
 8015886:	f6ff aed0 	blt.w	801562a <__gethex+0x20a>
 801588a:	2701      	movs	r7, #1
 801588c:	e7c0      	b.n	8015810 <__gethex+0x3f0>
 801588e:	f016 061f 	ands.w	r6, r6, #31
 8015892:	d0fa      	beq.n	801588a <__gethex+0x46a>
 8015894:	4453      	add	r3, sl
 8015896:	f1c6 0620 	rsb	r6, r6, #32
 801589a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801589e:	f000 fa5d 	bl	8015d5c <__hi0bits>
 80158a2:	42b0      	cmp	r0, r6
 80158a4:	dbe7      	blt.n	8015876 <__gethex+0x456>
 80158a6:	e7f0      	b.n	801588a <__gethex+0x46a>
 80158a8:	08062ba0 	.word	0x08062ba0

080158ac <L_shift>:
 80158ac:	f1c2 0208 	rsb	r2, r2, #8
 80158b0:	0092      	lsls	r2, r2, #2
 80158b2:	b570      	push	{r4, r5, r6, lr}
 80158b4:	f1c2 0620 	rsb	r6, r2, #32
 80158b8:	6843      	ldr	r3, [r0, #4]
 80158ba:	6804      	ldr	r4, [r0, #0]
 80158bc:	fa03 f506 	lsl.w	r5, r3, r6
 80158c0:	432c      	orrs	r4, r5
 80158c2:	40d3      	lsrs	r3, r2
 80158c4:	6004      	str	r4, [r0, #0]
 80158c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80158ca:	4288      	cmp	r0, r1
 80158cc:	d3f4      	bcc.n	80158b8 <L_shift+0xc>
 80158ce:	bd70      	pop	{r4, r5, r6, pc}

080158d0 <__match>:
 80158d0:	b530      	push	{r4, r5, lr}
 80158d2:	6803      	ldr	r3, [r0, #0]
 80158d4:	3301      	adds	r3, #1
 80158d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80158da:	b914      	cbnz	r4, 80158e2 <__match+0x12>
 80158dc:	6003      	str	r3, [r0, #0]
 80158de:	2001      	movs	r0, #1
 80158e0:	bd30      	pop	{r4, r5, pc}
 80158e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80158e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80158ea:	2d19      	cmp	r5, #25
 80158ec:	bf98      	it	ls
 80158ee:	3220      	addls	r2, #32
 80158f0:	42a2      	cmp	r2, r4
 80158f2:	d0f0      	beq.n	80158d6 <__match+0x6>
 80158f4:	2000      	movs	r0, #0
 80158f6:	e7f3      	b.n	80158e0 <__match+0x10>

080158f8 <__hexnan>:
 80158f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158fc:	680b      	ldr	r3, [r1, #0]
 80158fe:	115e      	asrs	r6, r3, #5
 8015900:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8015904:	f013 031f 	ands.w	r3, r3, #31
 8015908:	b087      	sub	sp, #28
 801590a:	bf18      	it	ne
 801590c:	3604      	addne	r6, #4
 801590e:	2500      	movs	r5, #0
 8015910:	1f37      	subs	r7, r6, #4
 8015912:	4690      	mov	r8, r2
 8015914:	6802      	ldr	r2, [r0, #0]
 8015916:	9301      	str	r3, [sp, #4]
 8015918:	4682      	mov	sl, r0
 801591a:	f846 5c04 	str.w	r5, [r6, #-4]
 801591e:	46b9      	mov	r9, r7
 8015920:	463c      	mov	r4, r7
 8015922:	9502      	str	r5, [sp, #8]
 8015924:	46ab      	mov	fp, r5
 8015926:	7851      	ldrb	r1, [r2, #1]
 8015928:	1c53      	adds	r3, r2, #1
 801592a:	9303      	str	r3, [sp, #12]
 801592c:	b341      	cbz	r1, 8015980 <__hexnan+0x88>
 801592e:	4608      	mov	r0, r1
 8015930:	9205      	str	r2, [sp, #20]
 8015932:	9104      	str	r1, [sp, #16]
 8015934:	f7ff fd5f 	bl	80153f6 <__hexdig_fun>
 8015938:	2800      	cmp	r0, #0
 801593a:	d14f      	bne.n	80159dc <__hexnan+0xe4>
 801593c:	9904      	ldr	r1, [sp, #16]
 801593e:	9a05      	ldr	r2, [sp, #20]
 8015940:	2920      	cmp	r1, #32
 8015942:	d818      	bhi.n	8015976 <__hexnan+0x7e>
 8015944:	9b02      	ldr	r3, [sp, #8]
 8015946:	459b      	cmp	fp, r3
 8015948:	dd13      	ble.n	8015972 <__hexnan+0x7a>
 801594a:	454c      	cmp	r4, r9
 801594c:	d206      	bcs.n	801595c <__hexnan+0x64>
 801594e:	2d07      	cmp	r5, #7
 8015950:	dc04      	bgt.n	801595c <__hexnan+0x64>
 8015952:	462a      	mov	r2, r5
 8015954:	4649      	mov	r1, r9
 8015956:	4620      	mov	r0, r4
 8015958:	f7ff ffa8 	bl	80158ac <L_shift>
 801595c:	4544      	cmp	r4, r8
 801595e:	d950      	bls.n	8015a02 <__hexnan+0x10a>
 8015960:	2300      	movs	r3, #0
 8015962:	f1a4 0904 	sub.w	r9, r4, #4
 8015966:	f844 3c04 	str.w	r3, [r4, #-4]
 801596a:	f8cd b008 	str.w	fp, [sp, #8]
 801596e:	464c      	mov	r4, r9
 8015970:	461d      	mov	r5, r3
 8015972:	9a03      	ldr	r2, [sp, #12]
 8015974:	e7d7      	b.n	8015926 <__hexnan+0x2e>
 8015976:	2929      	cmp	r1, #41	; 0x29
 8015978:	d156      	bne.n	8015a28 <__hexnan+0x130>
 801597a:	3202      	adds	r2, #2
 801597c:	f8ca 2000 	str.w	r2, [sl]
 8015980:	f1bb 0f00 	cmp.w	fp, #0
 8015984:	d050      	beq.n	8015a28 <__hexnan+0x130>
 8015986:	454c      	cmp	r4, r9
 8015988:	d206      	bcs.n	8015998 <__hexnan+0xa0>
 801598a:	2d07      	cmp	r5, #7
 801598c:	dc04      	bgt.n	8015998 <__hexnan+0xa0>
 801598e:	462a      	mov	r2, r5
 8015990:	4649      	mov	r1, r9
 8015992:	4620      	mov	r0, r4
 8015994:	f7ff ff8a 	bl	80158ac <L_shift>
 8015998:	4544      	cmp	r4, r8
 801599a:	d934      	bls.n	8015a06 <__hexnan+0x10e>
 801599c:	f1a8 0204 	sub.w	r2, r8, #4
 80159a0:	4623      	mov	r3, r4
 80159a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80159a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80159aa:	429f      	cmp	r7, r3
 80159ac:	d2f9      	bcs.n	80159a2 <__hexnan+0xaa>
 80159ae:	1b3b      	subs	r3, r7, r4
 80159b0:	f023 0303 	bic.w	r3, r3, #3
 80159b4:	3304      	adds	r3, #4
 80159b6:	3401      	adds	r4, #1
 80159b8:	3e03      	subs	r6, #3
 80159ba:	42b4      	cmp	r4, r6
 80159bc:	bf88      	it	hi
 80159be:	2304      	movhi	r3, #4
 80159c0:	4443      	add	r3, r8
 80159c2:	2200      	movs	r2, #0
 80159c4:	f843 2b04 	str.w	r2, [r3], #4
 80159c8:	429f      	cmp	r7, r3
 80159ca:	d2fb      	bcs.n	80159c4 <__hexnan+0xcc>
 80159cc:	683b      	ldr	r3, [r7, #0]
 80159ce:	b91b      	cbnz	r3, 80159d8 <__hexnan+0xe0>
 80159d0:	4547      	cmp	r7, r8
 80159d2:	d127      	bne.n	8015a24 <__hexnan+0x12c>
 80159d4:	2301      	movs	r3, #1
 80159d6:	603b      	str	r3, [r7, #0]
 80159d8:	2005      	movs	r0, #5
 80159da:	e026      	b.n	8015a2a <__hexnan+0x132>
 80159dc:	3501      	adds	r5, #1
 80159de:	2d08      	cmp	r5, #8
 80159e0:	f10b 0b01 	add.w	fp, fp, #1
 80159e4:	dd06      	ble.n	80159f4 <__hexnan+0xfc>
 80159e6:	4544      	cmp	r4, r8
 80159e8:	d9c3      	bls.n	8015972 <__hexnan+0x7a>
 80159ea:	2300      	movs	r3, #0
 80159ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80159f0:	2501      	movs	r5, #1
 80159f2:	3c04      	subs	r4, #4
 80159f4:	6822      	ldr	r2, [r4, #0]
 80159f6:	f000 000f 	and.w	r0, r0, #15
 80159fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80159fe:	6022      	str	r2, [r4, #0]
 8015a00:	e7b7      	b.n	8015972 <__hexnan+0x7a>
 8015a02:	2508      	movs	r5, #8
 8015a04:	e7b5      	b.n	8015972 <__hexnan+0x7a>
 8015a06:	9b01      	ldr	r3, [sp, #4]
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d0df      	beq.n	80159cc <__hexnan+0xd4>
 8015a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8015a10:	f1c3 0320 	rsb	r3, r3, #32
 8015a14:	fa22 f303 	lsr.w	r3, r2, r3
 8015a18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015a1c:	401a      	ands	r2, r3
 8015a1e:	f846 2c04 	str.w	r2, [r6, #-4]
 8015a22:	e7d3      	b.n	80159cc <__hexnan+0xd4>
 8015a24:	3f04      	subs	r7, #4
 8015a26:	e7d1      	b.n	80159cc <__hexnan+0xd4>
 8015a28:	2004      	movs	r0, #4
 8015a2a:	b007      	add	sp, #28
 8015a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015a30 <_localeconv_r>:
 8015a30:	4800      	ldr	r0, [pc, #0]	; (8015a34 <_localeconv_r+0x4>)
 8015a32:	4770      	bx	lr
 8015a34:	20001038 	.word	0x20001038

08015a38 <__retarget_lock_init_recursive>:
 8015a38:	4770      	bx	lr

08015a3a <__retarget_lock_acquire_recursive>:
 8015a3a:	4770      	bx	lr

08015a3c <__retarget_lock_release_recursive>:
 8015a3c:	4770      	bx	lr

08015a3e <__swhatbuf_r>:
 8015a3e:	b570      	push	{r4, r5, r6, lr}
 8015a40:	460e      	mov	r6, r1
 8015a42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015a46:	2900      	cmp	r1, #0
 8015a48:	b096      	sub	sp, #88	; 0x58
 8015a4a:	4614      	mov	r4, r2
 8015a4c:	461d      	mov	r5, r3
 8015a4e:	da08      	bge.n	8015a62 <__swhatbuf_r+0x24>
 8015a50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015a54:	2200      	movs	r2, #0
 8015a56:	602a      	str	r2, [r5, #0]
 8015a58:	061a      	lsls	r2, r3, #24
 8015a5a:	d410      	bmi.n	8015a7e <__swhatbuf_r+0x40>
 8015a5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015a60:	e00e      	b.n	8015a80 <__swhatbuf_r+0x42>
 8015a62:	466a      	mov	r2, sp
 8015a64:	f000 ffbe 	bl	80169e4 <_fstat_r>
 8015a68:	2800      	cmp	r0, #0
 8015a6a:	dbf1      	blt.n	8015a50 <__swhatbuf_r+0x12>
 8015a6c:	9a01      	ldr	r2, [sp, #4]
 8015a6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015a72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015a76:	425a      	negs	r2, r3
 8015a78:	415a      	adcs	r2, r3
 8015a7a:	602a      	str	r2, [r5, #0]
 8015a7c:	e7ee      	b.n	8015a5c <__swhatbuf_r+0x1e>
 8015a7e:	2340      	movs	r3, #64	; 0x40
 8015a80:	2000      	movs	r0, #0
 8015a82:	6023      	str	r3, [r4, #0]
 8015a84:	b016      	add	sp, #88	; 0x58
 8015a86:	bd70      	pop	{r4, r5, r6, pc}

08015a88 <__smakebuf_r>:
 8015a88:	898b      	ldrh	r3, [r1, #12]
 8015a8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015a8c:	079d      	lsls	r5, r3, #30
 8015a8e:	4606      	mov	r6, r0
 8015a90:	460c      	mov	r4, r1
 8015a92:	d507      	bpl.n	8015aa4 <__smakebuf_r+0x1c>
 8015a94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015a98:	6023      	str	r3, [r4, #0]
 8015a9a:	6123      	str	r3, [r4, #16]
 8015a9c:	2301      	movs	r3, #1
 8015a9e:	6163      	str	r3, [r4, #20]
 8015aa0:	b002      	add	sp, #8
 8015aa2:	bd70      	pop	{r4, r5, r6, pc}
 8015aa4:	ab01      	add	r3, sp, #4
 8015aa6:	466a      	mov	r2, sp
 8015aa8:	f7ff ffc9 	bl	8015a3e <__swhatbuf_r>
 8015aac:	9900      	ldr	r1, [sp, #0]
 8015aae:	4605      	mov	r5, r0
 8015ab0:	4630      	mov	r0, r6
 8015ab2:	f7fc fc2b 	bl	801230c <_malloc_r>
 8015ab6:	b948      	cbnz	r0, 8015acc <__smakebuf_r+0x44>
 8015ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015abc:	059a      	lsls	r2, r3, #22
 8015abe:	d4ef      	bmi.n	8015aa0 <__smakebuf_r+0x18>
 8015ac0:	f023 0303 	bic.w	r3, r3, #3
 8015ac4:	f043 0302 	orr.w	r3, r3, #2
 8015ac8:	81a3      	strh	r3, [r4, #12]
 8015aca:	e7e3      	b.n	8015a94 <__smakebuf_r+0xc>
 8015acc:	4b0d      	ldr	r3, [pc, #52]	; (8015b04 <__smakebuf_r+0x7c>)
 8015ace:	62b3      	str	r3, [r6, #40]	; 0x28
 8015ad0:	89a3      	ldrh	r3, [r4, #12]
 8015ad2:	6020      	str	r0, [r4, #0]
 8015ad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ad8:	81a3      	strh	r3, [r4, #12]
 8015ada:	9b00      	ldr	r3, [sp, #0]
 8015adc:	6163      	str	r3, [r4, #20]
 8015ade:	9b01      	ldr	r3, [sp, #4]
 8015ae0:	6120      	str	r0, [r4, #16]
 8015ae2:	b15b      	cbz	r3, 8015afc <__smakebuf_r+0x74>
 8015ae4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015ae8:	4630      	mov	r0, r6
 8015aea:	f000 ff8d 	bl	8016a08 <_isatty_r>
 8015aee:	b128      	cbz	r0, 8015afc <__smakebuf_r+0x74>
 8015af0:	89a3      	ldrh	r3, [r4, #12]
 8015af2:	f023 0303 	bic.w	r3, r3, #3
 8015af6:	f043 0301 	orr.w	r3, r3, #1
 8015afa:	81a3      	strh	r3, [r4, #12]
 8015afc:	89a0      	ldrh	r0, [r4, #12]
 8015afe:	4305      	orrs	r5, r0
 8015b00:	81a5      	strh	r5, [r4, #12]
 8015b02:	e7cd      	b.n	8015aa0 <__smakebuf_r+0x18>
 8015b04:	080151b1 	.word	0x080151b1

08015b08 <__ascii_mbtowc>:
 8015b08:	b082      	sub	sp, #8
 8015b0a:	b901      	cbnz	r1, 8015b0e <__ascii_mbtowc+0x6>
 8015b0c:	a901      	add	r1, sp, #4
 8015b0e:	b142      	cbz	r2, 8015b22 <__ascii_mbtowc+0x1a>
 8015b10:	b14b      	cbz	r3, 8015b26 <__ascii_mbtowc+0x1e>
 8015b12:	7813      	ldrb	r3, [r2, #0]
 8015b14:	600b      	str	r3, [r1, #0]
 8015b16:	7812      	ldrb	r2, [r2, #0]
 8015b18:	1e10      	subs	r0, r2, #0
 8015b1a:	bf18      	it	ne
 8015b1c:	2001      	movne	r0, #1
 8015b1e:	b002      	add	sp, #8
 8015b20:	4770      	bx	lr
 8015b22:	4610      	mov	r0, r2
 8015b24:	e7fb      	b.n	8015b1e <__ascii_mbtowc+0x16>
 8015b26:	f06f 0001 	mvn.w	r0, #1
 8015b2a:	e7f8      	b.n	8015b1e <__ascii_mbtowc+0x16>

08015b2c <memmove>:
 8015b2c:	4288      	cmp	r0, r1
 8015b2e:	b510      	push	{r4, lr}
 8015b30:	eb01 0402 	add.w	r4, r1, r2
 8015b34:	d902      	bls.n	8015b3c <memmove+0x10>
 8015b36:	4284      	cmp	r4, r0
 8015b38:	4623      	mov	r3, r4
 8015b3a:	d807      	bhi.n	8015b4c <memmove+0x20>
 8015b3c:	1e43      	subs	r3, r0, #1
 8015b3e:	42a1      	cmp	r1, r4
 8015b40:	d008      	beq.n	8015b54 <memmove+0x28>
 8015b42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015b46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015b4a:	e7f8      	b.n	8015b3e <memmove+0x12>
 8015b4c:	4402      	add	r2, r0
 8015b4e:	4601      	mov	r1, r0
 8015b50:	428a      	cmp	r2, r1
 8015b52:	d100      	bne.n	8015b56 <memmove+0x2a>
 8015b54:	bd10      	pop	{r4, pc}
 8015b56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015b5e:	e7f7      	b.n	8015b50 <memmove+0x24>

08015b60 <__malloc_lock>:
 8015b60:	4801      	ldr	r0, [pc, #4]	; (8015b68 <__malloc_lock+0x8>)
 8015b62:	f7ff bf6a 	b.w	8015a3a <__retarget_lock_acquire_recursive>
 8015b66:	bf00      	nop
 8015b68:	20013da8 	.word	0x20013da8

08015b6c <__malloc_unlock>:
 8015b6c:	4801      	ldr	r0, [pc, #4]	; (8015b74 <__malloc_unlock+0x8>)
 8015b6e:	f7ff bf65 	b.w	8015a3c <__retarget_lock_release_recursive>
 8015b72:	bf00      	nop
 8015b74:	20013da8 	.word	0x20013da8

08015b78 <_Balloc>:
 8015b78:	b570      	push	{r4, r5, r6, lr}
 8015b7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015b7c:	4604      	mov	r4, r0
 8015b7e:	460d      	mov	r5, r1
 8015b80:	b976      	cbnz	r6, 8015ba0 <_Balloc+0x28>
 8015b82:	2010      	movs	r0, #16
 8015b84:	f7fc fb38 	bl	80121f8 <malloc>
 8015b88:	4602      	mov	r2, r0
 8015b8a:	6260      	str	r0, [r4, #36]	; 0x24
 8015b8c:	b920      	cbnz	r0, 8015b98 <_Balloc+0x20>
 8015b8e:	4b18      	ldr	r3, [pc, #96]	; (8015bf0 <_Balloc+0x78>)
 8015b90:	4818      	ldr	r0, [pc, #96]	; (8015bf4 <_Balloc+0x7c>)
 8015b92:	2166      	movs	r1, #102	; 0x66
 8015b94:	f7fc fad6 	bl	8012144 <__assert_func>
 8015b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015b9c:	6006      	str	r6, [r0, #0]
 8015b9e:	60c6      	str	r6, [r0, #12]
 8015ba0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015ba2:	68f3      	ldr	r3, [r6, #12]
 8015ba4:	b183      	cbz	r3, 8015bc8 <_Balloc+0x50>
 8015ba6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015ba8:	68db      	ldr	r3, [r3, #12]
 8015baa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8015bae:	b9b8      	cbnz	r0, 8015be0 <_Balloc+0x68>
 8015bb0:	2101      	movs	r1, #1
 8015bb2:	fa01 f605 	lsl.w	r6, r1, r5
 8015bb6:	1d72      	adds	r2, r6, #5
 8015bb8:	0092      	lsls	r2, r2, #2
 8015bba:	4620      	mov	r0, r4
 8015bbc:	f000 fc9d 	bl	80164fa <_calloc_r>
 8015bc0:	b160      	cbz	r0, 8015bdc <_Balloc+0x64>
 8015bc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8015bc6:	e00e      	b.n	8015be6 <_Balloc+0x6e>
 8015bc8:	2221      	movs	r2, #33	; 0x21
 8015bca:	2104      	movs	r1, #4
 8015bcc:	4620      	mov	r0, r4
 8015bce:	f000 fc94 	bl	80164fa <_calloc_r>
 8015bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015bd4:	60f0      	str	r0, [r6, #12]
 8015bd6:	68db      	ldr	r3, [r3, #12]
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d1e4      	bne.n	8015ba6 <_Balloc+0x2e>
 8015bdc:	2000      	movs	r0, #0
 8015bde:	bd70      	pop	{r4, r5, r6, pc}
 8015be0:	6802      	ldr	r2, [r0, #0]
 8015be2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015be6:	2300      	movs	r3, #0
 8015be8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015bec:	e7f7      	b.n	8015bde <_Balloc+0x66>
 8015bee:	bf00      	nop
 8015bf0:	08062b2e 	.word	0x08062b2e
 8015bf4:	08062c90 	.word	0x08062c90

08015bf8 <_Bfree>:
 8015bf8:	b570      	push	{r4, r5, r6, lr}
 8015bfa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015bfc:	4605      	mov	r5, r0
 8015bfe:	460c      	mov	r4, r1
 8015c00:	b976      	cbnz	r6, 8015c20 <_Bfree+0x28>
 8015c02:	2010      	movs	r0, #16
 8015c04:	f7fc faf8 	bl	80121f8 <malloc>
 8015c08:	4602      	mov	r2, r0
 8015c0a:	6268      	str	r0, [r5, #36]	; 0x24
 8015c0c:	b920      	cbnz	r0, 8015c18 <_Bfree+0x20>
 8015c0e:	4b09      	ldr	r3, [pc, #36]	; (8015c34 <_Bfree+0x3c>)
 8015c10:	4809      	ldr	r0, [pc, #36]	; (8015c38 <_Bfree+0x40>)
 8015c12:	218a      	movs	r1, #138	; 0x8a
 8015c14:	f7fc fa96 	bl	8012144 <__assert_func>
 8015c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015c1c:	6006      	str	r6, [r0, #0]
 8015c1e:	60c6      	str	r6, [r0, #12]
 8015c20:	b13c      	cbz	r4, 8015c32 <_Bfree+0x3a>
 8015c22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015c24:	6862      	ldr	r2, [r4, #4]
 8015c26:	68db      	ldr	r3, [r3, #12]
 8015c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015c2c:	6021      	str	r1, [r4, #0]
 8015c2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015c32:	bd70      	pop	{r4, r5, r6, pc}
 8015c34:	08062b2e 	.word	0x08062b2e
 8015c38:	08062c90 	.word	0x08062c90

08015c3c <__multadd>:
 8015c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c40:	690d      	ldr	r5, [r1, #16]
 8015c42:	4607      	mov	r7, r0
 8015c44:	460c      	mov	r4, r1
 8015c46:	461e      	mov	r6, r3
 8015c48:	f101 0c14 	add.w	ip, r1, #20
 8015c4c:	2000      	movs	r0, #0
 8015c4e:	f8dc 3000 	ldr.w	r3, [ip]
 8015c52:	b299      	uxth	r1, r3
 8015c54:	fb02 6101 	mla	r1, r2, r1, r6
 8015c58:	0c1e      	lsrs	r6, r3, #16
 8015c5a:	0c0b      	lsrs	r3, r1, #16
 8015c5c:	fb02 3306 	mla	r3, r2, r6, r3
 8015c60:	b289      	uxth	r1, r1
 8015c62:	3001      	adds	r0, #1
 8015c64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015c68:	4285      	cmp	r5, r0
 8015c6a:	f84c 1b04 	str.w	r1, [ip], #4
 8015c6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015c72:	dcec      	bgt.n	8015c4e <__multadd+0x12>
 8015c74:	b30e      	cbz	r6, 8015cba <__multadd+0x7e>
 8015c76:	68a3      	ldr	r3, [r4, #8]
 8015c78:	42ab      	cmp	r3, r5
 8015c7a:	dc19      	bgt.n	8015cb0 <__multadd+0x74>
 8015c7c:	6861      	ldr	r1, [r4, #4]
 8015c7e:	4638      	mov	r0, r7
 8015c80:	3101      	adds	r1, #1
 8015c82:	f7ff ff79 	bl	8015b78 <_Balloc>
 8015c86:	4680      	mov	r8, r0
 8015c88:	b928      	cbnz	r0, 8015c96 <__multadd+0x5a>
 8015c8a:	4602      	mov	r2, r0
 8015c8c:	4b0c      	ldr	r3, [pc, #48]	; (8015cc0 <__multadd+0x84>)
 8015c8e:	480d      	ldr	r0, [pc, #52]	; (8015cc4 <__multadd+0x88>)
 8015c90:	21b5      	movs	r1, #181	; 0xb5
 8015c92:	f7fc fa57 	bl	8012144 <__assert_func>
 8015c96:	6922      	ldr	r2, [r4, #16]
 8015c98:	3202      	adds	r2, #2
 8015c9a:	f104 010c 	add.w	r1, r4, #12
 8015c9e:	0092      	lsls	r2, r2, #2
 8015ca0:	300c      	adds	r0, #12
 8015ca2:	f7fc fab1 	bl	8012208 <memcpy>
 8015ca6:	4621      	mov	r1, r4
 8015ca8:	4638      	mov	r0, r7
 8015caa:	f7ff ffa5 	bl	8015bf8 <_Bfree>
 8015cae:	4644      	mov	r4, r8
 8015cb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015cb4:	3501      	adds	r5, #1
 8015cb6:	615e      	str	r6, [r3, #20]
 8015cb8:	6125      	str	r5, [r4, #16]
 8015cba:	4620      	mov	r0, r4
 8015cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015cc0:	08062ba0 	.word	0x08062ba0
 8015cc4:	08062c90 	.word	0x08062c90

08015cc8 <__s2b>:
 8015cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015ccc:	460c      	mov	r4, r1
 8015cce:	4615      	mov	r5, r2
 8015cd0:	461f      	mov	r7, r3
 8015cd2:	2209      	movs	r2, #9
 8015cd4:	3308      	adds	r3, #8
 8015cd6:	4606      	mov	r6, r0
 8015cd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8015cdc:	2100      	movs	r1, #0
 8015cde:	2201      	movs	r2, #1
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	db09      	blt.n	8015cf8 <__s2b+0x30>
 8015ce4:	4630      	mov	r0, r6
 8015ce6:	f7ff ff47 	bl	8015b78 <_Balloc>
 8015cea:	b940      	cbnz	r0, 8015cfe <__s2b+0x36>
 8015cec:	4602      	mov	r2, r0
 8015cee:	4b19      	ldr	r3, [pc, #100]	; (8015d54 <__s2b+0x8c>)
 8015cf0:	4819      	ldr	r0, [pc, #100]	; (8015d58 <__s2b+0x90>)
 8015cf2:	21ce      	movs	r1, #206	; 0xce
 8015cf4:	f7fc fa26 	bl	8012144 <__assert_func>
 8015cf8:	0052      	lsls	r2, r2, #1
 8015cfa:	3101      	adds	r1, #1
 8015cfc:	e7f0      	b.n	8015ce0 <__s2b+0x18>
 8015cfe:	9b08      	ldr	r3, [sp, #32]
 8015d00:	6143      	str	r3, [r0, #20]
 8015d02:	2d09      	cmp	r5, #9
 8015d04:	f04f 0301 	mov.w	r3, #1
 8015d08:	6103      	str	r3, [r0, #16]
 8015d0a:	dd16      	ble.n	8015d3a <__s2b+0x72>
 8015d0c:	f104 0909 	add.w	r9, r4, #9
 8015d10:	46c8      	mov	r8, r9
 8015d12:	442c      	add	r4, r5
 8015d14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015d18:	4601      	mov	r1, r0
 8015d1a:	3b30      	subs	r3, #48	; 0x30
 8015d1c:	220a      	movs	r2, #10
 8015d1e:	4630      	mov	r0, r6
 8015d20:	f7ff ff8c 	bl	8015c3c <__multadd>
 8015d24:	45a0      	cmp	r8, r4
 8015d26:	d1f5      	bne.n	8015d14 <__s2b+0x4c>
 8015d28:	f1a5 0408 	sub.w	r4, r5, #8
 8015d2c:	444c      	add	r4, r9
 8015d2e:	1b2d      	subs	r5, r5, r4
 8015d30:	1963      	adds	r3, r4, r5
 8015d32:	42bb      	cmp	r3, r7
 8015d34:	db04      	blt.n	8015d40 <__s2b+0x78>
 8015d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015d3a:	340a      	adds	r4, #10
 8015d3c:	2509      	movs	r5, #9
 8015d3e:	e7f6      	b.n	8015d2e <__s2b+0x66>
 8015d40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015d44:	4601      	mov	r1, r0
 8015d46:	3b30      	subs	r3, #48	; 0x30
 8015d48:	220a      	movs	r2, #10
 8015d4a:	4630      	mov	r0, r6
 8015d4c:	f7ff ff76 	bl	8015c3c <__multadd>
 8015d50:	e7ee      	b.n	8015d30 <__s2b+0x68>
 8015d52:	bf00      	nop
 8015d54:	08062ba0 	.word	0x08062ba0
 8015d58:	08062c90 	.word	0x08062c90

08015d5c <__hi0bits>:
 8015d5c:	0c03      	lsrs	r3, r0, #16
 8015d5e:	041b      	lsls	r3, r3, #16
 8015d60:	b9d3      	cbnz	r3, 8015d98 <__hi0bits+0x3c>
 8015d62:	0400      	lsls	r0, r0, #16
 8015d64:	2310      	movs	r3, #16
 8015d66:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015d6a:	bf04      	itt	eq
 8015d6c:	0200      	lsleq	r0, r0, #8
 8015d6e:	3308      	addeq	r3, #8
 8015d70:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015d74:	bf04      	itt	eq
 8015d76:	0100      	lsleq	r0, r0, #4
 8015d78:	3304      	addeq	r3, #4
 8015d7a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015d7e:	bf04      	itt	eq
 8015d80:	0080      	lsleq	r0, r0, #2
 8015d82:	3302      	addeq	r3, #2
 8015d84:	2800      	cmp	r0, #0
 8015d86:	db05      	blt.n	8015d94 <__hi0bits+0x38>
 8015d88:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015d8c:	f103 0301 	add.w	r3, r3, #1
 8015d90:	bf08      	it	eq
 8015d92:	2320      	moveq	r3, #32
 8015d94:	4618      	mov	r0, r3
 8015d96:	4770      	bx	lr
 8015d98:	2300      	movs	r3, #0
 8015d9a:	e7e4      	b.n	8015d66 <__hi0bits+0xa>

08015d9c <__lo0bits>:
 8015d9c:	6803      	ldr	r3, [r0, #0]
 8015d9e:	f013 0207 	ands.w	r2, r3, #7
 8015da2:	4601      	mov	r1, r0
 8015da4:	d00b      	beq.n	8015dbe <__lo0bits+0x22>
 8015da6:	07da      	lsls	r2, r3, #31
 8015da8:	d423      	bmi.n	8015df2 <__lo0bits+0x56>
 8015daa:	0798      	lsls	r0, r3, #30
 8015dac:	bf49      	itett	mi
 8015dae:	085b      	lsrmi	r3, r3, #1
 8015db0:	089b      	lsrpl	r3, r3, #2
 8015db2:	2001      	movmi	r0, #1
 8015db4:	600b      	strmi	r3, [r1, #0]
 8015db6:	bf5c      	itt	pl
 8015db8:	600b      	strpl	r3, [r1, #0]
 8015dba:	2002      	movpl	r0, #2
 8015dbc:	4770      	bx	lr
 8015dbe:	b298      	uxth	r0, r3
 8015dc0:	b9a8      	cbnz	r0, 8015dee <__lo0bits+0x52>
 8015dc2:	0c1b      	lsrs	r3, r3, #16
 8015dc4:	2010      	movs	r0, #16
 8015dc6:	b2da      	uxtb	r2, r3
 8015dc8:	b90a      	cbnz	r2, 8015dce <__lo0bits+0x32>
 8015dca:	3008      	adds	r0, #8
 8015dcc:	0a1b      	lsrs	r3, r3, #8
 8015dce:	071a      	lsls	r2, r3, #28
 8015dd0:	bf04      	itt	eq
 8015dd2:	091b      	lsreq	r3, r3, #4
 8015dd4:	3004      	addeq	r0, #4
 8015dd6:	079a      	lsls	r2, r3, #30
 8015dd8:	bf04      	itt	eq
 8015dda:	089b      	lsreq	r3, r3, #2
 8015ddc:	3002      	addeq	r0, #2
 8015dde:	07da      	lsls	r2, r3, #31
 8015de0:	d403      	bmi.n	8015dea <__lo0bits+0x4e>
 8015de2:	085b      	lsrs	r3, r3, #1
 8015de4:	f100 0001 	add.w	r0, r0, #1
 8015de8:	d005      	beq.n	8015df6 <__lo0bits+0x5a>
 8015dea:	600b      	str	r3, [r1, #0]
 8015dec:	4770      	bx	lr
 8015dee:	4610      	mov	r0, r2
 8015df0:	e7e9      	b.n	8015dc6 <__lo0bits+0x2a>
 8015df2:	2000      	movs	r0, #0
 8015df4:	4770      	bx	lr
 8015df6:	2020      	movs	r0, #32
 8015df8:	4770      	bx	lr
	...

08015dfc <__i2b>:
 8015dfc:	b510      	push	{r4, lr}
 8015dfe:	460c      	mov	r4, r1
 8015e00:	2101      	movs	r1, #1
 8015e02:	f7ff feb9 	bl	8015b78 <_Balloc>
 8015e06:	4602      	mov	r2, r0
 8015e08:	b928      	cbnz	r0, 8015e16 <__i2b+0x1a>
 8015e0a:	4b05      	ldr	r3, [pc, #20]	; (8015e20 <__i2b+0x24>)
 8015e0c:	4805      	ldr	r0, [pc, #20]	; (8015e24 <__i2b+0x28>)
 8015e0e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8015e12:	f7fc f997 	bl	8012144 <__assert_func>
 8015e16:	2301      	movs	r3, #1
 8015e18:	6144      	str	r4, [r0, #20]
 8015e1a:	6103      	str	r3, [r0, #16]
 8015e1c:	bd10      	pop	{r4, pc}
 8015e1e:	bf00      	nop
 8015e20:	08062ba0 	.word	0x08062ba0
 8015e24:	08062c90 	.word	0x08062c90

08015e28 <__multiply>:
 8015e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e2c:	4691      	mov	r9, r2
 8015e2e:	690a      	ldr	r2, [r1, #16]
 8015e30:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015e34:	429a      	cmp	r2, r3
 8015e36:	bfb8      	it	lt
 8015e38:	460b      	movlt	r3, r1
 8015e3a:	460c      	mov	r4, r1
 8015e3c:	bfbc      	itt	lt
 8015e3e:	464c      	movlt	r4, r9
 8015e40:	4699      	movlt	r9, r3
 8015e42:	6927      	ldr	r7, [r4, #16]
 8015e44:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015e48:	68a3      	ldr	r3, [r4, #8]
 8015e4a:	6861      	ldr	r1, [r4, #4]
 8015e4c:	eb07 060a 	add.w	r6, r7, sl
 8015e50:	42b3      	cmp	r3, r6
 8015e52:	b085      	sub	sp, #20
 8015e54:	bfb8      	it	lt
 8015e56:	3101      	addlt	r1, #1
 8015e58:	f7ff fe8e 	bl	8015b78 <_Balloc>
 8015e5c:	b930      	cbnz	r0, 8015e6c <__multiply+0x44>
 8015e5e:	4602      	mov	r2, r0
 8015e60:	4b44      	ldr	r3, [pc, #272]	; (8015f74 <__multiply+0x14c>)
 8015e62:	4845      	ldr	r0, [pc, #276]	; (8015f78 <__multiply+0x150>)
 8015e64:	f240 115d 	movw	r1, #349	; 0x15d
 8015e68:	f7fc f96c 	bl	8012144 <__assert_func>
 8015e6c:	f100 0514 	add.w	r5, r0, #20
 8015e70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015e74:	462b      	mov	r3, r5
 8015e76:	2200      	movs	r2, #0
 8015e78:	4543      	cmp	r3, r8
 8015e7a:	d321      	bcc.n	8015ec0 <__multiply+0x98>
 8015e7c:	f104 0314 	add.w	r3, r4, #20
 8015e80:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015e84:	f109 0314 	add.w	r3, r9, #20
 8015e88:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015e8c:	9202      	str	r2, [sp, #8]
 8015e8e:	1b3a      	subs	r2, r7, r4
 8015e90:	3a15      	subs	r2, #21
 8015e92:	f022 0203 	bic.w	r2, r2, #3
 8015e96:	3204      	adds	r2, #4
 8015e98:	f104 0115 	add.w	r1, r4, #21
 8015e9c:	428f      	cmp	r7, r1
 8015e9e:	bf38      	it	cc
 8015ea0:	2204      	movcc	r2, #4
 8015ea2:	9201      	str	r2, [sp, #4]
 8015ea4:	9a02      	ldr	r2, [sp, #8]
 8015ea6:	9303      	str	r3, [sp, #12]
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	d80c      	bhi.n	8015ec6 <__multiply+0x9e>
 8015eac:	2e00      	cmp	r6, #0
 8015eae:	dd03      	ble.n	8015eb8 <__multiply+0x90>
 8015eb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d05a      	beq.n	8015f6e <__multiply+0x146>
 8015eb8:	6106      	str	r6, [r0, #16]
 8015eba:	b005      	add	sp, #20
 8015ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ec0:	f843 2b04 	str.w	r2, [r3], #4
 8015ec4:	e7d8      	b.n	8015e78 <__multiply+0x50>
 8015ec6:	f8b3 a000 	ldrh.w	sl, [r3]
 8015eca:	f1ba 0f00 	cmp.w	sl, #0
 8015ece:	d024      	beq.n	8015f1a <__multiply+0xf2>
 8015ed0:	f104 0e14 	add.w	lr, r4, #20
 8015ed4:	46a9      	mov	r9, r5
 8015ed6:	f04f 0c00 	mov.w	ip, #0
 8015eda:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015ede:	f8d9 1000 	ldr.w	r1, [r9]
 8015ee2:	fa1f fb82 	uxth.w	fp, r2
 8015ee6:	b289      	uxth	r1, r1
 8015ee8:	fb0a 110b 	mla	r1, sl, fp, r1
 8015eec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015ef0:	f8d9 2000 	ldr.w	r2, [r9]
 8015ef4:	4461      	add	r1, ip
 8015ef6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015efa:	fb0a c20b 	mla	r2, sl, fp, ip
 8015efe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015f02:	b289      	uxth	r1, r1
 8015f04:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015f08:	4577      	cmp	r7, lr
 8015f0a:	f849 1b04 	str.w	r1, [r9], #4
 8015f0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015f12:	d8e2      	bhi.n	8015eda <__multiply+0xb2>
 8015f14:	9a01      	ldr	r2, [sp, #4]
 8015f16:	f845 c002 	str.w	ip, [r5, r2]
 8015f1a:	9a03      	ldr	r2, [sp, #12]
 8015f1c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8015f20:	3304      	adds	r3, #4
 8015f22:	f1b9 0f00 	cmp.w	r9, #0
 8015f26:	d020      	beq.n	8015f6a <__multiply+0x142>
 8015f28:	6829      	ldr	r1, [r5, #0]
 8015f2a:	f104 0c14 	add.w	ip, r4, #20
 8015f2e:	46ae      	mov	lr, r5
 8015f30:	f04f 0a00 	mov.w	sl, #0
 8015f34:	f8bc b000 	ldrh.w	fp, [ip]
 8015f38:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015f3c:	fb09 220b 	mla	r2, r9, fp, r2
 8015f40:	4492      	add	sl, r2
 8015f42:	b289      	uxth	r1, r1
 8015f44:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8015f48:	f84e 1b04 	str.w	r1, [lr], #4
 8015f4c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8015f50:	f8be 1000 	ldrh.w	r1, [lr]
 8015f54:	0c12      	lsrs	r2, r2, #16
 8015f56:	fb09 1102 	mla	r1, r9, r2, r1
 8015f5a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8015f5e:	4567      	cmp	r7, ip
 8015f60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015f64:	d8e6      	bhi.n	8015f34 <__multiply+0x10c>
 8015f66:	9a01      	ldr	r2, [sp, #4]
 8015f68:	50a9      	str	r1, [r5, r2]
 8015f6a:	3504      	adds	r5, #4
 8015f6c:	e79a      	b.n	8015ea4 <__multiply+0x7c>
 8015f6e:	3e01      	subs	r6, #1
 8015f70:	e79c      	b.n	8015eac <__multiply+0x84>
 8015f72:	bf00      	nop
 8015f74:	08062ba0 	.word	0x08062ba0
 8015f78:	08062c90 	.word	0x08062c90

08015f7c <__pow5mult>:
 8015f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f80:	4615      	mov	r5, r2
 8015f82:	f012 0203 	ands.w	r2, r2, #3
 8015f86:	4606      	mov	r6, r0
 8015f88:	460f      	mov	r7, r1
 8015f8a:	d007      	beq.n	8015f9c <__pow5mult+0x20>
 8015f8c:	4c25      	ldr	r4, [pc, #148]	; (8016024 <__pow5mult+0xa8>)
 8015f8e:	3a01      	subs	r2, #1
 8015f90:	2300      	movs	r3, #0
 8015f92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015f96:	f7ff fe51 	bl	8015c3c <__multadd>
 8015f9a:	4607      	mov	r7, r0
 8015f9c:	10ad      	asrs	r5, r5, #2
 8015f9e:	d03d      	beq.n	801601c <__pow5mult+0xa0>
 8015fa0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015fa2:	b97c      	cbnz	r4, 8015fc4 <__pow5mult+0x48>
 8015fa4:	2010      	movs	r0, #16
 8015fa6:	f7fc f927 	bl	80121f8 <malloc>
 8015faa:	4602      	mov	r2, r0
 8015fac:	6270      	str	r0, [r6, #36]	; 0x24
 8015fae:	b928      	cbnz	r0, 8015fbc <__pow5mult+0x40>
 8015fb0:	4b1d      	ldr	r3, [pc, #116]	; (8016028 <__pow5mult+0xac>)
 8015fb2:	481e      	ldr	r0, [pc, #120]	; (801602c <__pow5mult+0xb0>)
 8015fb4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015fb8:	f7fc f8c4 	bl	8012144 <__assert_func>
 8015fbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015fc0:	6004      	str	r4, [r0, #0]
 8015fc2:	60c4      	str	r4, [r0, #12]
 8015fc4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015fc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015fcc:	b94c      	cbnz	r4, 8015fe2 <__pow5mult+0x66>
 8015fce:	f240 2171 	movw	r1, #625	; 0x271
 8015fd2:	4630      	mov	r0, r6
 8015fd4:	f7ff ff12 	bl	8015dfc <__i2b>
 8015fd8:	2300      	movs	r3, #0
 8015fda:	f8c8 0008 	str.w	r0, [r8, #8]
 8015fde:	4604      	mov	r4, r0
 8015fe0:	6003      	str	r3, [r0, #0]
 8015fe2:	f04f 0900 	mov.w	r9, #0
 8015fe6:	07eb      	lsls	r3, r5, #31
 8015fe8:	d50a      	bpl.n	8016000 <__pow5mult+0x84>
 8015fea:	4639      	mov	r1, r7
 8015fec:	4622      	mov	r2, r4
 8015fee:	4630      	mov	r0, r6
 8015ff0:	f7ff ff1a 	bl	8015e28 <__multiply>
 8015ff4:	4639      	mov	r1, r7
 8015ff6:	4680      	mov	r8, r0
 8015ff8:	4630      	mov	r0, r6
 8015ffa:	f7ff fdfd 	bl	8015bf8 <_Bfree>
 8015ffe:	4647      	mov	r7, r8
 8016000:	106d      	asrs	r5, r5, #1
 8016002:	d00b      	beq.n	801601c <__pow5mult+0xa0>
 8016004:	6820      	ldr	r0, [r4, #0]
 8016006:	b938      	cbnz	r0, 8016018 <__pow5mult+0x9c>
 8016008:	4622      	mov	r2, r4
 801600a:	4621      	mov	r1, r4
 801600c:	4630      	mov	r0, r6
 801600e:	f7ff ff0b 	bl	8015e28 <__multiply>
 8016012:	6020      	str	r0, [r4, #0]
 8016014:	f8c0 9000 	str.w	r9, [r0]
 8016018:	4604      	mov	r4, r0
 801601a:	e7e4      	b.n	8015fe6 <__pow5mult+0x6a>
 801601c:	4638      	mov	r0, r7
 801601e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016022:	bf00      	nop
 8016024:	08062de0 	.word	0x08062de0
 8016028:	08062b2e 	.word	0x08062b2e
 801602c:	08062c90 	.word	0x08062c90

08016030 <__lshift>:
 8016030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016034:	460c      	mov	r4, r1
 8016036:	6849      	ldr	r1, [r1, #4]
 8016038:	6923      	ldr	r3, [r4, #16]
 801603a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801603e:	68a3      	ldr	r3, [r4, #8]
 8016040:	4607      	mov	r7, r0
 8016042:	4691      	mov	r9, r2
 8016044:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016048:	f108 0601 	add.w	r6, r8, #1
 801604c:	42b3      	cmp	r3, r6
 801604e:	db0b      	blt.n	8016068 <__lshift+0x38>
 8016050:	4638      	mov	r0, r7
 8016052:	f7ff fd91 	bl	8015b78 <_Balloc>
 8016056:	4605      	mov	r5, r0
 8016058:	b948      	cbnz	r0, 801606e <__lshift+0x3e>
 801605a:	4602      	mov	r2, r0
 801605c:	4b2a      	ldr	r3, [pc, #168]	; (8016108 <__lshift+0xd8>)
 801605e:	482b      	ldr	r0, [pc, #172]	; (801610c <__lshift+0xdc>)
 8016060:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016064:	f7fc f86e 	bl	8012144 <__assert_func>
 8016068:	3101      	adds	r1, #1
 801606a:	005b      	lsls	r3, r3, #1
 801606c:	e7ee      	b.n	801604c <__lshift+0x1c>
 801606e:	2300      	movs	r3, #0
 8016070:	f100 0114 	add.w	r1, r0, #20
 8016074:	f100 0210 	add.w	r2, r0, #16
 8016078:	4618      	mov	r0, r3
 801607a:	4553      	cmp	r3, sl
 801607c:	db37      	blt.n	80160ee <__lshift+0xbe>
 801607e:	6920      	ldr	r0, [r4, #16]
 8016080:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016084:	f104 0314 	add.w	r3, r4, #20
 8016088:	f019 091f 	ands.w	r9, r9, #31
 801608c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8016090:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8016094:	d02f      	beq.n	80160f6 <__lshift+0xc6>
 8016096:	f1c9 0e20 	rsb	lr, r9, #32
 801609a:	468a      	mov	sl, r1
 801609c:	f04f 0c00 	mov.w	ip, #0
 80160a0:	681a      	ldr	r2, [r3, #0]
 80160a2:	fa02 f209 	lsl.w	r2, r2, r9
 80160a6:	ea42 020c 	orr.w	r2, r2, ip
 80160aa:	f84a 2b04 	str.w	r2, [sl], #4
 80160ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80160b2:	4298      	cmp	r0, r3
 80160b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80160b8:	d8f2      	bhi.n	80160a0 <__lshift+0x70>
 80160ba:	1b03      	subs	r3, r0, r4
 80160bc:	3b15      	subs	r3, #21
 80160be:	f023 0303 	bic.w	r3, r3, #3
 80160c2:	3304      	adds	r3, #4
 80160c4:	f104 0215 	add.w	r2, r4, #21
 80160c8:	4290      	cmp	r0, r2
 80160ca:	bf38      	it	cc
 80160cc:	2304      	movcc	r3, #4
 80160ce:	f841 c003 	str.w	ip, [r1, r3]
 80160d2:	f1bc 0f00 	cmp.w	ip, #0
 80160d6:	d001      	beq.n	80160dc <__lshift+0xac>
 80160d8:	f108 0602 	add.w	r6, r8, #2
 80160dc:	3e01      	subs	r6, #1
 80160de:	4638      	mov	r0, r7
 80160e0:	612e      	str	r6, [r5, #16]
 80160e2:	4621      	mov	r1, r4
 80160e4:	f7ff fd88 	bl	8015bf8 <_Bfree>
 80160e8:	4628      	mov	r0, r5
 80160ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80160f2:	3301      	adds	r3, #1
 80160f4:	e7c1      	b.n	801607a <__lshift+0x4a>
 80160f6:	3904      	subs	r1, #4
 80160f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80160fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8016100:	4298      	cmp	r0, r3
 8016102:	d8f9      	bhi.n	80160f8 <__lshift+0xc8>
 8016104:	e7ea      	b.n	80160dc <__lshift+0xac>
 8016106:	bf00      	nop
 8016108:	08062ba0 	.word	0x08062ba0
 801610c:	08062c90 	.word	0x08062c90

08016110 <__mcmp>:
 8016110:	b530      	push	{r4, r5, lr}
 8016112:	6902      	ldr	r2, [r0, #16]
 8016114:	690c      	ldr	r4, [r1, #16]
 8016116:	1b12      	subs	r2, r2, r4
 8016118:	d10e      	bne.n	8016138 <__mcmp+0x28>
 801611a:	f100 0314 	add.w	r3, r0, #20
 801611e:	3114      	adds	r1, #20
 8016120:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016124:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016128:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801612c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016130:	42a5      	cmp	r5, r4
 8016132:	d003      	beq.n	801613c <__mcmp+0x2c>
 8016134:	d305      	bcc.n	8016142 <__mcmp+0x32>
 8016136:	2201      	movs	r2, #1
 8016138:	4610      	mov	r0, r2
 801613a:	bd30      	pop	{r4, r5, pc}
 801613c:	4283      	cmp	r3, r0
 801613e:	d3f3      	bcc.n	8016128 <__mcmp+0x18>
 8016140:	e7fa      	b.n	8016138 <__mcmp+0x28>
 8016142:	f04f 32ff 	mov.w	r2, #4294967295
 8016146:	e7f7      	b.n	8016138 <__mcmp+0x28>

08016148 <__mdiff>:
 8016148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801614c:	460c      	mov	r4, r1
 801614e:	4606      	mov	r6, r0
 8016150:	4611      	mov	r1, r2
 8016152:	4620      	mov	r0, r4
 8016154:	4690      	mov	r8, r2
 8016156:	f7ff ffdb 	bl	8016110 <__mcmp>
 801615a:	1e05      	subs	r5, r0, #0
 801615c:	d110      	bne.n	8016180 <__mdiff+0x38>
 801615e:	4629      	mov	r1, r5
 8016160:	4630      	mov	r0, r6
 8016162:	f7ff fd09 	bl	8015b78 <_Balloc>
 8016166:	b930      	cbnz	r0, 8016176 <__mdiff+0x2e>
 8016168:	4b3a      	ldr	r3, [pc, #232]	; (8016254 <__mdiff+0x10c>)
 801616a:	4602      	mov	r2, r0
 801616c:	f240 2132 	movw	r1, #562	; 0x232
 8016170:	4839      	ldr	r0, [pc, #228]	; (8016258 <__mdiff+0x110>)
 8016172:	f7fb ffe7 	bl	8012144 <__assert_func>
 8016176:	2301      	movs	r3, #1
 8016178:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801617c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016180:	bfa4      	itt	ge
 8016182:	4643      	movge	r3, r8
 8016184:	46a0      	movge	r8, r4
 8016186:	4630      	mov	r0, r6
 8016188:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801618c:	bfa6      	itte	ge
 801618e:	461c      	movge	r4, r3
 8016190:	2500      	movge	r5, #0
 8016192:	2501      	movlt	r5, #1
 8016194:	f7ff fcf0 	bl	8015b78 <_Balloc>
 8016198:	b920      	cbnz	r0, 80161a4 <__mdiff+0x5c>
 801619a:	4b2e      	ldr	r3, [pc, #184]	; (8016254 <__mdiff+0x10c>)
 801619c:	4602      	mov	r2, r0
 801619e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80161a2:	e7e5      	b.n	8016170 <__mdiff+0x28>
 80161a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80161a8:	6926      	ldr	r6, [r4, #16]
 80161aa:	60c5      	str	r5, [r0, #12]
 80161ac:	f104 0914 	add.w	r9, r4, #20
 80161b0:	f108 0514 	add.w	r5, r8, #20
 80161b4:	f100 0e14 	add.w	lr, r0, #20
 80161b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80161bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80161c0:	f108 0210 	add.w	r2, r8, #16
 80161c4:	46f2      	mov	sl, lr
 80161c6:	2100      	movs	r1, #0
 80161c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80161cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80161d0:	fa1f f883 	uxth.w	r8, r3
 80161d4:	fa11 f18b 	uxtah	r1, r1, fp
 80161d8:	0c1b      	lsrs	r3, r3, #16
 80161da:	eba1 0808 	sub.w	r8, r1, r8
 80161de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80161e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80161e6:	fa1f f888 	uxth.w	r8, r8
 80161ea:	1419      	asrs	r1, r3, #16
 80161ec:	454e      	cmp	r6, r9
 80161ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80161f2:	f84a 3b04 	str.w	r3, [sl], #4
 80161f6:	d8e7      	bhi.n	80161c8 <__mdiff+0x80>
 80161f8:	1b33      	subs	r3, r6, r4
 80161fa:	3b15      	subs	r3, #21
 80161fc:	f023 0303 	bic.w	r3, r3, #3
 8016200:	3304      	adds	r3, #4
 8016202:	3415      	adds	r4, #21
 8016204:	42a6      	cmp	r6, r4
 8016206:	bf38      	it	cc
 8016208:	2304      	movcc	r3, #4
 801620a:	441d      	add	r5, r3
 801620c:	4473      	add	r3, lr
 801620e:	469e      	mov	lr, r3
 8016210:	462e      	mov	r6, r5
 8016212:	4566      	cmp	r6, ip
 8016214:	d30e      	bcc.n	8016234 <__mdiff+0xec>
 8016216:	f10c 0203 	add.w	r2, ip, #3
 801621a:	1b52      	subs	r2, r2, r5
 801621c:	f022 0203 	bic.w	r2, r2, #3
 8016220:	3d03      	subs	r5, #3
 8016222:	45ac      	cmp	ip, r5
 8016224:	bf38      	it	cc
 8016226:	2200      	movcc	r2, #0
 8016228:	441a      	add	r2, r3
 801622a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801622e:	b17b      	cbz	r3, 8016250 <__mdiff+0x108>
 8016230:	6107      	str	r7, [r0, #16]
 8016232:	e7a3      	b.n	801617c <__mdiff+0x34>
 8016234:	f856 8b04 	ldr.w	r8, [r6], #4
 8016238:	fa11 f288 	uxtah	r2, r1, r8
 801623c:	1414      	asrs	r4, r2, #16
 801623e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016242:	b292      	uxth	r2, r2
 8016244:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016248:	f84e 2b04 	str.w	r2, [lr], #4
 801624c:	1421      	asrs	r1, r4, #16
 801624e:	e7e0      	b.n	8016212 <__mdiff+0xca>
 8016250:	3f01      	subs	r7, #1
 8016252:	e7ea      	b.n	801622a <__mdiff+0xe2>
 8016254:	08062ba0 	.word	0x08062ba0
 8016258:	08062c90 	.word	0x08062c90

0801625c <__ulp>:
 801625c:	b082      	sub	sp, #8
 801625e:	ed8d 0b00 	vstr	d0, [sp]
 8016262:	9b01      	ldr	r3, [sp, #4]
 8016264:	4912      	ldr	r1, [pc, #72]	; (80162b0 <__ulp+0x54>)
 8016266:	4019      	ands	r1, r3
 8016268:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801626c:	2900      	cmp	r1, #0
 801626e:	dd05      	ble.n	801627c <__ulp+0x20>
 8016270:	2200      	movs	r2, #0
 8016272:	460b      	mov	r3, r1
 8016274:	ec43 2b10 	vmov	d0, r2, r3
 8016278:	b002      	add	sp, #8
 801627a:	4770      	bx	lr
 801627c:	4249      	negs	r1, r1
 801627e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016282:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016286:	f04f 0200 	mov.w	r2, #0
 801628a:	f04f 0300 	mov.w	r3, #0
 801628e:	da04      	bge.n	801629a <__ulp+0x3e>
 8016290:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016294:	fa41 f300 	asr.w	r3, r1, r0
 8016298:	e7ec      	b.n	8016274 <__ulp+0x18>
 801629a:	f1a0 0114 	sub.w	r1, r0, #20
 801629e:	291e      	cmp	r1, #30
 80162a0:	bfda      	itte	le
 80162a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80162a6:	fa20 f101 	lsrle.w	r1, r0, r1
 80162aa:	2101      	movgt	r1, #1
 80162ac:	460a      	mov	r2, r1
 80162ae:	e7e1      	b.n	8016274 <__ulp+0x18>
 80162b0:	7ff00000 	.word	0x7ff00000

080162b4 <__b2d>:
 80162b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162b6:	6905      	ldr	r5, [r0, #16]
 80162b8:	f100 0714 	add.w	r7, r0, #20
 80162bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80162c0:	1f2e      	subs	r6, r5, #4
 80162c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80162c6:	4620      	mov	r0, r4
 80162c8:	f7ff fd48 	bl	8015d5c <__hi0bits>
 80162cc:	f1c0 0320 	rsb	r3, r0, #32
 80162d0:	280a      	cmp	r0, #10
 80162d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016350 <__b2d+0x9c>
 80162d6:	600b      	str	r3, [r1, #0]
 80162d8:	dc14      	bgt.n	8016304 <__b2d+0x50>
 80162da:	f1c0 0e0b 	rsb	lr, r0, #11
 80162de:	fa24 f10e 	lsr.w	r1, r4, lr
 80162e2:	42b7      	cmp	r7, r6
 80162e4:	ea41 030c 	orr.w	r3, r1, ip
 80162e8:	bf34      	ite	cc
 80162ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80162ee:	2100      	movcs	r1, #0
 80162f0:	3015      	adds	r0, #21
 80162f2:	fa04 f000 	lsl.w	r0, r4, r0
 80162f6:	fa21 f10e 	lsr.w	r1, r1, lr
 80162fa:	ea40 0201 	orr.w	r2, r0, r1
 80162fe:	ec43 2b10 	vmov	d0, r2, r3
 8016302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016304:	42b7      	cmp	r7, r6
 8016306:	bf3a      	itte	cc
 8016308:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801630c:	f1a5 0608 	subcc.w	r6, r5, #8
 8016310:	2100      	movcs	r1, #0
 8016312:	380b      	subs	r0, #11
 8016314:	d017      	beq.n	8016346 <__b2d+0x92>
 8016316:	f1c0 0c20 	rsb	ip, r0, #32
 801631a:	fa04 f500 	lsl.w	r5, r4, r0
 801631e:	42be      	cmp	r6, r7
 8016320:	fa21 f40c 	lsr.w	r4, r1, ip
 8016324:	ea45 0504 	orr.w	r5, r5, r4
 8016328:	bf8c      	ite	hi
 801632a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801632e:	2400      	movls	r4, #0
 8016330:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016334:	fa01 f000 	lsl.w	r0, r1, r0
 8016338:	fa24 f40c 	lsr.w	r4, r4, ip
 801633c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016340:	ea40 0204 	orr.w	r2, r0, r4
 8016344:	e7db      	b.n	80162fe <__b2d+0x4a>
 8016346:	ea44 030c 	orr.w	r3, r4, ip
 801634a:	460a      	mov	r2, r1
 801634c:	e7d7      	b.n	80162fe <__b2d+0x4a>
 801634e:	bf00      	nop
 8016350:	3ff00000 	.word	0x3ff00000

08016354 <__d2b>:
 8016354:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016358:	4689      	mov	r9, r1
 801635a:	2101      	movs	r1, #1
 801635c:	ec57 6b10 	vmov	r6, r7, d0
 8016360:	4690      	mov	r8, r2
 8016362:	f7ff fc09 	bl	8015b78 <_Balloc>
 8016366:	4604      	mov	r4, r0
 8016368:	b930      	cbnz	r0, 8016378 <__d2b+0x24>
 801636a:	4602      	mov	r2, r0
 801636c:	4b25      	ldr	r3, [pc, #148]	; (8016404 <__d2b+0xb0>)
 801636e:	4826      	ldr	r0, [pc, #152]	; (8016408 <__d2b+0xb4>)
 8016370:	f240 310a 	movw	r1, #778	; 0x30a
 8016374:	f7fb fee6 	bl	8012144 <__assert_func>
 8016378:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801637c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016380:	bb35      	cbnz	r5, 80163d0 <__d2b+0x7c>
 8016382:	2e00      	cmp	r6, #0
 8016384:	9301      	str	r3, [sp, #4]
 8016386:	d028      	beq.n	80163da <__d2b+0x86>
 8016388:	4668      	mov	r0, sp
 801638a:	9600      	str	r6, [sp, #0]
 801638c:	f7ff fd06 	bl	8015d9c <__lo0bits>
 8016390:	9900      	ldr	r1, [sp, #0]
 8016392:	b300      	cbz	r0, 80163d6 <__d2b+0x82>
 8016394:	9a01      	ldr	r2, [sp, #4]
 8016396:	f1c0 0320 	rsb	r3, r0, #32
 801639a:	fa02 f303 	lsl.w	r3, r2, r3
 801639e:	430b      	orrs	r3, r1
 80163a0:	40c2      	lsrs	r2, r0
 80163a2:	6163      	str	r3, [r4, #20]
 80163a4:	9201      	str	r2, [sp, #4]
 80163a6:	9b01      	ldr	r3, [sp, #4]
 80163a8:	61a3      	str	r3, [r4, #24]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	bf14      	ite	ne
 80163ae:	2202      	movne	r2, #2
 80163b0:	2201      	moveq	r2, #1
 80163b2:	6122      	str	r2, [r4, #16]
 80163b4:	b1d5      	cbz	r5, 80163ec <__d2b+0x98>
 80163b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80163ba:	4405      	add	r5, r0
 80163bc:	f8c9 5000 	str.w	r5, [r9]
 80163c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80163c4:	f8c8 0000 	str.w	r0, [r8]
 80163c8:	4620      	mov	r0, r4
 80163ca:	b003      	add	sp, #12
 80163cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80163d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80163d4:	e7d5      	b.n	8016382 <__d2b+0x2e>
 80163d6:	6161      	str	r1, [r4, #20]
 80163d8:	e7e5      	b.n	80163a6 <__d2b+0x52>
 80163da:	a801      	add	r0, sp, #4
 80163dc:	f7ff fcde 	bl	8015d9c <__lo0bits>
 80163e0:	9b01      	ldr	r3, [sp, #4]
 80163e2:	6163      	str	r3, [r4, #20]
 80163e4:	2201      	movs	r2, #1
 80163e6:	6122      	str	r2, [r4, #16]
 80163e8:	3020      	adds	r0, #32
 80163ea:	e7e3      	b.n	80163b4 <__d2b+0x60>
 80163ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80163f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80163f4:	f8c9 0000 	str.w	r0, [r9]
 80163f8:	6918      	ldr	r0, [r3, #16]
 80163fa:	f7ff fcaf 	bl	8015d5c <__hi0bits>
 80163fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016402:	e7df      	b.n	80163c4 <__d2b+0x70>
 8016404:	08062ba0 	.word	0x08062ba0
 8016408:	08062c90 	.word	0x08062c90

0801640c <__ratio>:
 801640c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016410:	4688      	mov	r8, r1
 8016412:	4669      	mov	r1, sp
 8016414:	4681      	mov	r9, r0
 8016416:	f7ff ff4d 	bl	80162b4 <__b2d>
 801641a:	a901      	add	r1, sp, #4
 801641c:	4640      	mov	r0, r8
 801641e:	ec55 4b10 	vmov	r4, r5, d0
 8016422:	f7ff ff47 	bl	80162b4 <__b2d>
 8016426:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801642a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801642e:	eba3 0c02 	sub.w	ip, r3, r2
 8016432:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016436:	1a9b      	subs	r3, r3, r2
 8016438:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801643c:	ec51 0b10 	vmov	r0, r1, d0
 8016440:	2b00      	cmp	r3, #0
 8016442:	bfd6      	itet	le
 8016444:	460a      	movle	r2, r1
 8016446:	462a      	movgt	r2, r5
 8016448:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801644c:	468b      	mov	fp, r1
 801644e:	462f      	mov	r7, r5
 8016450:	bfd4      	ite	le
 8016452:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016456:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801645a:	4620      	mov	r0, r4
 801645c:	ee10 2a10 	vmov	r2, s0
 8016460:	465b      	mov	r3, fp
 8016462:	4639      	mov	r1, r7
 8016464:	f7ea fa02 	bl	800086c <__aeabi_ddiv>
 8016468:	ec41 0b10 	vmov	d0, r0, r1
 801646c:	b003      	add	sp, #12
 801646e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016472 <__copybits>:
 8016472:	3901      	subs	r1, #1
 8016474:	b570      	push	{r4, r5, r6, lr}
 8016476:	1149      	asrs	r1, r1, #5
 8016478:	6914      	ldr	r4, [r2, #16]
 801647a:	3101      	adds	r1, #1
 801647c:	f102 0314 	add.w	r3, r2, #20
 8016480:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016484:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016488:	1f05      	subs	r5, r0, #4
 801648a:	42a3      	cmp	r3, r4
 801648c:	d30c      	bcc.n	80164a8 <__copybits+0x36>
 801648e:	1aa3      	subs	r3, r4, r2
 8016490:	3b11      	subs	r3, #17
 8016492:	f023 0303 	bic.w	r3, r3, #3
 8016496:	3211      	adds	r2, #17
 8016498:	42a2      	cmp	r2, r4
 801649a:	bf88      	it	hi
 801649c:	2300      	movhi	r3, #0
 801649e:	4418      	add	r0, r3
 80164a0:	2300      	movs	r3, #0
 80164a2:	4288      	cmp	r0, r1
 80164a4:	d305      	bcc.n	80164b2 <__copybits+0x40>
 80164a6:	bd70      	pop	{r4, r5, r6, pc}
 80164a8:	f853 6b04 	ldr.w	r6, [r3], #4
 80164ac:	f845 6f04 	str.w	r6, [r5, #4]!
 80164b0:	e7eb      	b.n	801648a <__copybits+0x18>
 80164b2:	f840 3b04 	str.w	r3, [r0], #4
 80164b6:	e7f4      	b.n	80164a2 <__copybits+0x30>

080164b8 <__any_on>:
 80164b8:	f100 0214 	add.w	r2, r0, #20
 80164bc:	6900      	ldr	r0, [r0, #16]
 80164be:	114b      	asrs	r3, r1, #5
 80164c0:	4298      	cmp	r0, r3
 80164c2:	b510      	push	{r4, lr}
 80164c4:	db11      	blt.n	80164ea <__any_on+0x32>
 80164c6:	dd0a      	ble.n	80164de <__any_on+0x26>
 80164c8:	f011 011f 	ands.w	r1, r1, #31
 80164cc:	d007      	beq.n	80164de <__any_on+0x26>
 80164ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80164d2:	fa24 f001 	lsr.w	r0, r4, r1
 80164d6:	fa00 f101 	lsl.w	r1, r0, r1
 80164da:	428c      	cmp	r4, r1
 80164dc:	d10b      	bne.n	80164f6 <__any_on+0x3e>
 80164de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80164e2:	4293      	cmp	r3, r2
 80164e4:	d803      	bhi.n	80164ee <__any_on+0x36>
 80164e6:	2000      	movs	r0, #0
 80164e8:	bd10      	pop	{r4, pc}
 80164ea:	4603      	mov	r3, r0
 80164ec:	e7f7      	b.n	80164de <__any_on+0x26>
 80164ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80164f2:	2900      	cmp	r1, #0
 80164f4:	d0f5      	beq.n	80164e2 <__any_on+0x2a>
 80164f6:	2001      	movs	r0, #1
 80164f8:	e7f6      	b.n	80164e8 <__any_on+0x30>

080164fa <_calloc_r>:
 80164fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164fc:	fba1 2402 	umull	r2, r4, r1, r2
 8016500:	b94c      	cbnz	r4, 8016516 <_calloc_r+0x1c>
 8016502:	4611      	mov	r1, r2
 8016504:	9201      	str	r2, [sp, #4]
 8016506:	f7fb ff01 	bl	801230c <_malloc_r>
 801650a:	9a01      	ldr	r2, [sp, #4]
 801650c:	4605      	mov	r5, r0
 801650e:	b930      	cbnz	r0, 801651e <_calloc_r+0x24>
 8016510:	4628      	mov	r0, r5
 8016512:	b003      	add	sp, #12
 8016514:	bd30      	pop	{r4, r5, pc}
 8016516:	220c      	movs	r2, #12
 8016518:	6002      	str	r2, [r0, #0]
 801651a:	2500      	movs	r5, #0
 801651c:	e7f8      	b.n	8016510 <_calloc_r+0x16>
 801651e:	4621      	mov	r1, r4
 8016520:	f7fb fe80 	bl	8012224 <memset>
 8016524:	e7f4      	b.n	8016510 <_calloc_r+0x16>

08016526 <_realloc_r>:
 8016526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801652a:	4680      	mov	r8, r0
 801652c:	4614      	mov	r4, r2
 801652e:	460e      	mov	r6, r1
 8016530:	b921      	cbnz	r1, 801653c <_realloc_r+0x16>
 8016532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016536:	4611      	mov	r1, r2
 8016538:	f7fb bee8 	b.w	801230c <_malloc_r>
 801653c:	b92a      	cbnz	r2, 801654a <_realloc_r+0x24>
 801653e:	f7fb fe79 	bl	8012234 <_free_r>
 8016542:	4625      	mov	r5, r4
 8016544:	4628      	mov	r0, r5
 8016546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801654a:	f000 fa7f 	bl	8016a4c <_malloc_usable_size_r>
 801654e:	4284      	cmp	r4, r0
 8016550:	4607      	mov	r7, r0
 8016552:	d802      	bhi.n	801655a <_realloc_r+0x34>
 8016554:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016558:	d812      	bhi.n	8016580 <_realloc_r+0x5a>
 801655a:	4621      	mov	r1, r4
 801655c:	4640      	mov	r0, r8
 801655e:	f7fb fed5 	bl	801230c <_malloc_r>
 8016562:	4605      	mov	r5, r0
 8016564:	2800      	cmp	r0, #0
 8016566:	d0ed      	beq.n	8016544 <_realloc_r+0x1e>
 8016568:	42bc      	cmp	r4, r7
 801656a:	4622      	mov	r2, r4
 801656c:	4631      	mov	r1, r6
 801656e:	bf28      	it	cs
 8016570:	463a      	movcs	r2, r7
 8016572:	f7fb fe49 	bl	8012208 <memcpy>
 8016576:	4631      	mov	r1, r6
 8016578:	4640      	mov	r0, r8
 801657a:	f7fb fe5b 	bl	8012234 <_free_r>
 801657e:	e7e1      	b.n	8016544 <_realloc_r+0x1e>
 8016580:	4635      	mov	r5, r6
 8016582:	e7df      	b.n	8016544 <_realloc_r+0x1e>

08016584 <__ssputs_r>:
 8016584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016588:	688e      	ldr	r6, [r1, #8]
 801658a:	429e      	cmp	r6, r3
 801658c:	4682      	mov	sl, r0
 801658e:	460c      	mov	r4, r1
 8016590:	4690      	mov	r8, r2
 8016592:	461f      	mov	r7, r3
 8016594:	d838      	bhi.n	8016608 <__ssputs_r+0x84>
 8016596:	898a      	ldrh	r2, [r1, #12]
 8016598:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801659c:	d032      	beq.n	8016604 <__ssputs_r+0x80>
 801659e:	6825      	ldr	r5, [r4, #0]
 80165a0:	6909      	ldr	r1, [r1, #16]
 80165a2:	eba5 0901 	sub.w	r9, r5, r1
 80165a6:	6965      	ldr	r5, [r4, #20]
 80165a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80165ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80165b0:	3301      	adds	r3, #1
 80165b2:	444b      	add	r3, r9
 80165b4:	106d      	asrs	r5, r5, #1
 80165b6:	429d      	cmp	r5, r3
 80165b8:	bf38      	it	cc
 80165ba:	461d      	movcc	r5, r3
 80165bc:	0553      	lsls	r3, r2, #21
 80165be:	d531      	bpl.n	8016624 <__ssputs_r+0xa0>
 80165c0:	4629      	mov	r1, r5
 80165c2:	f7fb fea3 	bl	801230c <_malloc_r>
 80165c6:	4606      	mov	r6, r0
 80165c8:	b950      	cbnz	r0, 80165e0 <__ssputs_r+0x5c>
 80165ca:	230c      	movs	r3, #12
 80165cc:	f8ca 3000 	str.w	r3, [sl]
 80165d0:	89a3      	ldrh	r3, [r4, #12]
 80165d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165d6:	81a3      	strh	r3, [r4, #12]
 80165d8:	f04f 30ff 	mov.w	r0, #4294967295
 80165dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165e0:	6921      	ldr	r1, [r4, #16]
 80165e2:	464a      	mov	r2, r9
 80165e4:	f7fb fe10 	bl	8012208 <memcpy>
 80165e8:	89a3      	ldrh	r3, [r4, #12]
 80165ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80165ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80165f2:	81a3      	strh	r3, [r4, #12]
 80165f4:	6126      	str	r6, [r4, #16]
 80165f6:	6165      	str	r5, [r4, #20]
 80165f8:	444e      	add	r6, r9
 80165fa:	eba5 0509 	sub.w	r5, r5, r9
 80165fe:	6026      	str	r6, [r4, #0]
 8016600:	60a5      	str	r5, [r4, #8]
 8016602:	463e      	mov	r6, r7
 8016604:	42be      	cmp	r6, r7
 8016606:	d900      	bls.n	801660a <__ssputs_r+0x86>
 8016608:	463e      	mov	r6, r7
 801660a:	6820      	ldr	r0, [r4, #0]
 801660c:	4632      	mov	r2, r6
 801660e:	4641      	mov	r1, r8
 8016610:	f7ff fa8c 	bl	8015b2c <memmove>
 8016614:	68a3      	ldr	r3, [r4, #8]
 8016616:	1b9b      	subs	r3, r3, r6
 8016618:	60a3      	str	r3, [r4, #8]
 801661a:	6823      	ldr	r3, [r4, #0]
 801661c:	4433      	add	r3, r6
 801661e:	6023      	str	r3, [r4, #0]
 8016620:	2000      	movs	r0, #0
 8016622:	e7db      	b.n	80165dc <__ssputs_r+0x58>
 8016624:	462a      	mov	r2, r5
 8016626:	f7ff ff7e 	bl	8016526 <_realloc_r>
 801662a:	4606      	mov	r6, r0
 801662c:	2800      	cmp	r0, #0
 801662e:	d1e1      	bne.n	80165f4 <__ssputs_r+0x70>
 8016630:	6921      	ldr	r1, [r4, #16]
 8016632:	4650      	mov	r0, sl
 8016634:	f7fb fdfe 	bl	8012234 <_free_r>
 8016638:	e7c7      	b.n	80165ca <__ssputs_r+0x46>
	...

0801663c <_svfiprintf_r>:
 801663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016640:	4698      	mov	r8, r3
 8016642:	898b      	ldrh	r3, [r1, #12]
 8016644:	061b      	lsls	r3, r3, #24
 8016646:	b09d      	sub	sp, #116	; 0x74
 8016648:	4607      	mov	r7, r0
 801664a:	460d      	mov	r5, r1
 801664c:	4614      	mov	r4, r2
 801664e:	d50e      	bpl.n	801666e <_svfiprintf_r+0x32>
 8016650:	690b      	ldr	r3, [r1, #16]
 8016652:	b963      	cbnz	r3, 801666e <_svfiprintf_r+0x32>
 8016654:	2140      	movs	r1, #64	; 0x40
 8016656:	f7fb fe59 	bl	801230c <_malloc_r>
 801665a:	6028      	str	r0, [r5, #0]
 801665c:	6128      	str	r0, [r5, #16]
 801665e:	b920      	cbnz	r0, 801666a <_svfiprintf_r+0x2e>
 8016660:	230c      	movs	r3, #12
 8016662:	603b      	str	r3, [r7, #0]
 8016664:	f04f 30ff 	mov.w	r0, #4294967295
 8016668:	e0d1      	b.n	801680e <_svfiprintf_r+0x1d2>
 801666a:	2340      	movs	r3, #64	; 0x40
 801666c:	616b      	str	r3, [r5, #20]
 801666e:	2300      	movs	r3, #0
 8016670:	9309      	str	r3, [sp, #36]	; 0x24
 8016672:	2320      	movs	r3, #32
 8016674:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016678:	f8cd 800c 	str.w	r8, [sp, #12]
 801667c:	2330      	movs	r3, #48	; 0x30
 801667e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016828 <_svfiprintf_r+0x1ec>
 8016682:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016686:	f04f 0901 	mov.w	r9, #1
 801668a:	4623      	mov	r3, r4
 801668c:	469a      	mov	sl, r3
 801668e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016692:	b10a      	cbz	r2, 8016698 <_svfiprintf_r+0x5c>
 8016694:	2a25      	cmp	r2, #37	; 0x25
 8016696:	d1f9      	bne.n	801668c <_svfiprintf_r+0x50>
 8016698:	ebba 0b04 	subs.w	fp, sl, r4
 801669c:	d00b      	beq.n	80166b6 <_svfiprintf_r+0x7a>
 801669e:	465b      	mov	r3, fp
 80166a0:	4622      	mov	r2, r4
 80166a2:	4629      	mov	r1, r5
 80166a4:	4638      	mov	r0, r7
 80166a6:	f7ff ff6d 	bl	8016584 <__ssputs_r>
 80166aa:	3001      	adds	r0, #1
 80166ac:	f000 80aa 	beq.w	8016804 <_svfiprintf_r+0x1c8>
 80166b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80166b2:	445a      	add	r2, fp
 80166b4:	9209      	str	r2, [sp, #36]	; 0x24
 80166b6:	f89a 3000 	ldrb.w	r3, [sl]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	f000 80a2 	beq.w	8016804 <_svfiprintf_r+0x1c8>
 80166c0:	2300      	movs	r3, #0
 80166c2:	f04f 32ff 	mov.w	r2, #4294967295
 80166c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80166ca:	f10a 0a01 	add.w	sl, sl, #1
 80166ce:	9304      	str	r3, [sp, #16]
 80166d0:	9307      	str	r3, [sp, #28]
 80166d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80166d6:	931a      	str	r3, [sp, #104]	; 0x68
 80166d8:	4654      	mov	r4, sl
 80166da:	2205      	movs	r2, #5
 80166dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80166e0:	4851      	ldr	r0, [pc, #324]	; (8016828 <_svfiprintf_r+0x1ec>)
 80166e2:	f7e9 fd8d 	bl	8000200 <memchr>
 80166e6:	9a04      	ldr	r2, [sp, #16]
 80166e8:	b9d8      	cbnz	r0, 8016722 <_svfiprintf_r+0xe6>
 80166ea:	06d0      	lsls	r0, r2, #27
 80166ec:	bf44      	itt	mi
 80166ee:	2320      	movmi	r3, #32
 80166f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80166f4:	0711      	lsls	r1, r2, #28
 80166f6:	bf44      	itt	mi
 80166f8:	232b      	movmi	r3, #43	; 0x2b
 80166fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80166fe:	f89a 3000 	ldrb.w	r3, [sl]
 8016702:	2b2a      	cmp	r3, #42	; 0x2a
 8016704:	d015      	beq.n	8016732 <_svfiprintf_r+0xf6>
 8016706:	9a07      	ldr	r2, [sp, #28]
 8016708:	4654      	mov	r4, sl
 801670a:	2000      	movs	r0, #0
 801670c:	f04f 0c0a 	mov.w	ip, #10
 8016710:	4621      	mov	r1, r4
 8016712:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016716:	3b30      	subs	r3, #48	; 0x30
 8016718:	2b09      	cmp	r3, #9
 801671a:	d94e      	bls.n	80167ba <_svfiprintf_r+0x17e>
 801671c:	b1b0      	cbz	r0, 801674c <_svfiprintf_r+0x110>
 801671e:	9207      	str	r2, [sp, #28]
 8016720:	e014      	b.n	801674c <_svfiprintf_r+0x110>
 8016722:	eba0 0308 	sub.w	r3, r0, r8
 8016726:	fa09 f303 	lsl.w	r3, r9, r3
 801672a:	4313      	orrs	r3, r2
 801672c:	9304      	str	r3, [sp, #16]
 801672e:	46a2      	mov	sl, r4
 8016730:	e7d2      	b.n	80166d8 <_svfiprintf_r+0x9c>
 8016732:	9b03      	ldr	r3, [sp, #12]
 8016734:	1d19      	adds	r1, r3, #4
 8016736:	681b      	ldr	r3, [r3, #0]
 8016738:	9103      	str	r1, [sp, #12]
 801673a:	2b00      	cmp	r3, #0
 801673c:	bfbb      	ittet	lt
 801673e:	425b      	neglt	r3, r3
 8016740:	f042 0202 	orrlt.w	r2, r2, #2
 8016744:	9307      	strge	r3, [sp, #28]
 8016746:	9307      	strlt	r3, [sp, #28]
 8016748:	bfb8      	it	lt
 801674a:	9204      	strlt	r2, [sp, #16]
 801674c:	7823      	ldrb	r3, [r4, #0]
 801674e:	2b2e      	cmp	r3, #46	; 0x2e
 8016750:	d10c      	bne.n	801676c <_svfiprintf_r+0x130>
 8016752:	7863      	ldrb	r3, [r4, #1]
 8016754:	2b2a      	cmp	r3, #42	; 0x2a
 8016756:	d135      	bne.n	80167c4 <_svfiprintf_r+0x188>
 8016758:	9b03      	ldr	r3, [sp, #12]
 801675a:	1d1a      	adds	r2, r3, #4
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	9203      	str	r2, [sp, #12]
 8016760:	2b00      	cmp	r3, #0
 8016762:	bfb8      	it	lt
 8016764:	f04f 33ff 	movlt.w	r3, #4294967295
 8016768:	3402      	adds	r4, #2
 801676a:	9305      	str	r3, [sp, #20]
 801676c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016838 <_svfiprintf_r+0x1fc>
 8016770:	7821      	ldrb	r1, [r4, #0]
 8016772:	2203      	movs	r2, #3
 8016774:	4650      	mov	r0, sl
 8016776:	f7e9 fd43 	bl	8000200 <memchr>
 801677a:	b140      	cbz	r0, 801678e <_svfiprintf_r+0x152>
 801677c:	2340      	movs	r3, #64	; 0x40
 801677e:	eba0 000a 	sub.w	r0, r0, sl
 8016782:	fa03 f000 	lsl.w	r0, r3, r0
 8016786:	9b04      	ldr	r3, [sp, #16]
 8016788:	4303      	orrs	r3, r0
 801678a:	3401      	adds	r4, #1
 801678c:	9304      	str	r3, [sp, #16]
 801678e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016792:	4826      	ldr	r0, [pc, #152]	; (801682c <_svfiprintf_r+0x1f0>)
 8016794:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016798:	2206      	movs	r2, #6
 801679a:	f7e9 fd31 	bl	8000200 <memchr>
 801679e:	2800      	cmp	r0, #0
 80167a0:	d038      	beq.n	8016814 <_svfiprintf_r+0x1d8>
 80167a2:	4b23      	ldr	r3, [pc, #140]	; (8016830 <_svfiprintf_r+0x1f4>)
 80167a4:	bb1b      	cbnz	r3, 80167ee <_svfiprintf_r+0x1b2>
 80167a6:	9b03      	ldr	r3, [sp, #12]
 80167a8:	3307      	adds	r3, #7
 80167aa:	f023 0307 	bic.w	r3, r3, #7
 80167ae:	3308      	adds	r3, #8
 80167b0:	9303      	str	r3, [sp, #12]
 80167b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80167b4:	4433      	add	r3, r6
 80167b6:	9309      	str	r3, [sp, #36]	; 0x24
 80167b8:	e767      	b.n	801668a <_svfiprintf_r+0x4e>
 80167ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80167be:	460c      	mov	r4, r1
 80167c0:	2001      	movs	r0, #1
 80167c2:	e7a5      	b.n	8016710 <_svfiprintf_r+0xd4>
 80167c4:	2300      	movs	r3, #0
 80167c6:	3401      	adds	r4, #1
 80167c8:	9305      	str	r3, [sp, #20]
 80167ca:	4619      	mov	r1, r3
 80167cc:	f04f 0c0a 	mov.w	ip, #10
 80167d0:	4620      	mov	r0, r4
 80167d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80167d6:	3a30      	subs	r2, #48	; 0x30
 80167d8:	2a09      	cmp	r2, #9
 80167da:	d903      	bls.n	80167e4 <_svfiprintf_r+0x1a8>
 80167dc:	2b00      	cmp	r3, #0
 80167de:	d0c5      	beq.n	801676c <_svfiprintf_r+0x130>
 80167e0:	9105      	str	r1, [sp, #20]
 80167e2:	e7c3      	b.n	801676c <_svfiprintf_r+0x130>
 80167e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80167e8:	4604      	mov	r4, r0
 80167ea:	2301      	movs	r3, #1
 80167ec:	e7f0      	b.n	80167d0 <_svfiprintf_r+0x194>
 80167ee:	ab03      	add	r3, sp, #12
 80167f0:	9300      	str	r3, [sp, #0]
 80167f2:	462a      	mov	r2, r5
 80167f4:	4b0f      	ldr	r3, [pc, #60]	; (8016834 <_svfiprintf_r+0x1f8>)
 80167f6:	a904      	add	r1, sp, #16
 80167f8:	4638      	mov	r0, r7
 80167fa:	f7fb fff5 	bl	80127e8 <_printf_float>
 80167fe:	1c42      	adds	r2, r0, #1
 8016800:	4606      	mov	r6, r0
 8016802:	d1d6      	bne.n	80167b2 <_svfiprintf_r+0x176>
 8016804:	89ab      	ldrh	r3, [r5, #12]
 8016806:	065b      	lsls	r3, r3, #25
 8016808:	f53f af2c 	bmi.w	8016664 <_svfiprintf_r+0x28>
 801680c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801680e:	b01d      	add	sp, #116	; 0x74
 8016810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016814:	ab03      	add	r3, sp, #12
 8016816:	9300      	str	r3, [sp, #0]
 8016818:	462a      	mov	r2, r5
 801681a:	4b06      	ldr	r3, [pc, #24]	; (8016834 <_svfiprintf_r+0x1f8>)
 801681c:	a904      	add	r1, sp, #16
 801681e:	4638      	mov	r0, r7
 8016820:	f7fc fa86 	bl	8012d30 <_printf_i>
 8016824:	e7eb      	b.n	80167fe <_svfiprintf_r+0x1c2>
 8016826:	bf00      	nop
 8016828:	08062984 	.word	0x08062984
 801682c:	0806298e 	.word	0x0806298e
 8016830:	080127e9 	.word	0x080127e9
 8016834:	08016585 	.word	0x08016585
 8016838:	0806298a 	.word	0x0806298a
 801683c:	00000000 	.word	0x00000000

08016840 <nan>:
 8016840:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8016848 <nan+0x8>
 8016844:	4770      	bx	lr
 8016846:	bf00      	nop
 8016848:	00000000 	.word	0x00000000
 801684c:	7ff80000 	.word	0x7ff80000

08016850 <_raise_r>:
 8016850:	291f      	cmp	r1, #31
 8016852:	b538      	push	{r3, r4, r5, lr}
 8016854:	4604      	mov	r4, r0
 8016856:	460d      	mov	r5, r1
 8016858:	d904      	bls.n	8016864 <_raise_r+0x14>
 801685a:	2316      	movs	r3, #22
 801685c:	6003      	str	r3, [r0, #0]
 801685e:	f04f 30ff 	mov.w	r0, #4294967295
 8016862:	bd38      	pop	{r3, r4, r5, pc}
 8016864:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016866:	b112      	cbz	r2, 801686e <_raise_r+0x1e>
 8016868:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801686c:	b94b      	cbnz	r3, 8016882 <_raise_r+0x32>
 801686e:	4620      	mov	r0, r4
 8016870:	f000 f830 	bl	80168d4 <_getpid_r>
 8016874:	462a      	mov	r2, r5
 8016876:	4601      	mov	r1, r0
 8016878:	4620      	mov	r0, r4
 801687a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801687e:	f000 b817 	b.w	80168b0 <_kill_r>
 8016882:	2b01      	cmp	r3, #1
 8016884:	d00a      	beq.n	801689c <_raise_r+0x4c>
 8016886:	1c59      	adds	r1, r3, #1
 8016888:	d103      	bne.n	8016892 <_raise_r+0x42>
 801688a:	2316      	movs	r3, #22
 801688c:	6003      	str	r3, [r0, #0]
 801688e:	2001      	movs	r0, #1
 8016890:	e7e7      	b.n	8016862 <_raise_r+0x12>
 8016892:	2400      	movs	r4, #0
 8016894:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016898:	4628      	mov	r0, r5
 801689a:	4798      	blx	r3
 801689c:	2000      	movs	r0, #0
 801689e:	e7e0      	b.n	8016862 <_raise_r+0x12>

080168a0 <raise>:
 80168a0:	4b02      	ldr	r3, [pc, #8]	; (80168ac <raise+0xc>)
 80168a2:	4601      	mov	r1, r0
 80168a4:	6818      	ldr	r0, [r3, #0]
 80168a6:	f7ff bfd3 	b.w	8016850 <_raise_r>
 80168aa:	bf00      	nop
 80168ac:	20000ee0 	.word	0x20000ee0

080168b0 <_kill_r>:
 80168b0:	b538      	push	{r3, r4, r5, lr}
 80168b2:	4d07      	ldr	r5, [pc, #28]	; (80168d0 <_kill_r+0x20>)
 80168b4:	2300      	movs	r3, #0
 80168b6:	4604      	mov	r4, r0
 80168b8:	4608      	mov	r0, r1
 80168ba:	4611      	mov	r1, r2
 80168bc:	602b      	str	r3, [r5, #0]
 80168be:	f003 faf1 	bl	8019ea4 <_kill>
 80168c2:	1c43      	adds	r3, r0, #1
 80168c4:	d102      	bne.n	80168cc <_kill_r+0x1c>
 80168c6:	682b      	ldr	r3, [r5, #0]
 80168c8:	b103      	cbz	r3, 80168cc <_kill_r+0x1c>
 80168ca:	6023      	str	r3, [r4, #0]
 80168cc:	bd38      	pop	{r3, r4, r5, pc}
 80168ce:	bf00      	nop
 80168d0:	20013dac 	.word	0x20013dac

080168d4 <_getpid_r>:
 80168d4:	f003 bad6 	b.w	8019e84 <_getpid>

080168d8 <__sread>:
 80168d8:	b510      	push	{r4, lr}
 80168da:	460c      	mov	r4, r1
 80168dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168e0:	f000 f8bc 	bl	8016a5c <_read_r>
 80168e4:	2800      	cmp	r0, #0
 80168e6:	bfab      	itete	ge
 80168e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80168ea:	89a3      	ldrhlt	r3, [r4, #12]
 80168ec:	181b      	addge	r3, r3, r0
 80168ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80168f2:	bfac      	ite	ge
 80168f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80168f6:	81a3      	strhlt	r3, [r4, #12]
 80168f8:	bd10      	pop	{r4, pc}

080168fa <__swrite>:
 80168fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80168fe:	461f      	mov	r7, r3
 8016900:	898b      	ldrh	r3, [r1, #12]
 8016902:	05db      	lsls	r3, r3, #23
 8016904:	4605      	mov	r5, r0
 8016906:	460c      	mov	r4, r1
 8016908:	4616      	mov	r6, r2
 801690a:	d505      	bpl.n	8016918 <__swrite+0x1e>
 801690c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016910:	2302      	movs	r3, #2
 8016912:	2200      	movs	r2, #0
 8016914:	f000 f888 	bl	8016a28 <_lseek_r>
 8016918:	89a3      	ldrh	r3, [r4, #12]
 801691a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801691e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016922:	81a3      	strh	r3, [r4, #12]
 8016924:	4632      	mov	r2, r6
 8016926:	463b      	mov	r3, r7
 8016928:	4628      	mov	r0, r5
 801692a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801692e:	f000 b837 	b.w	80169a0 <_write_r>

08016932 <__sseek>:
 8016932:	b510      	push	{r4, lr}
 8016934:	460c      	mov	r4, r1
 8016936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801693a:	f000 f875 	bl	8016a28 <_lseek_r>
 801693e:	1c43      	adds	r3, r0, #1
 8016940:	89a3      	ldrh	r3, [r4, #12]
 8016942:	bf15      	itete	ne
 8016944:	6560      	strne	r0, [r4, #84]	; 0x54
 8016946:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801694a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801694e:	81a3      	strheq	r3, [r4, #12]
 8016950:	bf18      	it	ne
 8016952:	81a3      	strhne	r3, [r4, #12]
 8016954:	bd10      	pop	{r4, pc}

08016956 <__sclose>:
 8016956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801695a:	f000 b833 	b.w	80169c4 <_close_r>

0801695e <strncmp>:
 801695e:	b510      	push	{r4, lr}
 8016960:	b17a      	cbz	r2, 8016982 <strncmp+0x24>
 8016962:	4603      	mov	r3, r0
 8016964:	3901      	subs	r1, #1
 8016966:	1884      	adds	r4, r0, r2
 8016968:	f813 0b01 	ldrb.w	r0, [r3], #1
 801696c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016970:	4290      	cmp	r0, r2
 8016972:	d101      	bne.n	8016978 <strncmp+0x1a>
 8016974:	42a3      	cmp	r3, r4
 8016976:	d101      	bne.n	801697c <strncmp+0x1e>
 8016978:	1a80      	subs	r0, r0, r2
 801697a:	bd10      	pop	{r4, pc}
 801697c:	2800      	cmp	r0, #0
 801697e:	d1f3      	bne.n	8016968 <strncmp+0xa>
 8016980:	e7fa      	b.n	8016978 <strncmp+0x1a>
 8016982:	4610      	mov	r0, r2
 8016984:	e7f9      	b.n	801697a <strncmp+0x1c>

08016986 <__ascii_wctomb>:
 8016986:	b149      	cbz	r1, 801699c <__ascii_wctomb+0x16>
 8016988:	2aff      	cmp	r2, #255	; 0xff
 801698a:	bf85      	ittet	hi
 801698c:	238a      	movhi	r3, #138	; 0x8a
 801698e:	6003      	strhi	r3, [r0, #0]
 8016990:	700a      	strbls	r2, [r1, #0]
 8016992:	f04f 30ff 	movhi.w	r0, #4294967295
 8016996:	bf98      	it	ls
 8016998:	2001      	movls	r0, #1
 801699a:	4770      	bx	lr
 801699c:	4608      	mov	r0, r1
 801699e:	4770      	bx	lr

080169a0 <_write_r>:
 80169a0:	b538      	push	{r3, r4, r5, lr}
 80169a2:	4d07      	ldr	r5, [pc, #28]	; (80169c0 <_write_r+0x20>)
 80169a4:	4604      	mov	r4, r0
 80169a6:	4608      	mov	r0, r1
 80169a8:	4611      	mov	r1, r2
 80169aa:	2200      	movs	r2, #0
 80169ac:	602a      	str	r2, [r5, #0]
 80169ae:	461a      	mov	r2, r3
 80169b0:	f003 fa90 	bl	8019ed4 <_write>
 80169b4:	1c43      	adds	r3, r0, #1
 80169b6:	d102      	bne.n	80169be <_write_r+0x1e>
 80169b8:	682b      	ldr	r3, [r5, #0]
 80169ba:	b103      	cbz	r3, 80169be <_write_r+0x1e>
 80169bc:	6023      	str	r3, [r4, #0]
 80169be:	bd38      	pop	{r3, r4, r5, pc}
 80169c0:	20013dac 	.word	0x20013dac

080169c4 <_close_r>:
 80169c4:	b538      	push	{r3, r4, r5, lr}
 80169c6:	4d06      	ldr	r5, [pc, #24]	; (80169e0 <_close_r+0x1c>)
 80169c8:	2300      	movs	r3, #0
 80169ca:	4604      	mov	r4, r0
 80169cc:	4608      	mov	r0, r1
 80169ce:	602b      	str	r3, [r5, #0]
 80169d0:	f003 fa48 	bl	8019e64 <_close>
 80169d4:	1c43      	adds	r3, r0, #1
 80169d6:	d102      	bne.n	80169de <_close_r+0x1a>
 80169d8:	682b      	ldr	r3, [r5, #0]
 80169da:	b103      	cbz	r3, 80169de <_close_r+0x1a>
 80169dc:	6023      	str	r3, [r4, #0]
 80169de:	bd38      	pop	{r3, r4, r5, pc}
 80169e0:	20013dac 	.word	0x20013dac

080169e4 <_fstat_r>:
 80169e4:	b538      	push	{r3, r4, r5, lr}
 80169e6:	4d07      	ldr	r5, [pc, #28]	; (8016a04 <_fstat_r+0x20>)
 80169e8:	2300      	movs	r3, #0
 80169ea:	4604      	mov	r4, r0
 80169ec:	4608      	mov	r0, r1
 80169ee:	4611      	mov	r1, r2
 80169f0:	602b      	str	r3, [r5, #0]
 80169f2:	f003 fa3f 	bl	8019e74 <_fstat>
 80169f6:	1c43      	adds	r3, r0, #1
 80169f8:	d102      	bne.n	8016a00 <_fstat_r+0x1c>
 80169fa:	682b      	ldr	r3, [r5, #0]
 80169fc:	b103      	cbz	r3, 8016a00 <_fstat_r+0x1c>
 80169fe:	6023      	str	r3, [r4, #0]
 8016a00:	bd38      	pop	{r3, r4, r5, pc}
 8016a02:	bf00      	nop
 8016a04:	20013dac 	.word	0x20013dac

08016a08 <_isatty_r>:
 8016a08:	b538      	push	{r3, r4, r5, lr}
 8016a0a:	4d06      	ldr	r5, [pc, #24]	; (8016a24 <_isatty_r+0x1c>)
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	4604      	mov	r4, r0
 8016a10:	4608      	mov	r0, r1
 8016a12:	602b      	str	r3, [r5, #0]
 8016a14:	f003 fa3e 	bl	8019e94 <_isatty>
 8016a18:	1c43      	adds	r3, r0, #1
 8016a1a:	d102      	bne.n	8016a22 <_isatty_r+0x1a>
 8016a1c:	682b      	ldr	r3, [r5, #0]
 8016a1e:	b103      	cbz	r3, 8016a22 <_isatty_r+0x1a>
 8016a20:	6023      	str	r3, [r4, #0]
 8016a22:	bd38      	pop	{r3, r4, r5, pc}
 8016a24:	20013dac 	.word	0x20013dac

08016a28 <_lseek_r>:
 8016a28:	b538      	push	{r3, r4, r5, lr}
 8016a2a:	4d07      	ldr	r5, [pc, #28]	; (8016a48 <_lseek_r+0x20>)
 8016a2c:	4604      	mov	r4, r0
 8016a2e:	4608      	mov	r0, r1
 8016a30:	4611      	mov	r1, r2
 8016a32:	2200      	movs	r2, #0
 8016a34:	602a      	str	r2, [r5, #0]
 8016a36:	461a      	mov	r2, r3
 8016a38:	f003 fa3c 	bl	8019eb4 <_lseek>
 8016a3c:	1c43      	adds	r3, r0, #1
 8016a3e:	d102      	bne.n	8016a46 <_lseek_r+0x1e>
 8016a40:	682b      	ldr	r3, [r5, #0]
 8016a42:	b103      	cbz	r3, 8016a46 <_lseek_r+0x1e>
 8016a44:	6023      	str	r3, [r4, #0]
 8016a46:	bd38      	pop	{r3, r4, r5, pc}
 8016a48:	20013dac 	.word	0x20013dac

08016a4c <_malloc_usable_size_r>:
 8016a4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016a50:	1f18      	subs	r0, r3, #4
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	bfbc      	itt	lt
 8016a56:	580b      	ldrlt	r3, [r1, r0]
 8016a58:	18c0      	addlt	r0, r0, r3
 8016a5a:	4770      	bx	lr

08016a5c <_read_r>:
 8016a5c:	b538      	push	{r3, r4, r5, lr}
 8016a5e:	4d07      	ldr	r5, [pc, #28]	; (8016a7c <_read_r+0x20>)
 8016a60:	4604      	mov	r4, r0
 8016a62:	4608      	mov	r0, r1
 8016a64:	4611      	mov	r1, r2
 8016a66:	2200      	movs	r2, #0
 8016a68:	602a      	str	r2, [r5, #0]
 8016a6a:	461a      	mov	r2, r3
 8016a6c:	f003 fa2a 	bl	8019ec4 <_read>
 8016a70:	1c43      	adds	r3, r0, #1
 8016a72:	d102      	bne.n	8016a7a <_read_r+0x1e>
 8016a74:	682b      	ldr	r3, [r5, #0]
 8016a76:	b103      	cbz	r3, 8016a7a <_read_r+0x1e>
 8016a78:	6023      	str	r3, [r4, #0]
 8016a7a:	bd38      	pop	{r3, r4, r5, pc}
 8016a7c:	20013dac 	.word	0x20013dac

08016a80 <atan>:
 8016a80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a84:	ec55 4b10 	vmov	r4, r5, d0
 8016a88:	4bc3      	ldr	r3, [pc, #780]	; (8016d98 <atan+0x318>)
 8016a8a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8016a8e:	429e      	cmp	r6, r3
 8016a90:	46ab      	mov	fp, r5
 8016a92:	dd18      	ble.n	8016ac6 <atan+0x46>
 8016a94:	4bc1      	ldr	r3, [pc, #772]	; (8016d9c <atan+0x31c>)
 8016a96:	429e      	cmp	r6, r3
 8016a98:	dc01      	bgt.n	8016a9e <atan+0x1e>
 8016a9a:	d109      	bne.n	8016ab0 <atan+0x30>
 8016a9c:	b144      	cbz	r4, 8016ab0 <atan+0x30>
 8016a9e:	4622      	mov	r2, r4
 8016aa0:	462b      	mov	r3, r5
 8016aa2:	4620      	mov	r0, r4
 8016aa4:	4629      	mov	r1, r5
 8016aa6:	f7e9 fc01 	bl	80002ac <__adddf3>
 8016aaa:	4604      	mov	r4, r0
 8016aac:	460d      	mov	r5, r1
 8016aae:	e006      	b.n	8016abe <atan+0x3e>
 8016ab0:	f1bb 0f00 	cmp.w	fp, #0
 8016ab4:	f300 8131 	bgt.w	8016d1a <atan+0x29a>
 8016ab8:	a59b      	add	r5, pc, #620	; (adr r5, 8016d28 <atan+0x2a8>)
 8016aba:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016abe:	ec45 4b10 	vmov	d0, r4, r5
 8016ac2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016ac6:	4bb6      	ldr	r3, [pc, #728]	; (8016da0 <atan+0x320>)
 8016ac8:	429e      	cmp	r6, r3
 8016aca:	dc14      	bgt.n	8016af6 <atan+0x76>
 8016acc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8016ad0:	429e      	cmp	r6, r3
 8016ad2:	dc0d      	bgt.n	8016af0 <atan+0x70>
 8016ad4:	a396      	add	r3, pc, #600	; (adr r3, 8016d30 <atan+0x2b0>)
 8016ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ada:	ee10 0a10 	vmov	r0, s0
 8016ade:	4629      	mov	r1, r5
 8016ae0:	f7e9 fbe4 	bl	80002ac <__adddf3>
 8016ae4:	4baf      	ldr	r3, [pc, #700]	; (8016da4 <atan+0x324>)
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	f7ea f826 	bl	8000b38 <__aeabi_dcmpgt>
 8016aec:	2800      	cmp	r0, #0
 8016aee:	d1e6      	bne.n	8016abe <atan+0x3e>
 8016af0:	f04f 3aff 	mov.w	sl, #4294967295
 8016af4:	e02b      	b.n	8016b4e <atan+0xce>
 8016af6:	f000 f9b7 	bl	8016e68 <fabs>
 8016afa:	4bab      	ldr	r3, [pc, #684]	; (8016da8 <atan+0x328>)
 8016afc:	429e      	cmp	r6, r3
 8016afe:	ec55 4b10 	vmov	r4, r5, d0
 8016b02:	f300 80bf 	bgt.w	8016c84 <atan+0x204>
 8016b06:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8016b0a:	429e      	cmp	r6, r3
 8016b0c:	f300 80a0 	bgt.w	8016c50 <atan+0x1d0>
 8016b10:	ee10 2a10 	vmov	r2, s0
 8016b14:	ee10 0a10 	vmov	r0, s0
 8016b18:	462b      	mov	r3, r5
 8016b1a:	4629      	mov	r1, r5
 8016b1c:	f7e9 fbc6 	bl	80002ac <__adddf3>
 8016b20:	4ba0      	ldr	r3, [pc, #640]	; (8016da4 <atan+0x324>)
 8016b22:	2200      	movs	r2, #0
 8016b24:	f7e9 fbc0 	bl	80002a8 <__aeabi_dsub>
 8016b28:	2200      	movs	r2, #0
 8016b2a:	4606      	mov	r6, r0
 8016b2c:	460f      	mov	r7, r1
 8016b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016b32:	4620      	mov	r0, r4
 8016b34:	4629      	mov	r1, r5
 8016b36:	f7e9 fbb9 	bl	80002ac <__adddf3>
 8016b3a:	4602      	mov	r2, r0
 8016b3c:	460b      	mov	r3, r1
 8016b3e:	4630      	mov	r0, r6
 8016b40:	4639      	mov	r1, r7
 8016b42:	f7e9 fe93 	bl	800086c <__aeabi_ddiv>
 8016b46:	f04f 0a00 	mov.w	sl, #0
 8016b4a:	4604      	mov	r4, r0
 8016b4c:	460d      	mov	r5, r1
 8016b4e:	4622      	mov	r2, r4
 8016b50:	462b      	mov	r3, r5
 8016b52:	4620      	mov	r0, r4
 8016b54:	4629      	mov	r1, r5
 8016b56:	f7e9 fd5f 	bl	8000618 <__aeabi_dmul>
 8016b5a:	4602      	mov	r2, r0
 8016b5c:	460b      	mov	r3, r1
 8016b5e:	4680      	mov	r8, r0
 8016b60:	4689      	mov	r9, r1
 8016b62:	f7e9 fd59 	bl	8000618 <__aeabi_dmul>
 8016b66:	a374      	add	r3, pc, #464	; (adr r3, 8016d38 <atan+0x2b8>)
 8016b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b6c:	4606      	mov	r6, r0
 8016b6e:	460f      	mov	r7, r1
 8016b70:	f7e9 fd52 	bl	8000618 <__aeabi_dmul>
 8016b74:	a372      	add	r3, pc, #456	; (adr r3, 8016d40 <atan+0x2c0>)
 8016b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b7a:	f7e9 fb97 	bl	80002ac <__adddf3>
 8016b7e:	4632      	mov	r2, r6
 8016b80:	463b      	mov	r3, r7
 8016b82:	f7e9 fd49 	bl	8000618 <__aeabi_dmul>
 8016b86:	a370      	add	r3, pc, #448	; (adr r3, 8016d48 <atan+0x2c8>)
 8016b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b8c:	f7e9 fb8e 	bl	80002ac <__adddf3>
 8016b90:	4632      	mov	r2, r6
 8016b92:	463b      	mov	r3, r7
 8016b94:	f7e9 fd40 	bl	8000618 <__aeabi_dmul>
 8016b98:	a36d      	add	r3, pc, #436	; (adr r3, 8016d50 <atan+0x2d0>)
 8016b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b9e:	f7e9 fb85 	bl	80002ac <__adddf3>
 8016ba2:	4632      	mov	r2, r6
 8016ba4:	463b      	mov	r3, r7
 8016ba6:	f7e9 fd37 	bl	8000618 <__aeabi_dmul>
 8016baa:	a36b      	add	r3, pc, #428	; (adr r3, 8016d58 <atan+0x2d8>)
 8016bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bb0:	f7e9 fb7c 	bl	80002ac <__adddf3>
 8016bb4:	4632      	mov	r2, r6
 8016bb6:	463b      	mov	r3, r7
 8016bb8:	f7e9 fd2e 	bl	8000618 <__aeabi_dmul>
 8016bbc:	a368      	add	r3, pc, #416	; (adr r3, 8016d60 <atan+0x2e0>)
 8016bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bc2:	f7e9 fb73 	bl	80002ac <__adddf3>
 8016bc6:	4642      	mov	r2, r8
 8016bc8:	464b      	mov	r3, r9
 8016bca:	f7e9 fd25 	bl	8000618 <__aeabi_dmul>
 8016bce:	a366      	add	r3, pc, #408	; (adr r3, 8016d68 <atan+0x2e8>)
 8016bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bd4:	4680      	mov	r8, r0
 8016bd6:	4689      	mov	r9, r1
 8016bd8:	4630      	mov	r0, r6
 8016bda:	4639      	mov	r1, r7
 8016bdc:	f7e9 fd1c 	bl	8000618 <__aeabi_dmul>
 8016be0:	a363      	add	r3, pc, #396	; (adr r3, 8016d70 <atan+0x2f0>)
 8016be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016be6:	f7e9 fb5f 	bl	80002a8 <__aeabi_dsub>
 8016bea:	4632      	mov	r2, r6
 8016bec:	463b      	mov	r3, r7
 8016bee:	f7e9 fd13 	bl	8000618 <__aeabi_dmul>
 8016bf2:	a361      	add	r3, pc, #388	; (adr r3, 8016d78 <atan+0x2f8>)
 8016bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016bf8:	f7e9 fb56 	bl	80002a8 <__aeabi_dsub>
 8016bfc:	4632      	mov	r2, r6
 8016bfe:	463b      	mov	r3, r7
 8016c00:	f7e9 fd0a 	bl	8000618 <__aeabi_dmul>
 8016c04:	a35e      	add	r3, pc, #376	; (adr r3, 8016d80 <atan+0x300>)
 8016c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c0a:	f7e9 fb4d 	bl	80002a8 <__aeabi_dsub>
 8016c0e:	4632      	mov	r2, r6
 8016c10:	463b      	mov	r3, r7
 8016c12:	f7e9 fd01 	bl	8000618 <__aeabi_dmul>
 8016c16:	a35c      	add	r3, pc, #368	; (adr r3, 8016d88 <atan+0x308>)
 8016c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c1c:	f7e9 fb44 	bl	80002a8 <__aeabi_dsub>
 8016c20:	4632      	mov	r2, r6
 8016c22:	463b      	mov	r3, r7
 8016c24:	f7e9 fcf8 	bl	8000618 <__aeabi_dmul>
 8016c28:	4602      	mov	r2, r0
 8016c2a:	460b      	mov	r3, r1
 8016c2c:	4640      	mov	r0, r8
 8016c2e:	4649      	mov	r1, r9
 8016c30:	f7e9 fb3c 	bl	80002ac <__adddf3>
 8016c34:	4622      	mov	r2, r4
 8016c36:	462b      	mov	r3, r5
 8016c38:	f7e9 fcee 	bl	8000618 <__aeabi_dmul>
 8016c3c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8016c40:	4602      	mov	r2, r0
 8016c42:	460b      	mov	r3, r1
 8016c44:	d14b      	bne.n	8016cde <atan+0x25e>
 8016c46:	4620      	mov	r0, r4
 8016c48:	4629      	mov	r1, r5
 8016c4a:	f7e9 fb2d 	bl	80002a8 <__aeabi_dsub>
 8016c4e:	e72c      	b.n	8016aaa <atan+0x2a>
 8016c50:	ee10 0a10 	vmov	r0, s0
 8016c54:	4b53      	ldr	r3, [pc, #332]	; (8016da4 <atan+0x324>)
 8016c56:	2200      	movs	r2, #0
 8016c58:	4629      	mov	r1, r5
 8016c5a:	f7e9 fb25 	bl	80002a8 <__aeabi_dsub>
 8016c5e:	4b51      	ldr	r3, [pc, #324]	; (8016da4 <atan+0x324>)
 8016c60:	4606      	mov	r6, r0
 8016c62:	460f      	mov	r7, r1
 8016c64:	2200      	movs	r2, #0
 8016c66:	4620      	mov	r0, r4
 8016c68:	4629      	mov	r1, r5
 8016c6a:	f7e9 fb1f 	bl	80002ac <__adddf3>
 8016c6e:	4602      	mov	r2, r0
 8016c70:	460b      	mov	r3, r1
 8016c72:	4630      	mov	r0, r6
 8016c74:	4639      	mov	r1, r7
 8016c76:	f7e9 fdf9 	bl	800086c <__aeabi_ddiv>
 8016c7a:	f04f 0a01 	mov.w	sl, #1
 8016c7e:	4604      	mov	r4, r0
 8016c80:	460d      	mov	r5, r1
 8016c82:	e764      	b.n	8016b4e <atan+0xce>
 8016c84:	4b49      	ldr	r3, [pc, #292]	; (8016dac <atan+0x32c>)
 8016c86:	429e      	cmp	r6, r3
 8016c88:	da1d      	bge.n	8016cc6 <atan+0x246>
 8016c8a:	ee10 0a10 	vmov	r0, s0
 8016c8e:	4b48      	ldr	r3, [pc, #288]	; (8016db0 <atan+0x330>)
 8016c90:	2200      	movs	r2, #0
 8016c92:	4629      	mov	r1, r5
 8016c94:	f7e9 fb08 	bl	80002a8 <__aeabi_dsub>
 8016c98:	4b45      	ldr	r3, [pc, #276]	; (8016db0 <atan+0x330>)
 8016c9a:	4606      	mov	r6, r0
 8016c9c:	460f      	mov	r7, r1
 8016c9e:	2200      	movs	r2, #0
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	4629      	mov	r1, r5
 8016ca4:	f7e9 fcb8 	bl	8000618 <__aeabi_dmul>
 8016ca8:	4b3e      	ldr	r3, [pc, #248]	; (8016da4 <atan+0x324>)
 8016caa:	2200      	movs	r2, #0
 8016cac:	f7e9 fafe 	bl	80002ac <__adddf3>
 8016cb0:	4602      	mov	r2, r0
 8016cb2:	460b      	mov	r3, r1
 8016cb4:	4630      	mov	r0, r6
 8016cb6:	4639      	mov	r1, r7
 8016cb8:	f7e9 fdd8 	bl	800086c <__aeabi_ddiv>
 8016cbc:	f04f 0a02 	mov.w	sl, #2
 8016cc0:	4604      	mov	r4, r0
 8016cc2:	460d      	mov	r5, r1
 8016cc4:	e743      	b.n	8016b4e <atan+0xce>
 8016cc6:	462b      	mov	r3, r5
 8016cc8:	ee10 2a10 	vmov	r2, s0
 8016ccc:	4939      	ldr	r1, [pc, #228]	; (8016db4 <atan+0x334>)
 8016cce:	2000      	movs	r0, #0
 8016cd0:	f7e9 fdcc 	bl	800086c <__aeabi_ddiv>
 8016cd4:	f04f 0a03 	mov.w	sl, #3
 8016cd8:	4604      	mov	r4, r0
 8016cda:	460d      	mov	r5, r1
 8016cdc:	e737      	b.n	8016b4e <atan+0xce>
 8016cde:	4b36      	ldr	r3, [pc, #216]	; (8016db8 <atan+0x338>)
 8016ce0:	4e36      	ldr	r6, [pc, #216]	; (8016dbc <atan+0x33c>)
 8016ce2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8016ce6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8016cea:	e9da 2300 	ldrd	r2, r3, [sl]
 8016cee:	f7e9 fadb 	bl	80002a8 <__aeabi_dsub>
 8016cf2:	4622      	mov	r2, r4
 8016cf4:	462b      	mov	r3, r5
 8016cf6:	f7e9 fad7 	bl	80002a8 <__aeabi_dsub>
 8016cfa:	4602      	mov	r2, r0
 8016cfc:	460b      	mov	r3, r1
 8016cfe:	e9d6 0100 	ldrd	r0, r1, [r6]
 8016d02:	f7e9 fad1 	bl	80002a8 <__aeabi_dsub>
 8016d06:	f1bb 0f00 	cmp.w	fp, #0
 8016d0a:	4604      	mov	r4, r0
 8016d0c:	460d      	mov	r5, r1
 8016d0e:	f6bf aed6 	bge.w	8016abe <atan+0x3e>
 8016d12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016d16:	461d      	mov	r5, r3
 8016d18:	e6d1      	b.n	8016abe <atan+0x3e>
 8016d1a:	a51d      	add	r5, pc, #116	; (adr r5, 8016d90 <atan+0x310>)
 8016d1c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8016d20:	e6cd      	b.n	8016abe <atan+0x3e>
 8016d22:	bf00      	nop
 8016d24:	f3af 8000 	nop.w
 8016d28:	54442d18 	.word	0x54442d18
 8016d2c:	bff921fb 	.word	0xbff921fb
 8016d30:	8800759c 	.word	0x8800759c
 8016d34:	7e37e43c 	.word	0x7e37e43c
 8016d38:	e322da11 	.word	0xe322da11
 8016d3c:	3f90ad3a 	.word	0x3f90ad3a
 8016d40:	24760deb 	.word	0x24760deb
 8016d44:	3fa97b4b 	.word	0x3fa97b4b
 8016d48:	a0d03d51 	.word	0xa0d03d51
 8016d4c:	3fb10d66 	.word	0x3fb10d66
 8016d50:	c54c206e 	.word	0xc54c206e
 8016d54:	3fb745cd 	.word	0x3fb745cd
 8016d58:	920083ff 	.word	0x920083ff
 8016d5c:	3fc24924 	.word	0x3fc24924
 8016d60:	5555550d 	.word	0x5555550d
 8016d64:	3fd55555 	.word	0x3fd55555
 8016d68:	2c6a6c2f 	.word	0x2c6a6c2f
 8016d6c:	bfa2b444 	.word	0xbfa2b444
 8016d70:	52defd9a 	.word	0x52defd9a
 8016d74:	3fadde2d 	.word	0x3fadde2d
 8016d78:	af749a6d 	.word	0xaf749a6d
 8016d7c:	3fb3b0f2 	.word	0x3fb3b0f2
 8016d80:	fe231671 	.word	0xfe231671
 8016d84:	3fbc71c6 	.word	0x3fbc71c6
 8016d88:	9998ebc4 	.word	0x9998ebc4
 8016d8c:	3fc99999 	.word	0x3fc99999
 8016d90:	54442d18 	.word	0x54442d18
 8016d94:	3ff921fb 	.word	0x3ff921fb
 8016d98:	440fffff 	.word	0x440fffff
 8016d9c:	7ff00000 	.word	0x7ff00000
 8016da0:	3fdbffff 	.word	0x3fdbffff
 8016da4:	3ff00000 	.word	0x3ff00000
 8016da8:	3ff2ffff 	.word	0x3ff2ffff
 8016dac:	40038000 	.word	0x40038000
 8016db0:	3ff80000 	.word	0x3ff80000
 8016db4:	bff00000 	.word	0xbff00000
 8016db8:	08062e10 	.word	0x08062e10
 8016dbc:	08062df0 	.word	0x08062df0

08016dc0 <cos>:
 8016dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016dc2:	ec53 2b10 	vmov	r2, r3, d0
 8016dc6:	4826      	ldr	r0, [pc, #152]	; (8016e60 <cos+0xa0>)
 8016dc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8016dcc:	4281      	cmp	r1, r0
 8016dce:	dc06      	bgt.n	8016dde <cos+0x1e>
 8016dd0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8016e58 <cos+0x98>
 8016dd4:	b005      	add	sp, #20
 8016dd6:	f85d eb04 	ldr.w	lr, [sp], #4
 8016dda:	f002 b989 	b.w	80190f0 <__kernel_cos>
 8016dde:	4821      	ldr	r0, [pc, #132]	; (8016e64 <cos+0xa4>)
 8016de0:	4281      	cmp	r1, r0
 8016de2:	dd09      	ble.n	8016df8 <cos+0x38>
 8016de4:	ee10 0a10 	vmov	r0, s0
 8016de8:	4619      	mov	r1, r3
 8016dea:	f7e9 fa5d 	bl	80002a8 <__aeabi_dsub>
 8016dee:	ec41 0b10 	vmov	d0, r0, r1
 8016df2:	b005      	add	sp, #20
 8016df4:	f85d fb04 	ldr.w	pc, [sp], #4
 8016df8:	4668      	mov	r0, sp
 8016dfa:	f001 f9d1 	bl	80181a0 <__ieee754_rem_pio2>
 8016dfe:	f000 0003 	and.w	r0, r0, #3
 8016e02:	2801      	cmp	r0, #1
 8016e04:	d00b      	beq.n	8016e1e <cos+0x5e>
 8016e06:	2802      	cmp	r0, #2
 8016e08:	d016      	beq.n	8016e38 <cos+0x78>
 8016e0a:	b9e0      	cbnz	r0, 8016e46 <cos+0x86>
 8016e0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016e10:	ed9d 0b00 	vldr	d0, [sp]
 8016e14:	f002 f96c 	bl	80190f0 <__kernel_cos>
 8016e18:	ec51 0b10 	vmov	r0, r1, d0
 8016e1c:	e7e7      	b.n	8016dee <cos+0x2e>
 8016e1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016e22:	ed9d 0b00 	vldr	d0, [sp]
 8016e26:	f002 fd7b 	bl	8019920 <__kernel_sin>
 8016e2a:	ec53 2b10 	vmov	r2, r3, d0
 8016e2e:	ee10 0a10 	vmov	r0, s0
 8016e32:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016e36:	e7da      	b.n	8016dee <cos+0x2e>
 8016e38:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016e3c:	ed9d 0b00 	vldr	d0, [sp]
 8016e40:	f002 f956 	bl	80190f0 <__kernel_cos>
 8016e44:	e7f1      	b.n	8016e2a <cos+0x6a>
 8016e46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8016e4a:	ed9d 0b00 	vldr	d0, [sp]
 8016e4e:	2001      	movs	r0, #1
 8016e50:	f002 fd66 	bl	8019920 <__kernel_sin>
 8016e54:	e7e0      	b.n	8016e18 <cos+0x58>
 8016e56:	bf00      	nop
	...
 8016e60:	3fe921fb 	.word	0x3fe921fb
 8016e64:	7fefffff 	.word	0x7fefffff

08016e68 <fabs>:
 8016e68:	ec51 0b10 	vmov	r0, r1, d0
 8016e6c:	ee10 2a10 	vmov	r2, s0
 8016e70:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8016e74:	ec43 2b10 	vmov	d0, r2, r3
 8016e78:	4770      	bx	lr

08016e7a <fabsf>:
 8016e7a:	ee10 3a10 	vmov	r3, s0
 8016e7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016e82:	ee00 3a10 	vmov	s0, r3
 8016e86:	4770      	bx	lr

08016e88 <roundf>:
 8016e88:	ee10 0a10 	vmov	r0, s0
 8016e8c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8016e90:	3a7f      	subs	r2, #127	; 0x7f
 8016e92:	2a16      	cmp	r2, #22
 8016e94:	dc15      	bgt.n	8016ec2 <roundf+0x3a>
 8016e96:	2a00      	cmp	r2, #0
 8016e98:	da08      	bge.n	8016eac <roundf+0x24>
 8016e9a:	3201      	adds	r2, #1
 8016e9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8016ea0:	d101      	bne.n	8016ea6 <roundf+0x1e>
 8016ea2:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8016ea6:	ee00 3a10 	vmov	s0, r3
 8016eaa:	4770      	bx	lr
 8016eac:	4907      	ldr	r1, [pc, #28]	; (8016ecc <roundf+0x44>)
 8016eae:	4111      	asrs	r1, r2
 8016eb0:	4208      	tst	r0, r1
 8016eb2:	d0fa      	beq.n	8016eaa <roundf+0x22>
 8016eb4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016eb8:	4113      	asrs	r3, r2
 8016eba:	4403      	add	r3, r0
 8016ebc:	ea23 0301 	bic.w	r3, r3, r1
 8016ec0:	e7f1      	b.n	8016ea6 <roundf+0x1e>
 8016ec2:	2a80      	cmp	r2, #128	; 0x80
 8016ec4:	d1f1      	bne.n	8016eaa <roundf+0x22>
 8016ec6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8016eca:	4770      	bx	lr
 8016ecc:	007fffff 	.word	0x007fffff

08016ed0 <acos>:
 8016ed0:	b538      	push	{r3, r4, r5, lr}
 8016ed2:	ed2d 8b02 	vpush	{d8}
 8016ed6:	ec55 4b10 	vmov	r4, r5, d0
 8016eda:	f000 f9d1 	bl	8017280 <__ieee754_acos>
 8016ede:	4622      	mov	r2, r4
 8016ee0:	462b      	mov	r3, r5
 8016ee2:	4620      	mov	r0, r4
 8016ee4:	4629      	mov	r1, r5
 8016ee6:	eeb0 8a40 	vmov.f32	s16, s0
 8016eea:	eef0 8a60 	vmov.f32	s17, s1
 8016eee:	f7e9 fe2d 	bl	8000b4c <__aeabi_dcmpun>
 8016ef2:	b9a8      	cbnz	r0, 8016f20 <acos+0x50>
 8016ef4:	ec45 4b10 	vmov	d0, r4, r5
 8016ef8:	f7ff ffb6 	bl	8016e68 <fabs>
 8016efc:	4b0c      	ldr	r3, [pc, #48]	; (8016f30 <acos+0x60>)
 8016efe:	ec51 0b10 	vmov	r0, r1, d0
 8016f02:	2200      	movs	r2, #0
 8016f04:	f7e9 fe18 	bl	8000b38 <__aeabi_dcmpgt>
 8016f08:	b150      	cbz	r0, 8016f20 <acos+0x50>
 8016f0a:	f7fb f939 	bl	8012180 <__errno>
 8016f0e:	ecbd 8b02 	vpop	{d8}
 8016f12:	2321      	movs	r3, #33	; 0x21
 8016f14:	6003      	str	r3, [r0, #0]
 8016f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016f1a:	4806      	ldr	r0, [pc, #24]	; (8016f34 <acos+0x64>)
 8016f1c:	f7ff bc90 	b.w	8016840 <nan>
 8016f20:	eeb0 0a48 	vmov.f32	s0, s16
 8016f24:	eef0 0a68 	vmov.f32	s1, s17
 8016f28:	ecbd 8b02 	vpop	{d8}
 8016f2c:	bd38      	pop	{r3, r4, r5, pc}
 8016f2e:	bf00      	nop
 8016f30:	3ff00000 	.word	0x3ff00000
 8016f34:	0806297f 	.word	0x0806297f

08016f38 <pow>:
 8016f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f3a:	ed2d 8b02 	vpush	{d8}
 8016f3e:	eeb0 8a40 	vmov.f32	s16, s0
 8016f42:	eef0 8a60 	vmov.f32	s17, s1
 8016f46:	ec55 4b11 	vmov	r4, r5, d1
 8016f4a:	f000 fbf9 	bl	8017740 <__ieee754_pow>
 8016f4e:	4622      	mov	r2, r4
 8016f50:	462b      	mov	r3, r5
 8016f52:	4620      	mov	r0, r4
 8016f54:	4629      	mov	r1, r5
 8016f56:	ec57 6b10 	vmov	r6, r7, d0
 8016f5a:	f7e9 fdf7 	bl	8000b4c <__aeabi_dcmpun>
 8016f5e:	2800      	cmp	r0, #0
 8016f60:	d13b      	bne.n	8016fda <pow+0xa2>
 8016f62:	ec51 0b18 	vmov	r0, r1, d8
 8016f66:	2200      	movs	r2, #0
 8016f68:	2300      	movs	r3, #0
 8016f6a:	f7e9 fdbd 	bl	8000ae8 <__aeabi_dcmpeq>
 8016f6e:	b1b8      	cbz	r0, 8016fa0 <pow+0x68>
 8016f70:	2200      	movs	r2, #0
 8016f72:	2300      	movs	r3, #0
 8016f74:	4620      	mov	r0, r4
 8016f76:	4629      	mov	r1, r5
 8016f78:	f7e9 fdb6 	bl	8000ae8 <__aeabi_dcmpeq>
 8016f7c:	2800      	cmp	r0, #0
 8016f7e:	d146      	bne.n	801700e <pow+0xd6>
 8016f80:	ec45 4b10 	vmov	d0, r4, r5
 8016f84:	f002 fddc 	bl	8019b40 <finite>
 8016f88:	b338      	cbz	r0, 8016fda <pow+0xa2>
 8016f8a:	2200      	movs	r2, #0
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	4620      	mov	r0, r4
 8016f90:	4629      	mov	r1, r5
 8016f92:	f7e9 fdb3 	bl	8000afc <__aeabi_dcmplt>
 8016f96:	b300      	cbz	r0, 8016fda <pow+0xa2>
 8016f98:	f7fb f8f2 	bl	8012180 <__errno>
 8016f9c:	2322      	movs	r3, #34	; 0x22
 8016f9e:	e01b      	b.n	8016fd8 <pow+0xa0>
 8016fa0:	ec47 6b10 	vmov	d0, r6, r7
 8016fa4:	f002 fdcc 	bl	8019b40 <finite>
 8016fa8:	b9e0      	cbnz	r0, 8016fe4 <pow+0xac>
 8016faa:	eeb0 0a48 	vmov.f32	s0, s16
 8016fae:	eef0 0a68 	vmov.f32	s1, s17
 8016fb2:	f002 fdc5 	bl	8019b40 <finite>
 8016fb6:	b1a8      	cbz	r0, 8016fe4 <pow+0xac>
 8016fb8:	ec45 4b10 	vmov	d0, r4, r5
 8016fbc:	f002 fdc0 	bl	8019b40 <finite>
 8016fc0:	b180      	cbz	r0, 8016fe4 <pow+0xac>
 8016fc2:	4632      	mov	r2, r6
 8016fc4:	463b      	mov	r3, r7
 8016fc6:	4630      	mov	r0, r6
 8016fc8:	4639      	mov	r1, r7
 8016fca:	f7e9 fdbf 	bl	8000b4c <__aeabi_dcmpun>
 8016fce:	2800      	cmp	r0, #0
 8016fd0:	d0e2      	beq.n	8016f98 <pow+0x60>
 8016fd2:	f7fb f8d5 	bl	8012180 <__errno>
 8016fd6:	2321      	movs	r3, #33	; 0x21
 8016fd8:	6003      	str	r3, [r0, #0]
 8016fda:	ecbd 8b02 	vpop	{d8}
 8016fde:	ec47 6b10 	vmov	d0, r6, r7
 8016fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016fe4:	2200      	movs	r2, #0
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	4630      	mov	r0, r6
 8016fea:	4639      	mov	r1, r7
 8016fec:	f7e9 fd7c 	bl	8000ae8 <__aeabi_dcmpeq>
 8016ff0:	2800      	cmp	r0, #0
 8016ff2:	d0f2      	beq.n	8016fda <pow+0xa2>
 8016ff4:	eeb0 0a48 	vmov.f32	s0, s16
 8016ff8:	eef0 0a68 	vmov.f32	s1, s17
 8016ffc:	f002 fda0 	bl	8019b40 <finite>
 8017000:	2800      	cmp	r0, #0
 8017002:	d0ea      	beq.n	8016fda <pow+0xa2>
 8017004:	ec45 4b10 	vmov	d0, r4, r5
 8017008:	f002 fd9a 	bl	8019b40 <finite>
 801700c:	e7c3      	b.n	8016f96 <pow+0x5e>
 801700e:	4f01      	ldr	r7, [pc, #4]	; (8017014 <pow+0xdc>)
 8017010:	2600      	movs	r6, #0
 8017012:	e7e2      	b.n	8016fda <pow+0xa2>
 8017014:	3ff00000 	.word	0x3ff00000

08017018 <sqrt>:
 8017018:	b538      	push	{r3, r4, r5, lr}
 801701a:	ed2d 8b02 	vpush	{d8}
 801701e:	ec55 4b10 	vmov	r4, r5, d0
 8017022:	f001 fac9 	bl	80185b8 <__ieee754_sqrt>
 8017026:	4622      	mov	r2, r4
 8017028:	462b      	mov	r3, r5
 801702a:	4620      	mov	r0, r4
 801702c:	4629      	mov	r1, r5
 801702e:	eeb0 8a40 	vmov.f32	s16, s0
 8017032:	eef0 8a60 	vmov.f32	s17, s1
 8017036:	f7e9 fd89 	bl	8000b4c <__aeabi_dcmpun>
 801703a:	b990      	cbnz	r0, 8017062 <sqrt+0x4a>
 801703c:	2200      	movs	r2, #0
 801703e:	2300      	movs	r3, #0
 8017040:	4620      	mov	r0, r4
 8017042:	4629      	mov	r1, r5
 8017044:	f7e9 fd5a 	bl	8000afc <__aeabi_dcmplt>
 8017048:	b158      	cbz	r0, 8017062 <sqrt+0x4a>
 801704a:	f7fb f899 	bl	8012180 <__errno>
 801704e:	2321      	movs	r3, #33	; 0x21
 8017050:	6003      	str	r3, [r0, #0]
 8017052:	2200      	movs	r2, #0
 8017054:	2300      	movs	r3, #0
 8017056:	4610      	mov	r0, r2
 8017058:	4619      	mov	r1, r3
 801705a:	f7e9 fc07 	bl	800086c <__aeabi_ddiv>
 801705e:	ec41 0b18 	vmov	d8, r0, r1
 8017062:	eeb0 0a48 	vmov.f32	s0, s16
 8017066:	eef0 0a68 	vmov.f32	s1, s17
 801706a:	ecbd 8b02 	vpop	{d8}
 801706e:	bd38      	pop	{r3, r4, r5, pc}

08017070 <expf>:
 8017070:	b508      	push	{r3, lr}
 8017072:	ed2d 8b02 	vpush	{d8}
 8017076:	eef0 8a40 	vmov.f32	s17, s0
 801707a:	f001 fb4f 	bl	801871c <__ieee754_expf>
 801707e:	eeb0 8a40 	vmov.f32	s16, s0
 8017082:	eeb0 0a68 	vmov.f32	s0, s17
 8017086:	f002 fe6d 	bl	8019d64 <finitef>
 801708a:	b160      	cbz	r0, 80170a6 <expf+0x36>
 801708c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80170cc <expf+0x5c>
 8017090:	eef4 8ae7 	vcmpe.f32	s17, s15
 8017094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017098:	dd0a      	ble.n	80170b0 <expf+0x40>
 801709a:	f7fb f871 	bl	8012180 <__errno>
 801709e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80170d0 <expf+0x60>
 80170a2:	2322      	movs	r3, #34	; 0x22
 80170a4:	6003      	str	r3, [r0, #0]
 80170a6:	eeb0 0a48 	vmov.f32	s0, s16
 80170aa:	ecbd 8b02 	vpop	{d8}
 80170ae:	bd08      	pop	{r3, pc}
 80170b0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80170d4 <expf+0x64>
 80170b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80170b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170bc:	d5f3      	bpl.n	80170a6 <expf+0x36>
 80170be:	f7fb f85f 	bl	8012180 <__errno>
 80170c2:	2322      	movs	r3, #34	; 0x22
 80170c4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80170d8 <expf+0x68>
 80170c8:	6003      	str	r3, [r0, #0]
 80170ca:	e7ec      	b.n	80170a6 <expf+0x36>
 80170cc:	42b17180 	.word	0x42b17180
 80170d0:	7f800000 	.word	0x7f800000
 80170d4:	c2cff1b5 	.word	0xc2cff1b5
 80170d8:	00000000 	.word	0x00000000

080170dc <logf>:
 80170dc:	b508      	push	{r3, lr}
 80170de:	ed2d 8b02 	vpush	{d8}
 80170e2:	eeb0 8a40 	vmov.f32	s16, s0
 80170e6:	f001 fbe7 	bl	80188b8 <__ieee754_logf>
 80170ea:	eeb4 8a48 	vcmp.f32	s16, s16
 80170ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170f2:	d60f      	bvs.n	8017114 <logf+0x38>
 80170f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80170f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80170fc:	dc0a      	bgt.n	8017114 <logf+0x38>
 80170fe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017106:	d108      	bne.n	801711a <logf+0x3e>
 8017108:	f7fb f83a 	bl	8012180 <__errno>
 801710c:	2322      	movs	r3, #34	; 0x22
 801710e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8017130 <logf+0x54>
 8017112:	6003      	str	r3, [r0, #0]
 8017114:	ecbd 8b02 	vpop	{d8}
 8017118:	bd08      	pop	{r3, pc}
 801711a:	f7fb f831 	bl	8012180 <__errno>
 801711e:	ecbd 8b02 	vpop	{d8}
 8017122:	2321      	movs	r3, #33	; 0x21
 8017124:	6003      	str	r3, [r0, #0]
 8017126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801712a:	4802      	ldr	r0, [pc, #8]	; (8017134 <logf+0x58>)
 801712c:	f7fc b946 	b.w	80133bc <nanf>
 8017130:	ff800000 	.word	0xff800000
 8017134:	0806297f 	.word	0x0806297f

08017138 <log10f>:
 8017138:	b508      	push	{r3, lr}
 801713a:	ed2d 8b02 	vpush	{d8}
 801713e:	eeb0 8a40 	vmov.f32	s16, s0
 8017142:	f001 fca9 	bl	8018a98 <__ieee754_log10f>
 8017146:	eeb4 8a48 	vcmp.f32	s16, s16
 801714a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801714e:	d60f      	bvs.n	8017170 <log10f+0x38>
 8017150:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017158:	d80a      	bhi.n	8017170 <log10f+0x38>
 801715a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801715e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017162:	d108      	bne.n	8017176 <log10f+0x3e>
 8017164:	f7fb f80c 	bl	8012180 <__errno>
 8017168:	2322      	movs	r3, #34	; 0x22
 801716a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801718c <log10f+0x54>
 801716e:	6003      	str	r3, [r0, #0]
 8017170:	ecbd 8b02 	vpop	{d8}
 8017174:	bd08      	pop	{r3, pc}
 8017176:	f7fb f803 	bl	8012180 <__errno>
 801717a:	ecbd 8b02 	vpop	{d8}
 801717e:	2321      	movs	r3, #33	; 0x21
 8017180:	6003      	str	r3, [r0, #0]
 8017182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017186:	4802      	ldr	r0, [pc, #8]	; (8017190 <log10f+0x58>)
 8017188:	f7fc b918 	b.w	80133bc <nanf>
 801718c:	ff800000 	.word	0xff800000
 8017190:	0806297f 	.word	0x0806297f

08017194 <powf>:
 8017194:	b508      	push	{r3, lr}
 8017196:	ed2d 8b04 	vpush	{d8-d9}
 801719a:	eeb0 8a60 	vmov.f32	s16, s1
 801719e:	eeb0 9a40 	vmov.f32	s18, s0
 80171a2:	f001 fcd1 	bl	8018b48 <__ieee754_powf>
 80171a6:	eeb4 8a48 	vcmp.f32	s16, s16
 80171aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171ae:	eef0 8a40 	vmov.f32	s17, s0
 80171b2:	d63e      	bvs.n	8017232 <powf+0x9e>
 80171b4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80171b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171bc:	d112      	bne.n	80171e4 <powf+0x50>
 80171be:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80171c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171c6:	d039      	beq.n	801723c <powf+0xa8>
 80171c8:	eeb0 0a48 	vmov.f32	s0, s16
 80171cc:	f002 fdca 	bl	8019d64 <finitef>
 80171d0:	b378      	cbz	r0, 8017232 <powf+0x9e>
 80171d2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80171d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171da:	d52a      	bpl.n	8017232 <powf+0x9e>
 80171dc:	f7fa ffd0 	bl	8012180 <__errno>
 80171e0:	2322      	movs	r3, #34	; 0x22
 80171e2:	e014      	b.n	801720e <powf+0x7a>
 80171e4:	f002 fdbe 	bl	8019d64 <finitef>
 80171e8:	b998      	cbnz	r0, 8017212 <powf+0x7e>
 80171ea:	eeb0 0a49 	vmov.f32	s0, s18
 80171ee:	f002 fdb9 	bl	8019d64 <finitef>
 80171f2:	b170      	cbz	r0, 8017212 <powf+0x7e>
 80171f4:	eeb0 0a48 	vmov.f32	s0, s16
 80171f8:	f002 fdb4 	bl	8019d64 <finitef>
 80171fc:	b148      	cbz	r0, 8017212 <powf+0x7e>
 80171fe:	eef4 8a68 	vcmp.f32	s17, s17
 8017202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017206:	d7e9      	bvc.n	80171dc <powf+0x48>
 8017208:	f7fa ffba 	bl	8012180 <__errno>
 801720c:	2321      	movs	r3, #33	; 0x21
 801720e:	6003      	str	r3, [r0, #0]
 8017210:	e00f      	b.n	8017232 <powf+0x9e>
 8017212:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801721a:	d10a      	bne.n	8017232 <powf+0x9e>
 801721c:	eeb0 0a49 	vmov.f32	s0, s18
 8017220:	f002 fda0 	bl	8019d64 <finitef>
 8017224:	b128      	cbz	r0, 8017232 <powf+0x9e>
 8017226:	eeb0 0a48 	vmov.f32	s0, s16
 801722a:	f002 fd9b 	bl	8019d64 <finitef>
 801722e:	2800      	cmp	r0, #0
 8017230:	d1d4      	bne.n	80171dc <powf+0x48>
 8017232:	eeb0 0a68 	vmov.f32	s0, s17
 8017236:	ecbd 8b04 	vpop	{d8-d9}
 801723a:	bd08      	pop	{r3, pc}
 801723c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017240:	e7f7      	b.n	8017232 <powf+0x9e>
	...

08017244 <sqrtf>:
 8017244:	b508      	push	{r3, lr}
 8017246:	ed2d 8b02 	vpush	{d8}
 801724a:	eeb0 8a40 	vmov.f32	s16, s0
 801724e:	f001 ff49 	bl	80190e4 <__ieee754_sqrtf>
 8017252:	eeb4 8a48 	vcmp.f32	s16, s16
 8017256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801725a:	d60c      	bvs.n	8017276 <sqrtf+0x32>
 801725c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801727c <sqrtf+0x38>
 8017260:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017268:	d505      	bpl.n	8017276 <sqrtf+0x32>
 801726a:	f7fa ff89 	bl	8012180 <__errno>
 801726e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8017272:	2321      	movs	r3, #33	; 0x21
 8017274:	6003      	str	r3, [r0, #0]
 8017276:	ecbd 8b02 	vpop	{d8}
 801727a:	bd08      	pop	{r3, pc}
 801727c:	00000000 	.word	0x00000000

08017280 <__ieee754_acos>:
 8017280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017284:	ec55 4b10 	vmov	r4, r5, d0
 8017288:	49b7      	ldr	r1, [pc, #732]	; (8017568 <__ieee754_acos+0x2e8>)
 801728a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801728e:	428b      	cmp	r3, r1
 8017290:	dd1b      	ble.n	80172ca <__ieee754_acos+0x4a>
 8017292:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8017296:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801729a:	4323      	orrs	r3, r4
 801729c:	d106      	bne.n	80172ac <__ieee754_acos+0x2c>
 801729e:	2d00      	cmp	r5, #0
 80172a0:	f300 8211 	bgt.w	80176c6 <__ieee754_acos+0x446>
 80172a4:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8017500 <__ieee754_acos+0x280>
 80172a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172ac:	ee10 2a10 	vmov	r2, s0
 80172b0:	462b      	mov	r3, r5
 80172b2:	ee10 0a10 	vmov	r0, s0
 80172b6:	4629      	mov	r1, r5
 80172b8:	f7e8 fff6 	bl	80002a8 <__aeabi_dsub>
 80172bc:	4602      	mov	r2, r0
 80172be:	460b      	mov	r3, r1
 80172c0:	f7e9 fad4 	bl	800086c <__aeabi_ddiv>
 80172c4:	ec41 0b10 	vmov	d0, r0, r1
 80172c8:	e7ee      	b.n	80172a8 <__ieee754_acos+0x28>
 80172ca:	49a8      	ldr	r1, [pc, #672]	; (801756c <__ieee754_acos+0x2ec>)
 80172cc:	428b      	cmp	r3, r1
 80172ce:	f300 8087 	bgt.w	80173e0 <__ieee754_acos+0x160>
 80172d2:	4aa7      	ldr	r2, [pc, #668]	; (8017570 <__ieee754_acos+0x2f0>)
 80172d4:	4293      	cmp	r3, r2
 80172d6:	f340 81f9 	ble.w	80176cc <__ieee754_acos+0x44c>
 80172da:	ee10 2a10 	vmov	r2, s0
 80172de:	ee10 0a10 	vmov	r0, s0
 80172e2:	462b      	mov	r3, r5
 80172e4:	4629      	mov	r1, r5
 80172e6:	f7e9 f997 	bl	8000618 <__aeabi_dmul>
 80172ea:	a387      	add	r3, pc, #540	; (adr r3, 8017508 <__ieee754_acos+0x288>)
 80172ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172f0:	4606      	mov	r6, r0
 80172f2:	460f      	mov	r7, r1
 80172f4:	f7e9 f990 	bl	8000618 <__aeabi_dmul>
 80172f8:	a385      	add	r3, pc, #532	; (adr r3, 8017510 <__ieee754_acos+0x290>)
 80172fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172fe:	f7e8 ffd5 	bl	80002ac <__adddf3>
 8017302:	4632      	mov	r2, r6
 8017304:	463b      	mov	r3, r7
 8017306:	f7e9 f987 	bl	8000618 <__aeabi_dmul>
 801730a:	a383      	add	r3, pc, #524	; (adr r3, 8017518 <__ieee754_acos+0x298>)
 801730c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017310:	f7e8 ffca 	bl	80002a8 <__aeabi_dsub>
 8017314:	4632      	mov	r2, r6
 8017316:	463b      	mov	r3, r7
 8017318:	f7e9 f97e 	bl	8000618 <__aeabi_dmul>
 801731c:	a380      	add	r3, pc, #512	; (adr r3, 8017520 <__ieee754_acos+0x2a0>)
 801731e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017322:	f7e8 ffc3 	bl	80002ac <__adddf3>
 8017326:	4632      	mov	r2, r6
 8017328:	463b      	mov	r3, r7
 801732a:	f7e9 f975 	bl	8000618 <__aeabi_dmul>
 801732e:	a37e      	add	r3, pc, #504	; (adr r3, 8017528 <__ieee754_acos+0x2a8>)
 8017330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017334:	f7e8 ffb8 	bl	80002a8 <__aeabi_dsub>
 8017338:	4632      	mov	r2, r6
 801733a:	463b      	mov	r3, r7
 801733c:	f7e9 f96c 	bl	8000618 <__aeabi_dmul>
 8017340:	a37b      	add	r3, pc, #492	; (adr r3, 8017530 <__ieee754_acos+0x2b0>)
 8017342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017346:	f7e8 ffb1 	bl	80002ac <__adddf3>
 801734a:	4632      	mov	r2, r6
 801734c:	463b      	mov	r3, r7
 801734e:	f7e9 f963 	bl	8000618 <__aeabi_dmul>
 8017352:	a379      	add	r3, pc, #484	; (adr r3, 8017538 <__ieee754_acos+0x2b8>)
 8017354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017358:	4680      	mov	r8, r0
 801735a:	4689      	mov	r9, r1
 801735c:	4630      	mov	r0, r6
 801735e:	4639      	mov	r1, r7
 8017360:	f7e9 f95a 	bl	8000618 <__aeabi_dmul>
 8017364:	a376      	add	r3, pc, #472	; (adr r3, 8017540 <__ieee754_acos+0x2c0>)
 8017366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801736a:	f7e8 ff9d 	bl	80002a8 <__aeabi_dsub>
 801736e:	4632      	mov	r2, r6
 8017370:	463b      	mov	r3, r7
 8017372:	f7e9 f951 	bl	8000618 <__aeabi_dmul>
 8017376:	a374      	add	r3, pc, #464	; (adr r3, 8017548 <__ieee754_acos+0x2c8>)
 8017378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801737c:	f7e8 ff96 	bl	80002ac <__adddf3>
 8017380:	4632      	mov	r2, r6
 8017382:	463b      	mov	r3, r7
 8017384:	f7e9 f948 	bl	8000618 <__aeabi_dmul>
 8017388:	a371      	add	r3, pc, #452	; (adr r3, 8017550 <__ieee754_acos+0x2d0>)
 801738a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801738e:	f7e8 ff8b 	bl	80002a8 <__aeabi_dsub>
 8017392:	4632      	mov	r2, r6
 8017394:	463b      	mov	r3, r7
 8017396:	f7e9 f93f 	bl	8000618 <__aeabi_dmul>
 801739a:	4b76      	ldr	r3, [pc, #472]	; (8017574 <__ieee754_acos+0x2f4>)
 801739c:	2200      	movs	r2, #0
 801739e:	f7e8 ff85 	bl	80002ac <__adddf3>
 80173a2:	4602      	mov	r2, r0
 80173a4:	460b      	mov	r3, r1
 80173a6:	4640      	mov	r0, r8
 80173a8:	4649      	mov	r1, r9
 80173aa:	f7e9 fa5f 	bl	800086c <__aeabi_ddiv>
 80173ae:	4622      	mov	r2, r4
 80173b0:	462b      	mov	r3, r5
 80173b2:	f7e9 f931 	bl	8000618 <__aeabi_dmul>
 80173b6:	4602      	mov	r2, r0
 80173b8:	460b      	mov	r3, r1
 80173ba:	a167      	add	r1, pc, #412	; (adr r1, 8017558 <__ieee754_acos+0x2d8>)
 80173bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80173c0:	f7e8 ff72 	bl	80002a8 <__aeabi_dsub>
 80173c4:	4602      	mov	r2, r0
 80173c6:	460b      	mov	r3, r1
 80173c8:	4620      	mov	r0, r4
 80173ca:	4629      	mov	r1, r5
 80173cc:	f7e8 ff6c 	bl	80002a8 <__aeabi_dsub>
 80173d0:	4602      	mov	r2, r0
 80173d2:	460b      	mov	r3, r1
 80173d4:	a162      	add	r1, pc, #392	; (adr r1, 8017560 <__ieee754_acos+0x2e0>)
 80173d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80173da:	f7e8 ff65 	bl	80002a8 <__aeabi_dsub>
 80173de:	e771      	b.n	80172c4 <__ieee754_acos+0x44>
 80173e0:	2d00      	cmp	r5, #0
 80173e2:	f280 80cb 	bge.w	801757c <__ieee754_acos+0x2fc>
 80173e6:	ee10 0a10 	vmov	r0, s0
 80173ea:	4b62      	ldr	r3, [pc, #392]	; (8017574 <__ieee754_acos+0x2f4>)
 80173ec:	2200      	movs	r2, #0
 80173ee:	4629      	mov	r1, r5
 80173f0:	f7e8 ff5c 	bl	80002ac <__adddf3>
 80173f4:	4b60      	ldr	r3, [pc, #384]	; (8017578 <__ieee754_acos+0x2f8>)
 80173f6:	2200      	movs	r2, #0
 80173f8:	f7e9 f90e 	bl	8000618 <__aeabi_dmul>
 80173fc:	a342      	add	r3, pc, #264	; (adr r3, 8017508 <__ieee754_acos+0x288>)
 80173fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017402:	4604      	mov	r4, r0
 8017404:	460d      	mov	r5, r1
 8017406:	f7e9 f907 	bl	8000618 <__aeabi_dmul>
 801740a:	a341      	add	r3, pc, #260	; (adr r3, 8017510 <__ieee754_acos+0x290>)
 801740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017410:	f7e8 ff4c 	bl	80002ac <__adddf3>
 8017414:	4622      	mov	r2, r4
 8017416:	462b      	mov	r3, r5
 8017418:	f7e9 f8fe 	bl	8000618 <__aeabi_dmul>
 801741c:	a33e      	add	r3, pc, #248	; (adr r3, 8017518 <__ieee754_acos+0x298>)
 801741e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017422:	f7e8 ff41 	bl	80002a8 <__aeabi_dsub>
 8017426:	4622      	mov	r2, r4
 8017428:	462b      	mov	r3, r5
 801742a:	f7e9 f8f5 	bl	8000618 <__aeabi_dmul>
 801742e:	a33c      	add	r3, pc, #240	; (adr r3, 8017520 <__ieee754_acos+0x2a0>)
 8017430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017434:	f7e8 ff3a 	bl	80002ac <__adddf3>
 8017438:	4622      	mov	r2, r4
 801743a:	462b      	mov	r3, r5
 801743c:	f7e9 f8ec 	bl	8000618 <__aeabi_dmul>
 8017440:	a339      	add	r3, pc, #228	; (adr r3, 8017528 <__ieee754_acos+0x2a8>)
 8017442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017446:	f7e8 ff2f 	bl	80002a8 <__aeabi_dsub>
 801744a:	4622      	mov	r2, r4
 801744c:	462b      	mov	r3, r5
 801744e:	f7e9 f8e3 	bl	8000618 <__aeabi_dmul>
 8017452:	a337      	add	r3, pc, #220	; (adr r3, 8017530 <__ieee754_acos+0x2b0>)
 8017454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017458:	f7e8 ff28 	bl	80002ac <__adddf3>
 801745c:	4622      	mov	r2, r4
 801745e:	462b      	mov	r3, r5
 8017460:	f7e9 f8da 	bl	8000618 <__aeabi_dmul>
 8017464:	ec45 4b10 	vmov	d0, r4, r5
 8017468:	4680      	mov	r8, r0
 801746a:	4689      	mov	r9, r1
 801746c:	f001 f8a4 	bl	80185b8 <__ieee754_sqrt>
 8017470:	a331      	add	r3, pc, #196	; (adr r3, 8017538 <__ieee754_acos+0x2b8>)
 8017472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017476:	4620      	mov	r0, r4
 8017478:	4629      	mov	r1, r5
 801747a:	ec57 6b10 	vmov	r6, r7, d0
 801747e:	f7e9 f8cb 	bl	8000618 <__aeabi_dmul>
 8017482:	a32f      	add	r3, pc, #188	; (adr r3, 8017540 <__ieee754_acos+0x2c0>)
 8017484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017488:	f7e8 ff0e 	bl	80002a8 <__aeabi_dsub>
 801748c:	4622      	mov	r2, r4
 801748e:	462b      	mov	r3, r5
 8017490:	f7e9 f8c2 	bl	8000618 <__aeabi_dmul>
 8017494:	a32c      	add	r3, pc, #176	; (adr r3, 8017548 <__ieee754_acos+0x2c8>)
 8017496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801749a:	f7e8 ff07 	bl	80002ac <__adddf3>
 801749e:	4622      	mov	r2, r4
 80174a0:	462b      	mov	r3, r5
 80174a2:	f7e9 f8b9 	bl	8000618 <__aeabi_dmul>
 80174a6:	a32a      	add	r3, pc, #168	; (adr r3, 8017550 <__ieee754_acos+0x2d0>)
 80174a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ac:	f7e8 fefc 	bl	80002a8 <__aeabi_dsub>
 80174b0:	4622      	mov	r2, r4
 80174b2:	462b      	mov	r3, r5
 80174b4:	f7e9 f8b0 	bl	8000618 <__aeabi_dmul>
 80174b8:	4b2e      	ldr	r3, [pc, #184]	; (8017574 <__ieee754_acos+0x2f4>)
 80174ba:	2200      	movs	r2, #0
 80174bc:	f7e8 fef6 	bl	80002ac <__adddf3>
 80174c0:	4602      	mov	r2, r0
 80174c2:	460b      	mov	r3, r1
 80174c4:	4640      	mov	r0, r8
 80174c6:	4649      	mov	r1, r9
 80174c8:	f7e9 f9d0 	bl	800086c <__aeabi_ddiv>
 80174cc:	4632      	mov	r2, r6
 80174ce:	463b      	mov	r3, r7
 80174d0:	f7e9 f8a2 	bl	8000618 <__aeabi_dmul>
 80174d4:	a320      	add	r3, pc, #128	; (adr r3, 8017558 <__ieee754_acos+0x2d8>)
 80174d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174da:	f7e8 fee5 	bl	80002a8 <__aeabi_dsub>
 80174de:	4632      	mov	r2, r6
 80174e0:	463b      	mov	r3, r7
 80174e2:	f7e8 fee3 	bl	80002ac <__adddf3>
 80174e6:	4602      	mov	r2, r0
 80174e8:	460b      	mov	r3, r1
 80174ea:	f7e8 fedf 	bl	80002ac <__adddf3>
 80174ee:	4602      	mov	r2, r0
 80174f0:	460b      	mov	r3, r1
 80174f2:	a103      	add	r1, pc, #12	; (adr r1, 8017500 <__ieee754_acos+0x280>)
 80174f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80174f8:	e76f      	b.n	80173da <__ieee754_acos+0x15a>
 80174fa:	bf00      	nop
 80174fc:	f3af 8000 	nop.w
 8017500:	54442d18 	.word	0x54442d18
 8017504:	400921fb 	.word	0x400921fb
 8017508:	0dfdf709 	.word	0x0dfdf709
 801750c:	3f023de1 	.word	0x3f023de1
 8017510:	7501b288 	.word	0x7501b288
 8017514:	3f49efe0 	.word	0x3f49efe0
 8017518:	b5688f3b 	.word	0xb5688f3b
 801751c:	3fa48228 	.word	0x3fa48228
 8017520:	0e884455 	.word	0x0e884455
 8017524:	3fc9c155 	.word	0x3fc9c155
 8017528:	03eb6f7d 	.word	0x03eb6f7d
 801752c:	3fd4d612 	.word	0x3fd4d612
 8017530:	55555555 	.word	0x55555555
 8017534:	3fc55555 	.word	0x3fc55555
 8017538:	b12e9282 	.word	0xb12e9282
 801753c:	3fb3b8c5 	.word	0x3fb3b8c5
 8017540:	1b8d0159 	.word	0x1b8d0159
 8017544:	3fe6066c 	.word	0x3fe6066c
 8017548:	9c598ac8 	.word	0x9c598ac8
 801754c:	40002ae5 	.word	0x40002ae5
 8017550:	1c8a2d4b 	.word	0x1c8a2d4b
 8017554:	40033a27 	.word	0x40033a27
 8017558:	33145c07 	.word	0x33145c07
 801755c:	3c91a626 	.word	0x3c91a626
 8017560:	54442d18 	.word	0x54442d18
 8017564:	3ff921fb 	.word	0x3ff921fb
 8017568:	3fefffff 	.word	0x3fefffff
 801756c:	3fdfffff 	.word	0x3fdfffff
 8017570:	3c600000 	.word	0x3c600000
 8017574:	3ff00000 	.word	0x3ff00000
 8017578:	3fe00000 	.word	0x3fe00000
 801757c:	ee10 2a10 	vmov	r2, s0
 8017580:	462b      	mov	r3, r5
 8017582:	496d      	ldr	r1, [pc, #436]	; (8017738 <__ieee754_acos+0x4b8>)
 8017584:	2000      	movs	r0, #0
 8017586:	f7e8 fe8f 	bl	80002a8 <__aeabi_dsub>
 801758a:	4b6c      	ldr	r3, [pc, #432]	; (801773c <__ieee754_acos+0x4bc>)
 801758c:	2200      	movs	r2, #0
 801758e:	f7e9 f843 	bl	8000618 <__aeabi_dmul>
 8017592:	4604      	mov	r4, r0
 8017594:	460d      	mov	r5, r1
 8017596:	ec45 4b10 	vmov	d0, r4, r5
 801759a:	f001 f80d 	bl	80185b8 <__ieee754_sqrt>
 801759e:	a34e      	add	r3, pc, #312	; (adr r3, 80176d8 <__ieee754_acos+0x458>)
 80175a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175a4:	4620      	mov	r0, r4
 80175a6:	4629      	mov	r1, r5
 80175a8:	ec59 8b10 	vmov	r8, r9, d0
 80175ac:	f7e9 f834 	bl	8000618 <__aeabi_dmul>
 80175b0:	a34b      	add	r3, pc, #300	; (adr r3, 80176e0 <__ieee754_acos+0x460>)
 80175b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175b6:	f7e8 fe79 	bl	80002ac <__adddf3>
 80175ba:	4622      	mov	r2, r4
 80175bc:	462b      	mov	r3, r5
 80175be:	f7e9 f82b 	bl	8000618 <__aeabi_dmul>
 80175c2:	a349      	add	r3, pc, #292	; (adr r3, 80176e8 <__ieee754_acos+0x468>)
 80175c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175c8:	f7e8 fe6e 	bl	80002a8 <__aeabi_dsub>
 80175cc:	4622      	mov	r2, r4
 80175ce:	462b      	mov	r3, r5
 80175d0:	f7e9 f822 	bl	8000618 <__aeabi_dmul>
 80175d4:	a346      	add	r3, pc, #280	; (adr r3, 80176f0 <__ieee754_acos+0x470>)
 80175d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175da:	f7e8 fe67 	bl	80002ac <__adddf3>
 80175de:	4622      	mov	r2, r4
 80175e0:	462b      	mov	r3, r5
 80175e2:	f7e9 f819 	bl	8000618 <__aeabi_dmul>
 80175e6:	a344      	add	r3, pc, #272	; (adr r3, 80176f8 <__ieee754_acos+0x478>)
 80175e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ec:	f7e8 fe5c 	bl	80002a8 <__aeabi_dsub>
 80175f0:	4622      	mov	r2, r4
 80175f2:	462b      	mov	r3, r5
 80175f4:	f7e9 f810 	bl	8000618 <__aeabi_dmul>
 80175f8:	a341      	add	r3, pc, #260	; (adr r3, 8017700 <__ieee754_acos+0x480>)
 80175fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175fe:	f7e8 fe55 	bl	80002ac <__adddf3>
 8017602:	4622      	mov	r2, r4
 8017604:	462b      	mov	r3, r5
 8017606:	f7e9 f807 	bl	8000618 <__aeabi_dmul>
 801760a:	a33f      	add	r3, pc, #252	; (adr r3, 8017708 <__ieee754_acos+0x488>)
 801760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017610:	4682      	mov	sl, r0
 8017612:	468b      	mov	fp, r1
 8017614:	4620      	mov	r0, r4
 8017616:	4629      	mov	r1, r5
 8017618:	f7e8 fffe 	bl	8000618 <__aeabi_dmul>
 801761c:	a33c      	add	r3, pc, #240	; (adr r3, 8017710 <__ieee754_acos+0x490>)
 801761e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017622:	f7e8 fe41 	bl	80002a8 <__aeabi_dsub>
 8017626:	4622      	mov	r2, r4
 8017628:	462b      	mov	r3, r5
 801762a:	f7e8 fff5 	bl	8000618 <__aeabi_dmul>
 801762e:	a33a      	add	r3, pc, #232	; (adr r3, 8017718 <__ieee754_acos+0x498>)
 8017630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017634:	f7e8 fe3a 	bl	80002ac <__adddf3>
 8017638:	4622      	mov	r2, r4
 801763a:	462b      	mov	r3, r5
 801763c:	f7e8 ffec 	bl	8000618 <__aeabi_dmul>
 8017640:	a337      	add	r3, pc, #220	; (adr r3, 8017720 <__ieee754_acos+0x4a0>)
 8017642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017646:	f7e8 fe2f 	bl	80002a8 <__aeabi_dsub>
 801764a:	4622      	mov	r2, r4
 801764c:	462b      	mov	r3, r5
 801764e:	f7e8 ffe3 	bl	8000618 <__aeabi_dmul>
 8017652:	4b39      	ldr	r3, [pc, #228]	; (8017738 <__ieee754_acos+0x4b8>)
 8017654:	2200      	movs	r2, #0
 8017656:	f7e8 fe29 	bl	80002ac <__adddf3>
 801765a:	4602      	mov	r2, r0
 801765c:	460b      	mov	r3, r1
 801765e:	4650      	mov	r0, sl
 8017660:	4659      	mov	r1, fp
 8017662:	f7e9 f903 	bl	800086c <__aeabi_ddiv>
 8017666:	4642      	mov	r2, r8
 8017668:	464b      	mov	r3, r9
 801766a:	f7e8 ffd5 	bl	8000618 <__aeabi_dmul>
 801766e:	2600      	movs	r6, #0
 8017670:	4682      	mov	sl, r0
 8017672:	468b      	mov	fp, r1
 8017674:	4632      	mov	r2, r6
 8017676:	464b      	mov	r3, r9
 8017678:	4630      	mov	r0, r6
 801767a:	4649      	mov	r1, r9
 801767c:	f7e8 ffcc 	bl	8000618 <__aeabi_dmul>
 8017680:	4602      	mov	r2, r0
 8017682:	460b      	mov	r3, r1
 8017684:	4620      	mov	r0, r4
 8017686:	4629      	mov	r1, r5
 8017688:	f7e8 fe0e 	bl	80002a8 <__aeabi_dsub>
 801768c:	4632      	mov	r2, r6
 801768e:	4604      	mov	r4, r0
 8017690:	460d      	mov	r5, r1
 8017692:	464b      	mov	r3, r9
 8017694:	4640      	mov	r0, r8
 8017696:	4649      	mov	r1, r9
 8017698:	f7e8 fe08 	bl	80002ac <__adddf3>
 801769c:	4602      	mov	r2, r0
 801769e:	460b      	mov	r3, r1
 80176a0:	4620      	mov	r0, r4
 80176a2:	4629      	mov	r1, r5
 80176a4:	f7e9 f8e2 	bl	800086c <__aeabi_ddiv>
 80176a8:	4602      	mov	r2, r0
 80176aa:	460b      	mov	r3, r1
 80176ac:	4650      	mov	r0, sl
 80176ae:	4659      	mov	r1, fp
 80176b0:	f7e8 fdfc 	bl	80002ac <__adddf3>
 80176b4:	4632      	mov	r2, r6
 80176b6:	464b      	mov	r3, r9
 80176b8:	f7e8 fdf8 	bl	80002ac <__adddf3>
 80176bc:	4602      	mov	r2, r0
 80176be:	460b      	mov	r3, r1
 80176c0:	f7e8 fdf4 	bl	80002ac <__adddf3>
 80176c4:	e5fe      	b.n	80172c4 <__ieee754_acos+0x44>
 80176c6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8017728 <__ieee754_acos+0x4a8>
 80176ca:	e5ed      	b.n	80172a8 <__ieee754_acos+0x28>
 80176cc:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8017730 <__ieee754_acos+0x4b0>
 80176d0:	e5ea      	b.n	80172a8 <__ieee754_acos+0x28>
 80176d2:	bf00      	nop
 80176d4:	f3af 8000 	nop.w
 80176d8:	0dfdf709 	.word	0x0dfdf709
 80176dc:	3f023de1 	.word	0x3f023de1
 80176e0:	7501b288 	.word	0x7501b288
 80176e4:	3f49efe0 	.word	0x3f49efe0
 80176e8:	b5688f3b 	.word	0xb5688f3b
 80176ec:	3fa48228 	.word	0x3fa48228
 80176f0:	0e884455 	.word	0x0e884455
 80176f4:	3fc9c155 	.word	0x3fc9c155
 80176f8:	03eb6f7d 	.word	0x03eb6f7d
 80176fc:	3fd4d612 	.word	0x3fd4d612
 8017700:	55555555 	.word	0x55555555
 8017704:	3fc55555 	.word	0x3fc55555
 8017708:	b12e9282 	.word	0xb12e9282
 801770c:	3fb3b8c5 	.word	0x3fb3b8c5
 8017710:	1b8d0159 	.word	0x1b8d0159
 8017714:	3fe6066c 	.word	0x3fe6066c
 8017718:	9c598ac8 	.word	0x9c598ac8
 801771c:	40002ae5 	.word	0x40002ae5
 8017720:	1c8a2d4b 	.word	0x1c8a2d4b
 8017724:	40033a27 	.word	0x40033a27
	...
 8017730:	54442d18 	.word	0x54442d18
 8017734:	3ff921fb 	.word	0x3ff921fb
 8017738:	3ff00000 	.word	0x3ff00000
 801773c:	3fe00000 	.word	0x3fe00000

08017740 <__ieee754_pow>:
 8017740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017744:	ed2d 8b06 	vpush	{d8-d10}
 8017748:	b089      	sub	sp, #36	; 0x24
 801774a:	ed8d 1b00 	vstr	d1, [sp]
 801774e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8017752:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8017756:	ea58 0102 	orrs.w	r1, r8, r2
 801775a:	ec57 6b10 	vmov	r6, r7, d0
 801775e:	d115      	bne.n	801778c <__ieee754_pow+0x4c>
 8017760:	19b3      	adds	r3, r6, r6
 8017762:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8017766:	4152      	adcs	r2, r2
 8017768:	4299      	cmp	r1, r3
 801776a:	4b89      	ldr	r3, [pc, #548]	; (8017990 <__ieee754_pow+0x250>)
 801776c:	4193      	sbcs	r3, r2
 801776e:	f080 84d2 	bcs.w	8018116 <__ieee754_pow+0x9d6>
 8017772:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017776:	4630      	mov	r0, r6
 8017778:	4639      	mov	r1, r7
 801777a:	f7e8 fd97 	bl	80002ac <__adddf3>
 801777e:	ec41 0b10 	vmov	d0, r0, r1
 8017782:	b009      	add	sp, #36	; 0x24
 8017784:	ecbd 8b06 	vpop	{d8-d10}
 8017788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801778c:	4b81      	ldr	r3, [pc, #516]	; (8017994 <__ieee754_pow+0x254>)
 801778e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8017792:	429c      	cmp	r4, r3
 8017794:	ee10 aa10 	vmov	sl, s0
 8017798:	463d      	mov	r5, r7
 801779a:	dc06      	bgt.n	80177aa <__ieee754_pow+0x6a>
 801779c:	d101      	bne.n	80177a2 <__ieee754_pow+0x62>
 801779e:	2e00      	cmp	r6, #0
 80177a0:	d1e7      	bne.n	8017772 <__ieee754_pow+0x32>
 80177a2:	4598      	cmp	r8, r3
 80177a4:	dc01      	bgt.n	80177aa <__ieee754_pow+0x6a>
 80177a6:	d10f      	bne.n	80177c8 <__ieee754_pow+0x88>
 80177a8:	b172      	cbz	r2, 80177c8 <__ieee754_pow+0x88>
 80177aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80177ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80177b2:	ea55 050a 	orrs.w	r5, r5, sl
 80177b6:	d1dc      	bne.n	8017772 <__ieee754_pow+0x32>
 80177b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80177bc:	18db      	adds	r3, r3, r3
 80177be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80177c2:	4152      	adcs	r2, r2
 80177c4:	429d      	cmp	r5, r3
 80177c6:	e7d0      	b.n	801776a <__ieee754_pow+0x2a>
 80177c8:	2d00      	cmp	r5, #0
 80177ca:	da3b      	bge.n	8017844 <__ieee754_pow+0x104>
 80177cc:	4b72      	ldr	r3, [pc, #456]	; (8017998 <__ieee754_pow+0x258>)
 80177ce:	4598      	cmp	r8, r3
 80177d0:	dc51      	bgt.n	8017876 <__ieee754_pow+0x136>
 80177d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80177d6:	4598      	cmp	r8, r3
 80177d8:	f340 84ac 	ble.w	8018134 <__ieee754_pow+0x9f4>
 80177dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80177e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80177e4:	2b14      	cmp	r3, #20
 80177e6:	dd0f      	ble.n	8017808 <__ieee754_pow+0xc8>
 80177e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80177ec:	fa22 f103 	lsr.w	r1, r2, r3
 80177f0:	fa01 f303 	lsl.w	r3, r1, r3
 80177f4:	4293      	cmp	r3, r2
 80177f6:	f040 849d 	bne.w	8018134 <__ieee754_pow+0x9f4>
 80177fa:	f001 0101 	and.w	r1, r1, #1
 80177fe:	f1c1 0302 	rsb	r3, r1, #2
 8017802:	9304      	str	r3, [sp, #16]
 8017804:	b182      	cbz	r2, 8017828 <__ieee754_pow+0xe8>
 8017806:	e05f      	b.n	80178c8 <__ieee754_pow+0x188>
 8017808:	2a00      	cmp	r2, #0
 801780a:	d15b      	bne.n	80178c4 <__ieee754_pow+0x184>
 801780c:	f1c3 0314 	rsb	r3, r3, #20
 8017810:	fa48 f103 	asr.w	r1, r8, r3
 8017814:	fa01 f303 	lsl.w	r3, r1, r3
 8017818:	4543      	cmp	r3, r8
 801781a:	f040 8488 	bne.w	801812e <__ieee754_pow+0x9ee>
 801781e:	f001 0101 	and.w	r1, r1, #1
 8017822:	f1c1 0302 	rsb	r3, r1, #2
 8017826:	9304      	str	r3, [sp, #16]
 8017828:	4b5c      	ldr	r3, [pc, #368]	; (801799c <__ieee754_pow+0x25c>)
 801782a:	4598      	cmp	r8, r3
 801782c:	d132      	bne.n	8017894 <__ieee754_pow+0x154>
 801782e:	f1b9 0f00 	cmp.w	r9, #0
 8017832:	f280 8478 	bge.w	8018126 <__ieee754_pow+0x9e6>
 8017836:	4959      	ldr	r1, [pc, #356]	; (801799c <__ieee754_pow+0x25c>)
 8017838:	4632      	mov	r2, r6
 801783a:	463b      	mov	r3, r7
 801783c:	2000      	movs	r0, #0
 801783e:	f7e9 f815 	bl	800086c <__aeabi_ddiv>
 8017842:	e79c      	b.n	801777e <__ieee754_pow+0x3e>
 8017844:	2300      	movs	r3, #0
 8017846:	9304      	str	r3, [sp, #16]
 8017848:	2a00      	cmp	r2, #0
 801784a:	d13d      	bne.n	80178c8 <__ieee754_pow+0x188>
 801784c:	4b51      	ldr	r3, [pc, #324]	; (8017994 <__ieee754_pow+0x254>)
 801784e:	4598      	cmp	r8, r3
 8017850:	d1ea      	bne.n	8017828 <__ieee754_pow+0xe8>
 8017852:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8017856:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801785a:	ea53 030a 	orrs.w	r3, r3, sl
 801785e:	f000 845a 	beq.w	8018116 <__ieee754_pow+0x9d6>
 8017862:	4b4f      	ldr	r3, [pc, #316]	; (80179a0 <__ieee754_pow+0x260>)
 8017864:	429c      	cmp	r4, r3
 8017866:	dd08      	ble.n	801787a <__ieee754_pow+0x13a>
 8017868:	f1b9 0f00 	cmp.w	r9, #0
 801786c:	f2c0 8457 	blt.w	801811e <__ieee754_pow+0x9de>
 8017870:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017874:	e783      	b.n	801777e <__ieee754_pow+0x3e>
 8017876:	2302      	movs	r3, #2
 8017878:	e7e5      	b.n	8017846 <__ieee754_pow+0x106>
 801787a:	f1b9 0f00 	cmp.w	r9, #0
 801787e:	f04f 0000 	mov.w	r0, #0
 8017882:	f04f 0100 	mov.w	r1, #0
 8017886:	f6bf af7a 	bge.w	801777e <__ieee754_pow+0x3e>
 801788a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801788e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8017892:	e774      	b.n	801777e <__ieee754_pow+0x3e>
 8017894:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8017898:	d106      	bne.n	80178a8 <__ieee754_pow+0x168>
 801789a:	4632      	mov	r2, r6
 801789c:	463b      	mov	r3, r7
 801789e:	4630      	mov	r0, r6
 80178a0:	4639      	mov	r1, r7
 80178a2:	f7e8 feb9 	bl	8000618 <__aeabi_dmul>
 80178a6:	e76a      	b.n	801777e <__ieee754_pow+0x3e>
 80178a8:	4b3e      	ldr	r3, [pc, #248]	; (80179a4 <__ieee754_pow+0x264>)
 80178aa:	4599      	cmp	r9, r3
 80178ac:	d10c      	bne.n	80178c8 <__ieee754_pow+0x188>
 80178ae:	2d00      	cmp	r5, #0
 80178b0:	db0a      	blt.n	80178c8 <__ieee754_pow+0x188>
 80178b2:	ec47 6b10 	vmov	d0, r6, r7
 80178b6:	b009      	add	sp, #36	; 0x24
 80178b8:	ecbd 8b06 	vpop	{d8-d10}
 80178bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178c0:	f000 be7a 	b.w	80185b8 <__ieee754_sqrt>
 80178c4:	2300      	movs	r3, #0
 80178c6:	9304      	str	r3, [sp, #16]
 80178c8:	ec47 6b10 	vmov	d0, r6, r7
 80178cc:	f7ff facc 	bl	8016e68 <fabs>
 80178d0:	ec51 0b10 	vmov	r0, r1, d0
 80178d4:	f1ba 0f00 	cmp.w	sl, #0
 80178d8:	d129      	bne.n	801792e <__ieee754_pow+0x1ee>
 80178da:	b124      	cbz	r4, 80178e6 <__ieee754_pow+0x1a6>
 80178dc:	4b2f      	ldr	r3, [pc, #188]	; (801799c <__ieee754_pow+0x25c>)
 80178de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80178e2:	429a      	cmp	r2, r3
 80178e4:	d123      	bne.n	801792e <__ieee754_pow+0x1ee>
 80178e6:	f1b9 0f00 	cmp.w	r9, #0
 80178ea:	da05      	bge.n	80178f8 <__ieee754_pow+0x1b8>
 80178ec:	4602      	mov	r2, r0
 80178ee:	460b      	mov	r3, r1
 80178f0:	2000      	movs	r0, #0
 80178f2:	492a      	ldr	r1, [pc, #168]	; (801799c <__ieee754_pow+0x25c>)
 80178f4:	f7e8 ffba 	bl	800086c <__aeabi_ddiv>
 80178f8:	2d00      	cmp	r5, #0
 80178fa:	f6bf af40 	bge.w	801777e <__ieee754_pow+0x3e>
 80178fe:	9b04      	ldr	r3, [sp, #16]
 8017900:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017904:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017908:	4323      	orrs	r3, r4
 801790a:	d108      	bne.n	801791e <__ieee754_pow+0x1de>
 801790c:	4602      	mov	r2, r0
 801790e:	460b      	mov	r3, r1
 8017910:	4610      	mov	r0, r2
 8017912:	4619      	mov	r1, r3
 8017914:	f7e8 fcc8 	bl	80002a8 <__aeabi_dsub>
 8017918:	4602      	mov	r2, r0
 801791a:	460b      	mov	r3, r1
 801791c:	e78f      	b.n	801783e <__ieee754_pow+0xfe>
 801791e:	9b04      	ldr	r3, [sp, #16]
 8017920:	2b01      	cmp	r3, #1
 8017922:	f47f af2c 	bne.w	801777e <__ieee754_pow+0x3e>
 8017926:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801792a:	4619      	mov	r1, r3
 801792c:	e727      	b.n	801777e <__ieee754_pow+0x3e>
 801792e:	0feb      	lsrs	r3, r5, #31
 8017930:	3b01      	subs	r3, #1
 8017932:	9306      	str	r3, [sp, #24]
 8017934:	9a06      	ldr	r2, [sp, #24]
 8017936:	9b04      	ldr	r3, [sp, #16]
 8017938:	4313      	orrs	r3, r2
 801793a:	d102      	bne.n	8017942 <__ieee754_pow+0x202>
 801793c:	4632      	mov	r2, r6
 801793e:	463b      	mov	r3, r7
 8017940:	e7e6      	b.n	8017910 <__ieee754_pow+0x1d0>
 8017942:	4b19      	ldr	r3, [pc, #100]	; (80179a8 <__ieee754_pow+0x268>)
 8017944:	4598      	cmp	r8, r3
 8017946:	f340 80fb 	ble.w	8017b40 <__ieee754_pow+0x400>
 801794a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801794e:	4598      	cmp	r8, r3
 8017950:	4b13      	ldr	r3, [pc, #76]	; (80179a0 <__ieee754_pow+0x260>)
 8017952:	dd0c      	ble.n	801796e <__ieee754_pow+0x22e>
 8017954:	429c      	cmp	r4, r3
 8017956:	dc0f      	bgt.n	8017978 <__ieee754_pow+0x238>
 8017958:	f1b9 0f00 	cmp.w	r9, #0
 801795c:	da0f      	bge.n	801797e <__ieee754_pow+0x23e>
 801795e:	2000      	movs	r0, #0
 8017960:	b009      	add	sp, #36	; 0x24
 8017962:	ecbd 8b06 	vpop	{d8-d10}
 8017966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801796a:	f002 b8be 	b.w	8019aea <__math_oflow>
 801796e:	429c      	cmp	r4, r3
 8017970:	dbf2      	blt.n	8017958 <__ieee754_pow+0x218>
 8017972:	4b0a      	ldr	r3, [pc, #40]	; (801799c <__ieee754_pow+0x25c>)
 8017974:	429c      	cmp	r4, r3
 8017976:	dd19      	ble.n	80179ac <__ieee754_pow+0x26c>
 8017978:	f1b9 0f00 	cmp.w	r9, #0
 801797c:	dcef      	bgt.n	801795e <__ieee754_pow+0x21e>
 801797e:	2000      	movs	r0, #0
 8017980:	b009      	add	sp, #36	; 0x24
 8017982:	ecbd 8b06 	vpop	{d8-d10}
 8017986:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801798a:	f002 b8a5 	b.w	8019ad8 <__math_uflow>
 801798e:	bf00      	nop
 8017990:	fff00000 	.word	0xfff00000
 8017994:	7ff00000 	.word	0x7ff00000
 8017998:	433fffff 	.word	0x433fffff
 801799c:	3ff00000 	.word	0x3ff00000
 80179a0:	3fefffff 	.word	0x3fefffff
 80179a4:	3fe00000 	.word	0x3fe00000
 80179a8:	41e00000 	.word	0x41e00000
 80179ac:	4b60      	ldr	r3, [pc, #384]	; (8017b30 <__ieee754_pow+0x3f0>)
 80179ae:	2200      	movs	r2, #0
 80179b0:	f7e8 fc7a 	bl	80002a8 <__aeabi_dsub>
 80179b4:	a354      	add	r3, pc, #336	; (adr r3, 8017b08 <__ieee754_pow+0x3c8>)
 80179b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179ba:	4604      	mov	r4, r0
 80179bc:	460d      	mov	r5, r1
 80179be:	f7e8 fe2b 	bl	8000618 <__aeabi_dmul>
 80179c2:	a353      	add	r3, pc, #332	; (adr r3, 8017b10 <__ieee754_pow+0x3d0>)
 80179c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179c8:	4606      	mov	r6, r0
 80179ca:	460f      	mov	r7, r1
 80179cc:	4620      	mov	r0, r4
 80179ce:	4629      	mov	r1, r5
 80179d0:	f7e8 fe22 	bl	8000618 <__aeabi_dmul>
 80179d4:	4b57      	ldr	r3, [pc, #348]	; (8017b34 <__ieee754_pow+0x3f4>)
 80179d6:	4682      	mov	sl, r0
 80179d8:	468b      	mov	fp, r1
 80179da:	2200      	movs	r2, #0
 80179dc:	4620      	mov	r0, r4
 80179de:	4629      	mov	r1, r5
 80179e0:	f7e8 fe1a 	bl	8000618 <__aeabi_dmul>
 80179e4:	4602      	mov	r2, r0
 80179e6:	460b      	mov	r3, r1
 80179e8:	a14b      	add	r1, pc, #300	; (adr r1, 8017b18 <__ieee754_pow+0x3d8>)
 80179ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80179ee:	f7e8 fc5b 	bl	80002a8 <__aeabi_dsub>
 80179f2:	4622      	mov	r2, r4
 80179f4:	462b      	mov	r3, r5
 80179f6:	f7e8 fe0f 	bl	8000618 <__aeabi_dmul>
 80179fa:	4602      	mov	r2, r0
 80179fc:	460b      	mov	r3, r1
 80179fe:	2000      	movs	r0, #0
 8017a00:	494d      	ldr	r1, [pc, #308]	; (8017b38 <__ieee754_pow+0x3f8>)
 8017a02:	f7e8 fc51 	bl	80002a8 <__aeabi_dsub>
 8017a06:	4622      	mov	r2, r4
 8017a08:	4680      	mov	r8, r0
 8017a0a:	4689      	mov	r9, r1
 8017a0c:	462b      	mov	r3, r5
 8017a0e:	4620      	mov	r0, r4
 8017a10:	4629      	mov	r1, r5
 8017a12:	f7e8 fe01 	bl	8000618 <__aeabi_dmul>
 8017a16:	4602      	mov	r2, r0
 8017a18:	460b      	mov	r3, r1
 8017a1a:	4640      	mov	r0, r8
 8017a1c:	4649      	mov	r1, r9
 8017a1e:	f7e8 fdfb 	bl	8000618 <__aeabi_dmul>
 8017a22:	a33f      	add	r3, pc, #252	; (adr r3, 8017b20 <__ieee754_pow+0x3e0>)
 8017a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a28:	f7e8 fdf6 	bl	8000618 <__aeabi_dmul>
 8017a2c:	4602      	mov	r2, r0
 8017a2e:	460b      	mov	r3, r1
 8017a30:	4650      	mov	r0, sl
 8017a32:	4659      	mov	r1, fp
 8017a34:	f7e8 fc38 	bl	80002a8 <__aeabi_dsub>
 8017a38:	4602      	mov	r2, r0
 8017a3a:	460b      	mov	r3, r1
 8017a3c:	4680      	mov	r8, r0
 8017a3e:	4689      	mov	r9, r1
 8017a40:	4630      	mov	r0, r6
 8017a42:	4639      	mov	r1, r7
 8017a44:	f7e8 fc32 	bl	80002ac <__adddf3>
 8017a48:	2000      	movs	r0, #0
 8017a4a:	4632      	mov	r2, r6
 8017a4c:	463b      	mov	r3, r7
 8017a4e:	4604      	mov	r4, r0
 8017a50:	460d      	mov	r5, r1
 8017a52:	f7e8 fc29 	bl	80002a8 <__aeabi_dsub>
 8017a56:	4602      	mov	r2, r0
 8017a58:	460b      	mov	r3, r1
 8017a5a:	4640      	mov	r0, r8
 8017a5c:	4649      	mov	r1, r9
 8017a5e:	f7e8 fc23 	bl	80002a8 <__aeabi_dsub>
 8017a62:	9b04      	ldr	r3, [sp, #16]
 8017a64:	9a06      	ldr	r2, [sp, #24]
 8017a66:	3b01      	subs	r3, #1
 8017a68:	4313      	orrs	r3, r2
 8017a6a:	4682      	mov	sl, r0
 8017a6c:	468b      	mov	fp, r1
 8017a6e:	f040 81e7 	bne.w	8017e40 <__ieee754_pow+0x700>
 8017a72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8017b28 <__ieee754_pow+0x3e8>
 8017a76:	eeb0 8a47 	vmov.f32	s16, s14
 8017a7a:	eef0 8a67 	vmov.f32	s17, s15
 8017a7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017a82:	2600      	movs	r6, #0
 8017a84:	4632      	mov	r2, r6
 8017a86:	463b      	mov	r3, r7
 8017a88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017a8c:	f7e8 fc0c 	bl	80002a8 <__aeabi_dsub>
 8017a90:	4622      	mov	r2, r4
 8017a92:	462b      	mov	r3, r5
 8017a94:	f7e8 fdc0 	bl	8000618 <__aeabi_dmul>
 8017a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017a9c:	4680      	mov	r8, r0
 8017a9e:	4689      	mov	r9, r1
 8017aa0:	4650      	mov	r0, sl
 8017aa2:	4659      	mov	r1, fp
 8017aa4:	f7e8 fdb8 	bl	8000618 <__aeabi_dmul>
 8017aa8:	4602      	mov	r2, r0
 8017aaa:	460b      	mov	r3, r1
 8017aac:	4640      	mov	r0, r8
 8017aae:	4649      	mov	r1, r9
 8017ab0:	f7e8 fbfc 	bl	80002ac <__adddf3>
 8017ab4:	4632      	mov	r2, r6
 8017ab6:	463b      	mov	r3, r7
 8017ab8:	4680      	mov	r8, r0
 8017aba:	4689      	mov	r9, r1
 8017abc:	4620      	mov	r0, r4
 8017abe:	4629      	mov	r1, r5
 8017ac0:	f7e8 fdaa 	bl	8000618 <__aeabi_dmul>
 8017ac4:	460b      	mov	r3, r1
 8017ac6:	4604      	mov	r4, r0
 8017ac8:	460d      	mov	r5, r1
 8017aca:	4602      	mov	r2, r0
 8017acc:	4649      	mov	r1, r9
 8017ace:	4640      	mov	r0, r8
 8017ad0:	f7e8 fbec 	bl	80002ac <__adddf3>
 8017ad4:	4b19      	ldr	r3, [pc, #100]	; (8017b3c <__ieee754_pow+0x3fc>)
 8017ad6:	4299      	cmp	r1, r3
 8017ad8:	ec45 4b19 	vmov	d9, r4, r5
 8017adc:	4606      	mov	r6, r0
 8017ade:	460f      	mov	r7, r1
 8017ae0:	468b      	mov	fp, r1
 8017ae2:	f340 82f1 	ble.w	80180c8 <__ieee754_pow+0x988>
 8017ae6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8017aea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8017aee:	4303      	orrs	r3, r0
 8017af0:	f000 81e4 	beq.w	8017ebc <__ieee754_pow+0x77c>
 8017af4:	ec51 0b18 	vmov	r0, r1, d8
 8017af8:	2200      	movs	r2, #0
 8017afa:	2300      	movs	r3, #0
 8017afc:	f7e8 fffe 	bl	8000afc <__aeabi_dcmplt>
 8017b00:	3800      	subs	r0, #0
 8017b02:	bf18      	it	ne
 8017b04:	2001      	movne	r0, #1
 8017b06:	e72b      	b.n	8017960 <__ieee754_pow+0x220>
 8017b08:	60000000 	.word	0x60000000
 8017b0c:	3ff71547 	.word	0x3ff71547
 8017b10:	f85ddf44 	.word	0xf85ddf44
 8017b14:	3e54ae0b 	.word	0x3e54ae0b
 8017b18:	55555555 	.word	0x55555555
 8017b1c:	3fd55555 	.word	0x3fd55555
 8017b20:	652b82fe 	.word	0x652b82fe
 8017b24:	3ff71547 	.word	0x3ff71547
 8017b28:	00000000 	.word	0x00000000
 8017b2c:	bff00000 	.word	0xbff00000
 8017b30:	3ff00000 	.word	0x3ff00000
 8017b34:	3fd00000 	.word	0x3fd00000
 8017b38:	3fe00000 	.word	0x3fe00000
 8017b3c:	408fffff 	.word	0x408fffff
 8017b40:	4bd5      	ldr	r3, [pc, #852]	; (8017e98 <__ieee754_pow+0x758>)
 8017b42:	402b      	ands	r3, r5
 8017b44:	2200      	movs	r2, #0
 8017b46:	b92b      	cbnz	r3, 8017b54 <__ieee754_pow+0x414>
 8017b48:	4bd4      	ldr	r3, [pc, #848]	; (8017e9c <__ieee754_pow+0x75c>)
 8017b4a:	f7e8 fd65 	bl	8000618 <__aeabi_dmul>
 8017b4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017b52:	460c      	mov	r4, r1
 8017b54:	1523      	asrs	r3, r4, #20
 8017b56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017b5a:	4413      	add	r3, r2
 8017b5c:	9305      	str	r3, [sp, #20]
 8017b5e:	4bd0      	ldr	r3, [pc, #832]	; (8017ea0 <__ieee754_pow+0x760>)
 8017b60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017b64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8017b68:	429c      	cmp	r4, r3
 8017b6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017b6e:	dd08      	ble.n	8017b82 <__ieee754_pow+0x442>
 8017b70:	4bcc      	ldr	r3, [pc, #816]	; (8017ea4 <__ieee754_pow+0x764>)
 8017b72:	429c      	cmp	r4, r3
 8017b74:	f340 8162 	ble.w	8017e3c <__ieee754_pow+0x6fc>
 8017b78:	9b05      	ldr	r3, [sp, #20]
 8017b7a:	3301      	adds	r3, #1
 8017b7c:	9305      	str	r3, [sp, #20]
 8017b7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017b82:	2400      	movs	r4, #0
 8017b84:	00e3      	lsls	r3, r4, #3
 8017b86:	9307      	str	r3, [sp, #28]
 8017b88:	4bc7      	ldr	r3, [pc, #796]	; (8017ea8 <__ieee754_pow+0x768>)
 8017b8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8017b8e:	ed93 7b00 	vldr	d7, [r3]
 8017b92:	4629      	mov	r1, r5
 8017b94:	ec53 2b17 	vmov	r2, r3, d7
 8017b98:	eeb0 9a47 	vmov.f32	s18, s14
 8017b9c:	eef0 9a67 	vmov.f32	s19, s15
 8017ba0:	4682      	mov	sl, r0
 8017ba2:	f7e8 fb81 	bl	80002a8 <__aeabi_dsub>
 8017ba6:	4652      	mov	r2, sl
 8017ba8:	4606      	mov	r6, r0
 8017baa:	460f      	mov	r7, r1
 8017bac:	462b      	mov	r3, r5
 8017bae:	ec51 0b19 	vmov	r0, r1, d9
 8017bb2:	f7e8 fb7b 	bl	80002ac <__adddf3>
 8017bb6:	4602      	mov	r2, r0
 8017bb8:	460b      	mov	r3, r1
 8017bba:	2000      	movs	r0, #0
 8017bbc:	49bb      	ldr	r1, [pc, #748]	; (8017eac <__ieee754_pow+0x76c>)
 8017bbe:	f7e8 fe55 	bl	800086c <__aeabi_ddiv>
 8017bc2:	ec41 0b1a 	vmov	d10, r0, r1
 8017bc6:	4602      	mov	r2, r0
 8017bc8:	460b      	mov	r3, r1
 8017bca:	4630      	mov	r0, r6
 8017bcc:	4639      	mov	r1, r7
 8017bce:	f7e8 fd23 	bl	8000618 <__aeabi_dmul>
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017bd8:	9302      	str	r3, [sp, #8]
 8017bda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017bde:	46ab      	mov	fp, r5
 8017be0:	106d      	asrs	r5, r5, #1
 8017be2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017be6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017bea:	ec41 0b18 	vmov	d8, r0, r1
 8017bee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8017bf2:	2200      	movs	r2, #0
 8017bf4:	4640      	mov	r0, r8
 8017bf6:	4649      	mov	r1, r9
 8017bf8:	4614      	mov	r4, r2
 8017bfa:	461d      	mov	r5, r3
 8017bfc:	f7e8 fd0c 	bl	8000618 <__aeabi_dmul>
 8017c00:	4602      	mov	r2, r0
 8017c02:	460b      	mov	r3, r1
 8017c04:	4630      	mov	r0, r6
 8017c06:	4639      	mov	r1, r7
 8017c08:	f7e8 fb4e 	bl	80002a8 <__aeabi_dsub>
 8017c0c:	ec53 2b19 	vmov	r2, r3, d9
 8017c10:	4606      	mov	r6, r0
 8017c12:	460f      	mov	r7, r1
 8017c14:	4620      	mov	r0, r4
 8017c16:	4629      	mov	r1, r5
 8017c18:	f7e8 fb46 	bl	80002a8 <__aeabi_dsub>
 8017c1c:	4602      	mov	r2, r0
 8017c1e:	460b      	mov	r3, r1
 8017c20:	4650      	mov	r0, sl
 8017c22:	4659      	mov	r1, fp
 8017c24:	f7e8 fb40 	bl	80002a8 <__aeabi_dsub>
 8017c28:	4642      	mov	r2, r8
 8017c2a:	464b      	mov	r3, r9
 8017c2c:	f7e8 fcf4 	bl	8000618 <__aeabi_dmul>
 8017c30:	4602      	mov	r2, r0
 8017c32:	460b      	mov	r3, r1
 8017c34:	4630      	mov	r0, r6
 8017c36:	4639      	mov	r1, r7
 8017c38:	f7e8 fb36 	bl	80002a8 <__aeabi_dsub>
 8017c3c:	ec53 2b1a 	vmov	r2, r3, d10
 8017c40:	f7e8 fcea 	bl	8000618 <__aeabi_dmul>
 8017c44:	ec53 2b18 	vmov	r2, r3, d8
 8017c48:	ec41 0b19 	vmov	d9, r0, r1
 8017c4c:	ec51 0b18 	vmov	r0, r1, d8
 8017c50:	f7e8 fce2 	bl	8000618 <__aeabi_dmul>
 8017c54:	a37c      	add	r3, pc, #496	; (adr r3, 8017e48 <__ieee754_pow+0x708>)
 8017c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c5a:	4604      	mov	r4, r0
 8017c5c:	460d      	mov	r5, r1
 8017c5e:	f7e8 fcdb 	bl	8000618 <__aeabi_dmul>
 8017c62:	a37b      	add	r3, pc, #492	; (adr r3, 8017e50 <__ieee754_pow+0x710>)
 8017c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c68:	f7e8 fb20 	bl	80002ac <__adddf3>
 8017c6c:	4622      	mov	r2, r4
 8017c6e:	462b      	mov	r3, r5
 8017c70:	f7e8 fcd2 	bl	8000618 <__aeabi_dmul>
 8017c74:	a378      	add	r3, pc, #480	; (adr r3, 8017e58 <__ieee754_pow+0x718>)
 8017c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c7a:	f7e8 fb17 	bl	80002ac <__adddf3>
 8017c7e:	4622      	mov	r2, r4
 8017c80:	462b      	mov	r3, r5
 8017c82:	f7e8 fcc9 	bl	8000618 <__aeabi_dmul>
 8017c86:	a376      	add	r3, pc, #472	; (adr r3, 8017e60 <__ieee754_pow+0x720>)
 8017c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c8c:	f7e8 fb0e 	bl	80002ac <__adddf3>
 8017c90:	4622      	mov	r2, r4
 8017c92:	462b      	mov	r3, r5
 8017c94:	f7e8 fcc0 	bl	8000618 <__aeabi_dmul>
 8017c98:	a373      	add	r3, pc, #460	; (adr r3, 8017e68 <__ieee754_pow+0x728>)
 8017c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c9e:	f7e8 fb05 	bl	80002ac <__adddf3>
 8017ca2:	4622      	mov	r2, r4
 8017ca4:	462b      	mov	r3, r5
 8017ca6:	f7e8 fcb7 	bl	8000618 <__aeabi_dmul>
 8017caa:	a371      	add	r3, pc, #452	; (adr r3, 8017e70 <__ieee754_pow+0x730>)
 8017cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017cb0:	f7e8 fafc 	bl	80002ac <__adddf3>
 8017cb4:	4622      	mov	r2, r4
 8017cb6:	4606      	mov	r6, r0
 8017cb8:	460f      	mov	r7, r1
 8017cba:	462b      	mov	r3, r5
 8017cbc:	4620      	mov	r0, r4
 8017cbe:	4629      	mov	r1, r5
 8017cc0:	f7e8 fcaa 	bl	8000618 <__aeabi_dmul>
 8017cc4:	4602      	mov	r2, r0
 8017cc6:	460b      	mov	r3, r1
 8017cc8:	4630      	mov	r0, r6
 8017cca:	4639      	mov	r1, r7
 8017ccc:	f7e8 fca4 	bl	8000618 <__aeabi_dmul>
 8017cd0:	4642      	mov	r2, r8
 8017cd2:	4604      	mov	r4, r0
 8017cd4:	460d      	mov	r5, r1
 8017cd6:	464b      	mov	r3, r9
 8017cd8:	ec51 0b18 	vmov	r0, r1, d8
 8017cdc:	f7e8 fae6 	bl	80002ac <__adddf3>
 8017ce0:	ec53 2b19 	vmov	r2, r3, d9
 8017ce4:	f7e8 fc98 	bl	8000618 <__aeabi_dmul>
 8017ce8:	4622      	mov	r2, r4
 8017cea:	462b      	mov	r3, r5
 8017cec:	f7e8 fade 	bl	80002ac <__adddf3>
 8017cf0:	4642      	mov	r2, r8
 8017cf2:	4682      	mov	sl, r0
 8017cf4:	468b      	mov	fp, r1
 8017cf6:	464b      	mov	r3, r9
 8017cf8:	4640      	mov	r0, r8
 8017cfa:	4649      	mov	r1, r9
 8017cfc:	f7e8 fc8c 	bl	8000618 <__aeabi_dmul>
 8017d00:	4b6b      	ldr	r3, [pc, #428]	; (8017eb0 <__ieee754_pow+0x770>)
 8017d02:	2200      	movs	r2, #0
 8017d04:	4606      	mov	r6, r0
 8017d06:	460f      	mov	r7, r1
 8017d08:	f7e8 fad0 	bl	80002ac <__adddf3>
 8017d0c:	4652      	mov	r2, sl
 8017d0e:	465b      	mov	r3, fp
 8017d10:	f7e8 facc 	bl	80002ac <__adddf3>
 8017d14:	2000      	movs	r0, #0
 8017d16:	4604      	mov	r4, r0
 8017d18:	460d      	mov	r5, r1
 8017d1a:	4602      	mov	r2, r0
 8017d1c:	460b      	mov	r3, r1
 8017d1e:	4640      	mov	r0, r8
 8017d20:	4649      	mov	r1, r9
 8017d22:	f7e8 fc79 	bl	8000618 <__aeabi_dmul>
 8017d26:	4b62      	ldr	r3, [pc, #392]	; (8017eb0 <__ieee754_pow+0x770>)
 8017d28:	4680      	mov	r8, r0
 8017d2a:	4689      	mov	r9, r1
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	4620      	mov	r0, r4
 8017d30:	4629      	mov	r1, r5
 8017d32:	f7e8 fab9 	bl	80002a8 <__aeabi_dsub>
 8017d36:	4632      	mov	r2, r6
 8017d38:	463b      	mov	r3, r7
 8017d3a:	f7e8 fab5 	bl	80002a8 <__aeabi_dsub>
 8017d3e:	4602      	mov	r2, r0
 8017d40:	460b      	mov	r3, r1
 8017d42:	4650      	mov	r0, sl
 8017d44:	4659      	mov	r1, fp
 8017d46:	f7e8 faaf 	bl	80002a8 <__aeabi_dsub>
 8017d4a:	ec53 2b18 	vmov	r2, r3, d8
 8017d4e:	f7e8 fc63 	bl	8000618 <__aeabi_dmul>
 8017d52:	4622      	mov	r2, r4
 8017d54:	4606      	mov	r6, r0
 8017d56:	460f      	mov	r7, r1
 8017d58:	462b      	mov	r3, r5
 8017d5a:	ec51 0b19 	vmov	r0, r1, d9
 8017d5e:	f7e8 fc5b 	bl	8000618 <__aeabi_dmul>
 8017d62:	4602      	mov	r2, r0
 8017d64:	460b      	mov	r3, r1
 8017d66:	4630      	mov	r0, r6
 8017d68:	4639      	mov	r1, r7
 8017d6a:	f7e8 fa9f 	bl	80002ac <__adddf3>
 8017d6e:	4606      	mov	r6, r0
 8017d70:	460f      	mov	r7, r1
 8017d72:	4602      	mov	r2, r0
 8017d74:	460b      	mov	r3, r1
 8017d76:	4640      	mov	r0, r8
 8017d78:	4649      	mov	r1, r9
 8017d7a:	f7e8 fa97 	bl	80002ac <__adddf3>
 8017d7e:	a33e      	add	r3, pc, #248	; (adr r3, 8017e78 <__ieee754_pow+0x738>)
 8017d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017d84:	2000      	movs	r0, #0
 8017d86:	4604      	mov	r4, r0
 8017d88:	460d      	mov	r5, r1
 8017d8a:	f7e8 fc45 	bl	8000618 <__aeabi_dmul>
 8017d8e:	4642      	mov	r2, r8
 8017d90:	ec41 0b18 	vmov	d8, r0, r1
 8017d94:	464b      	mov	r3, r9
 8017d96:	4620      	mov	r0, r4
 8017d98:	4629      	mov	r1, r5
 8017d9a:	f7e8 fa85 	bl	80002a8 <__aeabi_dsub>
 8017d9e:	4602      	mov	r2, r0
 8017da0:	460b      	mov	r3, r1
 8017da2:	4630      	mov	r0, r6
 8017da4:	4639      	mov	r1, r7
 8017da6:	f7e8 fa7f 	bl	80002a8 <__aeabi_dsub>
 8017daa:	a335      	add	r3, pc, #212	; (adr r3, 8017e80 <__ieee754_pow+0x740>)
 8017dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017db0:	f7e8 fc32 	bl	8000618 <__aeabi_dmul>
 8017db4:	a334      	add	r3, pc, #208	; (adr r3, 8017e88 <__ieee754_pow+0x748>)
 8017db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017dba:	4606      	mov	r6, r0
 8017dbc:	460f      	mov	r7, r1
 8017dbe:	4620      	mov	r0, r4
 8017dc0:	4629      	mov	r1, r5
 8017dc2:	f7e8 fc29 	bl	8000618 <__aeabi_dmul>
 8017dc6:	4602      	mov	r2, r0
 8017dc8:	460b      	mov	r3, r1
 8017dca:	4630      	mov	r0, r6
 8017dcc:	4639      	mov	r1, r7
 8017dce:	f7e8 fa6d 	bl	80002ac <__adddf3>
 8017dd2:	9a07      	ldr	r2, [sp, #28]
 8017dd4:	4b37      	ldr	r3, [pc, #220]	; (8017eb4 <__ieee754_pow+0x774>)
 8017dd6:	4413      	add	r3, r2
 8017dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ddc:	f7e8 fa66 	bl	80002ac <__adddf3>
 8017de0:	4682      	mov	sl, r0
 8017de2:	9805      	ldr	r0, [sp, #20]
 8017de4:	468b      	mov	fp, r1
 8017de6:	f7e8 fbad 	bl	8000544 <__aeabi_i2d>
 8017dea:	9a07      	ldr	r2, [sp, #28]
 8017dec:	4b32      	ldr	r3, [pc, #200]	; (8017eb8 <__ieee754_pow+0x778>)
 8017dee:	4413      	add	r3, r2
 8017df0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017df4:	4606      	mov	r6, r0
 8017df6:	460f      	mov	r7, r1
 8017df8:	4652      	mov	r2, sl
 8017dfa:	465b      	mov	r3, fp
 8017dfc:	ec51 0b18 	vmov	r0, r1, d8
 8017e00:	f7e8 fa54 	bl	80002ac <__adddf3>
 8017e04:	4642      	mov	r2, r8
 8017e06:	464b      	mov	r3, r9
 8017e08:	f7e8 fa50 	bl	80002ac <__adddf3>
 8017e0c:	4632      	mov	r2, r6
 8017e0e:	463b      	mov	r3, r7
 8017e10:	f7e8 fa4c 	bl	80002ac <__adddf3>
 8017e14:	2000      	movs	r0, #0
 8017e16:	4632      	mov	r2, r6
 8017e18:	463b      	mov	r3, r7
 8017e1a:	4604      	mov	r4, r0
 8017e1c:	460d      	mov	r5, r1
 8017e1e:	f7e8 fa43 	bl	80002a8 <__aeabi_dsub>
 8017e22:	4642      	mov	r2, r8
 8017e24:	464b      	mov	r3, r9
 8017e26:	f7e8 fa3f 	bl	80002a8 <__aeabi_dsub>
 8017e2a:	ec53 2b18 	vmov	r2, r3, d8
 8017e2e:	f7e8 fa3b 	bl	80002a8 <__aeabi_dsub>
 8017e32:	4602      	mov	r2, r0
 8017e34:	460b      	mov	r3, r1
 8017e36:	4650      	mov	r0, sl
 8017e38:	4659      	mov	r1, fp
 8017e3a:	e610      	b.n	8017a5e <__ieee754_pow+0x31e>
 8017e3c:	2401      	movs	r4, #1
 8017e3e:	e6a1      	b.n	8017b84 <__ieee754_pow+0x444>
 8017e40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8017e90 <__ieee754_pow+0x750>
 8017e44:	e617      	b.n	8017a76 <__ieee754_pow+0x336>
 8017e46:	bf00      	nop
 8017e48:	4a454eef 	.word	0x4a454eef
 8017e4c:	3fca7e28 	.word	0x3fca7e28
 8017e50:	93c9db65 	.word	0x93c9db65
 8017e54:	3fcd864a 	.word	0x3fcd864a
 8017e58:	a91d4101 	.word	0xa91d4101
 8017e5c:	3fd17460 	.word	0x3fd17460
 8017e60:	518f264d 	.word	0x518f264d
 8017e64:	3fd55555 	.word	0x3fd55555
 8017e68:	db6fabff 	.word	0xdb6fabff
 8017e6c:	3fdb6db6 	.word	0x3fdb6db6
 8017e70:	33333303 	.word	0x33333303
 8017e74:	3fe33333 	.word	0x3fe33333
 8017e78:	e0000000 	.word	0xe0000000
 8017e7c:	3feec709 	.word	0x3feec709
 8017e80:	dc3a03fd 	.word	0xdc3a03fd
 8017e84:	3feec709 	.word	0x3feec709
 8017e88:	145b01f5 	.word	0x145b01f5
 8017e8c:	be3e2fe0 	.word	0xbe3e2fe0
 8017e90:	00000000 	.word	0x00000000
 8017e94:	3ff00000 	.word	0x3ff00000
 8017e98:	7ff00000 	.word	0x7ff00000
 8017e9c:	43400000 	.word	0x43400000
 8017ea0:	0003988e 	.word	0x0003988e
 8017ea4:	000bb679 	.word	0x000bb679
 8017ea8:	08062e30 	.word	0x08062e30
 8017eac:	3ff00000 	.word	0x3ff00000
 8017eb0:	40080000 	.word	0x40080000
 8017eb4:	08062e50 	.word	0x08062e50
 8017eb8:	08062e40 	.word	0x08062e40
 8017ebc:	a3b5      	add	r3, pc, #724	; (adr r3, 8018194 <__ieee754_pow+0xa54>)
 8017ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ec2:	4640      	mov	r0, r8
 8017ec4:	4649      	mov	r1, r9
 8017ec6:	f7e8 f9f1 	bl	80002ac <__adddf3>
 8017eca:	4622      	mov	r2, r4
 8017ecc:	ec41 0b1a 	vmov	d10, r0, r1
 8017ed0:	462b      	mov	r3, r5
 8017ed2:	4630      	mov	r0, r6
 8017ed4:	4639      	mov	r1, r7
 8017ed6:	f7e8 f9e7 	bl	80002a8 <__aeabi_dsub>
 8017eda:	4602      	mov	r2, r0
 8017edc:	460b      	mov	r3, r1
 8017ede:	ec51 0b1a 	vmov	r0, r1, d10
 8017ee2:	f7e8 fe29 	bl	8000b38 <__aeabi_dcmpgt>
 8017ee6:	2800      	cmp	r0, #0
 8017ee8:	f47f ae04 	bne.w	8017af4 <__ieee754_pow+0x3b4>
 8017eec:	4aa4      	ldr	r2, [pc, #656]	; (8018180 <__ieee754_pow+0xa40>)
 8017eee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017ef2:	4293      	cmp	r3, r2
 8017ef4:	f340 8108 	ble.w	8018108 <__ieee754_pow+0x9c8>
 8017ef8:	151b      	asrs	r3, r3, #20
 8017efa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8017efe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8017f02:	fa4a f303 	asr.w	r3, sl, r3
 8017f06:	445b      	add	r3, fp
 8017f08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017f0c:	4e9d      	ldr	r6, [pc, #628]	; (8018184 <__ieee754_pow+0xa44>)
 8017f0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8017f12:	4116      	asrs	r6, r2
 8017f14:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8017f18:	2000      	movs	r0, #0
 8017f1a:	ea23 0106 	bic.w	r1, r3, r6
 8017f1e:	f1c2 0214 	rsb	r2, r2, #20
 8017f22:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017f26:	fa4a fa02 	asr.w	sl, sl, r2
 8017f2a:	f1bb 0f00 	cmp.w	fp, #0
 8017f2e:	4602      	mov	r2, r0
 8017f30:	460b      	mov	r3, r1
 8017f32:	4620      	mov	r0, r4
 8017f34:	4629      	mov	r1, r5
 8017f36:	bfb8      	it	lt
 8017f38:	f1ca 0a00 	rsblt	sl, sl, #0
 8017f3c:	f7e8 f9b4 	bl	80002a8 <__aeabi_dsub>
 8017f40:	ec41 0b19 	vmov	d9, r0, r1
 8017f44:	4642      	mov	r2, r8
 8017f46:	464b      	mov	r3, r9
 8017f48:	ec51 0b19 	vmov	r0, r1, d9
 8017f4c:	f7e8 f9ae 	bl	80002ac <__adddf3>
 8017f50:	a37b      	add	r3, pc, #492	; (adr r3, 8018140 <__ieee754_pow+0xa00>)
 8017f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f56:	2000      	movs	r0, #0
 8017f58:	4604      	mov	r4, r0
 8017f5a:	460d      	mov	r5, r1
 8017f5c:	f7e8 fb5c 	bl	8000618 <__aeabi_dmul>
 8017f60:	ec53 2b19 	vmov	r2, r3, d9
 8017f64:	4606      	mov	r6, r0
 8017f66:	460f      	mov	r7, r1
 8017f68:	4620      	mov	r0, r4
 8017f6a:	4629      	mov	r1, r5
 8017f6c:	f7e8 f99c 	bl	80002a8 <__aeabi_dsub>
 8017f70:	4602      	mov	r2, r0
 8017f72:	460b      	mov	r3, r1
 8017f74:	4640      	mov	r0, r8
 8017f76:	4649      	mov	r1, r9
 8017f78:	f7e8 f996 	bl	80002a8 <__aeabi_dsub>
 8017f7c:	a372      	add	r3, pc, #456	; (adr r3, 8018148 <__ieee754_pow+0xa08>)
 8017f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f82:	f7e8 fb49 	bl	8000618 <__aeabi_dmul>
 8017f86:	a372      	add	r3, pc, #456	; (adr r3, 8018150 <__ieee754_pow+0xa10>)
 8017f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017f8c:	4680      	mov	r8, r0
 8017f8e:	4689      	mov	r9, r1
 8017f90:	4620      	mov	r0, r4
 8017f92:	4629      	mov	r1, r5
 8017f94:	f7e8 fb40 	bl	8000618 <__aeabi_dmul>
 8017f98:	4602      	mov	r2, r0
 8017f9a:	460b      	mov	r3, r1
 8017f9c:	4640      	mov	r0, r8
 8017f9e:	4649      	mov	r1, r9
 8017fa0:	f7e8 f984 	bl	80002ac <__adddf3>
 8017fa4:	4604      	mov	r4, r0
 8017fa6:	460d      	mov	r5, r1
 8017fa8:	4602      	mov	r2, r0
 8017faa:	460b      	mov	r3, r1
 8017fac:	4630      	mov	r0, r6
 8017fae:	4639      	mov	r1, r7
 8017fb0:	f7e8 f97c 	bl	80002ac <__adddf3>
 8017fb4:	4632      	mov	r2, r6
 8017fb6:	463b      	mov	r3, r7
 8017fb8:	4680      	mov	r8, r0
 8017fba:	4689      	mov	r9, r1
 8017fbc:	f7e8 f974 	bl	80002a8 <__aeabi_dsub>
 8017fc0:	4602      	mov	r2, r0
 8017fc2:	460b      	mov	r3, r1
 8017fc4:	4620      	mov	r0, r4
 8017fc6:	4629      	mov	r1, r5
 8017fc8:	f7e8 f96e 	bl	80002a8 <__aeabi_dsub>
 8017fcc:	4642      	mov	r2, r8
 8017fce:	4606      	mov	r6, r0
 8017fd0:	460f      	mov	r7, r1
 8017fd2:	464b      	mov	r3, r9
 8017fd4:	4640      	mov	r0, r8
 8017fd6:	4649      	mov	r1, r9
 8017fd8:	f7e8 fb1e 	bl	8000618 <__aeabi_dmul>
 8017fdc:	a35e      	add	r3, pc, #376	; (adr r3, 8018158 <__ieee754_pow+0xa18>)
 8017fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fe2:	4604      	mov	r4, r0
 8017fe4:	460d      	mov	r5, r1
 8017fe6:	f7e8 fb17 	bl	8000618 <__aeabi_dmul>
 8017fea:	a35d      	add	r3, pc, #372	; (adr r3, 8018160 <__ieee754_pow+0xa20>)
 8017fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ff0:	f7e8 f95a 	bl	80002a8 <__aeabi_dsub>
 8017ff4:	4622      	mov	r2, r4
 8017ff6:	462b      	mov	r3, r5
 8017ff8:	f7e8 fb0e 	bl	8000618 <__aeabi_dmul>
 8017ffc:	a35a      	add	r3, pc, #360	; (adr r3, 8018168 <__ieee754_pow+0xa28>)
 8017ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018002:	f7e8 f953 	bl	80002ac <__adddf3>
 8018006:	4622      	mov	r2, r4
 8018008:	462b      	mov	r3, r5
 801800a:	f7e8 fb05 	bl	8000618 <__aeabi_dmul>
 801800e:	a358      	add	r3, pc, #352	; (adr r3, 8018170 <__ieee754_pow+0xa30>)
 8018010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018014:	f7e8 f948 	bl	80002a8 <__aeabi_dsub>
 8018018:	4622      	mov	r2, r4
 801801a:	462b      	mov	r3, r5
 801801c:	f7e8 fafc 	bl	8000618 <__aeabi_dmul>
 8018020:	a355      	add	r3, pc, #340	; (adr r3, 8018178 <__ieee754_pow+0xa38>)
 8018022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018026:	f7e8 f941 	bl	80002ac <__adddf3>
 801802a:	4622      	mov	r2, r4
 801802c:	462b      	mov	r3, r5
 801802e:	f7e8 faf3 	bl	8000618 <__aeabi_dmul>
 8018032:	4602      	mov	r2, r0
 8018034:	460b      	mov	r3, r1
 8018036:	4640      	mov	r0, r8
 8018038:	4649      	mov	r1, r9
 801803a:	f7e8 f935 	bl	80002a8 <__aeabi_dsub>
 801803e:	4604      	mov	r4, r0
 8018040:	460d      	mov	r5, r1
 8018042:	4602      	mov	r2, r0
 8018044:	460b      	mov	r3, r1
 8018046:	4640      	mov	r0, r8
 8018048:	4649      	mov	r1, r9
 801804a:	f7e8 fae5 	bl	8000618 <__aeabi_dmul>
 801804e:	2200      	movs	r2, #0
 8018050:	ec41 0b19 	vmov	d9, r0, r1
 8018054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8018058:	4620      	mov	r0, r4
 801805a:	4629      	mov	r1, r5
 801805c:	f7e8 f924 	bl	80002a8 <__aeabi_dsub>
 8018060:	4602      	mov	r2, r0
 8018062:	460b      	mov	r3, r1
 8018064:	ec51 0b19 	vmov	r0, r1, d9
 8018068:	f7e8 fc00 	bl	800086c <__aeabi_ddiv>
 801806c:	4632      	mov	r2, r6
 801806e:	4604      	mov	r4, r0
 8018070:	460d      	mov	r5, r1
 8018072:	463b      	mov	r3, r7
 8018074:	4640      	mov	r0, r8
 8018076:	4649      	mov	r1, r9
 8018078:	f7e8 face 	bl	8000618 <__aeabi_dmul>
 801807c:	4632      	mov	r2, r6
 801807e:	463b      	mov	r3, r7
 8018080:	f7e8 f914 	bl	80002ac <__adddf3>
 8018084:	4602      	mov	r2, r0
 8018086:	460b      	mov	r3, r1
 8018088:	4620      	mov	r0, r4
 801808a:	4629      	mov	r1, r5
 801808c:	f7e8 f90c 	bl	80002a8 <__aeabi_dsub>
 8018090:	4642      	mov	r2, r8
 8018092:	464b      	mov	r3, r9
 8018094:	f7e8 f908 	bl	80002a8 <__aeabi_dsub>
 8018098:	460b      	mov	r3, r1
 801809a:	4602      	mov	r2, r0
 801809c:	493a      	ldr	r1, [pc, #232]	; (8018188 <__ieee754_pow+0xa48>)
 801809e:	2000      	movs	r0, #0
 80180a0:	f7e8 f902 	bl	80002a8 <__aeabi_dsub>
 80180a4:	ec41 0b10 	vmov	d0, r0, r1
 80180a8:	ee10 3a90 	vmov	r3, s1
 80180ac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80180b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80180b4:	da2b      	bge.n	801810e <__ieee754_pow+0x9ce>
 80180b6:	4650      	mov	r0, sl
 80180b8:	f001 fdce 	bl	8019c58 <scalbn>
 80180bc:	ec51 0b10 	vmov	r0, r1, d0
 80180c0:	ec53 2b18 	vmov	r2, r3, d8
 80180c4:	f7ff bbed 	b.w	80178a2 <__ieee754_pow+0x162>
 80180c8:	4b30      	ldr	r3, [pc, #192]	; (801818c <__ieee754_pow+0xa4c>)
 80180ca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80180ce:	429e      	cmp	r6, r3
 80180d0:	f77f af0c 	ble.w	8017eec <__ieee754_pow+0x7ac>
 80180d4:	4b2e      	ldr	r3, [pc, #184]	; (8018190 <__ieee754_pow+0xa50>)
 80180d6:	440b      	add	r3, r1
 80180d8:	4303      	orrs	r3, r0
 80180da:	d009      	beq.n	80180f0 <__ieee754_pow+0x9b0>
 80180dc:	ec51 0b18 	vmov	r0, r1, d8
 80180e0:	2200      	movs	r2, #0
 80180e2:	2300      	movs	r3, #0
 80180e4:	f7e8 fd0a 	bl	8000afc <__aeabi_dcmplt>
 80180e8:	3800      	subs	r0, #0
 80180ea:	bf18      	it	ne
 80180ec:	2001      	movne	r0, #1
 80180ee:	e447      	b.n	8017980 <__ieee754_pow+0x240>
 80180f0:	4622      	mov	r2, r4
 80180f2:	462b      	mov	r3, r5
 80180f4:	f7e8 f8d8 	bl	80002a8 <__aeabi_dsub>
 80180f8:	4642      	mov	r2, r8
 80180fa:	464b      	mov	r3, r9
 80180fc:	f7e8 fd12 	bl	8000b24 <__aeabi_dcmpge>
 8018100:	2800      	cmp	r0, #0
 8018102:	f43f aef3 	beq.w	8017eec <__ieee754_pow+0x7ac>
 8018106:	e7e9      	b.n	80180dc <__ieee754_pow+0x99c>
 8018108:	f04f 0a00 	mov.w	sl, #0
 801810c:	e71a      	b.n	8017f44 <__ieee754_pow+0x804>
 801810e:	ec51 0b10 	vmov	r0, r1, d0
 8018112:	4619      	mov	r1, r3
 8018114:	e7d4      	b.n	80180c0 <__ieee754_pow+0x980>
 8018116:	491c      	ldr	r1, [pc, #112]	; (8018188 <__ieee754_pow+0xa48>)
 8018118:	2000      	movs	r0, #0
 801811a:	f7ff bb30 	b.w	801777e <__ieee754_pow+0x3e>
 801811e:	2000      	movs	r0, #0
 8018120:	2100      	movs	r1, #0
 8018122:	f7ff bb2c 	b.w	801777e <__ieee754_pow+0x3e>
 8018126:	4630      	mov	r0, r6
 8018128:	4639      	mov	r1, r7
 801812a:	f7ff bb28 	b.w	801777e <__ieee754_pow+0x3e>
 801812e:	9204      	str	r2, [sp, #16]
 8018130:	f7ff bb7a 	b.w	8017828 <__ieee754_pow+0xe8>
 8018134:	2300      	movs	r3, #0
 8018136:	f7ff bb64 	b.w	8017802 <__ieee754_pow+0xc2>
 801813a:	bf00      	nop
 801813c:	f3af 8000 	nop.w
 8018140:	00000000 	.word	0x00000000
 8018144:	3fe62e43 	.word	0x3fe62e43
 8018148:	fefa39ef 	.word	0xfefa39ef
 801814c:	3fe62e42 	.word	0x3fe62e42
 8018150:	0ca86c39 	.word	0x0ca86c39
 8018154:	be205c61 	.word	0xbe205c61
 8018158:	72bea4d0 	.word	0x72bea4d0
 801815c:	3e663769 	.word	0x3e663769
 8018160:	c5d26bf1 	.word	0xc5d26bf1
 8018164:	3ebbbd41 	.word	0x3ebbbd41
 8018168:	af25de2c 	.word	0xaf25de2c
 801816c:	3f11566a 	.word	0x3f11566a
 8018170:	16bebd93 	.word	0x16bebd93
 8018174:	3f66c16c 	.word	0x3f66c16c
 8018178:	5555553e 	.word	0x5555553e
 801817c:	3fc55555 	.word	0x3fc55555
 8018180:	3fe00000 	.word	0x3fe00000
 8018184:	000fffff 	.word	0x000fffff
 8018188:	3ff00000 	.word	0x3ff00000
 801818c:	4090cbff 	.word	0x4090cbff
 8018190:	3f6f3400 	.word	0x3f6f3400
 8018194:	652b82fe 	.word	0x652b82fe
 8018198:	3c971547 	.word	0x3c971547
 801819c:	00000000 	.word	0x00000000

080181a0 <__ieee754_rem_pio2>:
 80181a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181a4:	ed2d 8b02 	vpush	{d8}
 80181a8:	ec55 4b10 	vmov	r4, r5, d0
 80181ac:	4bca      	ldr	r3, [pc, #808]	; (80184d8 <__ieee754_rem_pio2+0x338>)
 80181ae:	b08b      	sub	sp, #44	; 0x2c
 80181b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80181b4:	4598      	cmp	r8, r3
 80181b6:	4682      	mov	sl, r0
 80181b8:	9502      	str	r5, [sp, #8]
 80181ba:	dc08      	bgt.n	80181ce <__ieee754_rem_pio2+0x2e>
 80181bc:	2200      	movs	r2, #0
 80181be:	2300      	movs	r3, #0
 80181c0:	ed80 0b00 	vstr	d0, [r0]
 80181c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80181c8:	f04f 0b00 	mov.w	fp, #0
 80181cc:	e028      	b.n	8018220 <__ieee754_rem_pio2+0x80>
 80181ce:	4bc3      	ldr	r3, [pc, #780]	; (80184dc <__ieee754_rem_pio2+0x33c>)
 80181d0:	4598      	cmp	r8, r3
 80181d2:	dc78      	bgt.n	80182c6 <__ieee754_rem_pio2+0x126>
 80181d4:	9b02      	ldr	r3, [sp, #8]
 80181d6:	4ec2      	ldr	r6, [pc, #776]	; (80184e0 <__ieee754_rem_pio2+0x340>)
 80181d8:	2b00      	cmp	r3, #0
 80181da:	ee10 0a10 	vmov	r0, s0
 80181de:	a3b0      	add	r3, pc, #704	; (adr r3, 80184a0 <__ieee754_rem_pio2+0x300>)
 80181e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181e4:	4629      	mov	r1, r5
 80181e6:	dd39      	ble.n	801825c <__ieee754_rem_pio2+0xbc>
 80181e8:	f7e8 f85e 	bl	80002a8 <__aeabi_dsub>
 80181ec:	45b0      	cmp	r8, r6
 80181ee:	4604      	mov	r4, r0
 80181f0:	460d      	mov	r5, r1
 80181f2:	d01b      	beq.n	801822c <__ieee754_rem_pio2+0x8c>
 80181f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80184a8 <__ieee754_rem_pio2+0x308>)
 80181f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80181fa:	f7e8 f855 	bl	80002a8 <__aeabi_dsub>
 80181fe:	4602      	mov	r2, r0
 8018200:	460b      	mov	r3, r1
 8018202:	e9ca 2300 	strd	r2, r3, [sl]
 8018206:	4620      	mov	r0, r4
 8018208:	4629      	mov	r1, r5
 801820a:	f7e8 f84d 	bl	80002a8 <__aeabi_dsub>
 801820e:	a3a6      	add	r3, pc, #664	; (adr r3, 80184a8 <__ieee754_rem_pio2+0x308>)
 8018210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018214:	f7e8 f848 	bl	80002a8 <__aeabi_dsub>
 8018218:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801821c:	f04f 0b01 	mov.w	fp, #1
 8018220:	4658      	mov	r0, fp
 8018222:	b00b      	add	sp, #44	; 0x2c
 8018224:	ecbd 8b02 	vpop	{d8}
 8018228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801822c:	a3a0      	add	r3, pc, #640	; (adr r3, 80184b0 <__ieee754_rem_pio2+0x310>)
 801822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018232:	f7e8 f839 	bl	80002a8 <__aeabi_dsub>
 8018236:	a3a0      	add	r3, pc, #640	; (adr r3, 80184b8 <__ieee754_rem_pio2+0x318>)
 8018238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801823c:	4604      	mov	r4, r0
 801823e:	460d      	mov	r5, r1
 8018240:	f7e8 f832 	bl	80002a8 <__aeabi_dsub>
 8018244:	4602      	mov	r2, r0
 8018246:	460b      	mov	r3, r1
 8018248:	e9ca 2300 	strd	r2, r3, [sl]
 801824c:	4620      	mov	r0, r4
 801824e:	4629      	mov	r1, r5
 8018250:	f7e8 f82a 	bl	80002a8 <__aeabi_dsub>
 8018254:	a398      	add	r3, pc, #608	; (adr r3, 80184b8 <__ieee754_rem_pio2+0x318>)
 8018256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801825a:	e7db      	b.n	8018214 <__ieee754_rem_pio2+0x74>
 801825c:	f7e8 f826 	bl	80002ac <__adddf3>
 8018260:	45b0      	cmp	r8, r6
 8018262:	4604      	mov	r4, r0
 8018264:	460d      	mov	r5, r1
 8018266:	d016      	beq.n	8018296 <__ieee754_rem_pio2+0xf6>
 8018268:	a38f      	add	r3, pc, #572	; (adr r3, 80184a8 <__ieee754_rem_pio2+0x308>)
 801826a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801826e:	f7e8 f81d 	bl	80002ac <__adddf3>
 8018272:	4602      	mov	r2, r0
 8018274:	460b      	mov	r3, r1
 8018276:	e9ca 2300 	strd	r2, r3, [sl]
 801827a:	4620      	mov	r0, r4
 801827c:	4629      	mov	r1, r5
 801827e:	f7e8 f813 	bl	80002a8 <__aeabi_dsub>
 8018282:	a389      	add	r3, pc, #548	; (adr r3, 80184a8 <__ieee754_rem_pio2+0x308>)
 8018284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018288:	f7e8 f810 	bl	80002ac <__adddf3>
 801828c:	f04f 3bff 	mov.w	fp, #4294967295
 8018290:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018294:	e7c4      	b.n	8018220 <__ieee754_rem_pio2+0x80>
 8018296:	a386      	add	r3, pc, #536	; (adr r3, 80184b0 <__ieee754_rem_pio2+0x310>)
 8018298:	e9d3 2300 	ldrd	r2, r3, [r3]
 801829c:	f7e8 f806 	bl	80002ac <__adddf3>
 80182a0:	a385      	add	r3, pc, #532	; (adr r3, 80184b8 <__ieee754_rem_pio2+0x318>)
 80182a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182a6:	4604      	mov	r4, r0
 80182a8:	460d      	mov	r5, r1
 80182aa:	f7e7 ffff 	bl	80002ac <__adddf3>
 80182ae:	4602      	mov	r2, r0
 80182b0:	460b      	mov	r3, r1
 80182b2:	e9ca 2300 	strd	r2, r3, [sl]
 80182b6:	4620      	mov	r0, r4
 80182b8:	4629      	mov	r1, r5
 80182ba:	f7e7 fff5 	bl	80002a8 <__aeabi_dsub>
 80182be:	a37e      	add	r3, pc, #504	; (adr r3, 80184b8 <__ieee754_rem_pio2+0x318>)
 80182c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182c4:	e7e0      	b.n	8018288 <__ieee754_rem_pio2+0xe8>
 80182c6:	4b87      	ldr	r3, [pc, #540]	; (80184e4 <__ieee754_rem_pio2+0x344>)
 80182c8:	4598      	cmp	r8, r3
 80182ca:	f300 80d9 	bgt.w	8018480 <__ieee754_rem_pio2+0x2e0>
 80182ce:	f7fe fdcb 	bl	8016e68 <fabs>
 80182d2:	ec55 4b10 	vmov	r4, r5, d0
 80182d6:	ee10 0a10 	vmov	r0, s0
 80182da:	a379      	add	r3, pc, #484	; (adr r3, 80184c0 <__ieee754_rem_pio2+0x320>)
 80182dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80182e0:	4629      	mov	r1, r5
 80182e2:	f7e8 f999 	bl	8000618 <__aeabi_dmul>
 80182e6:	4b80      	ldr	r3, [pc, #512]	; (80184e8 <__ieee754_rem_pio2+0x348>)
 80182e8:	2200      	movs	r2, #0
 80182ea:	f7e7 ffdf 	bl	80002ac <__adddf3>
 80182ee:	f7e8 fc43 	bl	8000b78 <__aeabi_d2iz>
 80182f2:	4683      	mov	fp, r0
 80182f4:	f7e8 f926 	bl	8000544 <__aeabi_i2d>
 80182f8:	4602      	mov	r2, r0
 80182fa:	460b      	mov	r3, r1
 80182fc:	ec43 2b18 	vmov	d8, r2, r3
 8018300:	a367      	add	r3, pc, #412	; (adr r3, 80184a0 <__ieee754_rem_pio2+0x300>)
 8018302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018306:	f7e8 f987 	bl	8000618 <__aeabi_dmul>
 801830a:	4602      	mov	r2, r0
 801830c:	460b      	mov	r3, r1
 801830e:	4620      	mov	r0, r4
 8018310:	4629      	mov	r1, r5
 8018312:	f7e7 ffc9 	bl	80002a8 <__aeabi_dsub>
 8018316:	a364      	add	r3, pc, #400	; (adr r3, 80184a8 <__ieee754_rem_pio2+0x308>)
 8018318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801831c:	4606      	mov	r6, r0
 801831e:	460f      	mov	r7, r1
 8018320:	ec51 0b18 	vmov	r0, r1, d8
 8018324:	f7e8 f978 	bl	8000618 <__aeabi_dmul>
 8018328:	f1bb 0f1f 	cmp.w	fp, #31
 801832c:	4604      	mov	r4, r0
 801832e:	460d      	mov	r5, r1
 8018330:	dc0d      	bgt.n	801834e <__ieee754_rem_pio2+0x1ae>
 8018332:	4b6e      	ldr	r3, [pc, #440]	; (80184ec <__ieee754_rem_pio2+0x34c>)
 8018334:	f10b 32ff 	add.w	r2, fp, #4294967295
 8018338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801833c:	4543      	cmp	r3, r8
 801833e:	d006      	beq.n	801834e <__ieee754_rem_pio2+0x1ae>
 8018340:	4622      	mov	r2, r4
 8018342:	462b      	mov	r3, r5
 8018344:	4630      	mov	r0, r6
 8018346:	4639      	mov	r1, r7
 8018348:	f7e7 ffae 	bl	80002a8 <__aeabi_dsub>
 801834c:	e00f      	b.n	801836e <__ieee754_rem_pio2+0x1ce>
 801834e:	462b      	mov	r3, r5
 8018350:	4622      	mov	r2, r4
 8018352:	4630      	mov	r0, r6
 8018354:	4639      	mov	r1, r7
 8018356:	f7e7 ffa7 	bl	80002a8 <__aeabi_dsub>
 801835a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801835e:	9303      	str	r3, [sp, #12]
 8018360:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8018364:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8018368:	f1b8 0f10 	cmp.w	r8, #16
 801836c:	dc02      	bgt.n	8018374 <__ieee754_rem_pio2+0x1d4>
 801836e:	e9ca 0100 	strd	r0, r1, [sl]
 8018372:	e039      	b.n	80183e8 <__ieee754_rem_pio2+0x248>
 8018374:	a34e      	add	r3, pc, #312	; (adr r3, 80184b0 <__ieee754_rem_pio2+0x310>)
 8018376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801837a:	ec51 0b18 	vmov	r0, r1, d8
 801837e:	f7e8 f94b 	bl	8000618 <__aeabi_dmul>
 8018382:	4604      	mov	r4, r0
 8018384:	460d      	mov	r5, r1
 8018386:	4602      	mov	r2, r0
 8018388:	460b      	mov	r3, r1
 801838a:	4630      	mov	r0, r6
 801838c:	4639      	mov	r1, r7
 801838e:	f7e7 ff8b 	bl	80002a8 <__aeabi_dsub>
 8018392:	4602      	mov	r2, r0
 8018394:	460b      	mov	r3, r1
 8018396:	4680      	mov	r8, r0
 8018398:	4689      	mov	r9, r1
 801839a:	4630      	mov	r0, r6
 801839c:	4639      	mov	r1, r7
 801839e:	f7e7 ff83 	bl	80002a8 <__aeabi_dsub>
 80183a2:	4622      	mov	r2, r4
 80183a4:	462b      	mov	r3, r5
 80183a6:	f7e7 ff7f 	bl	80002a8 <__aeabi_dsub>
 80183aa:	a343      	add	r3, pc, #268	; (adr r3, 80184b8 <__ieee754_rem_pio2+0x318>)
 80183ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80183b0:	4604      	mov	r4, r0
 80183b2:	460d      	mov	r5, r1
 80183b4:	ec51 0b18 	vmov	r0, r1, d8
 80183b8:	f7e8 f92e 	bl	8000618 <__aeabi_dmul>
 80183bc:	4622      	mov	r2, r4
 80183be:	462b      	mov	r3, r5
 80183c0:	f7e7 ff72 	bl	80002a8 <__aeabi_dsub>
 80183c4:	4602      	mov	r2, r0
 80183c6:	460b      	mov	r3, r1
 80183c8:	4604      	mov	r4, r0
 80183ca:	460d      	mov	r5, r1
 80183cc:	4640      	mov	r0, r8
 80183ce:	4649      	mov	r1, r9
 80183d0:	f7e7 ff6a 	bl	80002a8 <__aeabi_dsub>
 80183d4:	9a03      	ldr	r2, [sp, #12]
 80183d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80183da:	1ad3      	subs	r3, r2, r3
 80183dc:	2b31      	cmp	r3, #49	; 0x31
 80183de:	dc24      	bgt.n	801842a <__ieee754_rem_pio2+0x28a>
 80183e0:	e9ca 0100 	strd	r0, r1, [sl]
 80183e4:	4646      	mov	r6, r8
 80183e6:	464f      	mov	r7, r9
 80183e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80183ec:	4630      	mov	r0, r6
 80183ee:	4642      	mov	r2, r8
 80183f0:	464b      	mov	r3, r9
 80183f2:	4639      	mov	r1, r7
 80183f4:	f7e7 ff58 	bl	80002a8 <__aeabi_dsub>
 80183f8:	462b      	mov	r3, r5
 80183fa:	4622      	mov	r2, r4
 80183fc:	f7e7 ff54 	bl	80002a8 <__aeabi_dsub>
 8018400:	9b02      	ldr	r3, [sp, #8]
 8018402:	2b00      	cmp	r3, #0
 8018404:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018408:	f6bf af0a 	bge.w	8018220 <__ieee754_rem_pio2+0x80>
 801840c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8018410:	f8ca 3004 	str.w	r3, [sl, #4]
 8018414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018418:	f8ca 8000 	str.w	r8, [sl]
 801841c:	f8ca 0008 	str.w	r0, [sl, #8]
 8018420:	f8ca 300c 	str.w	r3, [sl, #12]
 8018424:	f1cb 0b00 	rsb	fp, fp, #0
 8018428:	e6fa      	b.n	8018220 <__ieee754_rem_pio2+0x80>
 801842a:	a327      	add	r3, pc, #156	; (adr r3, 80184c8 <__ieee754_rem_pio2+0x328>)
 801842c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018430:	ec51 0b18 	vmov	r0, r1, d8
 8018434:	f7e8 f8f0 	bl	8000618 <__aeabi_dmul>
 8018438:	4604      	mov	r4, r0
 801843a:	460d      	mov	r5, r1
 801843c:	4602      	mov	r2, r0
 801843e:	460b      	mov	r3, r1
 8018440:	4640      	mov	r0, r8
 8018442:	4649      	mov	r1, r9
 8018444:	f7e7 ff30 	bl	80002a8 <__aeabi_dsub>
 8018448:	4602      	mov	r2, r0
 801844a:	460b      	mov	r3, r1
 801844c:	4606      	mov	r6, r0
 801844e:	460f      	mov	r7, r1
 8018450:	4640      	mov	r0, r8
 8018452:	4649      	mov	r1, r9
 8018454:	f7e7 ff28 	bl	80002a8 <__aeabi_dsub>
 8018458:	4622      	mov	r2, r4
 801845a:	462b      	mov	r3, r5
 801845c:	f7e7 ff24 	bl	80002a8 <__aeabi_dsub>
 8018460:	a31b      	add	r3, pc, #108	; (adr r3, 80184d0 <__ieee754_rem_pio2+0x330>)
 8018462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018466:	4604      	mov	r4, r0
 8018468:	460d      	mov	r5, r1
 801846a:	ec51 0b18 	vmov	r0, r1, d8
 801846e:	f7e8 f8d3 	bl	8000618 <__aeabi_dmul>
 8018472:	4622      	mov	r2, r4
 8018474:	462b      	mov	r3, r5
 8018476:	f7e7 ff17 	bl	80002a8 <__aeabi_dsub>
 801847a:	4604      	mov	r4, r0
 801847c:	460d      	mov	r5, r1
 801847e:	e75f      	b.n	8018340 <__ieee754_rem_pio2+0x1a0>
 8018480:	4b1b      	ldr	r3, [pc, #108]	; (80184f0 <__ieee754_rem_pio2+0x350>)
 8018482:	4598      	cmp	r8, r3
 8018484:	dd36      	ble.n	80184f4 <__ieee754_rem_pio2+0x354>
 8018486:	ee10 2a10 	vmov	r2, s0
 801848a:	462b      	mov	r3, r5
 801848c:	4620      	mov	r0, r4
 801848e:	4629      	mov	r1, r5
 8018490:	f7e7 ff0a 	bl	80002a8 <__aeabi_dsub>
 8018494:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8018498:	e9ca 0100 	strd	r0, r1, [sl]
 801849c:	e694      	b.n	80181c8 <__ieee754_rem_pio2+0x28>
 801849e:	bf00      	nop
 80184a0:	54400000 	.word	0x54400000
 80184a4:	3ff921fb 	.word	0x3ff921fb
 80184a8:	1a626331 	.word	0x1a626331
 80184ac:	3dd0b461 	.word	0x3dd0b461
 80184b0:	1a600000 	.word	0x1a600000
 80184b4:	3dd0b461 	.word	0x3dd0b461
 80184b8:	2e037073 	.word	0x2e037073
 80184bc:	3ba3198a 	.word	0x3ba3198a
 80184c0:	6dc9c883 	.word	0x6dc9c883
 80184c4:	3fe45f30 	.word	0x3fe45f30
 80184c8:	2e000000 	.word	0x2e000000
 80184cc:	3ba3198a 	.word	0x3ba3198a
 80184d0:	252049c1 	.word	0x252049c1
 80184d4:	397b839a 	.word	0x397b839a
 80184d8:	3fe921fb 	.word	0x3fe921fb
 80184dc:	4002d97b 	.word	0x4002d97b
 80184e0:	3ff921fb 	.word	0x3ff921fb
 80184e4:	413921fb 	.word	0x413921fb
 80184e8:	3fe00000 	.word	0x3fe00000
 80184ec:	08062e60 	.word	0x08062e60
 80184f0:	7fefffff 	.word	0x7fefffff
 80184f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80184f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80184fc:	ee10 0a10 	vmov	r0, s0
 8018500:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8018504:	ee10 6a10 	vmov	r6, s0
 8018508:	460f      	mov	r7, r1
 801850a:	f7e8 fb35 	bl	8000b78 <__aeabi_d2iz>
 801850e:	f7e8 f819 	bl	8000544 <__aeabi_i2d>
 8018512:	4602      	mov	r2, r0
 8018514:	460b      	mov	r3, r1
 8018516:	4630      	mov	r0, r6
 8018518:	4639      	mov	r1, r7
 801851a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801851e:	f7e7 fec3 	bl	80002a8 <__aeabi_dsub>
 8018522:	4b23      	ldr	r3, [pc, #140]	; (80185b0 <__ieee754_rem_pio2+0x410>)
 8018524:	2200      	movs	r2, #0
 8018526:	f7e8 f877 	bl	8000618 <__aeabi_dmul>
 801852a:	460f      	mov	r7, r1
 801852c:	4606      	mov	r6, r0
 801852e:	f7e8 fb23 	bl	8000b78 <__aeabi_d2iz>
 8018532:	f7e8 f807 	bl	8000544 <__aeabi_i2d>
 8018536:	4602      	mov	r2, r0
 8018538:	460b      	mov	r3, r1
 801853a:	4630      	mov	r0, r6
 801853c:	4639      	mov	r1, r7
 801853e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018542:	f7e7 feb1 	bl	80002a8 <__aeabi_dsub>
 8018546:	4b1a      	ldr	r3, [pc, #104]	; (80185b0 <__ieee754_rem_pio2+0x410>)
 8018548:	2200      	movs	r2, #0
 801854a:	f7e8 f865 	bl	8000618 <__aeabi_dmul>
 801854e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8018552:	ad04      	add	r5, sp, #16
 8018554:	f04f 0803 	mov.w	r8, #3
 8018558:	46a9      	mov	r9, r5
 801855a:	2600      	movs	r6, #0
 801855c:	2700      	movs	r7, #0
 801855e:	4632      	mov	r2, r6
 8018560:	463b      	mov	r3, r7
 8018562:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8018566:	46c3      	mov	fp, r8
 8018568:	3d08      	subs	r5, #8
 801856a:	f108 38ff 	add.w	r8, r8, #4294967295
 801856e:	f7e8 fabb 	bl	8000ae8 <__aeabi_dcmpeq>
 8018572:	2800      	cmp	r0, #0
 8018574:	d1f3      	bne.n	801855e <__ieee754_rem_pio2+0x3be>
 8018576:	4b0f      	ldr	r3, [pc, #60]	; (80185b4 <__ieee754_rem_pio2+0x414>)
 8018578:	9301      	str	r3, [sp, #4]
 801857a:	2302      	movs	r3, #2
 801857c:	9300      	str	r3, [sp, #0]
 801857e:	4622      	mov	r2, r4
 8018580:	465b      	mov	r3, fp
 8018582:	4651      	mov	r1, sl
 8018584:	4648      	mov	r0, r9
 8018586:	f000 fe7b 	bl	8019280 <__kernel_rem_pio2>
 801858a:	9b02      	ldr	r3, [sp, #8]
 801858c:	2b00      	cmp	r3, #0
 801858e:	4683      	mov	fp, r0
 8018590:	f6bf ae46 	bge.w	8018220 <__ieee754_rem_pio2+0x80>
 8018594:	e9da 2100 	ldrd	r2, r1, [sl]
 8018598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801859c:	e9ca 2300 	strd	r2, r3, [sl]
 80185a0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80185a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80185a8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80185ac:	e73a      	b.n	8018424 <__ieee754_rem_pio2+0x284>
 80185ae:	bf00      	nop
 80185b0:	41700000 	.word	0x41700000
 80185b4:	08062ee0 	.word	0x08062ee0

080185b8 <__ieee754_sqrt>:
 80185b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185bc:	ec55 4b10 	vmov	r4, r5, d0
 80185c0:	4e55      	ldr	r6, [pc, #340]	; (8018718 <__ieee754_sqrt+0x160>)
 80185c2:	43ae      	bics	r6, r5
 80185c4:	ee10 0a10 	vmov	r0, s0
 80185c8:	ee10 3a10 	vmov	r3, s0
 80185cc:	462a      	mov	r2, r5
 80185ce:	4629      	mov	r1, r5
 80185d0:	d110      	bne.n	80185f4 <__ieee754_sqrt+0x3c>
 80185d2:	ee10 2a10 	vmov	r2, s0
 80185d6:	462b      	mov	r3, r5
 80185d8:	f7e8 f81e 	bl	8000618 <__aeabi_dmul>
 80185dc:	4602      	mov	r2, r0
 80185de:	460b      	mov	r3, r1
 80185e0:	4620      	mov	r0, r4
 80185e2:	4629      	mov	r1, r5
 80185e4:	f7e7 fe62 	bl	80002ac <__adddf3>
 80185e8:	4604      	mov	r4, r0
 80185ea:	460d      	mov	r5, r1
 80185ec:	ec45 4b10 	vmov	d0, r4, r5
 80185f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185f4:	2d00      	cmp	r5, #0
 80185f6:	dc10      	bgt.n	801861a <__ieee754_sqrt+0x62>
 80185f8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80185fc:	4330      	orrs	r0, r6
 80185fe:	d0f5      	beq.n	80185ec <__ieee754_sqrt+0x34>
 8018600:	b15d      	cbz	r5, 801861a <__ieee754_sqrt+0x62>
 8018602:	ee10 2a10 	vmov	r2, s0
 8018606:	462b      	mov	r3, r5
 8018608:	ee10 0a10 	vmov	r0, s0
 801860c:	f7e7 fe4c 	bl	80002a8 <__aeabi_dsub>
 8018610:	4602      	mov	r2, r0
 8018612:	460b      	mov	r3, r1
 8018614:	f7e8 f92a 	bl	800086c <__aeabi_ddiv>
 8018618:	e7e6      	b.n	80185e8 <__ieee754_sqrt+0x30>
 801861a:	1512      	asrs	r2, r2, #20
 801861c:	d074      	beq.n	8018708 <__ieee754_sqrt+0x150>
 801861e:	07d4      	lsls	r4, r2, #31
 8018620:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8018624:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8018628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801862c:	bf5e      	ittt	pl
 801862e:	0fda      	lsrpl	r2, r3, #31
 8018630:	005b      	lslpl	r3, r3, #1
 8018632:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8018636:	2400      	movs	r4, #0
 8018638:	0fda      	lsrs	r2, r3, #31
 801863a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801863e:	107f      	asrs	r7, r7, #1
 8018640:	005b      	lsls	r3, r3, #1
 8018642:	2516      	movs	r5, #22
 8018644:	4620      	mov	r0, r4
 8018646:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 801864a:	1886      	adds	r6, r0, r2
 801864c:	428e      	cmp	r6, r1
 801864e:	bfde      	ittt	le
 8018650:	1b89      	suble	r1, r1, r6
 8018652:	18b0      	addle	r0, r6, r2
 8018654:	18a4      	addle	r4, r4, r2
 8018656:	0049      	lsls	r1, r1, #1
 8018658:	3d01      	subs	r5, #1
 801865a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801865e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8018662:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8018666:	d1f0      	bne.n	801864a <__ieee754_sqrt+0x92>
 8018668:	462a      	mov	r2, r5
 801866a:	f04f 0e20 	mov.w	lr, #32
 801866e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8018672:	4281      	cmp	r1, r0
 8018674:	eb06 0c05 	add.w	ip, r6, r5
 8018678:	dc02      	bgt.n	8018680 <__ieee754_sqrt+0xc8>
 801867a:	d113      	bne.n	80186a4 <__ieee754_sqrt+0xec>
 801867c:	459c      	cmp	ip, r3
 801867e:	d811      	bhi.n	80186a4 <__ieee754_sqrt+0xec>
 8018680:	f1bc 0f00 	cmp.w	ip, #0
 8018684:	eb0c 0506 	add.w	r5, ip, r6
 8018688:	da43      	bge.n	8018712 <__ieee754_sqrt+0x15a>
 801868a:	2d00      	cmp	r5, #0
 801868c:	db41      	blt.n	8018712 <__ieee754_sqrt+0x15a>
 801868e:	f100 0801 	add.w	r8, r0, #1
 8018692:	1a09      	subs	r1, r1, r0
 8018694:	459c      	cmp	ip, r3
 8018696:	bf88      	it	hi
 8018698:	f101 31ff 	addhi.w	r1, r1, #4294967295
 801869c:	eba3 030c 	sub.w	r3, r3, ip
 80186a0:	4432      	add	r2, r6
 80186a2:	4640      	mov	r0, r8
 80186a4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80186a8:	f1be 0e01 	subs.w	lr, lr, #1
 80186ac:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80186b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80186b4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80186b8:	d1db      	bne.n	8018672 <__ieee754_sqrt+0xba>
 80186ba:	430b      	orrs	r3, r1
 80186bc:	d006      	beq.n	80186cc <__ieee754_sqrt+0x114>
 80186be:	1c50      	adds	r0, r2, #1
 80186c0:	bf13      	iteet	ne
 80186c2:	3201      	addne	r2, #1
 80186c4:	3401      	addeq	r4, #1
 80186c6:	4672      	moveq	r2, lr
 80186c8:	f022 0201 	bicne.w	r2, r2, #1
 80186cc:	1063      	asrs	r3, r4, #1
 80186ce:	0852      	lsrs	r2, r2, #1
 80186d0:	07e1      	lsls	r1, r4, #31
 80186d2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80186d6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80186da:	bf48      	it	mi
 80186dc:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80186e0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80186e4:	4614      	mov	r4, r2
 80186e6:	e781      	b.n	80185ec <__ieee754_sqrt+0x34>
 80186e8:	0ad9      	lsrs	r1, r3, #11
 80186ea:	3815      	subs	r0, #21
 80186ec:	055b      	lsls	r3, r3, #21
 80186ee:	2900      	cmp	r1, #0
 80186f0:	d0fa      	beq.n	80186e8 <__ieee754_sqrt+0x130>
 80186f2:	02cd      	lsls	r5, r1, #11
 80186f4:	d50a      	bpl.n	801870c <__ieee754_sqrt+0x154>
 80186f6:	f1c2 0420 	rsb	r4, r2, #32
 80186fa:	fa23 f404 	lsr.w	r4, r3, r4
 80186fe:	1e55      	subs	r5, r2, #1
 8018700:	4093      	lsls	r3, r2
 8018702:	4321      	orrs	r1, r4
 8018704:	1b42      	subs	r2, r0, r5
 8018706:	e78a      	b.n	801861e <__ieee754_sqrt+0x66>
 8018708:	4610      	mov	r0, r2
 801870a:	e7f0      	b.n	80186ee <__ieee754_sqrt+0x136>
 801870c:	0049      	lsls	r1, r1, #1
 801870e:	3201      	adds	r2, #1
 8018710:	e7ef      	b.n	80186f2 <__ieee754_sqrt+0x13a>
 8018712:	4680      	mov	r8, r0
 8018714:	e7bd      	b.n	8018692 <__ieee754_sqrt+0xda>
 8018716:	bf00      	nop
 8018718:	7ff00000 	.word	0x7ff00000

0801871c <__ieee754_expf>:
 801871c:	ee10 2a10 	vmov	r2, s0
 8018720:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8018724:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8018728:	d902      	bls.n	8018730 <__ieee754_expf+0x14>
 801872a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801872e:	4770      	bx	lr
 8018730:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8018734:	d106      	bne.n	8018744 <__ieee754_expf+0x28>
 8018736:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8018870 <__ieee754_expf+0x154>
 801873a:	2b00      	cmp	r3, #0
 801873c:	bf18      	it	ne
 801873e:	eeb0 0a67 	vmovne.f32	s0, s15
 8018742:	4770      	bx	lr
 8018744:	484b      	ldr	r0, [pc, #300]	; (8018874 <__ieee754_expf+0x158>)
 8018746:	4282      	cmp	r2, r0
 8018748:	dd02      	ble.n	8018750 <__ieee754_expf+0x34>
 801874a:	2000      	movs	r0, #0
 801874c:	f001 b9f2 	b.w	8019b34 <__math_oflowf>
 8018750:	2a00      	cmp	r2, #0
 8018752:	da05      	bge.n	8018760 <__ieee754_expf+0x44>
 8018754:	4a48      	ldr	r2, [pc, #288]	; (8018878 <__ieee754_expf+0x15c>)
 8018756:	4291      	cmp	r1, r2
 8018758:	d902      	bls.n	8018760 <__ieee754_expf+0x44>
 801875a:	2000      	movs	r0, #0
 801875c:	f001 b9e4 	b.w	8019b28 <__math_uflowf>
 8018760:	4a46      	ldr	r2, [pc, #280]	; (801887c <__ieee754_expf+0x160>)
 8018762:	4291      	cmp	r1, r2
 8018764:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8018768:	d952      	bls.n	8018810 <__ieee754_expf+0xf4>
 801876a:	4a45      	ldr	r2, [pc, #276]	; (8018880 <__ieee754_expf+0x164>)
 801876c:	4291      	cmp	r1, r2
 801876e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8018772:	d834      	bhi.n	80187de <__ieee754_expf+0xc2>
 8018774:	4943      	ldr	r1, [pc, #268]	; (8018884 <__ieee754_expf+0x168>)
 8018776:	4411      	add	r1, r2
 8018778:	ed91 7a00 	vldr	s14, [r1]
 801877c:	4942      	ldr	r1, [pc, #264]	; (8018888 <__ieee754_expf+0x16c>)
 801877e:	440a      	add	r2, r1
 8018780:	edd2 7a00 	vldr	s15, [r2]
 8018784:	ee30 7a47 	vsub.f32	s14, s0, s14
 8018788:	f1c3 0201 	rsb	r2, r3, #1
 801878c:	1ad2      	subs	r2, r2, r3
 801878e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8018792:	ee20 6a00 	vmul.f32	s12, s0, s0
 8018796:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801888c <__ieee754_expf+0x170>
 801879a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8018890 <__ieee754_expf+0x174>
 801879e:	eee6 6a05 	vfma.f32	s13, s12, s10
 80187a2:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8018894 <__ieee754_expf+0x178>
 80187a6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80187aa:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8018898 <__ieee754_expf+0x17c>
 80187ae:	eee5 6a06 	vfma.f32	s13, s10, s12
 80187b2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801889c <__ieee754_expf+0x180>
 80187b6:	eea6 5a86 	vfma.f32	s10, s13, s12
 80187ba:	eef0 6a40 	vmov.f32	s13, s0
 80187be:	eee5 6a46 	vfms.f32	s13, s10, s12
 80187c2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80187c6:	ee20 5a26 	vmul.f32	s10, s0, s13
 80187ca:	bb92      	cbnz	r2, 8018832 <__ieee754_expf+0x116>
 80187cc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80187d0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80187d4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80187d8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80187dc:	4770      	bx	lr
 80187de:	4b30      	ldr	r3, [pc, #192]	; (80188a0 <__ieee754_expf+0x184>)
 80187e0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80188a4 <__ieee754_expf+0x188>
 80187e4:	eddf 6a30 	vldr	s13, [pc, #192]	; 80188a8 <__ieee754_expf+0x18c>
 80187e8:	4413      	add	r3, r2
 80187ea:	edd3 7a00 	vldr	s15, [r3]
 80187ee:	eee0 7a07 	vfma.f32	s15, s0, s14
 80187f2:	eeb0 7a40 	vmov.f32	s14, s0
 80187f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80187fa:	ee17 2a90 	vmov	r2, s15
 80187fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018802:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8018806:	eddf 6a29 	vldr	s13, [pc, #164]	; 80188ac <__ieee754_expf+0x190>
 801880a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801880e:	e7be      	b.n	801878e <__ieee754_expf+0x72>
 8018810:	f1b1 5f50 	cmp.w	r1, #872415232	; 0x34000000
 8018814:	d20b      	bcs.n	801882e <__ieee754_expf+0x112>
 8018816:	eddf 6a26 	vldr	s13, [pc, #152]	; 80188b0 <__ieee754_expf+0x194>
 801881a:	ee70 6a26 	vadd.f32	s13, s0, s13
 801881e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8018822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018826:	dd02      	ble.n	801882e <__ieee754_expf+0x112>
 8018828:	ee30 0a25 	vadd.f32	s0, s0, s11
 801882c:	4770      	bx	lr
 801882e:	2200      	movs	r2, #0
 8018830:	e7af      	b.n	8018792 <__ieee754_expf+0x76>
 8018832:	ee76 6a66 	vsub.f32	s13, s12, s13
 8018836:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801883a:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801883e:	bfb8      	it	lt
 8018840:	3264      	addlt	r2, #100	; 0x64
 8018842:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8018846:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801884a:	ee75 7ac0 	vsub.f32	s15, s11, s0
 801884e:	ee17 3a90 	vmov	r3, s15
 8018852:	bfab      	itete	ge
 8018854:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8018858:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 801885c:	ee00 3a10 	vmovge	s0, r3
 8018860:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80188b4 <__ieee754_expf+0x198>
 8018864:	bfbc      	itt	lt
 8018866:	ee00 3a10 	vmovlt	s0, r3
 801886a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801886e:	4770      	bx	lr
 8018870:	00000000 	.word	0x00000000
 8018874:	42b17217 	.word	0x42b17217
 8018878:	42cff1b5 	.word	0x42cff1b5
 801887c:	3eb17218 	.word	0x3eb17218
 8018880:	3f851591 	.word	0x3f851591
 8018884:	08062ff0 	.word	0x08062ff0
 8018888:	08062ff8 	.word	0x08062ff8
 801888c:	3331bb4c 	.word	0x3331bb4c
 8018890:	b5ddea0e 	.word	0xb5ddea0e
 8018894:	388ab355 	.word	0x388ab355
 8018898:	bb360b61 	.word	0xbb360b61
 801889c:	3e2aaaab 	.word	0x3e2aaaab
 80188a0:	08062fe8 	.word	0x08062fe8
 80188a4:	3fb8aa3b 	.word	0x3fb8aa3b
 80188a8:	3f317180 	.word	0x3f317180
 80188ac:	3717f7d1 	.word	0x3717f7d1
 80188b0:	7149f2ca 	.word	0x7149f2ca
 80188b4:	0d800000 	.word	0x0d800000

080188b8 <__ieee754_logf>:
 80188b8:	ee10 3a10 	vmov	r3, s0
 80188bc:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80188c0:	d106      	bne.n	80188d0 <__ieee754_logf+0x18>
 80188c2:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8018a58 <__ieee754_logf+0x1a0>
 80188c6:	eddf 7a65 	vldr	s15, [pc, #404]	; 8018a5c <__ieee754_logf+0x1a4>
 80188ca:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80188ce:	4770      	bx	lr
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	da02      	bge.n	80188da <__ieee754_logf+0x22>
 80188d4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80188d8:	e7f5      	b.n	80188c6 <__ieee754_logf+0xe>
 80188da:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80188de:	db02      	blt.n	80188e6 <__ieee754_logf+0x2e>
 80188e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80188e4:	4770      	bx	lr
 80188e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80188ea:	bfb8      	it	lt
 80188ec:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8018a60 <__ieee754_logf+0x1a8>
 80188f0:	485c      	ldr	r0, [pc, #368]	; (8018a64 <__ieee754_logf+0x1ac>)
 80188f2:	bfbe      	ittt	lt
 80188f4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80188f8:	f06f 0118 	mvnlt.w	r1, #24
 80188fc:	ee17 3a90 	vmovlt	r3, s15
 8018900:	ea4f 52e3 	mov.w	r2, r3, asr #23
 8018904:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8018908:	4418      	add	r0, r3
 801890a:	bfa8      	it	ge
 801890c:	2100      	movge	r1, #0
 801890e:	3a7f      	subs	r2, #127	; 0x7f
 8018910:	440a      	add	r2, r1
 8018912:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 8018916:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 801891a:	4319      	orrs	r1, r3
 801891c:	ee00 1a10 	vmov	s0, r1
 8018920:	4951      	ldr	r1, [pc, #324]	; (8018a68 <__ieee754_logf+0x1b0>)
 8018922:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 8018926:	f103 000f 	add.w	r0, r3, #15
 801892a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801892e:	4001      	ands	r1, r0
 8018930:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018934:	bb89      	cbnz	r1, 801899a <__ieee754_logf+0xe2>
 8018936:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801893a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801893e:	d10f      	bne.n	8018960 <__ieee754_logf+0xa8>
 8018940:	2a00      	cmp	r2, #0
 8018942:	f000 8085 	beq.w	8018a50 <__ieee754_logf+0x198>
 8018946:	ee07 2a90 	vmov	s15, r2
 801894a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8018a6c <__ieee754_logf+0x1b4>
 801894e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8018a70 <__ieee754_logf+0x1b8>
 8018952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018956:	ee27 0a80 	vmul.f32	s0, s15, s0
 801895a:	eea7 0a87 	vfma.f32	s0, s15, s14
 801895e:	4770      	bx	lr
 8018960:	eddf 6a44 	vldr	s13, [pc, #272]	; 8018a74 <__ieee754_logf+0x1bc>
 8018964:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018968:	eee0 7a66 	vfms.f32	s15, s0, s13
 801896c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018970:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018974:	b912      	cbnz	r2, 801897c <__ieee754_logf+0xc4>
 8018976:	ee30 0a47 	vsub.f32	s0, s0, s14
 801897a:	4770      	bx	lr
 801897c:	ee07 2a90 	vmov	s15, r2
 8018980:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8018a6c <__ieee754_logf+0x1b4>
 8018984:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018988:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801898c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8018990:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8018a70 <__ieee754_logf+0x1b8>
 8018994:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8018998:	4770      	bx	lr
 801899a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801899e:	ee70 7a27 	vadd.f32	s15, s0, s15
 80189a2:	eddf 5a35 	vldr	s11, [pc, #212]	; 8018a78 <__ieee754_logf+0x1c0>
 80189a6:	eddf 4a35 	vldr	s9, [pc, #212]	; 8018a7c <__ieee754_logf+0x1c4>
 80189aa:	4935      	ldr	r1, [pc, #212]	; (8018a80 <__ieee754_logf+0x1c8>)
 80189ac:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80189b0:	4419      	add	r1, r3
 80189b2:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 80189b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80189ba:	430b      	orrs	r3, r1
 80189bc:	2b00      	cmp	r3, #0
 80189be:	ee07 2a90 	vmov	s15, r2
 80189c2:	ee26 5a06 	vmul.f32	s10, s12, s12
 80189c6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80189ca:	ee25 7a05 	vmul.f32	s14, s10, s10
 80189ce:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8018a84 <__ieee754_logf+0x1cc>
 80189d2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80189d6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8018a88 <__ieee754_logf+0x1d0>
 80189da:	eee7 5a87 	vfma.f32	s11, s15, s14
 80189de:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8018a8c <__ieee754_logf+0x1d4>
 80189e2:	eee7 7a24 	vfma.f32	s15, s14, s9
 80189e6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8018a90 <__ieee754_logf+0x1d8>
 80189ea:	eee7 4a87 	vfma.f32	s9, s15, s14
 80189ee:	eddf 7a29 	vldr	s15, [pc, #164]	; 8018a94 <__ieee754_logf+0x1dc>
 80189f2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80189f6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80189fa:	eee5 7a87 	vfma.f32	s15, s11, s14
 80189fe:	dd1c      	ble.n	8018a3a <__ieee754_logf+0x182>
 8018a00:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8018a04:	ee20 7a07 	vmul.f32	s14, s0, s14
 8018a08:	ee27 7a00 	vmul.f32	s14, s14, s0
 8018a0c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018a10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018a14:	b922      	cbnz	r2, 8018a20 <__ieee754_logf+0x168>
 8018a16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a1a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018a1e:	4770      	bx	lr
 8018a20:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8018a6c <__ieee754_logf+0x1b4>
 8018a24:	eee6 7a86 	vfma.f32	s15, s13, s12
 8018a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018a2c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8018a30:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8018a70 <__ieee754_logf+0x1b8>
 8018a34:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8018a38:	4770      	bx	lr
 8018a3a:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018a3e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018a42:	2a00      	cmp	r2, #0
 8018a44:	d0e9      	beq.n	8018a1a <__ieee754_logf+0x162>
 8018a46:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8018a6c <__ieee754_logf+0x1b4>
 8018a4a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8018a4e:	e7ed      	b.n	8018a2c <__ieee754_logf+0x174>
 8018a50:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8018a5c <__ieee754_logf+0x1a4>
 8018a54:	4770      	bx	lr
 8018a56:	bf00      	nop
 8018a58:	cc000000 	.word	0xcc000000
 8018a5c:	00000000 	.word	0x00000000
 8018a60:	4c000000 	.word	0x4c000000
 8018a64:	004afb20 	.word	0x004afb20
 8018a68:	007ffff0 	.word	0x007ffff0
 8018a6c:	3717f7d1 	.word	0x3717f7d1
 8018a70:	3f317180 	.word	0x3f317180
 8018a74:	3eaaaaab 	.word	0x3eaaaaab
 8018a78:	3e1cd04f 	.word	0x3e1cd04f
 8018a7c:	3e178897 	.word	0x3e178897
 8018a80:	ffcf5c30 	.word	0xffcf5c30
 8018a84:	3e638e29 	.word	0x3e638e29
 8018a88:	3ecccccd 	.word	0x3ecccccd
 8018a8c:	3e3a3325 	.word	0x3e3a3325
 8018a90:	3e924925 	.word	0x3e924925
 8018a94:	3f2aaaab 	.word	0x3f2aaaab

08018a98 <__ieee754_log10f>:
 8018a98:	b508      	push	{r3, lr}
 8018a9a:	ee10 2a10 	vmov	r2, s0
 8018a9e:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8018aa2:	ed2d 8b02 	vpush	{d8}
 8018aa6:	d108      	bne.n	8018aba <__ieee754_log10f+0x22>
 8018aa8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8018b30 <__ieee754_log10f+0x98>
 8018aac:	eddf 7a21 	vldr	s15, [pc, #132]	; 8018b34 <__ieee754_log10f+0x9c>
 8018ab0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8018ab4:	ecbd 8b02 	vpop	{d8}
 8018ab8:	bd08      	pop	{r3, pc}
 8018aba:	2a00      	cmp	r2, #0
 8018abc:	da02      	bge.n	8018ac4 <__ieee754_log10f+0x2c>
 8018abe:	ee30 7a40 	vsub.f32	s14, s0, s0
 8018ac2:	e7f3      	b.n	8018aac <__ieee754_log10f+0x14>
 8018ac4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018ac8:	db02      	blt.n	8018ad0 <__ieee754_log10f+0x38>
 8018aca:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018ace:	e7f1      	b.n	8018ab4 <__ieee754_log10f+0x1c>
 8018ad0:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8018ad4:	bfbf      	itttt	lt
 8018ad6:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8018b38 <__ieee754_log10f+0xa0>
 8018ada:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8018ade:	f06f 0118 	mvnlt.w	r1, #24
 8018ae2:	ee17 2a90 	vmovlt	r2, s15
 8018ae6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8018aea:	bfa8      	it	ge
 8018aec:	2100      	movge	r1, #0
 8018aee:	3b7f      	subs	r3, #127	; 0x7f
 8018af0:	440b      	add	r3, r1
 8018af2:	0fd9      	lsrs	r1, r3, #31
 8018af4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8018af8:	ee07 3a90 	vmov	s15, r3
 8018afc:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8018b00:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8018b04:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8018b08:	ee00 3a10 	vmov	s0, r3
 8018b0c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8018b10:	f7ff fed2 	bl	80188b8 <__ieee754_logf>
 8018b14:	eddf 7a09 	vldr	s15, [pc, #36]	; 8018b3c <__ieee754_log10f+0xa4>
 8018b18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018b1c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8018b40 <__ieee754_log10f+0xa8>
 8018b20:	eea8 0a27 	vfma.f32	s0, s16, s15
 8018b24:	eddf 7a07 	vldr	s15, [pc, #28]	; 8018b44 <__ieee754_log10f+0xac>
 8018b28:	eea8 0a27 	vfma.f32	s0, s16, s15
 8018b2c:	e7c2      	b.n	8018ab4 <__ieee754_log10f+0x1c>
 8018b2e:	bf00      	nop
 8018b30:	cc000000 	.word	0xcc000000
 8018b34:	00000000 	.word	0x00000000
 8018b38:	4c000000 	.word	0x4c000000
 8018b3c:	3ede5bd9 	.word	0x3ede5bd9
 8018b40:	355427db 	.word	0x355427db
 8018b44:	3e9a2080 	.word	0x3e9a2080

08018b48 <__ieee754_powf>:
 8018b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b4c:	ee10 4a90 	vmov	r4, s1
 8018b50:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8018b54:	ed2d 8b02 	vpush	{d8}
 8018b58:	ee10 6a10 	vmov	r6, s0
 8018b5c:	eeb0 8a40 	vmov.f32	s16, s0
 8018b60:	eef0 8a60 	vmov.f32	s17, s1
 8018b64:	d10c      	bne.n	8018b80 <__ieee754_powf+0x38>
 8018b66:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8018b6a:	0076      	lsls	r6, r6, #1
 8018b6c:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 8018b70:	f240 8296 	bls.w	80190a0 <__ieee754_powf+0x558>
 8018b74:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018b78:	ecbd 8b02 	vpop	{d8}
 8018b7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b80:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8018b84:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8018b88:	dcf4      	bgt.n	8018b74 <__ieee754_powf+0x2c>
 8018b8a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8018b8e:	dd08      	ble.n	8018ba2 <__ieee754_powf+0x5a>
 8018b90:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8018b94:	d1ee      	bne.n	8018b74 <__ieee754_powf+0x2c>
 8018b96:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8018b9a:	0064      	lsls	r4, r4, #1
 8018b9c:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8018ba0:	e7e6      	b.n	8018b70 <__ieee754_powf+0x28>
 8018ba2:	2e00      	cmp	r6, #0
 8018ba4:	da20      	bge.n	8018be8 <__ieee754_powf+0xa0>
 8018ba6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8018baa:	da2d      	bge.n	8018c08 <__ieee754_powf+0xc0>
 8018bac:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8018bb0:	f2c0 827f 	blt.w	80190b2 <__ieee754_powf+0x56a>
 8018bb4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8018bb8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018bbc:	fa48 f703 	asr.w	r7, r8, r3
 8018bc0:	fa07 f303 	lsl.w	r3, r7, r3
 8018bc4:	4543      	cmp	r3, r8
 8018bc6:	f040 8274 	bne.w	80190b2 <__ieee754_powf+0x56a>
 8018bca:	f007 0701 	and.w	r7, r7, #1
 8018bce:	f1c7 0702 	rsb	r7, r7, #2
 8018bd2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8018bd6:	d11f      	bne.n	8018c18 <__ieee754_powf+0xd0>
 8018bd8:	2c00      	cmp	r4, #0
 8018bda:	f280 8267 	bge.w	80190ac <__ieee754_powf+0x564>
 8018bde:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018be2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8018be6:	e7c7      	b.n	8018b78 <__ieee754_powf+0x30>
 8018be8:	2700      	movs	r7, #0
 8018bea:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8018bee:	d1f0      	bne.n	8018bd2 <__ieee754_powf+0x8a>
 8018bf0:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8018bf4:	f000 8254 	beq.w	80190a0 <__ieee754_powf+0x558>
 8018bf8:	dd08      	ble.n	8018c0c <__ieee754_powf+0xc4>
 8018bfa:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8018f04 <__ieee754_powf+0x3bc>
 8018bfe:	2c00      	cmp	r4, #0
 8018c00:	bfa8      	it	ge
 8018c02:	eeb0 0a68 	vmovge.f32	s0, s17
 8018c06:	e7b7      	b.n	8018b78 <__ieee754_powf+0x30>
 8018c08:	2702      	movs	r7, #2
 8018c0a:	e7ee      	b.n	8018bea <__ieee754_powf+0xa2>
 8018c0c:	2c00      	cmp	r4, #0
 8018c0e:	f280 824a 	bge.w	80190a6 <__ieee754_powf+0x55e>
 8018c12:	eeb1 0a68 	vneg.f32	s0, s17
 8018c16:	e7af      	b.n	8018b78 <__ieee754_powf+0x30>
 8018c18:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8018c1c:	d102      	bne.n	8018c24 <__ieee754_powf+0xdc>
 8018c1e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018c22:	e7a9      	b.n	8018b78 <__ieee754_powf+0x30>
 8018c24:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8018c28:	eeb0 0a48 	vmov.f32	s0, s16
 8018c2c:	d107      	bne.n	8018c3e <__ieee754_powf+0xf6>
 8018c2e:	2e00      	cmp	r6, #0
 8018c30:	db05      	blt.n	8018c3e <__ieee754_powf+0xf6>
 8018c32:	ecbd 8b02 	vpop	{d8}
 8018c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018c3a:	f000 ba53 	b.w	80190e4 <__ieee754_sqrtf>
 8018c3e:	f7fe f91c 	bl	8016e7a <fabsf>
 8018c42:	b125      	cbz	r5, 8018c4e <__ieee754_powf+0x106>
 8018c44:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8018c48:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8018c4c:	d116      	bne.n	8018c7c <__ieee754_powf+0x134>
 8018c4e:	2c00      	cmp	r4, #0
 8018c50:	bfbc      	itt	lt
 8018c52:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8018c56:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018c5a:	2e00      	cmp	r6, #0
 8018c5c:	da8c      	bge.n	8018b78 <__ieee754_powf+0x30>
 8018c5e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8018c62:	ea55 0307 	orrs.w	r3, r5, r7
 8018c66:	d104      	bne.n	8018c72 <__ieee754_powf+0x12a>
 8018c68:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018c6c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018c70:	e782      	b.n	8018b78 <__ieee754_powf+0x30>
 8018c72:	2f01      	cmp	r7, #1
 8018c74:	d180      	bne.n	8018b78 <__ieee754_powf+0x30>
 8018c76:	eeb1 0a40 	vneg.f32	s0, s0
 8018c7a:	e77d      	b.n	8018b78 <__ieee754_powf+0x30>
 8018c7c:	0ff0      	lsrs	r0, r6, #31
 8018c7e:	3801      	subs	r0, #1
 8018c80:	ea57 0300 	orrs.w	r3, r7, r0
 8018c84:	d104      	bne.n	8018c90 <__ieee754_powf+0x148>
 8018c86:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018c8a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018c8e:	e773      	b.n	8018b78 <__ieee754_powf+0x30>
 8018c90:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8018c94:	dd74      	ble.n	8018d80 <__ieee754_powf+0x238>
 8018c96:	4b9c      	ldr	r3, [pc, #624]	; (8018f08 <__ieee754_powf+0x3c0>)
 8018c98:	429d      	cmp	r5, r3
 8018c9a:	dc08      	bgt.n	8018cae <__ieee754_powf+0x166>
 8018c9c:	2c00      	cmp	r4, #0
 8018c9e:	da0b      	bge.n	8018cb8 <__ieee754_powf+0x170>
 8018ca0:	2000      	movs	r0, #0
 8018ca2:	ecbd 8b02 	vpop	{d8}
 8018ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018caa:	f000 bf43 	b.w	8019b34 <__math_oflowf>
 8018cae:	4b97      	ldr	r3, [pc, #604]	; (8018f0c <__ieee754_powf+0x3c4>)
 8018cb0:	429d      	cmp	r5, r3
 8018cb2:	dd08      	ble.n	8018cc6 <__ieee754_powf+0x17e>
 8018cb4:	2c00      	cmp	r4, #0
 8018cb6:	dcf3      	bgt.n	8018ca0 <__ieee754_powf+0x158>
 8018cb8:	2000      	movs	r0, #0
 8018cba:	ecbd 8b02 	vpop	{d8}
 8018cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018cc2:	f000 bf31 	b.w	8019b28 <__math_uflowf>
 8018cc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8018cca:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018cce:	eddf 6a90 	vldr	s13, [pc, #576]	; 8018f10 <__ieee754_powf+0x3c8>
 8018cd2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8018cd6:	eee0 6a67 	vfms.f32	s13, s0, s15
 8018cda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8018cde:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8018ce2:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018cea:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8018f14 <__ieee754_powf+0x3cc>
 8018cee:	ee67 7a67 	vnmul.f32	s15, s14, s15
 8018cf2:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8018f18 <__ieee754_powf+0x3d0>
 8018cf6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018cfa:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8018f1c <__ieee754_powf+0x3d4>
 8018cfe:	eef0 6a67 	vmov.f32	s13, s15
 8018d02:	eee0 6a07 	vfma.f32	s13, s0, s14
 8018d06:	ee16 3a90 	vmov	r3, s13
 8018d0a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018d0e:	f023 030f 	bic.w	r3, r3, #15
 8018d12:	ee00 3a90 	vmov	s1, r3
 8018d16:	eee0 0a47 	vfms.f32	s1, s0, s14
 8018d1a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018d1e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8018d22:	f024 040f 	bic.w	r4, r4, #15
 8018d26:	ee07 4a10 	vmov	s14, r4
 8018d2a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018d2e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8018d32:	ee07 3a90 	vmov	s15, r3
 8018d36:	eee7 0a27 	vfma.f32	s1, s14, s15
 8018d3a:	3f01      	subs	r7, #1
 8018d3c:	ea57 0200 	orrs.w	r2, r7, r0
 8018d40:	ee07 4a10 	vmov	s14, r4
 8018d44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018d48:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8018d4c:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018d50:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8018d54:	ee17 4a10 	vmov	r4, s14
 8018d58:	bf08      	it	eq
 8018d5a:	eeb0 8a40 	vmoveq.f32	s16, s0
 8018d5e:	2c00      	cmp	r4, #0
 8018d60:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8018d64:	f340 817e 	ble.w	8019064 <__ieee754_powf+0x51c>
 8018d68:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8018d6c:	f340 80f8 	ble.w	8018f60 <__ieee754_powf+0x418>
 8018d70:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d78:	bf4c      	ite	mi
 8018d7a:	2001      	movmi	r0, #1
 8018d7c:	2000      	movpl	r0, #0
 8018d7e:	e790      	b.n	8018ca2 <__ieee754_powf+0x15a>
 8018d80:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8018d84:	bf01      	itttt	eq
 8018d86:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8018f20 <__ieee754_powf+0x3d8>
 8018d8a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018d8e:	f06f 0217 	mvneq.w	r2, #23
 8018d92:	ee17 5a90 	vmoveq	r5, s15
 8018d96:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8018d9a:	bf18      	it	ne
 8018d9c:	2200      	movne	r2, #0
 8018d9e:	3b7f      	subs	r3, #127	; 0x7f
 8018da0:	4413      	add	r3, r2
 8018da2:	4a60      	ldr	r2, [pc, #384]	; (8018f24 <__ieee754_powf+0x3dc>)
 8018da4:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8018da8:	4295      	cmp	r5, r2
 8018daa:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8018dae:	dd06      	ble.n	8018dbe <__ieee754_powf+0x276>
 8018db0:	4a5d      	ldr	r2, [pc, #372]	; (8018f28 <__ieee754_powf+0x3e0>)
 8018db2:	4295      	cmp	r5, r2
 8018db4:	f340 80a4 	ble.w	8018f00 <__ieee754_powf+0x3b8>
 8018db8:	3301      	adds	r3, #1
 8018dba:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8018dbe:	2500      	movs	r5, #0
 8018dc0:	4a5a      	ldr	r2, [pc, #360]	; (8018f2c <__ieee754_powf+0x3e4>)
 8018dc2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8018dc6:	ee07 1a90 	vmov	s15, r1
 8018dca:	ed92 7a00 	vldr	s14, [r2]
 8018dce:	4a58      	ldr	r2, [pc, #352]	; (8018f30 <__ieee754_powf+0x3e8>)
 8018dd0:	ee37 6a27 	vadd.f32	s12, s14, s15
 8018dd4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8018dd8:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8018ddc:	1049      	asrs	r1, r1, #1
 8018dde:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8018de2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8018de6:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8018dea:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8018dee:	ee06 1a10 	vmov	s12, r1
 8018df2:	ee65 4a26 	vmul.f32	s9, s10, s13
 8018df6:	ee36 7a47 	vsub.f32	s14, s12, s14
 8018dfa:	ee14 6a90 	vmov	r6, s9
 8018dfe:	4016      	ands	r6, r2
 8018e00:	ee05 6a90 	vmov	s11, r6
 8018e04:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8018e08:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018e0c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8018f34 <__ieee754_powf+0x3ec>
 8018e10:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8018e14:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8018e18:	ee25 6a26 	vmul.f32	s12, s10, s13
 8018e1c:	eddf 6a46 	vldr	s13, [pc, #280]	; 8018f38 <__ieee754_powf+0x3f0>
 8018e20:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018e24:	eddf 6a45 	vldr	s13, [pc, #276]	; 8018f3c <__ieee754_powf+0x3f4>
 8018e28:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018e2c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8018f10 <__ieee754_powf+0x3c8>
 8018e30:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018e34:	eddf 6a42 	vldr	s13, [pc, #264]	; 8018f40 <__ieee754_powf+0x3f8>
 8018e38:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018e3c:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8018f44 <__ieee754_powf+0x3fc>
 8018e40:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018e44:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8018e48:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8018e4c:	ee66 6a86 	vmul.f32	s13, s13, s12
 8018e50:	eee5 6a07 	vfma.f32	s13, s10, s14
 8018e54:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8018e58:	eef0 7a45 	vmov.f32	s15, s10
 8018e5c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8018e60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018e64:	ee17 1a90 	vmov	r1, s15
 8018e68:	4011      	ands	r1, r2
 8018e6a:	ee07 1a90 	vmov	s15, r1
 8018e6e:	ee37 7ac5 	vsub.f32	s14, s15, s10
 8018e72:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8018e76:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8018e7a:	ee27 7a24 	vmul.f32	s14, s14, s9
 8018e7e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018e82:	eeb0 6a47 	vmov.f32	s12, s14
 8018e86:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8018e8a:	ee16 1a10 	vmov	r1, s12
 8018e8e:	4011      	ands	r1, r2
 8018e90:	ee06 1a90 	vmov	s13, r1
 8018e94:	eee5 6ae7 	vfms.f32	s13, s11, s15
 8018e98:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8018f48 <__ieee754_powf+0x400>
 8018e9c:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8018f4c <__ieee754_powf+0x404>
 8018ea0:	ee37 7a66 	vsub.f32	s14, s14, s13
 8018ea4:	ee06 1a10 	vmov	s12, r1
 8018ea8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018eac:	eddf 7a28 	vldr	s15, [pc, #160]	; 8018f50 <__ieee754_powf+0x408>
 8018eb0:	4928      	ldr	r1, [pc, #160]	; (8018f54 <__ieee754_powf+0x40c>)
 8018eb2:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018eb6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8018eba:	edd1 7a00 	vldr	s15, [r1]
 8018ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018ec2:	ee07 3a90 	vmov	s15, r3
 8018ec6:	4b24      	ldr	r3, [pc, #144]	; (8018f58 <__ieee754_powf+0x410>)
 8018ec8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8018ecc:	eef0 7a47 	vmov.f32	s15, s14
 8018ed0:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018ed4:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8018ed8:	edd5 0a00 	vldr	s1, [r5]
 8018edc:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018ee0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018ee4:	ee17 3a90 	vmov	r3, s15
 8018ee8:	4013      	ands	r3, r2
 8018eea:	ee07 3a90 	vmov	s15, r3
 8018eee:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8018ef2:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8018ef6:	eee6 6a65 	vfms.f32	s13, s12, s11
 8018efa:	ee77 7a66 	vsub.f32	s15, s14, s13
 8018efe:	e70e      	b.n	8018d1e <__ieee754_powf+0x1d6>
 8018f00:	2501      	movs	r5, #1
 8018f02:	e75d      	b.n	8018dc0 <__ieee754_powf+0x278>
 8018f04:	00000000 	.word	0x00000000
 8018f08:	3f7ffff3 	.word	0x3f7ffff3
 8018f0c:	3f800007 	.word	0x3f800007
 8018f10:	3eaaaaab 	.word	0x3eaaaaab
 8018f14:	3fb8aa3b 	.word	0x3fb8aa3b
 8018f18:	36eca570 	.word	0x36eca570
 8018f1c:	3fb8aa00 	.word	0x3fb8aa00
 8018f20:	4b800000 	.word	0x4b800000
 8018f24:	001cc471 	.word	0x001cc471
 8018f28:	005db3d6 	.word	0x005db3d6
 8018f2c:	08063000 	.word	0x08063000
 8018f30:	fffff000 	.word	0xfffff000
 8018f34:	3e6c3255 	.word	0x3e6c3255
 8018f38:	3e53f142 	.word	0x3e53f142
 8018f3c:	3e8ba305 	.word	0x3e8ba305
 8018f40:	3edb6db7 	.word	0x3edb6db7
 8018f44:	3f19999a 	.word	0x3f19999a
 8018f48:	3f76384f 	.word	0x3f76384f
 8018f4c:	3f763800 	.word	0x3f763800
 8018f50:	369dc3a0 	.word	0x369dc3a0
 8018f54:	08063010 	.word	0x08063010
 8018f58:	08063008 	.word	0x08063008
 8018f5c:	3338aa3c 	.word	0x3338aa3c
 8018f60:	f040 8095 	bne.w	801908e <__ieee754_powf+0x546>
 8018f64:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8018f5c <__ieee754_powf+0x414>
 8018f68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018f6c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8018f70:	eef4 6ac7 	vcmpe.f32	s13, s14
 8018f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f78:	f73f aefa 	bgt.w	8018d70 <__ieee754_powf+0x228>
 8018f7c:	15db      	asrs	r3, r3, #23
 8018f7e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8018f82:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8018f86:	4103      	asrs	r3, r0
 8018f88:	4423      	add	r3, r4
 8018f8a:	494b      	ldr	r1, [pc, #300]	; (80190b8 <__ieee754_powf+0x570>)
 8018f8c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018f90:	3a7f      	subs	r2, #127	; 0x7f
 8018f92:	4111      	asrs	r1, r2
 8018f94:	ea23 0101 	bic.w	r1, r3, r1
 8018f98:	ee07 1a10 	vmov	s14, r1
 8018f9c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8018fa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8018fa4:	f1c2 0217 	rsb	r2, r2, #23
 8018fa8:	4110      	asrs	r0, r2
 8018faa:	2c00      	cmp	r4, #0
 8018fac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018fb0:	bfb8      	it	lt
 8018fb2:	4240      	neglt	r0, r0
 8018fb4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8018fb8:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80190bc <__ieee754_powf+0x574>
 8018fbc:	eddf 6a40 	vldr	s13, [pc, #256]	; 80190c0 <__ieee754_powf+0x578>
 8018fc0:	ee17 3a10 	vmov	r3, s14
 8018fc4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8018fc8:	f023 030f 	bic.w	r3, r3, #15
 8018fcc:	ee07 3a10 	vmov	s14, r3
 8018fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018fd4:	ee27 0a00 	vmul.f32	s0, s14, s0
 8018fd8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018fdc:	eddf 7a39 	vldr	s15, [pc, #228]	; 80190c4 <__ieee754_powf+0x57c>
 8018fe0:	eea0 0aa7 	vfma.f32	s0, s1, s15
 8018fe4:	eef0 7a40 	vmov.f32	s15, s0
 8018fe8:	eee7 7a26 	vfma.f32	s15, s14, s13
 8018fec:	eeb0 6a67 	vmov.f32	s12, s15
 8018ff0:	eea7 6a66 	vfms.f32	s12, s14, s13
 8018ff4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8018ff8:	ee30 0a46 	vsub.f32	s0, s0, s12
 8018ffc:	eddf 6a32 	vldr	s13, [pc, #200]	; 80190c8 <__ieee754_powf+0x580>
 8019000:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80190cc <__ieee754_powf+0x584>
 8019004:	eee7 6a06 	vfma.f32	s13, s14, s12
 8019008:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80190d0 <__ieee754_powf+0x588>
 801900c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019010:	eddf 6a30 	vldr	s13, [pc, #192]	; 80190d4 <__ieee754_powf+0x58c>
 8019014:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019018:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80190d8 <__ieee754_powf+0x590>
 801901c:	eea6 6a87 	vfma.f32	s12, s13, s14
 8019020:	eef0 6a67 	vmov.f32	s13, s15
 8019024:	eee6 6a47 	vfms.f32	s13, s12, s14
 8019028:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801902c:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8019030:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8019034:	eea7 0a80 	vfma.f32	s0, s15, s0
 8019038:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801903c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8019040:	ee70 7a67 	vsub.f32	s15, s0, s15
 8019044:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019048:	ee30 0a67 	vsub.f32	s0, s0, s15
 801904c:	ee10 3a10 	vmov	r3, s0
 8019050:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8019054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8019058:	da1f      	bge.n	801909a <__ieee754_powf+0x552>
 801905a:	f000 fe91 	bl	8019d80 <scalbnf>
 801905e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8019062:	e589      	b.n	8018b78 <__ieee754_powf+0x30>
 8019064:	4a1d      	ldr	r2, [pc, #116]	; (80190dc <__ieee754_powf+0x594>)
 8019066:	4293      	cmp	r3, r2
 8019068:	dd07      	ble.n	801907a <__ieee754_powf+0x532>
 801906a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801906e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019072:	bf4c      	ite	mi
 8019074:	2001      	movmi	r0, #1
 8019076:	2000      	movpl	r0, #0
 8019078:	e61f      	b.n	8018cba <__ieee754_powf+0x172>
 801907a:	d108      	bne.n	801908e <__ieee754_powf+0x546>
 801907c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8019080:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019088:	f6ff af78 	blt.w	8018f7c <__ieee754_powf+0x434>
 801908c:	e7ed      	b.n	801906a <__ieee754_powf+0x522>
 801908e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8019092:	f73f af73 	bgt.w	8018f7c <__ieee754_powf+0x434>
 8019096:	2000      	movs	r0, #0
 8019098:	e78c      	b.n	8018fb4 <__ieee754_powf+0x46c>
 801909a:	ee00 3a10 	vmov	s0, r3
 801909e:	e7de      	b.n	801905e <__ieee754_powf+0x516>
 80190a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80190a4:	e568      	b.n	8018b78 <__ieee754_powf+0x30>
 80190a6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80190e0 <__ieee754_powf+0x598>
 80190aa:	e565      	b.n	8018b78 <__ieee754_powf+0x30>
 80190ac:	eeb0 0a48 	vmov.f32	s0, s16
 80190b0:	e562      	b.n	8018b78 <__ieee754_powf+0x30>
 80190b2:	2700      	movs	r7, #0
 80190b4:	e58d      	b.n	8018bd2 <__ieee754_powf+0x8a>
 80190b6:	bf00      	nop
 80190b8:	007fffff 	.word	0x007fffff
 80190bc:	35bfbe8c 	.word	0x35bfbe8c
 80190c0:	3f317200 	.word	0x3f317200
 80190c4:	3f317218 	.word	0x3f317218
 80190c8:	b5ddea0e 	.word	0xb5ddea0e
 80190cc:	3331bb4c 	.word	0x3331bb4c
 80190d0:	388ab355 	.word	0x388ab355
 80190d4:	bb360b61 	.word	0xbb360b61
 80190d8:	3e2aaaab 	.word	0x3e2aaaab
 80190dc:	43160000 	.word	0x43160000
 80190e0:	00000000 	.word	0x00000000

080190e4 <__ieee754_sqrtf>:
 80190e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80190e8:	4770      	bx	lr
 80190ea:	0000      	movs	r0, r0
 80190ec:	0000      	movs	r0, r0
	...

080190f0 <__kernel_cos>:
 80190f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190f4:	ec57 6b10 	vmov	r6, r7, d0
 80190f8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80190fc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019100:	ed8d 1b00 	vstr	d1, [sp]
 8019104:	da07      	bge.n	8019116 <__kernel_cos+0x26>
 8019106:	ee10 0a10 	vmov	r0, s0
 801910a:	4639      	mov	r1, r7
 801910c:	f7e7 fd34 	bl	8000b78 <__aeabi_d2iz>
 8019110:	2800      	cmp	r0, #0
 8019112:	f000 8088 	beq.w	8019226 <__kernel_cos+0x136>
 8019116:	4632      	mov	r2, r6
 8019118:	463b      	mov	r3, r7
 801911a:	4630      	mov	r0, r6
 801911c:	4639      	mov	r1, r7
 801911e:	f7e7 fa7b 	bl	8000618 <__aeabi_dmul>
 8019122:	4b51      	ldr	r3, [pc, #324]	; (8019268 <__kernel_cos+0x178>)
 8019124:	2200      	movs	r2, #0
 8019126:	4604      	mov	r4, r0
 8019128:	460d      	mov	r5, r1
 801912a:	f7e7 fa75 	bl	8000618 <__aeabi_dmul>
 801912e:	a340      	add	r3, pc, #256	; (adr r3, 8019230 <__kernel_cos+0x140>)
 8019130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019134:	4682      	mov	sl, r0
 8019136:	468b      	mov	fp, r1
 8019138:	4620      	mov	r0, r4
 801913a:	4629      	mov	r1, r5
 801913c:	f7e7 fa6c 	bl	8000618 <__aeabi_dmul>
 8019140:	a33d      	add	r3, pc, #244	; (adr r3, 8019238 <__kernel_cos+0x148>)
 8019142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019146:	f7e7 f8b1 	bl	80002ac <__adddf3>
 801914a:	4622      	mov	r2, r4
 801914c:	462b      	mov	r3, r5
 801914e:	f7e7 fa63 	bl	8000618 <__aeabi_dmul>
 8019152:	a33b      	add	r3, pc, #236	; (adr r3, 8019240 <__kernel_cos+0x150>)
 8019154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019158:	f7e7 f8a6 	bl	80002a8 <__aeabi_dsub>
 801915c:	4622      	mov	r2, r4
 801915e:	462b      	mov	r3, r5
 8019160:	f7e7 fa5a 	bl	8000618 <__aeabi_dmul>
 8019164:	a338      	add	r3, pc, #224	; (adr r3, 8019248 <__kernel_cos+0x158>)
 8019166:	e9d3 2300 	ldrd	r2, r3, [r3]
 801916a:	f7e7 f89f 	bl	80002ac <__adddf3>
 801916e:	4622      	mov	r2, r4
 8019170:	462b      	mov	r3, r5
 8019172:	f7e7 fa51 	bl	8000618 <__aeabi_dmul>
 8019176:	a336      	add	r3, pc, #216	; (adr r3, 8019250 <__kernel_cos+0x160>)
 8019178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801917c:	f7e7 f894 	bl	80002a8 <__aeabi_dsub>
 8019180:	4622      	mov	r2, r4
 8019182:	462b      	mov	r3, r5
 8019184:	f7e7 fa48 	bl	8000618 <__aeabi_dmul>
 8019188:	a333      	add	r3, pc, #204	; (adr r3, 8019258 <__kernel_cos+0x168>)
 801918a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801918e:	f7e7 f88d 	bl	80002ac <__adddf3>
 8019192:	4622      	mov	r2, r4
 8019194:	462b      	mov	r3, r5
 8019196:	f7e7 fa3f 	bl	8000618 <__aeabi_dmul>
 801919a:	4622      	mov	r2, r4
 801919c:	462b      	mov	r3, r5
 801919e:	f7e7 fa3b 	bl	8000618 <__aeabi_dmul>
 80191a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80191a6:	4604      	mov	r4, r0
 80191a8:	460d      	mov	r5, r1
 80191aa:	4630      	mov	r0, r6
 80191ac:	4639      	mov	r1, r7
 80191ae:	f7e7 fa33 	bl	8000618 <__aeabi_dmul>
 80191b2:	460b      	mov	r3, r1
 80191b4:	4602      	mov	r2, r0
 80191b6:	4629      	mov	r1, r5
 80191b8:	4620      	mov	r0, r4
 80191ba:	f7e7 f875 	bl	80002a8 <__aeabi_dsub>
 80191be:	4b2b      	ldr	r3, [pc, #172]	; (801926c <__kernel_cos+0x17c>)
 80191c0:	4598      	cmp	r8, r3
 80191c2:	4606      	mov	r6, r0
 80191c4:	460f      	mov	r7, r1
 80191c6:	dc10      	bgt.n	80191ea <__kernel_cos+0xfa>
 80191c8:	4602      	mov	r2, r0
 80191ca:	460b      	mov	r3, r1
 80191cc:	4650      	mov	r0, sl
 80191ce:	4659      	mov	r1, fp
 80191d0:	f7e7 f86a 	bl	80002a8 <__aeabi_dsub>
 80191d4:	460b      	mov	r3, r1
 80191d6:	4926      	ldr	r1, [pc, #152]	; (8019270 <__kernel_cos+0x180>)
 80191d8:	4602      	mov	r2, r0
 80191da:	2000      	movs	r0, #0
 80191dc:	f7e7 f864 	bl	80002a8 <__aeabi_dsub>
 80191e0:	ec41 0b10 	vmov	d0, r0, r1
 80191e4:	b003      	add	sp, #12
 80191e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ea:	4b22      	ldr	r3, [pc, #136]	; (8019274 <__kernel_cos+0x184>)
 80191ec:	4920      	ldr	r1, [pc, #128]	; (8019270 <__kernel_cos+0x180>)
 80191ee:	4598      	cmp	r8, r3
 80191f0:	bfcc      	ite	gt
 80191f2:	4d21      	ldrgt	r5, [pc, #132]	; (8019278 <__kernel_cos+0x188>)
 80191f4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80191f8:	2400      	movs	r4, #0
 80191fa:	4622      	mov	r2, r4
 80191fc:	462b      	mov	r3, r5
 80191fe:	2000      	movs	r0, #0
 8019200:	f7e7 f852 	bl	80002a8 <__aeabi_dsub>
 8019204:	4622      	mov	r2, r4
 8019206:	4680      	mov	r8, r0
 8019208:	4689      	mov	r9, r1
 801920a:	462b      	mov	r3, r5
 801920c:	4650      	mov	r0, sl
 801920e:	4659      	mov	r1, fp
 8019210:	f7e7 f84a 	bl	80002a8 <__aeabi_dsub>
 8019214:	4632      	mov	r2, r6
 8019216:	463b      	mov	r3, r7
 8019218:	f7e7 f846 	bl	80002a8 <__aeabi_dsub>
 801921c:	4602      	mov	r2, r0
 801921e:	460b      	mov	r3, r1
 8019220:	4640      	mov	r0, r8
 8019222:	4649      	mov	r1, r9
 8019224:	e7da      	b.n	80191dc <__kernel_cos+0xec>
 8019226:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8019260 <__kernel_cos+0x170>
 801922a:	e7db      	b.n	80191e4 <__kernel_cos+0xf4>
 801922c:	f3af 8000 	nop.w
 8019230:	be8838d4 	.word	0xbe8838d4
 8019234:	bda8fae9 	.word	0xbda8fae9
 8019238:	bdb4b1c4 	.word	0xbdb4b1c4
 801923c:	3e21ee9e 	.word	0x3e21ee9e
 8019240:	809c52ad 	.word	0x809c52ad
 8019244:	3e927e4f 	.word	0x3e927e4f
 8019248:	19cb1590 	.word	0x19cb1590
 801924c:	3efa01a0 	.word	0x3efa01a0
 8019250:	16c15177 	.word	0x16c15177
 8019254:	3f56c16c 	.word	0x3f56c16c
 8019258:	5555554c 	.word	0x5555554c
 801925c:	3fa55555 	.word	0x3fa55555
 8019260:	00000000 	.word	0x00000000
 8019264:	3ff00000 	.word	0x3ff00000
 8019268:	3fe00000 	.word	0x3fe00000
 801926c:	3fd33332 	.word	0x3fd33332
 8019270:	3ff00000 	.word	0x3ff00000
 8019274:	3fe90000 	.word	0x3fe90000
 8019278:	3fd20000 	.word	0x3fd20000
 801927c:	00000000 	.word	0x00000000

08019280 <__kernel_rem_pio2>:
 8019280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019284:	ed2d 8b02 	vpush	{d8}
 8019288:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801928c:	f112 0f14 	cmn.w	r2, #20
 8019290:	9308      	str	r3, [sp, #32]
 8019292:	9101      	str	r1, [sp, #4]
 8019294:	4bc4      	ldr	r3, [pc, #784]	; (80195a8 <__kernel_rem_pio2+0x328>)
 8019296:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8019298:	900b      	str	r0, [sp, #44]	; 0x2c
 801929a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801929e:	9302      	str	r3, [sp, #8]
 80192a0:	9b08      	ldr	r3, [sp, #32]
 80192a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80192a6:	bfa8      	it	ge
 80192a8:	1ed4      	subge	r4, r2, #3
 80192aa:	9306      	str	r3, [sp, #24]
 80192ac:	bfb2      	itee	lt
 80192ae:	2400      	movlt	r4, #0
 80192b0:	2318      	movge	r3, #24
 80192b2:	fb94 f4f3 	sdivge	r4, r4, r3
 80192b6:	f06f 0317 	mvn.w	r3, #23
 80192ba:	fb04 3303 	mla	r3, r4, r3, r3
 80192be:	eb03 0a02 	add.w	sl, r3, r2
 80192c2:	9b02      	ldr	r3, [sp, #8]
 80192c4:	9a06      	ldr	r2, [sp, #24]
 80192c6:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8019598 <__kernel_rem_pio2+0x318>
 80192ca:	eb03 0802 	add.w	r8, r3, r2
 80192ce:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80192d0:	1aa7      	subs	r7, r4, r2
 80192d2:	ae22      	add	r6, sp, #136	; 0x88
 80192d4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80192d8:	2500      	movs	r5, #0
 80192da:	4545      	cmp	r5, r8
 80192dc:	dd13      	ble.n	8019306 <__kernel_rem_pio2+0x86>
 80192de:	9b08      	ldr	r3, [sp, #32]
 80192e0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8019598 <__kernel_rem_pio2+0x318>
 80192e4:	aa22      	add	r2, sp, #136	; 0x88
 80192e6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80192ea:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80192ee:	f04f 0800 	mov.w	r8, #0
 80192f2:	9b02      	ldr	r3, [sp, #8]
 80192f4:	4598      	cmp	r8, r3
 80192f6:	dc2f      	bgt.n	8019358 <__kernel_rem_pio2+0xd8>
 80192f8:	ed8d 8b04 	vstr	d8, [sp, #16]
 80192fc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8019300:	462f      	mov	r7, r5
 8019302:	2600      	movs	r6, #0
 8019304:	e01b      	b.n	801933e <__kernel_rem_pio2+0xbe>
 8019306:	42ef      	cmn	r7, r5
 8019308:	d407      	bmi.n	801931a <__kernel_rem_pio2+0x9a>
 801930a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801930e:	f7e7 f919 	bl	8000544 <__aeabi_i2d>
 8019312:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019316:	3501      	adds	r5, #1
 8019318:	e7df      	b.n	80192da <__kernel_rem_pio2+0x5a>
 801931a:	ec51 0b18 	vmov	r0, r1, d8
 801931e:	e7f8      	b.n	8019312 <__kernel_rem_pio2+0x92>
 8019320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019324:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8019328:	f7e7 f976 	bl	8000618 <__aeabi_dmul>
 801932c:	4602      	mov	r2, r0
 801932e:	460b      	mov	r3, r1
 8019330:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8019334:	f7e6 ffba 	bl	80002ac <__adddf3>
 8019338:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801933c:	3601      	adds	r6, #1
 801933e:	9b06      	ldr	r3, [sp, #24]
 8019340:	429e      	cmp	r6, r3
 8019342:	f1a7 0708 	sub.w	r7, r7, #8
 8019346:	ddeb      	ble.n	8019320 <__kernel_rem_pio2+0xa0>
 8019348:	ed9d 7b04 	vldr	d7, [sp, #16]
 801934c:	f108 0801 	add.w	r8, r8, #1
 8019350:	ecab 7b02 	vstmia	fp!, {d7}
 8019354:	3508      	adds	r5, #8
 8019356:	e7cc      	b.n	80192f2 <__kernel_rem_pio2+0x72>
 8019358:	9b02      	ldr	r3, [sp, #8]
 801935a:	aa0e      	add	r2, sp, #56	; 0x38
 801935c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019360:	930d      	str	r3, [sp, #52]	; 0x34
 8019362:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8019364:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019368:	9c02      	ldr	r4, [sp, #8]
 801936a:	930c      	str	r3, [sp, #48]	; 0x30
 801936c:	00e3      	lsls	r3, r4, #3
 801936e:	930a      	str	r3, [sp, #40]	; 0x28
 8019370:	ab9a      	add	r3, sp, #616	; 0x268
 8019372:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019376:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 801937a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 801937e:	ab72      	add	r3, sp, #456	; 0x1c8
 8019380:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8019384:	46c3      	mov	fp, r8
 8019386:	46a1      	mov	r9, r4
 8019388:	f1b9 0f00 	cmp.w	r9, #0
 801938c:	f1a5 0508 	sub.w	r5, r5, #8
 8019390:	dc77      	bgt.n	8019482 <__kernel_rem_pio2+0x202>
 8019392:	ec47 6b10 	vmov	d0, r6, r7
 8019396:	4650      	mov	r0, sl
 8019398:	f000 fc5e 	bl	8019c58 <scalbn>
 801939c:	ec57 6b10 	vmov	r6, r7, d0
 80193a0:	2200      	movs	r2, #0
 80193a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80193a6:	ee10 0a10 	vmov	r0, s0
 80193aa:	4639      	mov	r1, r7
 80193ac:	f7e7 f934 	bl	8000618 <__aeabi_dmul>
 80193b0:	ec41 0b10 	vmov	d0, r0, r1
 80193b4:	f000 fbd0 	bl	8019b58 <floor>
 80193b8:	4b7c      	ldr	r3, [pc, #496]	; (80195ac <__kernel_rem_pio2+0x32c>)
 80193ba:	ec51 0b10 	vmov	r0, r1, d0
 80193be:	2200      	movs	r2, #0
 80193c0:	f7e7 f92a 	bl	8000618 <__aeabi_dmul>
 80193c4:	4602      	mov	r2, r0
 80193c6:	460b      	mov	r3, r1
 80193c8:	4630      	mov	r0, r6
 80193ca:	4639      	mov	r1, r7
 80193cc:	f7e6 ff6c 	bl	80002a8 <__aeabi_dsub>
 80193d0:	460f      	mov	r7, r1
 80193d2:	4606      	mov	r6, r0
 80193d4:	f7e7 fbd0 	bl	8000b78 <__aeabi_d2iz>
 80193d8:	9004      	str	r0, [sp, #16]
 80193da:	f7e7 f8b3 	bl	8000544 <__aeabi_i2d>
 80193de:	4602      	mov	r2, r0
 80193e0:	460b      	mov	r3, r1
 80193e2:	4630      	mov	r0, r6
 80193e4:	4639      	mov	r1, r7
 80193e6:	f7e6 ff5f 	bl	80002a8 <__aeabi_dsub>
 80193ea:	f1ba 0f00 	cmp.w	sl, #0
 80193ee:	4606      	mov	r6, r0
 80193f0:	460f      	mov	r7, r1
 80193f2:	dd6d      	ble.n	80194d0 <__kernel_rem_pio2+0x250>
 80193f4:	1e62      	subs	r2, r4, #1
 80193f6:	ab0e      	add	r3, sp, #56	; 0x38
 80193f8:	9d04      	ldr	r5, [sp, #16]
 80193fa:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80193fe:	f1ca 0118 	rsb	r1, sl, #24
 8019402:	fa40 f301 	asr.w	r3, r0, r1
 8019406:	441d      	add	r5, r3
 8019408:	408b      	lsls	r3, r1
 801940a:	1ac0      	subs	r0, r0, r3
 801940c:	ab0e      	add	r3, sp, #56	; 0x38
 801940e:	9504      	str	r5, [sp, #16]
 8019410:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8019414:	f1ca 0317 	rsb	r3, sl, #23
 8019418:	fa40 fb03 	asr.w	fp, r0, r3
 801941c:	f1bb 0f00 	cmp.w	fp, #0
 8019420:	dd65      	ble.n	80194ee <__kernel_rem_pio2+0x26e>
 8019422:	9b04      	ldr	r3, [sp, #16]
 8019424:	2200      	movs	r2, #0
 8019426:	3301      	adds	r3, #1
 8019428:	9304      	str	r3, [sp, #16]
 801942a:	4615      	mov	r5, r2
 801942c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8019430:	4294      	cmp	r4, r2
 8019432:	f300 809c 	bgt.w	801956e <__kernel_rem_pio2+0x2ee>
 8019436:	f1ba 0f00 	cmp.w	sl, #0
 801943a:	dd07      	ble.n	801944c <__kernel_rem_pio2+0x1cc>
 801943c:	f1ba 0f01 	cmp.w	sl, #1
 8019440:	f000 80c0 	beq.w	80195c4 <__kernel_rem_pio2+0x344>
 8019444:	f1ba 0f02 	cmp.w	sl, #2
 8019448:	f000 80c6 	beq.w	80195d8 <__kernel_rem_pio2+0x358>
 801944c:	f1bb 0f02 	cmp.w	fp, #2
 8019450:	d14d      	bne.n	80194ee <__kernel_rem_pio2+0x26e>
 8019452:	4632      	mov	r2, r6
 8019454:	463b      	mov	r3, r7
 8019456:	4956      	ldr	r1, [pc, #344]	; (80195b0 <__kernel_rem_pio2+0x330>)
 8019458:	2000      	movs	r0, #0
 801945a:	f7e6 ff25 	bl	80002a8 <__aeabi_dsub>
 801945e:	4606      	mov	r6, r0
 8019460:	460f      	mov	r7, r1
 8019462:	2d00      	cmp	r5, #0
 8019464:	d043      	beq.n	80194ee <__kernel_rem_pio2+0x26e>
 8019466:	4650      	mov	r0, sl
 8019468:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80195a0 <__kernel_rem_pio2+0x320>
 801946c:	f000 fbf4 	bl	8019c58 <scalbn>
 8019470:	4630      	mov	r0, r6
 8019472:	4639      	mov	r1, r7
 8019474:	ec53 2b10 	vmov	r2, r3, d0
 8019478:	f7e6 ff16 	bl	80002a8 <__aeabi_dsub>
 801947c:	4606      	mov	r6, r0
 801947e:	460f      	mov	r7, r1
 8019480:	e035      	b.n	80194ee <__kernel_rem_pio2+0x26e>
 8019482:	4b4c      	ldr	r3, [pc, #304]	; (80195b4 <__kernel_rem_pio2+0x334>)
 8019484:	2200      	movs	r2, #0
 8019486:	4630      	mov	r0, r6
 8019488:	4639      	mov	r1, r7
 801948a:	f7e7 f8c5 	bl	8000618 <__aeabi_dmul>
 801948e:	f7e7 fb73 	bl	8000b78 <__aeabi_d2iz>
 8019492:	f7e7 f857 	bl	8000544 <__aeabi_i2d>
 8019496:	4602      	mov	r2, r0
 8019498:	460b      	mov	r3, r1
 801949a:	ec43 2b18 	vmov	d8, r2, r3
 801949e:	4b46      	ldr	r3, [pc, #280]	; (80195b8 <__kernel_rem_pio2+0x338>)
 80194a0:	2200      	movs	r2, #0
 80194a2:	f7e7 f8b9 	bl	8000618 <__aeabi_dmul>
 80194a6:	4602      	mov	r2, r0
 80194a8:	460b      	mov	r3, r1
 80194aa:	4630      	mov	r0, r6
 80194ac:	4639      	mov	r1, r7
 80194ae:	f7e6 fefb 	bl	80002a8 <__aeabi_dsub>
 80194b2:	f7e7 fb61 	bl	8000b78 <__aeabi_d2iz>
 80194b6:	e9d5 2300 	ldrd	r2, r3, [r5]
 80194ba:	f84b 0b04 	str.w	r0, [fp], #4
 80194be:	ec51 0b18 	vmov	r0, r1, d8
 80194c2:	f7e6 fef3 	bl	80002ac <__adddf3>
 80194c6:	f109 39ff 	add.w	r9, r9, #4294967295
 80194ca:	4606      	mov	r6, r0
 80194cc:	460f      	mov	r7, r1
 80194ce:	e75b      	b.n	8019388 <__kernel_rem_pio2+0x108>
 80194d0:	d106      	bne.n	80194e0 <__kernel_rem_pio2+0x260>
 80194d2:	1e63      	subs	r3, r4, #1
 80194d4:	aa0e      	add	r2, sp, #56	; 0x38
 80194d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80194da:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80194de:	e79d      	b.n	801941c <__kernel_rem_pio2+0x19c>
 80194e0:	4b36      	ldr	r3, [pc, #216]	; (80195bc <__kernel_rem_pio2+0x33c>)
 80194e2:	2200      	movs	r2, #0
 80194e4:	f7e7 fb1e 	bl	8000b24 <__aeabi_dcmpge>
 80194e8:	2800      	cmp	r0, #0
 80194ea:	d13d      	bne.n	8019568 <__kernel_rem_pio2+0x2e8>
 80194ec:	4683      	mov	fp, r0
 80194ee:	2200      	movs	r2, #0
 80194f0:	2300      	movs	r3, #0
 80194f2:	4630      	mov	r0, r6
 80194f4:	4639      	mov	r1, r7
 80194f6:	f7e7 faf7 	bl	8000ae8 <__aeabi_dcmpeq>
 80194fa:	2800      	cmp	r0, #0
 80194fc:	f000 80c0 	beq.w	8019680 <__kernel_rem_pio2+0x400>
 8019500:	1e65      	subs	r5, r4, #1
 8019502:	462b      	mov	r3, r5
 8019504:	2200      	movs	r2, #0
 8019506:	9902      	ldr	r1, [sp, #8]
 8019508:	428b      	cmp	r3, r1
 801950a:	da6c      	bge.n	80195e6 <__kernel_rem_pio2+0x366>
 801950c:	2a00      	cmp	r2, #0
 801950e:	f000 8089 	beq.w	8019624 <__kernel_rem_pio2+0x3a4>
 8019512:	ab0e      	add	r3, sp, #56	; 0x38
 8019514:	f1aa 0a18 	sub.w	sl, sl, #24
 8019518:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801951c:	2b00      	cmp	r3, #0
 801951e:	f000 80ad 	beq.w	801967c <__kernel_rem_pio2+0x3fc>
 8019522:	4650      	mov	r0, sl
 8019524:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80195a0 <__kernel_rem_pio2+0x320>
 8019528:	f000 fb96 	bl	8019c58 <scalbn>
 801952c:	ab9a      	add	r3, sp, #616	; 0x268
 801952e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8019532:	ec57 6b10 	vmov	r6, r7, d0
 8019536:	00ec      	lsls	r4, r5, #3
 8019538:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801953c:	46aa      	mov	sl, r5
 801953e:	f1ba 0f00 	cmp.w	sl, #0
 8019542:	f280 80d6 	bge.w	80196f2 <__kernel_rem_pio2+0x472>
 8019546:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8019598 <__kernel_rem_pio2+0x318>
 801954a:	462e      	mov	r6, r5
 801954c:	2e00      	cmp	r6, #0
 801954e:	f2c0 8104 	blt.w	801975a <__kernel_rem_pio2+0x4da>
 8019552:	ab72      	add	r3, sp, #456	; 0x1c8
 8019554:	ed8d 8b06 	vstr	d8, [sp, #24]
 8019558:	f8df a064 	ldr.w	sl, [pc, #100]	; 80195c0 <__kernel_rem_pio2+0x340>
 801955c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8019560:	f04f 0800 	mov.w	r8, #0
 8019564:	1baf      	subs	r7, r5, r6
 8019566:	e0ea      	b.n	801973e <__kernel_rem_pio2+0x4be>
 8019568:	f04f 0b02 	mov.w	fp, #2
 801956c:	e759      	b.n	8019422 <__kernel_rem_pio2+0x1a2>
 801956e:	f8d8 3000 	ldr.w	r3, [r8]
 8019572:	b955      	cbnz	r5, 801958a <__kernel_rem_pio2+0x30a>
 8019574:	b123      	cbz	r3, 8019580 <__kernel_rem_pio2+0x300>
 8019576:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801957a:	f8c8 3000 	str.w	r3, [r8]
 801957e:	2301      	movs	r3, #1
 8019580:	3201      	adds	r2, #1
 8019582:	f108 0804 	add.w	r8, r8, #4
 8019586:	461d      	mov	r5, r3
 8019588:	e752      	b.n	8019430 <__kernel_rem_pio2+0x1b0>
 801958a:	1acb      	subs	r3, r1, r3
 801958c:	f8c8 3000 	str.w	r3, [r8]
 8019590:	462b      	mov	r3, r5
 8019592:	e7f5      	b.n	8019580 <__kernel_rem_pio2+0x300>
 8019594:	f3af 8000 	nop.w
	...
 80195a4:	3ff00000 	.word	0x3ff00000
 80195a8:	08063058 	.word	0x08063058
 80195ac:	40200000 	.word	0x40200000
 80195b0:	3ff00000 	.word	0x3ff00000
 80195b4:	3e700000 	.word	0x3e700000
 80195b8:	41700000 	.word	0x41700000
 80195bc:	3fe00000 	.word	0x3fe00000
 80195c0:	08063018 	.word	0x08063018
 80195c4:	1e62      	subs	r2, r4, #1
 80195c6:	ab0e      	add	r3, sp, #56	; 0x38
 80195c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80195cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80195d0:	a90e      	add	r1, sp, #56	; 0x38
 80195d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80195d6:	e739      	b.n	801944c <__kernel_rem_pio2+0x1cc>
 80195d8:	1e62      	subs	r2, r4, #1
 80195da:	ab0e      	add	r3, sp, #56	; 0x38
 80195dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80195e0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80195e4:	e7f4      	b.n	80195d0 <__kernel_rem_pio2+0x350>
 80195e6:	a90e      	add	r1, sp, #56	; 0x38
 80195e8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80195ec:	3b01      	subs	r3, #1
 80195ee:	430a      	orrs	r2, r1
 80195f0:	e789      	b.n	8019506 <__kernel_rem_pio2+0x286>
 80195f2:	3301      	adds	r3, #1
 80195f4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80195f8:	2900      	cmp	r1, #0
 80195fa:	d0fa      	beq.n	80195f2 <__kernel_rem_pio2+0x372>
 80195fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80195fe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8019602:	446a      	add	r2, sp
 8019604:	3a98      	subs	r2, #152	; 0x98
 8019606:	920a      	str	r2, [sp, #40]	; 0x28
 8019608:	9a08      	ldr	r2, [sp, #32]
 801960a:	18e3      	adds	r3, r4, r3
 801960c:	18a5      	adds	r5, r4, r2
 801960e:	aa22      	add	r2, sp, #136	; 0x88
 8019610:	f104 0801 	add.w	r8, r4, #1
 8019614:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8019618:	9304      	str	r3, [sp, #16]
 801961a:	9b04      	ldr	r3, [sp, #16]
 801961c:	4543      	cmp	r3, r8
 801961e:	da04      	bge.n	801962a <__kernel_rem_pio2+0x3aa>
 8019620:	461c      	mov	r4, r3
 8019622:	e6a3      	b.n	801936c <__kernel_rem_pio2+0xec>
 8019624:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8019626:	2301      	movs	r3, #1
 8019628:	e7e4      	b.n	80195f4 <__kernel_rem_pio2+0x374>
 801962a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801962c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8019630:	f7e6 ff88 	bl	8000544 <__aeabi_i2d>
 8019634:	e8e5 0102 	strd	r0, r1, [r5], #8
 8019638:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801963a:	46ab      	mov	fp, r5
 801963c:	461c      	mov	r4, r3
 801963e:	f04f 0900 	mov.w	r9, #0
 8019642:	2600      	movs	r6, #0
 8019644:	2700      	movs	r7, #0
 8019646:	9b06      	ldr	r3, [sp, #24]
 8019648:	4599      	cmp	r9, r3
 801964a:	dd06      	ble.n	801965a <__kernel_rem_pio2+0x3da>
 801964c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801964e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8019652:	f108 0801 	add.w	r8, r8, #1
 8019656:	930a      	str	r3, [sp, #40]	; 0x28
 8019658:	e7df      	b.n	801961a <__kernel_rem_pio2+0x39a>
 801965a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801965e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8019662:	f7e6 ffd9 	bl	8000618 <__aeabi_dmul>
 8019666:	4602      	mov	r2, r0
 8019668:	460b      	mov	r3, r1
 801966a:	4630      	mov	r0, r6
 801966c:	4639      	mov	r1, r7
 801966e:	f7e6 fe1d 	bl	80002ac <__adddf3>
 8019672:	f109 0901 	add.w	r9, r9, #1
 8019676:	4606      	mov	r6, r0
 8019678:	460f      	mov	r7, r1
 801967a:	e7e4      	b.n	8019646 <__kernel_rem_pio2+0x3c6>
 801967c:	3d01      	subs	r5, #1
 801967e:	e748      	b.n	8019512 <__kernel_rem_pio2+0x292>
 8019680:	ec47 6b10 	vmov	d0, r6, r7
 8019684:	f1ca 0000 	rsb	r0, sl, #0
 8019688:	f000 fae6 	bl	8019c58 <scalbn>
 801968c:	ec57 6b10 	vmov	r6, r7, d0
 8019690:	4ba0      	ldr	r3, [pc, #640]	; (8019914 <__kernel_rem_pio2+0x694>)
 8019692:	ee10 0a10 	vmov	r0, s0
 8019696:	2200      	movs	r2, #0
 8019698:	4639      	mov	r1, r7
 801969a:	f7e7 fa43 	bl	8000b24 <__aeabi_dcmpge>
 801969e:	b1f8      	cbz	r0, 80196e0 <__kernel_rem_pio2+0x460>
 80196a0:	4b9d      	ldr	r3, [pc, #628]	; (8019918 <__kernel_rem_pio2+0x698>)
 80196a2:	2200      	movs	r2, #0
 80196a4:	4630      	mov	r0, r6
 80196a6:	4639      	mov	r1, r7
 80196a8:	f7e6 ffb6 	bl	8000618 <__aeabi_dmul>
 80196ac:	f7e7 fa64 	bl	8000b78 <__aeabi_d2iz>
 80196b0:	4680      	mov	r8, r0
 80196b2:	f7e6 ff47 	bl	8000544 <__aeabi_i2d>
 80196b6:	4b97      	ldr	r3, [pc, #604]	; (8019914 <__kernel_rem_pio2+0x694>)
 80196b8:	2200      	movs	r2, #0
 80196ba:	f7e6 ffad 	bl	8000618 <__aeabi_dmul>
 80196be:	460b      	mov	r3, r1
 80196c0:	4602      	mov	r2, r0
 80196c2:	4639      	mov	r1, r7
 80196c4:	4630      	mov	r0, r6
 80196c6:	f7e6 fdef 	bl	80002a8 <__aeabi_dsub>
 80196ca:	f7e7 fa55 	bl	8000b78 <__aeabi_d2iz>
 80196ce:	1c65      	adds	r5, r4, #1
 80196d0:	ab0e      	add	r3, sp, #56	; 0x38
 80196d2:	f10a 0a18 	add.w	sl, sl, #24
 80196d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80196da:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80196de:	e720      	b.n	8019522 <__kernel_rem_pio2+0x2a2>
 80196e0:	4630      	mov	r0, r6
 80196e2:	4639      	mov	r1, r7
 80196e4:	f7e7 fa48 	bl	8000b78 <__aeabi_d2iz>
 80196e8:	ab0e      	add	r3, sp, #56	; 0x38
 80196ea:	4625      	mov	r5, r4
 80196ec:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80196f0:	e717      	b.n	8019522 <__kernel_rem_pio2+0x2a2>
 80196f2:	ab0e      	add	r3, sp, #56	; 0x38
 80196f4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80196f8:	f7e6 ff24 	bl	8000544 <__aeabi_i2d>
 80196fc:	4632      	mov	r2, r6
 80196fe:	463b      	mov	r3, r7
 8019700:	f7e6 ff8a 	bl	8000618 <__aeabi_dmul>
 8019704:	4b84      	ldr	r3, [pc, #528]	; (8019918 <__kernel_rem_pio2+0x698>)
 8019706:	e968 0102 	strd	r0, r1, [r8, #-8]!
 801970a:	2200      	movs	r2, #0
 801970c:	4630      	mov	r0, r6
 801970e:	4639      	mov	r1, r7
 8019710:	f7e6 ff82 	bl	8000618 <__aeabi_dmul>
 8019714:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019718:	4606      	mov	r6, r0
 801971a:	460f      	mov	r7, r1
 801971c:	e70f      	b.n	801953e <__kernel_rem_pio2+0x2be>
 801971e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8019722:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8019726:	f7e6 ff77 	bl	8000618 <__aeabi_dmul>
 801972a:	4602      	mov	r2, r0
 801972c:	460b      	mov	r3, r1
 801972e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019732:	f7e6 fdbb 	bl	80002ac <__adddf3>
 8019736:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801973a:	f108 0801 	add.w	r8, r8, #1
 801973e:	9b02      	ldr	r3, [sp, #8]
 8019740:	4598      	cmp	r8, r3
 8019742:	dc01      	bgt.n	8019748 <__kernel_rem_pio2+0x4c8>
 8019744:	45b8      	cmp	r8, r7
 8019746:	ddea      	ble.n	801971e <__kernel_rem_pio2+0x49e>
 8019748:	ed9d 7b06 	vldr	d7, [sp, #24]
 801974c:	ab4a      	add	r3, sp, #296	; 0x128
 801974e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8019752:	ed87 7b00 	vstr	d7, [r7]
 8019756:	3e01      	subs	r6, #1
 8019758:	e6f8      	b.n	801954c <__kernel_rem_pio2+0x2cc>
 801975a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801975c:	2b02      	cmp	r3, #2
 801975e:	dc0b      	bgt.n	8019778 <__kernel_rem_pio2+0x4f8>
 8019760:	2b00      	cmp	r3, #0
 8019762:	dc35      	bgt.n	80197d0 <__kernel_rem_pio2+0x550>
 8019764:	d059      	beq.n	801981a <__kernel_rem_pio2+0x59a>
 8019766:	9b04      	ldr	r3, [sp, #16]
 8019768:	f003 0007 	and.w	r0, r3, #7
 801976c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8019770:	ecbd 8b02 	vpop	{d8}
 8019774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019778:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801977a:	2b03      	cmp	r3, #3
 801977c:	d1f3      	bne.n	8019766 <__kernel_rem_pio2+0x4e6>
 801977e:	ab4a      	add	r3, sp, #296	; 0x128
 8019780:	4423      	add	r3, r4
 8019782:	9306      	str	r3, [sp, #24]
 8019784:	461c      	mov	r4, r3
 8019786:	469a      	mov	sl, r3
 8019788:	9502      	str	r5, [sp, #8]
 801978a:	9b02      	ldr	r3, [sp, #8]
 801978c:	2b00      	cmp	r3, #0
 801978e:	f1aa 0a08 	sub.w	sl, sl, #8
 8019792:	dc6b      	bgt.n	801986c <__kernel_rem_pio2+0x5ec>
 8019794:	46aa      	mov	sl, r5
 8019796:	f1ba 0f01 	cmp.w	sl, #1
 801979a:	f1a4 0408 	sub.w	r4, r4, #8
 801979e:	f300 8085 	bgt.w	80198ac <__kernel_rem_pio2+0x62c>
 80197a2:	9c06      	ldr	r4, [sp, #24]
 80197a4:	2000      	movs	r0, #0
 80197a6:	3408      	adds	r4, #8
 80197a8:	2100      	movs	r1, #0
 80197aa:	2d01      	cmp	r5, #1
 80197ac:	f300 809d 	bgt.w	80198ea <__kernel_rem_pio2+0x66a>
 80197b0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80197b4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80197b8:	f1bb 0f00 	cmp.w	fp, #0
 80197bc:	f040 809b 	bne.w	80198f6 <__kernel_rem_pio2+0x676>
 80197c0:	9b01      	ldr	r3, [sp, #4]
 80197c2:	e9c3 5600 	strd	r5, r6, [r3]
 80197c6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80197ca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80197ce:	e7ca      	b.n	8019766 <__kernel_rem_pio2+0x4e6>
 80197d0:	3408      	adds	r4, #8
 80197d2:	ab4a      	add	r3, sp, #296	; 0x128
 80197d4:	441c      	add	r4, r3
 80197d6:	462e      	mov	r6, r5
 80197d8:	2000      	movs	r0, #0
 80197da:	2100      	movs	r1, #0
 80197dc:	2e00      	cmp	r6, #0
 80197de:	da36      	bge.n	801984e <__kernel_rem_pio2+0x5ce>
 80197e0:	f1bb 0f00 	cmp.w	fp, #0
 80197e4:	d039      	beq.n	801985a <__kernel_rem_pio2+0x5da>
 80197e6:	4602      	mov	r2, r0
 80197e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80197ec:	9c01      	ldr	r4, [sp, #4]
 80197ee:	e9c4 2300 	strd	r2, r3, [r4]
 80197f2:	4602      	mov	r2, r0
 80197f4:	460b      	mov	r3, r1
 80197f6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80197fa:	f7e6 fd55 	bl	80002a8 <__aeabi_dsub>
 80197fe:	ae4c      	add	r6, sp, #304	; 0x130
 8019800:	2401      	movs	r4, #1
 8019802:	42a5      	cmp	r5, r4
 8019804:	da2c      	bge.n	8019860 <__kernel_rem_pio2+0x5e0>
 8019806:	f1bb 0f00 	cmp.w	fp, #0
 801980a:	d002      	beq.n	8019812 <__kernel_rem_pio2+0x592>
 801980c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019810:	4619      	mov	r1, r3
 8019812:	9b01      	ldr	r3, [sp, #4]
 8019814:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8019818:	e7a5      	b.n	8019766 <__kernel_rem_pio2+0x4e6>
 801981a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801981e:	eb0d 0403 	add.w	r4, sp, r3
 8019822:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8019826:	2000      	movs	r0, #0
 8019828:	2100      	movs	r1, #0
 801982a:	2d00      	cmp	r5, #0
 801982c:	da09      	bge.n	8019842 <__kernel_rem_pio2+0x5c2>
 801982e:	f1bb 0f00 	cmp.w	fp, #0
 8019832:	d002      	beq.n	801983a <__kernel_rem_pio2+0x5ba>
 8019834:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019838:	4619      	mov	r1, r3
 801983a:	9b01      	ldr	r3, [sp, #4]
 801983c:	e9c3 0100 	strd	r0, r1, [r3]
 8019840:	e791      	b.n	8019766 <__kernel_rem_pio2+0x4e6>
 8019842:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019846:	f7e6 fd31 	bl	80002ac <__adddf3>
 801984a:	3d01      	subs	r5, #1
 801984c:	e7ed      	b.n	801982a <__kernel_rem_pio2+0x5aa>
 801984e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8019852:	f7e6 fd2b 	bl	80002ac <__adddf3>
 8019856:	3e01      	subs	r6, #1
 8019858:	e7c0      	b.n	80197dc <__kernel_rem_pio2+0x55c>
 801985a:	4602      	mov	r2, r0
 801985c:	460b      	mov	r3, r1
 801985e:	e7c5      	b.n	80197ec <__kernel_rem_pio2+0x56c>
 8019860:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8019864:	f7e6 fd22 	bl	80002ac <__adddf3>
 8019868:	3401      	adds	r4, #1
 801986a:	e7ca      	b.n	8019802 <__kernel_rem_pio2+0x582>
 801986c:	e9da 8900 	ldrd	r8, r9, [sl]
 8019870:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8019874:	9b02      	ldr	r3, [sp, #8]
 8019876:	3b01      	subs	r3, #1
 8019878:	9302      	str	r3, [sp, #8]
 801987a:	4632      	mov	r2, r6
 801987c:	463b      	mov	r3, r7
 801987e:	4640      	mov	r0, r8
 8019880:	4649      	mov	r1, r9
 8019882:	f7e6 fd13 	bl	80002ac <__adddf3>
 8019886:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801988a:	4602      	mov	r2, r0
 801988c:	460b      	mov	r3, r1
 801988e:	4640      	mov	r0, r8
 8019890:	4649      	mov	r1, r9
 8019892:	f7e6 fd09 	bl	80002a8 <__aeabi_dsub>
 8019896:	4632      	mov	r2, r6
 8019898:	463b      	mov	r3, r7
 801989a:	f7e6 fd07 	bl	80002ac <__adddf3>
 801989e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80198a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80198a6:	ed8a 7b00 	vstr	d7, [sl]
 80198aa:	e76e      	b.n	801978a <__kernel_rem_pio2+0x50a>
 80198ac:	e9d4 8900 	ldrd	r8, r9, [r4]
 80198b0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80198b4:	4640      	mov	r0, r8
 80198b6:	4632      	mov	r2, r6
 80198b8:	463b      	mov	r3, r7
 80198ba:	4649      	mov	r1, r9
 80198bc:	f7e6 fcf6 	bl	80002ac <__adddf3>
 80198c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80198c4:	4602      	mov	r2, r0
 80198c6:	460b      	mov	r3, r1
 80198c8:	4640      	mov	r0, r8
 80198ca:	4649      	mov	r1, r9
 80198cc:	f7e6 fcec 	bl	80002a8 <__aeabi_dsub>
 80198d0:	4632      	mov	r2, r6
 80198d2:	463b      	mov	r3, r7
 80198d4:	f7e6 fcea 	bl	80002ac <__adddf3>
 80198d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80198dc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80198e0:	ed84 7b00 	vstr	d7, [r4]
 80198e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80198e8:	e755      	b.n	8019796 <__kernel_rem_pio2+0x516>
 80198ea:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80198ee:	f7e6 fcdd 	bl	80002ac <__adddf3>
 80198f2:	3d01      	subs	r5, #1
 80198f4:	e759      	b.n	80197aa <__kernel_rem_pio2+0x52a>
 80198f6:	9b01      	ldr	r3, [sp, #4]
 80198f8:	9a01      	ldr	r2, [sp, #4]
 80198fa:	601d      	str	r5, [r3, #0]
 80198fc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8019900:	605c      	str	r4, [r3, #4]
 8019902:	609f      	str	r7, [r3, #8]
 8019904:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8019908:	60d3      	str	r3, [r2, #12]
 801990a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801990e:	6110      	str	r0, [r2, #16]
 8019910:	6153      	str	r3, [r2, #20]
 8019912:	e728      	b.n	8019766 <__kernel_rem_pio2+0x4e6>
 8019914:	41700000 	.word	0x41700000
 8019918:	3e700000 	.word	0x3e700000
 801991c:	00000000 	.word	0x00000000

08019920 <__kernel_sin>:
 8019920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019924:	ed2d 8b04 	vpush	{d8-d9}
 8019928:	eeb0 8a41 	vmov.f32	s16, s2
 801992c:	eef0 8a61 	vmov.f32	s17, s3
 8019930:	ec55 4b10 	vmov	r4, r5, d0
 8019934:	b083      	sub	sp, #12
 8019936:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801993a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801993e:	9001      	str	r0, [sp, #4]
 8019940:	da06      	bge.n	8019950 <__kernel_sin+0x30>
 8019942:	ee10 0a10 	vmov	r0, s0
 8019946:	4629      	mov	r1, r5
 8019948:	f7e7 f916 	bl	8000b78 <__aeabi_d2iz>
 801994c:	2800      	cmp	r0, #0
 801994e:	d051      	beq.n	80199f4 <__kernel_sin+0xd4>
 8019950:	4622      	mov	r2, r4
 8019952:	462b      	mov	r3, r5
 8019954:	4620      	mov	r0, r4
 8019956:	4629      	mov	r1, r5
 8019958:	f7e6 fe5e 	bl	8000618 <__aeabi_dmul>
 801995c:	4682      	mov	sl, r0
 801995e:	468b      	mov	fp, r1
 8019960:	4602      	mov	r2, r0
 8019962:	460b      	mov	r3, r1
 8019964:	4620      	mov	r0, r4
 8019966:	4629      	mov	r1, r5
 8019968:	f7e6 fe56 	bl	8000618 <__aeabi_dmul>
 801996c:	a341      	add	r3, pc, #260	; (adr r3, 8019a74 <__kernel_sin+0x154>)
 801996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019972:	4680      	mov	r8, r0
 8019974:	4689      	mov	r9, r1
 8019976:	4650      	mov	r0, sl
 8019978:	4659      	mov	r1, fp
 801997a:	f7e6 fe4d 	bl	8000618 <__aeabi_dmul>
 801997e:	a33f      	add	r3, pc, #252	; (adr r3, 8019a7c <__kernel_sin+0x15c>)
 8019980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019984:	f7e6 fc90 	bl	80002a8 <__aeabi_dsub>
 8019988:	4652      	mov	r2, sl
 801998a:	465b      	mov	r3, fp
 801998c:	f7e6 fe44 	bl	8000618 <__aeabi_dmul>
 8019990:	a33c      	add	r3, pc, #240	; (adr r3, 8019a84 <__kernel_sin+0x164>)
 8019992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019996:	f7e6 fc89 	bl	80002ac <__adddf3>
 801999a:	4652      	mov	r2, sl
 801999c:	465b      	mov	r3, fp
 801999e:	f7e6 fe3b 	bl	8000618 <__aeabi_dmul>
 80199a2:	a33a      	add	r3, pc, #232	; (adr r3, 8019a8c <__kernel_sin+0x16c>)
 80199a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199a8:	f7e6 fc7e 	bl	80002a8 <__aeabi_dsub>
 80199ac:	4652      	mov	r2, sl
 80199ae:	465b      	mov	r3, fp
 80199b0:	f7e6 fe32 	bl	8000618 <__aeabi_dmul>
 80199b4:	a337      	add	r3, pc, #220	; (adr r3, 8019a94 <__kernel_sin+0x174>)
 80199b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199ba:	f7e6 fc77 	bl	80002ac <__adddf3>
 80199be:	9b01      	ldr	r3, [sp, #4]
 80199c0:	4606      	mov	r6, r0
 80199c2:	460f      	mov	r7, r1
 80199c4:	b9eb      	cbnz	r3, 8019a02 <__kernel_sin+0xe2>
 80199c6:	4602      	mov	r2, r0
 80199c8:	460b      	mov	r3, r1
 80199ca:	4650      	mov	r0, sl
 80199cc:	4659      	mov	r1, fp
 80199ce:	f7e6 fe23 	bl	8000618 <__aeabi_dmul>
 80199d2:	a325      	add	r3, pc, #148	; (adr r3, 8019a68 <__kernel_sin+0x148>)
 80199d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80199d8:	f7e6 fc66 	bl	80002a8 <__aeabi_dsub>
 80199dc:	4642      	mov	r2, r8
 80199de:	464b      	mov	r3, r9
 80199e0:	f7e6 fe1a 	bl	8000618 <__aeabi_dmul>
 80199e4:	4602      	mov	r2, r0
 80199e6:	460b      	mov	r3, r1
 80199e8:	4620      	mov	r0, r4
 80199ea:	4629      	mov	r1, r5
 80199ec:	f7e6 fc5e 	bl	80002ac <__adddf3>
 80199f0:	4604      	mov	r4, r0
 80199f2:	460d      	mov	r5, r1
 80199f4:	ec45 4b10 	vmov	d0, r4, r5
 80199f8:	b003      	add	sp, #12
 80199fa:	ecbd 8b04 	vpop	{d8-d9}
 80199fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a02:	4b1b      	ldr	r3, [pc, #108]	; (8019a70 <__kernel_sin+0x150>)
 8019a04:	ec51 0b18 	vmov	r0, r1, d8
 8019a08:	2200      	movs	r2, #0
 8019a0a:	f7e6 fe05 	bl	8000618 <__aeabi_dmul>
 8019a0e:	4632      	mov	r2, r6
 8019a10:	ec41 0b19 	vmov	d9, r0, r1
 8019a14:	463b      	mov	r3, r7
 8019a16:	4640      	mov	r0, r8
 8019a18:	4649      	mov	r1, r9
 8019a1a:	f7e6 fdfd 	bl	8000618 <__aeabi_dmul>
 8019a1e:	4602      	mov	r2, r0
 8019a20:	460b      	mov	r3, r1
 8019a22:	ec51 0b19 	vmov	r0, r1, d9
 8019a26:	f7e6 fc3f 	bl	80002a8 <__aeabi_dsub>
 8019a2a:	4652      	mov	r2, sl
 8019a2c:	465b      	mov	r3, fp
 8019a2e:	f7e6 fdf3 	bl	8000618 <__aeabi_dmul>
 8019a32:	ec53 2b18 	vmov	r2, r3, d8
 8019a36:	f7e6 fc37 	bl	80002a8 <__aeabi_dsub>
 8019a3a:	a30b      	add	r3, pc, #44	; (adr r3, 8019a68 <__kernel_sin+0x148>)
 8019a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019a40:	4606      	mov	r6, r0
 8019a42:	460f      	mov	r7, r1
 8019a44:	4640      	mov	r0, r8
 8019a46:	4649      	mov	r1, r9
 8019a48:	f7e6 fde6 	bl	8000618 <__aeabi_dmul>
 8019a4c:	4602      	mov	r2, r0
 8019a4e:	460b      	mov	r3, r1
 8019a50:	4630      	mov	r0, r6
 8019a52:	4639      	mov	r1, r7
 8019a54:	f7e6 fc2a 	bl	80002ac <__adddf3>
 8019a58:	4602      	mov	r2, r0
 8019a5a:	460b      	mov	r3, r1
 8019a5c:	4620      	mov	r0, r4
 8019a5e:	4629      	mov	r1, r5
 8019a60:	f7e6 fc22 	bl	80002a8 <__aeabi_dsub>
 8019a64:	e7c4      	b.n	80199f0 <__kernel_sin+0xd0>
 8019a66:	bf00      	nop
 8019a68:	55555549 	.word	0x55555549
 8019a6c:	3fc55555 	.word	0x3fc55555
 8019a70:	3fe00000 	.word	0x3fe00000
 8019a74:	5acfd57c 	.word	0x5acfd57c
 8019a78:	3de5d93a 	.word	0x3de5d93a
 8019a7c:	8a2b9ceb 	.word	0x8a2b9ceb
 8019a80:	3e5ae5e6 	.word	0x3e5ae5e6
 8019a84:	57b1fe7d 	.word	0x57b1fe7d
 8019a88:	3ec71de3 	.word	0x3ec71de3
 8019a8c:	19c161d5 	.word	0x19c161d5
 8019a90:	3f2a01a0 	.word	0x3f2a01a0
 8019a94:	1110f8a6 	.word	0x1110f8a6
 8019a98:	3f811111 	.word	0x3f811111

08019a9c <with_errno>:
 8019a9c:	b570      	push	{r4, r5, r6, lr}
 8019a9e:	4604      	mov	r4, r0
 8019aa0:	460d      	mov	r5, r1
 8019aa2:	4616      	mov	r6, r2
 8019aa4:	f7f8 fb6c 	bl	8012180 <__errno>
 8019aa8:	4629      	mov	r1, r5
 8019aaa:	6006      	str	r6, [r0, #0]
 8019aac:	4620      	mov	r0, r4
 8019aae:	bd70      	pop	{r4, r5, r6, pc}

08019ab0 <xflow>:
 8019ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019ab2:	4614      	mov	r4, r2
 8019ab4:	461d      	mov	r5, r3
 8019ab6:	b108      	cbz	r0, 8019abc <xflow+0xc>
 8019ab8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8019abc:	e9cd 2300 	strd	r2, r3, [sp]
 8019ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019ac4:	4620      	mov	r0, r4
 8019ac6:	4629      	mov	r1, r5
 8019ac8:	f7e6 fda6 	bl	8000618 <__aeabi_dmul>
 8019acc:	2222      	movs	r2, #34	; 0x22
 8019ace:	b003      	add	sp, #12
 8019ad0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019ad4:	f7ff bfe2 	b.w	8019a9c <with_errno>

08019ad8 <__math_uflow>:
 8019ad8:	b508      	push	{r3, lr}
 8019ada:	2200      	movs	r2, #0
 8019adc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8019ae0:	f7ff ffe6 	bl	8019ab0 <xflow>
 8019ae4:	ec41 0b10 	vmov	d0, r0, r1
 8019ae8:	bd08      	pop	{r3, pc}

08019aea <__math_oflow>:
 8019aea:	b508      	push	{r3, lr}
 8019aec:	2200      	movs	r2, #0
 8019aee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8019af2:	f7ff ffdd 	bl	8019ab0 <xflow>
 8019af6:	ec41 0b10 	vmov	d0, r0, r1
 8019afa:	bd08      	pop	{r3, pc}

08019afc <with_errnof>:
 8019afc:	b513      	push	{r0, r1, r4, lr}
 8019afe:	4604      	mov	r4, r0
 8019b00:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019b04:	f7f8 fb3c 	bl	8012180 <__errno>
 8019b08:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019b0c:	6004      	str	r4, [r0, #0]
 8019b0e:	b002      	add	sp, #8
 8019b10:	bd10      	pop	{r4, pc}

08019b12 <xflowf>:
 8019b12:	b130      	cbz	r0, 8019b22 <xflowf+0x10>
 8019b14:	eef1 7a40 	vneg.f32	s15, s0
 8019b18:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019b1c:	2022      	movs	r0, #34	; 0x22
 8019b1e:	f7ff bfed 	b.w	8019afc <with_errnof>
 8019b22:	eef0 7a40 	vmov.f32	s15, s0
 8019b26:	e7f7      	b.n	8019b18 <xflowf+0x6>

08019b28 <__math_uflowf>:
 8019b28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019b30 <__math_uflowf+0x8>
 8019b2c:	f7ff bff1 	b.w	8019b12 <xflowf>
 8019b30:	10000000 	.word	0x10000000

08019b34 <__math_oflowf>:
 8019b34:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019b3c <__math_oflowf+0x8>
 8019b38:	f7ff bfeb 	b.w	8019b12 <xflowf>
 8019b3c:	70000000 	.word	0x70000000

08019b40 <finite>:
 8019b40:	b082      	sub	sp, #8
 8019b42:	ed8d 0b00 	vstr	d0, [sp]
 8019b46:	9801      	ldr	r0, [sp, #4]
 8019b48:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8019b4c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8019b50:	0fc0      	lsrs	r0, r0, #31
 8019b52:	b002      	add	sp, #8
 8019b54:	4770      	bx	lr
	...

08019b58 <floor>:
 8019b58:	ec51 0b10 	vmov	r0, r1, d0
 8019b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8019b64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8019b68:	2e13      	cmp	r6, #19
 8019b6a:	ee10 5a10 	vmov	r5, s0
 8019b6e:	ee10 8a10 	vmov	r8, s0
 8019b72:	460c      	mov	r4, r1
 8019b74:	dc32      	bgt.n	8019bdc <floor+0x84>
 8019b76:	2e00      	cmp	r6, #0
 8019b78:	da14      	bge.n	8019ba4 <floor+0x4c>
 8019b7a:	a333      	add	r3, pc, #204	; (adr r3, 8019c48 <floor+0xf0>)
 8019b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019b80:	f7e6 fb94 	bl	80002ac <__adddf3>
 8019b84:	2200      	movs	r2, #0
 8019b86:	2300      	movs	r3, #0
 8019b88:	f7e6 ffd6 	bl	8000b38 <__aeabi_dcmpgt>
 8019b8c:	b138      	cbz	r0, 8019b9e <floor+0x46>
 8019b8e:	2c00      	cmp	r4, #0
 8019b90:	da57      	bge.n	8019c42 <floor+0xea>
 8019b92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8019b96:	431d      	orrs	r5, r3
 8019b98:	d001      	beq.n	8019b9e <floor+0x46>
 8019b9a:	4c2d      	ldr	r4, [pc, #180]	; (8019c50 <floor+0xf8>)
 8019b9c:	2500      	movs	r5, #0
 8019b9e:	4621      	mov	r1, r4
 8019ba0:	4628      	mov	r0, r5
 8019ba2:	e025      	b.n	8019bf0 <floor+0x98>
 8019ba4:	4f2b      	ldr	r7, [pc, #172]	; (8019c54 <floor+0xfc>)
 8019ba6:	4137      	asrs	r7, r6
 8019ba8:	ea01 0307 	and.w	r3, r1, r7
 8019bac:	4303      	orrs	r3, r0
 8019bae:	d01f      	beq.n	8019bf0 <floor+0x98>
 8019bb0:	a325      	add	r3, pc, #148	; (adr r3, 8019c48 <floor+0xf0>)
 8019bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019bb6:	f7e6 fb79 	bl	80002ac <__adddf3>
 8019bba:	2200      	movs	r2, #0
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	f7e6 ffbb 	bl	8000b38 <__aeabi_dcmpgt>
 8019bc2:	2800      	cmp	r0, #0
 8019bc4:	d0eb      	beq.n	8019b9e <floor+0x46>
 8019bc6:	2c00      	cmp	r4, #0
 8019bc8:	bfbe      	ittt	lt
 8019bca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8019bce:	fa43 f606 	asrlt.w	r6, r3, r6
 8019bd2:	19a4      	addlt	r4, r4, r6
 8019bd4:	ea24 0407 	bic.w	r4, r4, r7
 8019bd8:	2500      	movs	r5, #0
 8019bda:	e7e0      	b.n	8019b9e <floor+0x46>
 8019bdc:	2e33      	cmp	r6, #51	; 0x33
 8019bde:	dd0b      	ble.n	8019bf8 <floor+0xa0>
 8019be0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8019be4:	d104      	bne.n	8019bf0 <floor+0x98>
 8019be6:	ee10 2a10 	vmov	r2, s0
 8019bea:	460b      	mov	r3, r1
 8019bec:	f7e6 fb5e 	bl	80002ac <__adddf3>
 8019bf0:	ec41 0b10 	vmov	d0, r0, r1
 8019bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bf8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8019bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8019c00:	fa23 f707 	lsr.w	r7, r3, r7
 8019c04:	4207      	tst	r7, r0
 8019c06:	d0f3      	beq.n	8019bf0 <floor+0x98>
 8019c08:	a30f      	add	r3, pc, #60	; (adr r3, 8019c48 <floor+0xf0>)
 8019c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c0e:	f7e6 fb4d 	bl	80002ac <__adddf3>
 8019c12:	2200      	movs	r2, #0
 8019c14:	2300      	movs	r3, #0
 8019c16:	f7e6 ff8f 	bl	8000b38 <__aeabi_dcmpgt>
 8019c1a:	2800      	cmp	r0, #0
 8019c1c:	d0bf      	beq.n	8019b9e <floor+0x46>
 8019c1e:	2c00      	cmp	r4, #0
 8019c20:	da02      	bge.n	8019c28 <floor+0xd0>
 8019c22:	2e14      	cmp	r6, #20
 8019c24:	d103      	bne.n	8019c2e <floor+0xd6>
 8019c26:	3401      	adds	r4, #1
 8019c28:	ea25 0507 	bic.w	r5, r5, r7
 8019c2c:	e7b7      	b.n	8019b9e <floor+0x46>
 8019c2e:	2301      	movs	r3, #1
 8019c30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8019c34:	fa03 f606 	lsl.w	r6, r3, r6
 8019c38:	4435      	add	r5, r6
 8019c3a:	4545      	cmp	r5, r8
 8019c3c:	bf38      	it	cc
 8019c3e:	18e4      	addcc	r4, r4, r3
 8019c40:	e7f2      	b.n	8019c28 <floor+0xd0>
 8019c42:	2500      	movs	r5, #0
 8019c44:	462c      	mov	r4, r5
 8019c46:	e7aa      	b.n	8019b9e <floor+0x46>
 8019c48:	8800759c 	.word	0x8800759c
 8019c4c:	7e37e43c 	.word	0x7e37e43c
 8019c50:	bff00000 	.word	0xbff00000
 8019c54:	000fffff 	.word	0x000fffff

08019c58 <scalbn>:
 8019c58:	b570      	push	{r4, r5, r6, lr}
 8019c5a:	ec55 4b10 	vmov	r4, r5, d0
 8019c5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8019c62:	4606      	mov	r6, r0
 8019c64:	462b      	mov	r3, r5
 8019c66:	b99a      	cbnz	r2, 8019c90 <scalbn+0x38>
 8019c68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8019c6c:	4323      	orrs	r3, r4
 8019c6e:	d036      	beq.n	8019cde <scalbn+0x86>
 8019c70:	4b39      	ldr	r3, [pc, #228]	; (8019d58 <scalbn+0x100>)
 8019c72:	4629      	mov	r1, r5
 8019c74:	ee10 0a10 	vmov	r0, s0
 8019c78:	2200      	movs	r2, #0
 8019c7a:	f7e6 fccd 	bl	8000618 <__aeabi_dmul>
 8019c7e:	4b37      	ldr	r3, [pc, #220]	; (8019d5c <scalbn+0x104>)
 8019c80:	429e      	cmp	r6, r3
 8019c82:	4604      	mov	r4, r0
 8019c84:	460d      	mov	r5, r1
 8019c86:	da10      	bge.n	8019caa <scalbn+0x52>
 8019c88:	a32b      	add	r3, pc, #172	; (adr r3, 8019d38 <scalbn+0xe0>)
 8019c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c8e:	e03a      	b.n	8019d06 <scalbn+0xae>
 8019c90:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8019c94:	428a      	cmp	r2, r1
 8019c96:	d10c      	bne.n	8019cb2 <scalbn+0x5a>
 8019c98:	ee10 2a10 	vmov	r2, s0
 8019c9c:	4620      	mov	r0, r4
 8019c9e:	4629      	mov	r1, r5
 8019ca0:	f7e6 fb04 	bl	80002ac <__adddf3>
 8019ca4:	4604      	mov	r4, r0
 8019ca6:	460d      	mov	r5, r1
 8019ca8:	e019      	b.n	8019cde <scalbn+0x86>
 8019caa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8019cae:	460b      	mov	r3, r1
 8019cb0:	3a36      	subs	r2, #54	; 0x36
 8019cb2:	4432      	add	r2, r6
 8019cb4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8019cb8:	428a      	cmp	r2, r1
 8019cba:	dd08      	ble.n	8019cce <scalbn+0x76>
 8019cbc:	2d00      	cmp	r5, #0
 8019cbe:	a120      	add	r1, pc, #128	; (adr r1, 8019d40 <scalbn+0xe8>)
 8019cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cc4:	da1c      	bge.n	8019d00 <scalbn+0xa8>
 8019cc6:	a120      	add	r1, pc, #128	; (adr r1, 8019d48 <scalbn+0xf0>)
 8019cc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019ccc:	e018      	b.n	8019d00 <scalbn+0xa8>
 8019cce:	2a00      	cmp	r2, #0
 8019cd0:	dd08      	ble.n	8019ce4 <scalbn+0x8c>
 8019cd2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019cd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019cda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8019cde:	ec45 4b10 	vmov	d0, r4, r5
 8019ce2:	bd70      	pop	{r4, r5, r6, pc}
 8019ce4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8019ce8:	da19      	bge.n	8019d1e <scalbn+0xc6>
 8019cea:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019cee:	429e      	cmp	r6, r3
 8019cf0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8019cf4:	dd0a      	ble.n	8019d0c <scalbn+0xb4>
 8019cf6:	a112      	add	r1, pc, #72	; (adr r1, 8019d40 <scalbn+0xe8>)
 8019cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d1e2      	bne.n	8019cc6 <scalbn+0x6e>
 8019d00:	a30f      	add	r3, pc, #60	; (adr r3, 8019d40 <scalbn+0xe8>)
 8019d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d06:	f7e6 fc87 	bl	8000618 <__aeabi_dmul>
 8019d0a:	e7cb      	b.n	8019ca4 <scalbn+0x4c>
 8019d0c:	a10a      	add	r1, pc, #40	; (adr r1, 8019d38 <scalbn+0xe0>)
 8019d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d0b8      	beq.n	8019c88 <scalbn+0x30>
 8019d16:	a10e      	add	r1, pc, #56	; (adr r1, 8019d50 <scalbn+0xf8>)
 8019d18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8019d1c:	e7b4      	b.n	8019c88 <scalbn+0x30>
 8019d1e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019d22:	3236      	adds	r2, #54	; 0x36
 8019d24:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8019d28:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8019d2c:	4620      	mov	r0, r4
 8019d2e:	4b0c      	ldr	r3, [pc, #48]	; (8019d60 <scalbn+0x108>)
 8019d30:	2200      	movs	r2, #0
 8019d32:	e7e8      	b.n	8019d06 <scalbn+0xae>
 8019d34:	f3af 8000 	nop.w
 8019d38:	c2f8f359 	.word	0xc2f8f359
 8019d3c:	01a56e1f 	.word	0x01a56e1f
 8019d40:	8800759c 	.word	0x8800759c
 8019d44:	7e37e43c 	.word	0x7e37e43c
 8019d48:	8800759c 	.word	0x8800759c
 8019d4c:	fe37e43c 	.word	0xfe37e43c
 8019d50:	c2f8f359 	.word	0xc2f8f359
 8019d54:	81a56e1f 	.word	0x81a56e1f
 8019d58:	43500000 	.word	0x43500000
 8019d5c:	ffff3cb0 	.word	0xffff3cb0
 8019d60:	3c900000 	.word	0x3c900000

08019d64 <finitef>:
 8019d64:	b082      	sub	sp, #8
 8019d66:	ed8d 0a01 	vstr	s0, [sp, #4]
 8019d6a:	9801      	ldr	r0, [sp, #4]
 8019d6c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019d70:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8019d74:	bfac      	ite	ge
 8019d76:	2000      	movge	r0, #0
 8019d78:	2001      	movlt	r0, #1
 8019d7a:	b002      	add	sp, #8
 8019d7c:	4770      	bx	lr
	...

08019d80 <scalbnf>:
 8019d80:	ee10 3a10 	vmov	r3, s0
 8019d84:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8019d88:	d025      	beq.n	8019dd6 <scalbnf+0x56>
 8019d8a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019d8e:	d302      	bcc.n	8019d96 <scalbnf+0x16>
 8019d90:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019d94:	4770      	bx	lr
 8019d96:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8019d9a:	d122      	bne.n	8019de2 <scalbnf+0x62>
 8019d9c:	4b2a      	ldr	r3, [pc, #168]	; (8019e48 <scalbnf+0xc8>)
 8019d9e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8019e4c <scalbnf+0xcc>
 8019da2:	4298      	cmp	r0, r3
 8019da4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019da8:	db16      	blt.n	8019dd8 <scalbnf+0x58>
 8019daa:	ee10 3a10 	vmov	r3, s0
 8019dae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019db2:	3a19      	subs	r2, #25
 8019db4:	4402      	add	r2, r0
 8019db6:	2afe      	cmp	r2, #254	; 0xfe
 8019db8:	dd15      	ble.n	8019de6 <scalbnf+0x66>
 8019dba:	ee10 3a10 	vmov	r3, s0
 8019dbe:	eddf 7a24 	vldr	s15, [pc, #144]	; 8019e50 <scalbnf+0xd0>
 8019dc2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8019e54 <scalbnf+0xd4>
 8019dc6:	2b00      	cmp	r3, #0
 8019dc8:	eeb0 7a67 	vmov.f32	s14, s15
 8019dcc:	bfb8      	it	lt
 8019dce:	eef0 7a66 	vmovlt.f32	s15, s13
 8019dd2:	ee27 0a27 	vmul.f32	s0, s14, s15
 8019dd6:	4770      	bx	lr
 8019dd8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8019e58 <scalbnf+0xd8>
 8019ddc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8019de0:	4770      	bx	lr
 8019de2:	0dd2      	lsrs	r2, r2, #23
 8019de4:	e7e6      	b.n	8019db4 <scalbnf+0x34>
 8019de6:	2a00      	cmp	r2, #0
 8019de8:	dd06      	ble.n	8019df8 <scalbnf+0x78>
 8019dea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019dee:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8019df2:	ee00 3a10 	vmov	s0, r3
 8019df6:	4770      	bx	lr
 8019df8:	f112 0f16 	cmn.w	r2, #22
 8019dfc:	da1a      	bge.n	8019e34 <scalbnf+0xb4>
 8019dfe:	f24c 3350 	movw	r3, #50000	; 0xc350
 8019e02:	4298      	cmp	r0, r3
 8019e04:	ee10 3a10 	vmov	r3, s0
 8019e08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8019e0c:	dd0a      	ble.n	8019e24 <scalbnf+0xa4>
 8019e0e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8019e50 <scalbnf+0xd0>
 8019e12:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8019e54 <scalbnf+0xd4>
 8019e16:	eef0 7a40 	vmov.f32	s15, s0
 8019e1a:	2b00      	cmp	r3, #0
 8019e1c:	bf18      	it	ne
 8019e1e:	eeb0 0a47 	vmovne.f32	s0, s14
 8019e22:	e7db      	b.n	8019ddc <scalbnf+0x5c>
 8019e24:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8019e58 <scalbnf+0xd8>
 8019e28:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8019e5c <scalbnf+0xdc>
 8019e2c:	eef0 7a40 	vmov.f32	s15, s0
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	e7f3      	b.n	8019e1c <scalbnf+0x9c>
 8019e34:	3219      	adds	r2, #25
 8019e36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8019e3a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8019e3e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8019e60 <scalbnf+0xe0>
 8019e42:	ee07 3a10 	vmov	s14, r3
 8019e46:	e7c4      	b.n	8019dd2 <scalbnf+0x52>
 8019e48:	ffff3cb0 	.word	0xffff3cb0
 8019e4c:	4c000000 	.word	0x4c000000
 8019e50:	7149f2ca 	.word	0x7149f2ca
 8019e54:	f149f2ca 	.word	0xf149f2ca
 8019e58:	0da24260 	.word	0x0da24260
 8019e5c:	8da24260 	.word	0x8da24260
 8019e60:	33000000 	.word	0x33000000

08019e64 <_close>:
 8019e64:	4b02      	ldr	r3, [pc, #8]	; (8019e70 <_close+0xc>)
 8019e66:	2258      	movs	r2, #88	; 0x58
 8019e68:	601a      	str	r2, [r3, #0]
 8019e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8019e6e:	4770      	bx	lr
 8019e70:	20013dac 	.word	0x20013dac

08019e74 <_fstat>:
 8019e74:	4b02      	ldr	r3, [pc, #8]	; (8019e80 <_fstat+0xc>)
 8019e76:	2258      	movs	r2, #88	; 0x58
 8019e78:	601a      	str	r2, [r3, #0]
 8019e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8019e7e:	4770      	bx	lr
 8019e80:	20013dac 	.word	0x20013dac

08019e84 <_getpid>:
 8019e84:	4b02      	ldr	r3, [pc, #8]	; (8019e90 <_getpid+0xc>)
 8019e86:	2258      	movs	r2, #88	; 0x58
 8019e88:	601a      	str	r2, [r3, #0]
 8019e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8019e8e:	4770      	bx	lr
 8019e90:	20013dac 	.word	0x20013dac

08019e94 <_isatty>:
 8019e94:	4b02      	ldr	r3, [pc, #8]	; (8019ea0 <_isatty+0xc>)
 8019e96:	2258      	movs	r2, #88	; 0x58
 8019e98:	601a      	str	r2, [r3, #0]
 8019e9a:	2000      	movs	r0, #0
 8019e9c:	4770      	bx	lr
 8019e9e:	bf00      	nop
 8019ea0:	20013dac 	.word	0x20013dac

08019ea4 <_kill>:
 8019ea4:	4b02      	ldr	r3, [pc, #8]	; (8019eb0 <_kill+0xc>)
 8019ea6:	2258      	movs	r2, #88	; 0x58
 8019ea8:	601a      	str	r2, [r3, #0]
 8019eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8019eae:	4770      	bx	lr
 8019eb0:	20013dac 	.word	0x20013dac

08019eb4 <_lseek>:
 8019eb4:	4b02      	ldr	r3, [pc, #8]	; (8019ec0 <_lseek+0xc>)
 8019eb6:	2258      	movs	r2, #88	; 0x58
 8019eb8:	601a      	str	r2, [r3, #0]
 8019eba:	f04f 30ff 	mov.w	r0, #4294967295
 8019ebe:	4770      	bx	lr
 8019ec0:	20013dac 	.word	0x20013dac

08019ec4 <_read>:
 8019ec4:	4b02      	ldr	r3, [pc, #8]	; (8019ed0 <_read+0xc>)
 8019ec6:	2258      	movs	r2, #88	; 0x58
 8019ec8:	601a      	str	r2, [r3, #0]
 8019eca:	f04f 30ff 	mov.w	r0, #4294967295
 8019ece:	4770      	bx	lr
 8019ed0:	20013dac 	.word	0x20013dac

08019ed4 <_write>:
 8019ed4:	4b02      	ldr	r3, [pc, #8]	; (8019ee0 <_write+0xc>)
 8019ed6:	2258      	movs	r2, #88	; 0x58
 8019ed8:	601a      	str	r2, [r3, #0]
 8019eda:	f04f 30ff 	mov.w	r0, #4294967295
 8019ede:	4770      	bx	lr
 8019ee0:	20013dac 	.word	0x20013dac

08019ee4 <_exit>:
 8019ee4:	e7fe      	b.n	8019ee4 <_exit>
	...

08019ee8 <_init>:
 8019ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eea:	bf00      	nop
 8019eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019eee:	bc08      	pop	{r3}
 8019ef0:	469e      	mov	lr, r3
 8019ef2:	4770      	bx	lr

08019ef4 <_fini>:
 8019ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ef6:	bf00      	nop
 8019ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019efa:	bc08      	pop	{r3}
 8019efc:	469e      	mov	lr, r3
 8019efe:	4770      	bx	lr
